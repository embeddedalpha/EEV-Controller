
EEV_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000321c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  080033a4  080033a4  000043a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037bc  080037bc  00005274  2**0
                  CONTENTS
  4 .ARM          00000000  080037bc  080037bc  00005274  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037bc  080037bc  00005274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037bc  080037bc  000047bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037c0  080037c0  000047c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000274  20000000  080037c4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005274  2**0
                  CONTENTS
 10 .bss          00002350  20000274  20000274  00005274  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200025c4  200025c4  00005274  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005274  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005bfc  00000000  00000000  000052a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000975  00000000  00000000  0000aea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000210  00000000  00000000  0000b818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000192  00000000  00000000  0000ba28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000916  00000000  00000000  0000bbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000031cc  00000000  00000000  0000c4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fd6b  00000000  00000000  0000f69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009f407  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b60  00000000  00000000  0009f44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0009ffac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000274 	.word	0x20000274
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800338c 	.word	0x0800338c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000278 	.word	0x20000278
 80001c4:	0800338c 	.word	0x0800338c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db0b      	blt.n	8000b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f003 021f 	and.w	r2, r3, #31
 8000b58:	4907      	ldr	r1, [pc, #28]	@ (8000b78 <__NVIC_EnableIRQ+0x38>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	095b      	lsrs	r3, r3, #5
 8000b60:	2001      	movs	r0, #1
 8000b62:	fa00 f202 	lsl.w	r2, r0, r2
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e100 	.word	0xe000e100

08000b7c <DMA1_Stream0_IRQHandler>:
 * status flags for FIFO error, direct mode error, transfer error, half
 * transfer complete, and transfer complete, and clears the respective
 * interrupt flag after handling it.
 */
void DMA1_Stream0_IRQHandler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF0)
 8000b80:	4b54      	ldr	r3, [pc, #336]	@ (8000cd4 <DMA1_Stream0_IRQHandler+0x158>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d01a      	beq.n	8000bc2 <DMA1_Stream0_IRQHandler+0x46>
	{
		TIM5_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000b8c:	4b52      	ldr	r3, [pc, #328]	@ (8000cd8 <DMA1_Stream0_IRQHandler+0x15c>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	711a      	strb	r2, [r3, #4]
		TIM4_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000b92:	4b52      	ldr	r3, [pc, #328]	@ (8000cdc <DMA1_Stream0_IRQHandler+0x160>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000b98:	4b51      	ldr	r3, [pc, #324]	@ (8000ce0 <DMA1_Stream0_IRQHandler+0x164>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	711a      	strb	r2, [r3, #4]
		USART5_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000b9e:	4b51      	ldr	r3, [pc, #324]	@ (8000ce4 <DMA1_Stream0_IRQHandler+0x168>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	711a      	strb	r2, [r3, #4]
		I2C1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000ba4:	4b50      	ldr	r3, [pc, #320]	@ (8000ce8 <DMA1_Stream0_IRQHandler+0x16c>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	711a      	strb	r2, [r3, #4]
		SPI3_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000baa:	4b50      	ldr	r3, [pc, #320]	@ (8000cec <DMA1_Stream0_IRQHandler+0x170>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	711a      	strb	r2, [r3, #4]
		DMA1_Stream0_Flag.Fifo_Error_Flag = true;
 8000bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8000cf0 <DMA1_Stream0_IRQHandler+0x174>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000bb6:	4b47      	ldr	r3, [pc, #284]	@ (8000cd4 <DMA1_Stream0_IRQHandler+0x158>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	4a46      	ldr	r2, [pc, #280]	@ (8000cd4 <DMA1_Stream0_IRQHandler+0x158>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF0)
 8000bc2:	4b44      	ldr	r3, [pc, #272]	@ (8000cd4 <DMA1_Stream0_IRQHandler+0x158>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d01a      	beq.n	8000c04 <DMA1_Stream0_IRQHandler+0x88>
	{
		TIM5_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000bce:	4b42      	ldr	r3, [pc, #264]	@ (8000cd8 <DMA1_Stream0_IRQHandler+0x15c>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	70da      	strb	r2, [r3, #3]
		TIM4_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000bd4:	4b41      	ldr	r3, [pc, #260]	@ (8000cdc <DMA1_Stream0_IRQHandler+0x160>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000bda:	4b41      	ldr	r3, [pc, #260]	@ (8000ce0 <DMA1_Stream0_IRQHandler+0x164>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	70da      	strb	r2, [r3, #3]
		USART5_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000be0:	4b40      	ldr	r3, [pc, #256]	@ (8000ce4 <DMA1_Stream0_IRQHandler+0x168>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	70da      	strb	r2, [r3, #3]
		I2C1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000be6:	4b40      	ldr	r3, [pc, #256]	@ (8000ce8 <DMA1_Stream0_IRQHandler+0x16c>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	70da      	strb	r2, [r3, #3]
		SPI3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000bec:	4b3f      	ldr	r3, [pc, #252]	@ (8000cec <DMA1_Stream0_IRQHandler+0x170>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	70da      	strb	r2, [r3, #3]
		DMA1_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8000bf2:	4b3f      	ldr	r3, [pc, #252]	@ (8000cf0 <DMA1_Stream0_IRQHandler+0x174>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000bf8:	4b36      	ldr	r3, [pc, #216]	@ (8000cd4 <DMA1_Stream0_IRQHandler+0x158>)
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	4a35      	ldr	r2, [pc, #212]	@ (8000cd4 <DMA1_Stream0_IRQHandler+0x158>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF0)
 8000c04:	4b33      	ldr	r3, [pc, #204]	@ (8000cd4 <DMA1_Stream0_IRQHandler+0x158>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0308 	and.w	r3, r3, #8
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d01a      	beq.n	8000c46 <DMA1_Stream0_IRQHandler+0xca>
	{
		TIM5_CH3_DMA_Flag.Transfer_Error_Flag= true;
 8000c10:	4b31      	ldr	r3, [pc, #196]	@ (8000cd8 <DMA1_Stream0_IRQHandler+0x15c>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	709a      	strb	r2, [r3, #2]
		TIM4_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000c16:	4b31      	ldr	r3, [pc, #196]	@ (8000cdc <DMA1_Stream0_IRQHandler+0x160>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000c1c:	4b30      	ldr	r3, [pc, #192]	@ (8000ce0 <DMA1_Stream0_IRQHandler+0x164>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	709a      	strb	r2, [r3, #2]
		USART5_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000c22:	4b30      	ldr	r3, [pc, #192]	@ (8000ce4 <DMA1_Stream0_IRQHandler+0x168>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	709a      	strb	r2, [r3, #2]
		I2C1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000c28:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce8 <DMA1_Stream0_IRQHandler+0x16c>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	709a      	strb	r2, [r3, #2]
		SPI3_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000cec <DMA1_Stream0_IRQHandler+0x170>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	709a      	strb	r2, [r3, #2]
		DMA1_Stream0_Flag.Transfer_Error_Flag = true;
 8000c34:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf0 <DMA1_Stream0_IRQHandler+0x174>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000c3a:	4b26      	ldr	r3, [pc, #152]	@ (8000cd4 <DMA1_Stream0_IRQHandler+0x158>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	4a25      	ldr	r2, [pc, #148]	@ (8000cd4 <DMA1_Stream0_IRQHandler+0x158>)
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF0)
 8000c46:	4b23      	ldr	r3, [pc, #140]	@ (8000cd4 <DMA1_Stream0_IRQHandler+0x158>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0310 	and.w	r3, r3, #16
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d01a      	beq.n	8000c88 <DMA1_Stream0_IRQHandler+0x10c>
	{
		TIM5_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c52:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <DMA1_Stream0_IRQHandler+0x15c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	705a      	strb	r2, [r3, #1]
		TIM4_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c58:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <DMA1_Stream0_IRQHandler+0x160>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ce0 <DMA1_Stream0_IRQHandler+0x164>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	705a      	strb	r2, [r3, #1]
		USART5_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <DMA1_Stream0_IRQHandler+0x168>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	705a      	strb	r2, [r3, #1]
		I2C1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <DMA1_Stream0_IRQHandler+0x16c>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	705a      	strb	r2, [r3, #1]
		SPI3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <DMA1_Stream0_IRQHandler+0x170>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	705a      	strb	r2, [r3, #1]
		DMA1_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf0 <DMA1_Stream0_IRQHandler+0x174>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <DMA1_Stream0_IRQHandler+0x158>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <DMA1_Stream0_IRQHandler+0x158>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF0)
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <DMA1_Stream0_IRQHandler+0x158>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0320 	and.w	r3, r3, #32
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d01a      	beq.n	8000cca <DMA1_Stream0_IRQHandler+0x14e>
	{
		TIM5_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000c94:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <DMA1_Stream0_IRQHandler+0x15c>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
		TIM4_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <DMA1_Stream0_IRQHandler+0x160>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <DMA1_Stream0_IRQHandler+0x164>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
		USART5_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <DMA1_Stream0_IRQHandler+0x168>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]
		I2C1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000cac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <DMA1_Stream0_IRQHandler+0x16c>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
		SPI3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <DMA1_Stream0_IRQHandler+0x170>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <DMA1_Stream0_IRQHandler+0x174>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000cbe:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <DMA1_Stream0_IRQHandler+0x158>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <DMA1_Stream0_IRQHandler+0x158>)
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	6093      	str	r3, [r2, #8]
	}
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	40026000 	.word	0x40026000
 8000cd8:	20000438 	.word	0x20000438
 8000cdc:	20000418 	.word	0x20000418
 8000ce0:	20000358 	.word	0x20000358
 8000ce4:	20000330 	.word	0x20000330
 8000ce8:	200002a8 	.word	0x200002a8
 8000cec:	200002d8 	.word	0x200002d8
 8000cf0:	20000480 	.word	0x20000480

08000cf4 <DMA1_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream1_IRQHandler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF1)
 8000cf8:	4b45      	ldr	r3, [pc, #276]	@ (8000e10 <DMA1_Stream1_IRQHandler+0x11c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d014      	beq.n	8000d2e <DMA1_Stream1_IRQHandler+0x3a>
	{
		TIM2_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000d04:	4b43      	ldr	r3, [pc, #268]	@ (8000e14 <DMA1_Stream1_IRQHandler+0x120>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	711a      	strb	r2, [r3, #4]
		TIM6_UP_DMA_Flag.Fifo_Error_Flag = true;
 8000d0a:	4b43      	ldr	r3, [pc, #268]	@ (8000e18 <DMA1_Stream1_IRQHandler+0x124>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000d10:	4b42      	ldr	r3, [pc, #264]	@ (8000e1c <DMA1_Stream1_IRQHandler+0x128>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	711a      	strb	r2, [r3, #4]
		USART3_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000d16:	4b42      	ldr	r3, [pc, #264]	@ (8000e20 <DMA1_Stream1_IRQHandler+0x12c>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	711a      	strb	r2, [r3, #4]
		DMA1_Stream1_Flag.Fifo_Error_Flag = true;
 8000d1c:	4b41      	ldr	r3, [pc, #260]	@ (8000e24 <DMA1_Stream1_IRQHandler+0x130>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000d22:	4b3b      	ldr	r3, [pc, #236]	@ (8000e10 <DMA1_Stream1_IRQHandler+0x11c>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	4a3a      	ldr	r2, [pc, #232]	@ (8000e10 <DMA1_Stream1_IRQHandler+0x11c>)
 8000d28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d2c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF1)
 8000d2e:	4b38      	ldr	r3, [pc, #224]	@ (8000e10 <DMA1_Stream1_IRQHandler+0x11c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d014      	beq.n	8000d64 <DMA1_Stream1_IRQHandler+0x70>
	{
		TIM2_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d3a:	4b36      	ldr	r3, [pc, #216]	@ (8000e14 <DMA1_Stream1_IRQHandler+0x120>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	70da      	strb	r2, [r3, #3]
		TIM6_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d40:	4b35      	ldr	r3, [pc, #212]	@ (8000e18 <DMA1_Stream1_IRQHandler+0x124>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d46:	4b35      	ldr	r3, [pc, #212]	@ (8000e1c <DMA1_Stream1_IRQHandler+0x128>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	70da      	strb	r2, [r3, #3]
		USART3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d4c:	4b34      	ldr	r3, [pc, #208]	@ (8000e20 <DMA1_Stream1_IRQHandler+0x12c>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	70da      	strb	r2, [r3, #3]
		DMA1_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8000d52:	4b34      	ldr	r3, [pc, #208]	@ (8000e24 <DMA1_Stream1_IRQHandler+0x130>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000d58:	4b2d      	ldr	r3, [pc, #180]	@ (8000e10 <DMA1_Stream1_IRQHandler+0x11c>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e10 <DMA1_Stream1_IRQHandler+0x11c>)
 8000d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d62:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF1)
 8000d64:	4b2a      	ldr	r3, [pc, #168]	@ (8000e10 <DMA1_Stream1_IRQHandler+0x11c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d014      	beq.n	8000d9a <DMA1_Stream1_IRQHandler+0xa6>
	{
		TIM2_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8000d70:	4b28      	ldr	r3, [pc, #160]	@ (8000e14 <DMA1_Stream1_IRQHandler+0x120>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	709a      	strb	r2, [r3, #2]
		TIM6_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000d76:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <DMA1_Stream1_IRQHandler+0x124>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000d7c:	4b27      	ldr	r3, [pc, #156]	@ (8000e1c <DMA1_Stream1_IRQHandler+0x128>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	709a      	strb	r2, [r3, #2]
		USART3_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000d82:	4b27      	ldr	r3, [pc, #156]	@ (8000e20 <DMA1_Stream1_IRQHandler+0x12c>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	709a      	strb	r2, [r3, #2]
		DMA1_Stream1_Flag.Transfer_Error_Flag = true;
 8000d88:	4b26      	ldr	r3, [pc, #152]	@ (8000e24 <DMA1_Stream1_IRQHandler+0x130>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000d8e:	4b20      	ldr	r3, [pc, #128]	@ (8000e10 <DMA1_Stream1_IRQHandler+0x11c>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	4a1f      	ldr	r2, [pc, #124]	@ (8000e10 <DMA1_Stream1_IRQHandler+0x11c>)
 8000d94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d98:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF1)
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e10 <DMA1_Stream1_IRQHandler+0x11c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d014      	beq.n	8000dd0 <DMA1_Stream1_IRQHandler+0xdc>
	{
		TIM2_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000da6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e14 <DMA1_Stream1_IRQHandler+0x120>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	705a      	strb	r2, [r3, #1]
		TIM6_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000dac:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <DMA1_Stream1_IRQHandler+0x124>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <DMA1_Stream1_IRQHandler+0x128>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	705a      	strb	r2, [r3, #1]
		USART3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000db8:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <DMA1_Stream1_IRQHandler+0x12c>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	705a      	strb	r2, [r3, #1]
		DMA1_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <DMA1_Stream1_IRQHandler+0x130>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <DMA1_Stream1_IRQHandler+0x11c>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	4a11      	ldr	r2, [pc, #68]	@ (8000e10 <DMA1_Stream1_IRQHandler+0x11c>)
 8000dca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dce:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF1)
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <DMA1_Stream1_IRQHandler+0x11c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d014      	beq.n	8000e06 <DMA1_Stream1_IRQHandler+0x112>
	{
		TIM2_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <DMA1_Stream1_IRQHandler+0x120>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
		TIM6_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8000de2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <DMA1_Stream1_IRQHandler+0x124>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <DMA1_Stream1_IRQHandler+0x128>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
		USART3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000dee:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <DMA1_Stream1_IRQHandler+0x12c>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
 8000df4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <DMA1_Stream1_IRQHandler+0x130>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000dfa:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <DMA1_Stream1_IRQHandler+0x11c>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	4a04      	ldr	r2, [pc, #16]	@ (8000e10 <DMA1_Stream1_IRQHandler+0x11c>)
 8000e00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e04:	6093      	str	r3, [r2, #8]
	}
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	40026000 	.word	0x40026000
 8000e14:	200003e8 	.word	0x200003e8
 8000e18:	20000448 	.word	0x20000448
 8000e1c:	20000350 	.word	0x20000350
 8000e20:	20000318 	.word	0x20000318
 8000e24:	20000488 	.word	0x20000488

08000e28 <DMA1_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream2_IRQHandler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF2)
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000eec <DMA1_Stream2_IRQHandler+0xc4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00b      	beq.n	8000e50 <DMA1_Stream2_IRQHandler+0x28>
	{
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000e38:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <DMA1_Stream2_IRQHandler+0xc8>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	711a      	strb	r2, [r3, #4]
		DMA1_Stream2_Flag.Fifo_Error_Flag = true;
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef4 <DMA1_Stream2_IRQHandler+0xcc>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000e44:	4b29      	ldr	r3, [pc, #164]	@ (8000eec <DMA1_Stream2_IRQHandler+0xc4>)
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	4a28      	ldr	r2, [pc, #160]	@ (8000eec <DMA1_Stream2_IRQHandler+0xc4>)
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e4e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF2)
 8000e50:	4b26      	ldr	r3, [pc, #152]	@ (8000eec <DMA1_Stream2_IRQHandler+0xc4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d00b      	beq.n	8000e74 <DMA1_Stream2_IRQHandler+0x4c>
	{
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e5c:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <DMA1_Stream2_IRQHandler+0xc8>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	70da      	strb	r2, [r3, #3]
		DMA1_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8000e62:	4b24      	ldr	r3, [pc, #144]	@ (8000ef4 <DMA1_Stream2_IRQHandler+0xcc>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8000e68:	4b20      	ldr	r3, [pc, #128]	@ (8000eec <DMA1_Stream2_IRQHandler+0xc4>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8000eec <DMA1_Stream2_IRQHandler+0xc4>)
 8000e6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e72:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF2)
 8000e74:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <DMA1_Stream2_IRQHandler+0xc4>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00b      	beq.n	8000e98 <DMA1_Stream2_IRQHandler+0x70>
	{
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <DMA1_Stream2_IRQHandler+0xc8>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	709a      	strb	r2, [r3, #2]
		DMA1_Stream2_Flag.Transfer_Error_Flag = true;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <DMA1_Stream2_IRQHandler+0xcc>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <DMA1_Stream2_IRQHandler+0xc4>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	4a16      	ldr	r2, [pc, #88]	@ (8000eec <DMA1_Stream2_IRQHandler+0xc4>)
 8000e92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e96:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF2)
 8000e98:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <DMA1_Stream2_IRQHandler+0xc4>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d00b      	beq.n	8000ebc <DMA1_Stream2_IRQHandler+0x94>
	{
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <DMA1_Stream2_IRQHandler+0xc8>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	705a      	strb	r2, [r3, #1]
		DMA1_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8000eaa:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <DMA1_Stream2_IRQHandler+0xcc>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <DMA1_Stream2_IRQHandler+0xc4>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000eec <DMA1_Stream2_IRQHandler+0xc4>)
 8000eb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000eba:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF2)
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <DMA1_Stream2_IRQHandler+0xc4>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00b      	beq.n	8000ee0 <DMA1_Stream2_IRQHandler+0xb8>
	{
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <DMA1_Stream2_IRQHandler+0xc8>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <DMA1_Stream2_IRQHandler+0xcc>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <DMA1_Stream2_IRQHandler+0xc4>)
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <DMA1_Stream2_IRQHandler+0xc4>)
 8000eda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ede:	6093      	str	r3, [r2, #8]
	}
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40026000 	.word	0x40026000
 8000ef0:	20000320 	.word	0x20000320
 8000ef4:	20000490 	.word	0x20000490

08000ef8 <DMA1_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream3_IRQHandler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF3)
 8000efc:	4b54      	ldr	r3, [pc, #336]	@ (8001050 <DMA1_Stream3_IRQHandler+0x158>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d01a      	beq.n	8000f3e <DMA1_Stream3_IRQHandler+0x46>
	{
		TIM5_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000f08:	4b52      	ldr	r3, [pc, #328]	@ (8001054 <DMA1_Stream3_IRQHandler+0x15c>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	711a      	strb	r2, [r3, #4]
		TIM4_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000f0e:	4b52      	ldr	r3, [pc, #328]	@ (8001058 <DMA1_Stream3_IRQHandler+0x160>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000f14:	4b51      	ldr	r3, [pc, #324]	@ (800105c <DMA1_Stream3_IRQHandler+0x164>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	711a      	strb	r2, [r3, #4]
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000f1a:	4b51      	ldr	r3, [pc, #324]	@ (8001060 <DMA1_Stream3_IRQHandler+0x168>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	711a      	strb	r2, [r3, #4]
		I2S2_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000f20:	4b50      	ldr	r3, [pc, #320]	@ (8001064 <DMA1_Stream3_IRQHandler+0x16c>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	711a      	strb	r2, [r3, #4]
		SPI2_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000f26:	4b50      	ldr	r3, [pc, #320]	@ (8001068 <DMA1_Stream3_IRQHandler+0x170>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	711a      	strb	r2, [r3, #4]
		DMA1_Stream3_Flag.Fifo_Error_Flag = true;
 8000f2c:	4b4f      	ldr	r3, [pc, #316]	@ (800106c <DMA1_Stream3_IRQHandler+0x174>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8000f32:	4b47      	ldr	r3, [pc, #284]	@ (8001050 <DMA1_Stream3_IRQHandler+0x158>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	4a46      	ldr	r2, [pc, #280]	@ (8001050 <DMA1_Stream3_IRQHandler+0x158>)
 8000f38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f3c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF3)
 8000f3e:	4b44      	ldr	r3, [pc, #272]	@ (8001050 <DMA1_Stream3_IRQHandler+0x158>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d01a      	beq.n	8000f80 <DMA1_Stream3_IRQHandler+0x88>
	{
		TIM5_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f4a:	4b42      	ldr	r3, [pc, #264]	@ (8001054 <DMA1_Stream3_IRQHandler+0x15c>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	70da      	strb	r2, [r3, #3]
		TIM4_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f50:	4b41      	ldr	r3, [pc, #260]	@ (8001058 <DMA1_Stream3_IRQHandler+0x160>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f56:	4b41      	ldr	r3, [pc, #260]	@ (800105c <DMA1_Stream3_IRQHandler+0x164>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	70da      	strb	r2, [r3, #3]
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f5c:	4b40      	ldr	r3, [pc, #256]	@ (8001060 <DMA1_Stream3_IRQHandler+0x168>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	70da      	strb	r2, [r3, #3]
		I2S2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f62:	4b40      	ldr	r3, [pc, #256]	@ (8001064 <DMA1_Stream3_IRQHandler+0x16c>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	70da      	strb	r2, [r3, #3]
		SPI2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f68:	4b3f      	ldr	r3, [pc, #252]	@ (8001068 <DMA1_Stream3_IRQHandler+0x170>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	70da      	strb	r2, [r3, #3]
		DMA1_Stream3_Flag.Direct_Mode_Error_Flag = true;
 8000f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800106c <DMA1_Stream3_IRQHandler+0x174>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8000f74:	4b36      	ldr	r3, [pc, #216]	@ (8001050 <DMA1_Stream3_IRQHandler+0x158>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	4a35      	ldr	r2, [pc, #212]	@ (8001050 <DMA1_Stream3_IRQHandler+0x158>)
 8000f7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f7e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF3)
 8000f80:	4b33      	ldr	r3, [pc, #204]	@ (8001050 <DMA1_Stream3_IRQHandler+0x158>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d01a      	beq.n	8000fc2 <DMA1_Stream3_IRQHandler+0xca>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000f8c:	4b31      	ldr	r3, [pc, #196]	@ (8001054 <DMA1_Stream3_IRQHandler+0x15c>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	709a      	strb	r2, [r3, #2]
		TIM4_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8000f92:	4b31      	ldr	r3, [pc, #196]	@ (8001058 <DMA1_Stream3_IRQHandler+0x160>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000f98:	4b30      	ldr	r3, [pc, #192]	@ (800105c <DMA1_Stream3_IRQHandler+0x164>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	709a      	strb	r2, [r3, #2]
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000f9e:	4b30      	ldr	r3, [pc, #192]	@ (8001060 <DMA1_Stream3_IRQHandler+0x168>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	709a      	strb	r2, [r3, #2]
		I2S2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8001064 <DMA1_Stream3_IRQHandler+0x16c>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	709a      	strb	r2, [r3, #2]
		SPI2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000faa:	4b2f      	ldr	r3, [pc, #188]	@ (8001068 <DMA1_Stream3_IRQHandler+0x170>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	709a      	strb	r2, [r3, #2]
		DMA1_Stream3_Flag.Transfer_Error_Flag = true;
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800106c <DMA1_Stream3_IRQHandler+0x174>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8000fb6:	4b26      	ldr	r3, [pc, #152]	@ (8001050 <DMA1_Stream3_IRQHandler+0x158>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	4a25      	ldr	r2, [pc, #148]	@ (8001050 <DMA1_Stream3_IRQHandler+0x158>)
 8000fbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fc0:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF3)
 8000fc2:	4b23      	ldr	r3, [pc, #140]	@ (8001050 <DMA1_Stream3_IRQHandler+0x158>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d01a      	beq.n	8001004 <DMA1_Stream3_IRQHandler+0x10c>
	{
		TIM5_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000fce:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <DMA1_Stream3_IRQHandler+0x15c>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	705a      	strb	r2, [r3, #1]
		TIM4_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000fd4:	4b20      	ldr	r3, [pc, #128]	@ (8001058 <DMA1_Stream3_IRQHandler+0x160>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000fda:	4b20      	ldr	r3, [pc, #128]	@ (800105c <DMA1_Stream3_IRQHandler+0x164>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	705a      	strb	r2, [r3, #1]
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <DMA1_Stream3_IRQHandler+0x168>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	705a      	strb	r2, [r3, #1]
		I2S2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8001064 <DMA1_Stream3_IRQHandler+0x16c>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	705a      	strb	r2, [r3, #1]
		SPI2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000fec:	4b1e      	ldr	r3, [pc, #120]	@ (8001068 <DMA1_Stream3_IRQHandler+0x170>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	705a      	strb	r2, [r3, #1]
		DMA1_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <DMA1_Stream3_IRQHandler+0x174>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <DMA1_Stream3_IRQHandler+0x158>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4a14      	ldr	r2, [pc, #80]	@ (8001050 <DMA1_Stream3_IRQHandler+0x158>)
 8000ffe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001002:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF3)
 8001004:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <DMA1_Stream3_IRQHandler+0x158>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d01a      	beq.n	8001046 <DMA1_Stream3_IRQHandler+0x14e>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8001010:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <DMA1_Stream3_IRQHandler+0x15c>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
		TIM4_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001016:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <DMA1_Stream3_IRQHandler+0x160>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800101c:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <DMA1_Stream3_IRQHandler+0x164>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <DMA1_Stream3_IRQHandler+0x168>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
		I2S2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001028:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <DMA1_Stream3_IRQHandler+0x16c>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
		SPI2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <DMA1_Stream3_IRQHandler+0x170>)
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
 8001034:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <DMA1_Stream3_IRQHandler+0x174>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 800103a:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <DMA1_Stream3_IRQHandler+0x158>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <DMA1_Stream3_IRQHandler+0x158>)
 8001040:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001044:	6093      	str	r3, [r2, #8]
	}
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	40026000 	.word	0x40026000
 8001054:	20000440 	.word	0x20000440
 8001058:	20000420 	.word	0x20000420
 800105c:	20000350 	.word	0x20000350
 8001060:	20000320 	.word	0x20000320
 8001064:	20000290 	.word	0x20000290
 8001068:	200002d0 	.word	0x200002d0
 800106c:	20000498 	.word	0x20000498

08001070 <DMA1_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream4_IRQHandler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF4)
 8001074:	4b54      	ldr	r3, [pc, #336]	@ (80011c8 <DMA1_Stream4_IRQHandler+0x158>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b00      	cmp	r3, #0
 800107e:	d01a      	beq.n	80010b6 <DMA1_Stream4_IRQHandler+0x46>
	{
		TIM5_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001080:	4b52      	ldr	r3, [pc, #328]	@ (80011cc <DMA1_Stream4_IRQHandler+0x15c>)
 8001082:	2201      	movs	r2, #1
 8001084:	711a      	strb	r2, [r3, #4]
		TIM3_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8001086:	4b52      	ldr	r3, [pc, #328]	@ (80011d0 <DMA1_Stream4_IRQHandler+0x160>)
 8001088:	2201      	movs	r2, #1
 800108a:	711a      	strb	r2, [r3, #4]
		USART4_TX_DMA_Flag.Fifo_Error_Flag = true;
 800108c:	4b51      	ldr	r3, [pc, #324]	@ (80011d4 <DMA1_Stream4_IRQHandler+0x164>)
 800108e:	2201      	movs	r2, #1
 8001090:	711a      	strb	r2, [r3, #4]
		I2C3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001092:	4b51      	ldr	r3, [pc, #324]	@ (80011d8 <DMA1_Stream4_IRQHandler+0x168>)
 8001094:	2201      	movs	r2, #1
 8001096:	711a      	strb	r2, [r3, #4]
		I2S2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001098:	4b50      	ldr	r3, [pc, #320]	@ (80011dc <DMA1_Stream4_IRQHandler+0x16c>)
 800109a:	2201      	movs	r2, #1
 800109c:	711a      	strb	r2, [r3, #4]
		SPI2_TX_DMA_Flag.Fifo_Error_Flag = true;
 800109e:	4b50      	ldr	r3, [pc, #320]	@ (80011e0 <DMA1_Stream4_IRQHandler+0x170>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	711a      	strb	r2, [r3, #4]
		DMA1_Stream4_Flag.Fifo_Error_Flag = true;
 80010a4:	4b4f      	ldr	r3, [pc, #316]	@ (80011e4 <DMA1_Stream4_IRQHandler+0x174>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF4;
 80010aa:	4b47      	ldr	r3, [pc, #284]	@ (80011c8 <DMA1_Stream4_IRQHandler+0x158>)
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	4a46      	ldr	r2, [pc, #280]	@ (80011c8 <DMA1_Stream4_IRQHandler+0x158>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF4)
 80010b6:	4b44      	ldr	r3, [pc, #272]	@ (80011c8 <DMA1_Stream4_IRQHandler+0x158>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d01a      	beq.n	80010f8 <DMA1_Stream4_IRQHandler+0x88>
	{
		TIM5_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010c2:	4b42      	ldr	r3, [pc, #264]	@ (80011cc <DMA1_Stream4_IRQHandler+0x15c>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	70da      	strb	r2, [r3, #3]
		TIM3_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010c8:	4b41      	ldr	r3, [pc, #260]	@ (80011d0 <DMA1_Stream4_IRQHandler+0x160>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	70da      	strb	r2, [r3, #3]
		USART4_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010ce:	4b41      	ldr	r3, [pc, #260]	@ (80011d4 <DMA1_Stream4_IRQHandler+0x164>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	70da      	strb	r2, [r3, #3]
		I2C3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010d4:	4b40      	ldr	r3, [pc, #256]	@ (80011d8 <DMA1_Stream4_IRQHandler+0x168>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	70da      	strb	r2, [r3, #3]
		I2S2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010da:	4b40      	ldr	r3, [pc, #256]	@ (80011dc <DMA1_Stream4_IRQHandler+0x16c>)
 80010dc:	2201      	movs	r2, #1
 80010de:	70da      	strb	r2, [r3, #3]
		SPI2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010e0:	4b3f      	ldr	r3, [pc, #252]	@ (80011e0 <DMA1_Stream4_IRQHandler+0x170>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	70da      	strb	r2, [r3, #3]
		DMA1_Stream4_Flag.Direct_Mode_Error_Flag = true;
 80010e6:	4b3f      	ldr	r3, [pc, #252]	@ (80011e4 <DMA1_Stream4_IRQHandler+0x174>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80010ec:	4b36      	ldr	r3, [pc, #216]	@ (80011c8 <DMA1_Stream4_IRQHandler+0x158>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4a35      	ldr	r2, [pc, #212]	@ (80011c8 <DMA1_Stream4_IRQHandler+0x158>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF4)
 80010f8:	4b33      	ldr	r3, [pc, #204]	@ (80011c8 <DMA1_Stream4_IRQHandler+0x158>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d01a      	beq.n	800113a <DMA1_Stream4_IRQHandler+0xca>
	{
		TIM5_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001104:	4b31      	ldr	r3, [pc, #196]	@ (80011cc <DMA1_Stream4_IRQHandler+0x15c>)
 8001106:	2201      	movs	r2, #1
 8001108:	709a      	strb	r2, [r3, #2]
		TIM3_CH1_DMA_Flag.Transfer_Error_Flag = true;
 800110a:	4b31      	ldr	r3, [pc, #196]	@ (80011d0 <DMA1_Stream4_IRQHandler+0x160>)
 800110c:	2201      	movs	r2, #1
 800110e:	709a      	strb	r2, [r3, #2]
		USART4_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001110:	4b30      	ldr	r3, [pc, #192]	@ (80011d4 <DMA1_Stream4_IRQHandler+0x164>)
 8001112:	2201      	movs	r2, #1
 8001114:	709a      	strb	r2, [r3, #2]
		I2C3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001116:	4b30      	ldr	r3, [pc, #192]	@ (80011d8 <DMA1_Stream4_IRQHandler+0x168>)
 8001118:	2201      	movs	r2, #1
 800111a:	709a      	strb	r2, [r3, #2]
		I2S2_TX_DMA_Flag.Transfer_Error_Flag = true;
 800111c:	4b2f      	ldr	r3, [pc, #188]	@ (80011dc <DMA1_Stream4_IRQHandler+0x16c>)
 800111e:	2201      	movs	r2, #1
 8001120:	709a      	strb	r2, [r3, #2]
		SPI2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001122:	4b2f      	ldr	r3, [pc, #188]	@ (80011e0 <DMA1_Stream4_IRQHandler+0x170>)
 8001124:	2201      	movs	r2, #1
 8001126:	709a      	strb	r2, [r3, #2]
		DMA1_Stream4_Flag.Transfer_Error_Flag = true;
 8001128:	4b2e      	ldr	r3, [pc, #184]	@ (80011e4 <DMA1_Stream4_IRQHandler+0x174>)
 800112a:	2201      	movs	r2, #1
 800112c:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 800112e:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <DMA1_Stream4_IRQHandler+0x158>)
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	4a25      	ldr	r2, [pc, #148]	@ (80011c8 <DMA1_Stream4_IRQHandler+0x158>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF4)
 800113a:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <DMA1_Stream4_IRQHandler+0x158>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	2b00      	cmp	r3, #0
 8001144:	d01a      	beq.n	800117c <DMA1_Stream4_IRQHandler+0x10c>
	{
		TIM5_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001146:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <DMA1_Stream4_IRQHandler+0x15c>)
 8001148:	2201      	movs	r2, #1
 800114a:	705a      	strb	r2, [r3, #1]
		TIM3_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800114c:	4b20      	ldr	r3, [pc, #128]	@ (80011d0 <DMA1_Stream4_IRQHandler+0x160>)
 800114e:	2201      	movs	r2, #1
 8001150:	705a      	strb	r2, [r3, #1]
		USART4_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001152:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <DMA1_Stream4_IRQHandler+0x164>)
 8001154:	2201      	movs	r2, #1
 8001156:	705a      	strb	r2, [r3, #1]
		I2C3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001158:	4b1f      	ldr	r3, [pc, #124]	@ (80011d8 <DMA1_Stream4_IRQHandler+0x168>)
 800115a:	2201      	movs	r2, #1
 800115c:	705a      	strb	r2, [r3, #1]
		I2S2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800115e:	4b1f      	ldr	r3, [pc, #124]	@ (80011dc <DMA1_Stream4_IRQHandler+0x16c>)
 8001160:	2201      	movs	r2, #1
 8001162:	705a      	strb	r2, [r3, #1]
		SPI2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001164:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <DMA1_Stream4_IRQHandler+0x170>)
 8001166:	2201      	movs	r2, #1
 8001168:	705a      	strb	r2, [r3, #1]
		DMA1_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 800116a:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <DMA1_Stream4_IRQHandler+0x174>)
 800116c:	2201      	movs	r2, #1
 800116e:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001170:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <DMA1_Stream4_IRQHandler+0x158>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	4a14      	ldr	r2, [pc, #80]	@ (80011c8 <DMA1_Stream4_IRQHandler+0x158>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF4)
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <DMA1_Stream4_IRQHandler+0x158>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	2b00      	cmp	r3, #0
 8001186:	d01a      	beq.n	80011be <DMA1_Stream4_IRQHandler+0x14e>
	{
		TIM5_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001188:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <DMA1_Stream4_IRQHandler+0x15c>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
		TIM3_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <DMA1_Stream4_IRQHandler+0x160>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
		USART4_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <DMA1_Stream4_IRQHandler+0x164>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
		I2C3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <DMA1_Stream4_IRQHandler+0x168>)
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
		I2S2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80011a0:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <DMA1_Stream4_IRQHandler+0x16c>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
		SPI2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <DMA1_Stream4_IRQHandler+0x170>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
 80011ac:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <DMA1_Stream4_IRQHandler+0x174>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80011b2:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <DMA1_Stream4_IRQHandler+0x158>)
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <DMA1_Stream4_IRQHandler+0x158>)
 80011b8:	f043 0320 	orr.w	r3, r3, #32
 80011bc:	60d3      	str	r3, [r2, #12]
	}
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	40026000 	.word	0x40026000
 80011cc:	20000430 	.word	0x20000430
 80011d0:	200003f8 	.word	0x200003f8
 80011d4:	20000328 	.word	0x20000328
 80011d8:	200002c0 	.word	0x200002c0
 80011dc:	20000298 	.word	0x20000298
 80011e0:	200002e8 	.word	0x200002e8
 80011e4:	200004a0 	.word	0x200004a0

080011e8 <DMA1_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream5_IRQHandler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF5)
 80011ec:	4b54      	ldr	r3, [pc, #336]	@ (8001340 <DMA1_Stream5_IRQHandler+0x158>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d01a      	beq.n	800122e <DMA1_Stream5_IRQHandler+0x46>
	{
		SPI3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80011f8:	4b52      	ldr	r3, [pc, #328]	@ (8001344 <DMA1_Stream5_IRQHandler+0x15c>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	711a      	strb	r2, [r3, #4]
		TIM3_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 80011fe:	4b52      	ldr	r3, [pc, #328]	@ (8001348 <DMA1_Stream5_IRQHandler+0x160>)
 8001200:	2201      	movs	r2, #1
 8001202:	711a      	strb	r2, [r3, #4]
		TIM2_CH1_DMA_Flag.Fifo_Error_Flag =  true;
 8001204:	4b51      	ldr	r3, [pc, #324]	@ (800134c <DMA1_Stream5_IRQHandler+0x164>)
 8001206:	2201      	movs	r2, #1
 8001208:	711a      	strb	r2, [r3, #4]
		DAC2_DMA_Flag.Fifo_Error_Flag = true;
 800120a:	4b51      	ldr	r3, [pc, #324]	@ (8001350 <DMA1_Stream5_IRQHandler+0x168>)
 800120c:	2201      	movs	r2, #1
 800120e:	711a      	strb	r2, [r3, #4]
		TIM3_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001210:	4b50      	ldr	r3, [pc, #320]	@ (8001354 <DMA1_Stream5_IRQHandler+0x16c>)
 8001212:	2201      	movs	r2, #1
 8001214:	711a      	strb	r2, [r3, #4]
		USART2_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001216:	4b50      	ldr	r3, [pc, #320]	@ (8001358 <DMA1_Stream5_IRQHandler+0x170>)
 8001218:	2201      	movs	r2, #1
 800121a:	711a      	strb	r2, [r3, #4]
		DMA1_Stream5_Flag.Fifo_Error_Flag = true;
 800121c:	4b4f      	ldr	r3, [pc, #316]	@ (800135c <DMA1_Stream5_IRQHandler+0x174>)
 800121e:	2201      	movs	r2, #1
 8001220:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001222:	4b47      	ldr	r3, [pc, #284]	@ (8001340 <DMA1_Stream5_IRQHandler+0x158>)
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	4a46      	ldr	r2, [pc, #280]	@ (8001340 <DMA1_Stream5_IRQHandler+0x158>)
 8001228:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800122c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF5)
 800122e:	4b44      	ldr	r3, [pc, #272]	@ (8001340 <DMA1_Stream5_IRQHandler+0x158>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001236:	2b00      	cmp	r3, #0
 8001238:	d01a      	beq.n	8001270 <DMA1_Stream5_IRQHandler+0x88>
	{
		SPI3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800123a:	4b42      	ldr	r3, [pc, #264]	@ (8001344 <DMA1_Stream5_IRQHandler+0x15c>)
 800123c:	2201      	movs	r2, #1
 800123e:	70da      	strb	r2, [r3, #3]
		TIM3_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001240:	4b41      	ldr	r3, [pc, #260]	@ (8001348 <DMA1_Stream5_IRQHandler+0x160>)
 8001242:	2201      	movs	r2, #1
 8001244:	70da      	strb	r2, [r3, #3]
		TIM2_CH1_DMA_Flag.Direct_Mode_Error_Flag =  true;
 8001246:	4b41      	ldr	r3, [pc, #260]	@ (800134c <DMA1_Stream5_IRQHandler+0x164>)
 8001248:	2201      	movs	r2, #1
 800124a:	70da      	strb	r2, [r3, #3]
		DAC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800124c:	4b40      	ldr	r3, [pc, #256]	@ (8001350 <DMA1_Stream5_IRQHandler+0x168>)
 800124e:	2201      	movs	r2, #1
 8001250:	70da      	strb	r2, [r3, #3]
		TIM3_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001252:	4b40      	ldr	r3, [pc, #256]	@ (8001354 <DMA1_Stream5_IRQHandler+0x16c>)
 8001254:	2201      	movs	r2, #1
 8001256:	70da      	strb	r2, [r3, #3]
		USART2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001258:	4b3f      	ldr	r3, [pc, #252]	@ (8001358 <DMA1_Stream5_IRQHandler+0x170>)
 800125a:	2201      	movs	r2, #1
 800125c:	70da      	strb	r2, [r3, #3]
		DMA1_Stream5_Flag.Direct_Mode_Error_Flag = true;
 800125e:	4b3f      	ldr	r3, [pc, #252]	@ (800135c <DMA1_Stream5_IRQHandler+0x174>)
 8001260:	2201      	movs	r2, #1
 8001262:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001264:	4b36      	ldr	r3, [pc, #216]	@ (8001340 <DMA1_Stream5_IRQHandler+0x158>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	4a35      	ldr	r2, [pc, #212]	@ (8001340 <DMA1_Stream5_IRQHandler+0x158>)
 800126a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800126e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF5)
 8001270:	4b33      	ldr	r3, [pc, #204]	@ (8001340 <DMA1_Stream5_IRQHandler+0x158>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001278:	2b00      	cmp	r3, #0
 800127a:	d01a      	beq.n	80012b2 <DMA1_Stream5_IRQHandler+0xca>
	{
		SPI3_TX_DMA_Flag.Transfer_Error_Flag = true;
 800127c:	4b31      	ldr	r3, [pc, #196]	@ (8001344 <DMA1_Stream5_IRQHandler+0x15c>)
 800127e:	2201      	movs	r2, #1
 8001280:	709a      	strb	r2, [r3, #2]
		TIM3_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8001282:	4b31      	ldr	r3, [pc, #196]	@ (8001348 <DMA1_Stream5_IRQHandler+0x160>)
 8001284:	2201      	movs	r2, #1
 8001286:	709a      	strb	r2, [r3, #2]
		TIM2_CH1_DMA_Flag.Transfer_Error_Flag =  true;
 8001288:	4b30      	ldr	r3, [pc, #192]	@ (800134c <DMA1_Stream5_IRQHandler+0x164>)
 800128a:	2201      	movs	r2, #1
 800128c:	709a      	strb	r2, [r3, #2]
		DAC2_DMA_Flag.Transfer_Error_Flag = true;
 800128e:	4b30      	ldr	r3, [pc, #192]	@ (8001350 <DMA1_Stream5_IRQHandler+0x168>)
 8001290:	2201      	movs	r2, #1
 8001292:	709a      	strb	r2, [r3, #2]
		TIM3_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001294:	4b2f      	ldr	r3, [pc, #188]	@ (8001354 <DMA1_Stream5_IRQHandler+0x16c>)
 8001296:	2201      	movs	r2, #1
 8001298:	709a      	strb	r2, [r3, #2]
		USART2_RX_DMA_Flag.Transfer_Error_Flag = true;
 800129a:	4b2f      	ldr	r3, [pc, #188]	@ (8001358 <DMA1_Stream5_IRQHandler+0x170>)
 800129c:	2201      	movs	r2, #1
 800129e:	709a      	strb	r2, [r3, #2]
		DMA1_Stream5_Flag.Transfer_Error_Flag = true;
 80012a0:	4b2e      	ldr	r3, [pc, #184]	@ (800135c <DMA1_Stream5_IRQHandler+0x174>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80012a6:	4b26      	ldr	r3, [pc, #152]	@ (8001340 <DMA1_Stream5_IRQHandler+0x158>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	4a25      	ldr	r2, [pc, #148]	@ (8001340 <DMA1_Stream5_IRQHandler+0x158>)
 80012ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012b0:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF5)
 80012b2:	4b23      	ldr	r3, [pc, #140]	@ (8001340 <DMA1_Stream5_IRQHandler+0x158>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d01a      	beq.n	80012f4 <DMA1_Stream5_IRQHandler+0x10c>
	{
		SPI3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80012be:	4b21      	ldr	r3, [pc, #132]	@ (8001344 <DMA1_Stream5_IRQHandler+0x15c>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	705a      	strb	r2, [r3, #1]
		TIM3_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80012c4:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <DMA1_Stream5_IRQHandler+0x160>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	705a      	strb	r2, [r3, #1]
		TIM2_CH1_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 80012ca:	4b20      	ldr	r3, [pc, #128]	@ (800134c <DMA1_Stream5_IRQHandler+0x164>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	705a      	strb	r2, [r3, #1]
		DAC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80012d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <DMA1_Stream5_IRQHandler+0x168>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	705a      	strb	r2, [r3, #1]
		TIM3_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <DMA1_Stream5_IRQHandler+0x16c>)
 80012d8:	2201      	movs	r2, #1
 80012da:	705a      	strb	r2, [r3, #1]
		USART2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80012dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001358 <DMA1_Stream5_IRQHandler+0x170>)
 80012de:	2201      	movs	r2, #1
 80012e0:	705a      	strb	r2, [r3, #1]
		DMA1_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 80012e2:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <DMA1_Stream5_IRQHandler+0x174>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <DMA1_Stream5_IRQHandler+0x158>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4a14      	ldr	r2, [pc, #80]	@ (8001340 <DMA1_Stream5_IRQHandler+0x158>)
 80012ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF5)
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <DMA1_Stream5_IRQHandler+0x158>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d01a      	beq.n	8001336 <DMA1_Stream5_IRQHandler+0x14e>
	{
		SPI3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001300:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <DMA1_Stream5_IRQHandler+0x15c>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
		TIM3_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <DMA1_Stream5_IRQHandler+0x160>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
		TIM2_CH1_DMA_Flag.Transfer_Complete_Flag =  true;
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <DMA1_Stream5_IRQHandler+0x164>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
		DAC2_DMA_Flag.Transfer_Complete_Flag = true;
 8001312:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <DMA1_Stream5_IRQHandler+0x168>)
 8001314:	2201      	movs	r2, #1
 8001316:	701a      	strb	r2, [r3, #0]
		TIM3_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001318:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <DMA1_Stream5_IRQHandler+0x16c>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
		USART2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <DMA1_Stream5_IRQHandler+0x170>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
 8001324:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <DMA1_Stream5_IRQHandler+0x174>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 800132a:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <DMA1_Stream5_IRQHandler+0x158>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	4a04      	ldr	r2, [pc, #16]	@ (8001340 <DMA1_Stream5_IRQHandler+0x158>)
 8001330:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001334:	60d3      	str	r3, [r2, #12]
	}
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	40026000 	.word	0x40026000
 8001344:	200002f0 	.word	0x200002f0
 8001348:	20000410 	.word	0x20000410
 800134c:	200003d8 	.word	0x200003d8
 8001350:	20000450 	.word	0x20000450
 8001354:	20000400 	.word	0x20000400
 8001358:	20000308 	.word	0x20000308
 800135c:	200004a8 	.word	0x200004a8

08001360 <DMA1_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream6_IRQHandler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF6)
 8001364:	4b47      	ldr	r3, [pc, #284]	@ (8001484 <DMA1_Stream6_IRQHandler+0x124>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d017      	beq.n	80013a0 <DMA1_Stream6_IRQHandler+0x40>
	{
		TIM3_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001370:	4b45      	ldr	r3, [pc, #276]	@ (8001488 <DMA1_Stream6_IRQHandler+0x128>)
 8001372:	2201      	movs	r2, #1
 8001374:	711a      	strb	r2, [r3, #4]
		TIM2_UP_DMA_Flag.Fifo_Error_Flag = true;
 8001376:	4b45      	ldr	r3, [pc, #276]	@ (800148c <DMA1_Stream6_IRQHandler+0x12c>)
 8001378:	2201      	movs	r2, #1
 800137a:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 800137c:	4b44      	ldr	r3, [pc, #272]	@ (8001490 <DMA1_Stream6_IRQHandler+0x130>)
 800137e:	2201      	movs	r2, #1
 8001380:	711a      	strb	r2, [r3, #4]
		USART2_TX_DMA_Flag.Fifo_Error_Flag =  true;
 8001382:	4b44      	ldr	r3, [pc, #272]	@ (8001494 <DMA1_Stream6_IRQHandler+0x134>)
 8001384:	2201      	movs	r2, #1
 8001386:	711a      	strb	r2, [r3, #4]
		I2C1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001388:	4b43      	ldr	r3, [pc, #268]	@ (8001498 <DMA1_Stream6_IRQHandler+0x138>)
 800138a:	2201      	movs	r2, #1
 800138c:	711a      	strb	r2, [r3, #4]
		DMA1_Stream6_Flag.Fifo_Error_Flag = true;
 800138e:	4b43      	ldr	r3, [pc, #268]	@ (800149c <DMA1_Stream6_IRQHandler+0x13c>)
 8001390:	2201      	movs	r2, #1
 8001392:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001394:	4b3b      	ldr	r3, [pc, #236]	@ (8001484 <DMA1_Stream6_IRQHandler+0x124>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	4a3a      	ldr	r2, [pc, #232]	@ (8001484 <DMA1_Stream6_IRQHandler+0x124>)
 800139a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800139e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF6)
 80013a0:	4b38      	ldr	r3, [pc, #224]	@ (8001484 <DMA1_Stream6_IRQHandler+0x124>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d014      	beq.n	80013d6 <DMA1_Stream6_IRQHandler+0x76>
	{
		TIM2_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013ac:	4b37      	ldr	r3, [pc, #220]	@ (800148c <DMA1_Stream6_IRQHandler+0x12c>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013b2:	4b37      	ldr	r3, [pc, #220]	@ (8001490 <DMA1_Stream6_IRQHandler+0x130>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	70da      	strb	r2, [r3, #3]
		USART2_TX_DMA_Flag.Direct_Mode_Error_Flag =  true;
 80013b8:	4b36      	ldr	r3, [pc, #216]	@ (8001494 <DMA1_Stream6_IRQHandler+0x134>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	70da      	strb	r2, [r3, #3]
		I2C1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013be:	4b36      	ldr	r3, [pc, #216]	@ (8001498 <DMA1_Stream6_IRQHandler+0x138>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	70da      	strb	r2, [r3, #3]
		DMA1_Stream6_Flag.Direct_Mode_Error_Flag = true;
 80013c4:	4b35      	ldr	r3, [pc, #212]	@ (800149c <DMA1_Stream6_IRQHandler+0x13c>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80013ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001484 <DMA1_Stream6_IRQHandler+0x124>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001484 <DMA1_Stream6_IRQHandler+0x124>)
 80013d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013d4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF6)
 80013d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001484 <DMA1_Stream6_IRQHandler+0x124>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d014      	beq.n	800140c <DMA1_Stream6_IRQHandler+0xac>
	{
		TIM2_UP_DMA_Flag.Transfer_Error_Flag = true;
 80013e2:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <DMA1_Stream6_IRQHandler+0x12c>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 80013e8:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <DMA1_Stream6_IRQHandler+0x130>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	709a      	strb	r2, [r3, #2]
		USART2_TX_DMA_Flag.Transfer_Error_Flag =  true;
 80013ee:	4b29      	ldr	r3, [pc, #164]	@ (8001494 <DMA1_Stream6_IRQHandler+0x134>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	709a      	strb	r2, [r3, #2]
		I2C1_TX_DMA_Flag.Transfer_Error_Flag = true;
 80013f4:	4b28      	ldr	r3, [pc, #160]	@ (8001498 <DMA1_Stream6_IRQHandler+0x138>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	709a      	strb	r2, [r3, #2]
		DMA1_Stream6_Flag.Transfer_Error_Flag = true;
 80013fa:	4b28      	ldr	r3, [pc, #160]	@ (800149c <DMA1_Stream6_IRQHandler+0x13c>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001400:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <DMA1_Stream6_IRQHandler+0x124>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	4a1f      	ldr	r2, [pc, #124]	@ (8001484 <DMA1_Stream6_IRQHandler+0x124>)
 8001406:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800140a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF6)
 800140c:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <DMA1_Stream6_IRQHandler+0x124>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d014      	beq.n	8001442 <DMA1_Stream6_IRQHandler+0xe2>
	{
		TIM2_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001418:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <DMA1_Stream6_IRQHandler+0x12c>)
 800141a:	2201      	movs	r2, #1
 800141c:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800141e:	4b1c      	ldr	r3, [pc, #112]	@ (8001490 <DMA1_Stream6_IRQHandler+0x130>)
 8001420:	2201      	movs	r2, #1
 8001422:	705a      	strb	r2, [r3, #1]
		USART2_TX_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <DMA1_Stream6_IRQHandler+0x134>)
 8001426:	2201      	movs	r2, #1
 8001428:	705a      	strb	r2, [r3, #1]
		I2C1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800142a:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <DMA1_Stream6_IRQHandler+0x138>)
 800142c:	2201      	movs	r2, #1
 800142e:	705a      	strb	r2, [r3, #1]
		DMA1_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8001430:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <DMA1_Stream6_IRQHandler+0x13c>)
 8001432:	2201      	movs	r2, #1
 8001434:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <DMA1_Stream6_IRQHandler+0x124>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <DMA1_Stream6_IRQHandler+0x124>)
 800143c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001440:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF6)
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <DMA1_Stream6_IRQHandler+0x124>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d014      	beq.n	8001478 <DMA1_Stream6_IRQHandler+0x118>
	{
		TIM2_UP_DMA_Flag.Transfer_Complete_Flag = true;
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <DMA1_Stream6_IRQHandler+0x12c>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001454:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <DMA1_Stream6_IRQHandler+0x130>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
		USART2_TX_DMA_Flag.Transfer_Complete_Flag =  true;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <DMA1_Stream6_IRQHandler+0x134>)
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
		I2C1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001460:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <DMA1_Stream6_IRQHandler+0x138>)
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
 8001466:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <DMA1_Stream6_IRQHandler+0x13c>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <DMA1_Stream6_IRQHandler+0x124>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <DMA1_Stream6_IRQHandler+0x124>)
 8001472:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001476:	60d3      	str	r3, [r2, #12]
	}
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40026000 	.word	0x40026000
 8001488:	20000408 	.word	0x20000408
 800148c:	200003d0 	.word	0x200003d0
 8001490:	20000358 	.word	0x20000358
 8001494:	20000310 	.word	0x20000310
 8001498:	200002b0 	.word	0x200002b0
 800149c:	200004b0 	.word	0x200004b0

080014a0 <DMA1_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream7_IRQHandler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF7)
 80014a4:	4b54      	ldr	r3, [pc, #336]	@ (80015f8 <DMA1_Stream7_IRQHandler+0x158>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d01a      	beq.n	80014e6 <DMA1_Stream7_IRQHandler+0x46>
	{
		I2S3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80014b0:	4b52      	ldr	r3, [pc, #328]	@ (80015fc <DMA1_Stream7_IRQHandler+0x15c>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	711a      	strb	r2, [r3, #4]
		I2C2_TX_DMA_Flag.Fifo_Error_Flag = true;
 80014b6:	4b52      	ldr	r3, [pc, #328]	@ (8001600 <DMA1_Stream7_IRQHandler+0x160>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	711a      	strb	r2, [r3, #4]
		USART5_TX_DMA_Flag.Fifo_Error_Flag = true;
 80014bc:	4b51      	ldr	r3, [pc, #324]	@ (8001604 <DMA1_Stream7_IRQHandler+0x164>)
 80014be:	2201      	movs	r2, #1
 80014c0:	711a      	strb	r2, [r3, #4]
		TIM4_CH3_DMA_Flag.Fifo_Error_Flag = true;
 80014c2:	4b51      	ldr	r3, [pc, #324]	@ (8001608 <DMA1_Stream7_IRQHandler+0x168>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	711a      	strb	r2, [r3, #4]
		TIM2_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80014c8:	4b50      	ldr	r3, [pc, #320]	@ (800160c <DMA1_Stream7_IRQHandler+0x16c>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	711a      	strb	r2, [r3, #4]
		TIM2_CH4_DMA_Flag.Fifo_Error_Flag = true;
 80014ce:	4b50      	ldr	r3, [pc, #320]	@ (8001610 <DMA1_Stream7_IRQHandler+0x170>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	711a      	strb	r2, [r3, #4]

		DMA1_Stream7_Flag.Fifo_Error_Flag = true;
 80014d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001614 <DMA1_Stream7_IRQHandler+0x174>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80014da:	4b47      	ldr	r3, [pc, #284]	@ (80015f8 <DMA1_Stream7_IRQHandler+0x158>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	4a46      	ldr	r2, [pc, #280]	@ (80015f8 <DMA1_Stream7_IRQHandler+0x158>)
 80014e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014e4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF7)
 80014e6:	4b44      	ldr	r3, [pc, #272]	@ (80015f8 <DMA1_Stream7_IRQHandler+0x158>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d01a      	beq.n	8001528 <DMA1_Stream7_IRQHandler+0x88>
	{
		I2S3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80014f2:	4b42      	ldr	r3, [pc, #264]	@ (80015fc <DMA1_Stream7_IRQHandler+0x15c>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	70da      	strb	r2, [r3, #3]
		I2C2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80014f8:	4b41      	ldr	r3, [pc, #260]	@ (8001600 <DMA1_Stream7_IRQHandler+0x160>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	70da      	strb	r2, [r3, #3]
		USART5_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80014fe:	4b41      	ldr	r3, [pc, #260]	@ (8001604 <DMA1_Stream7_IRQHandler+0x164>)
 8001500:	2201      	movs	r2, #1
 8001502:	70da      	strb	r2, [r3, #3]
		TIM4_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001504:	4b40      	ldr	r3, [pc, #256]	@ (8001608 <DMA1_Stream7_IRQHandler+0x168>)
 8001506:	2201      	movs	r2, #1
 8001508:	70da      	strb	r2, [r3, #3]
		TIM2_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800150a:	4b40      	ldr	r3, [pc, #256]	@ (800160c <DMA1_Stream7_IRQHandler+0x16c>)
 800150c:	2201      	movs	r2, #1
 800150e:	70da      	strb	r2, [r3, #3]
		TIM2_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001510:	4b3f      	ldr	r3, [pc, #252]	@ (8001610 <DMA1_Stream7_IRQHandler+0x170>)
 8001512:	2201      	movs	r2, #1
 8001514:	70da      	strb	r2, [r3, #3]
		DMA1_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8001516:	4b3f      	ldr	r3, [pc, #252]	@ (8001614 <DMA1_Stream7_IRQHandler+0x174>)
 8001518:	2201      	movs	r2, #1
 800151a:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 800151c:	4b36      	ldr	r3, [pc, #216]	@ (80015f8 <DMA1_Stream7_IRQHandler+0x158>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	4a35      	ldr	r2, [pc, #212]	@ (80015f8 <DMA1_Stream7_IRQHandler+0x158>)
 8001522:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001526:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF7)
 8001528:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <DMA1_Stream7_IRQHandler+0x158>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d01a      	beq.n	800156a <DMA1_Stream7_IRQHandler+0xca>
	{
		I2S3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001534:	4b31      	ldr	r3, [pc, #196]	@ (80015fc <DMA1_Stream7_IRQHandler+0x15c>)
 8001536:	2201      	movs	r2, #1
 8001538:	709a      	strb	r2, [r3, #2]
		I2C2_TX_DMA_Flag.Transfer_Error_Flag = true;
 800153a:	4b31      	ldr	r3, [pc, #196]	@ (8001600 <DMA1_Stream7_IRQHandler+0x160>)
 800153c:	2201      	movs	r2, #1
 800153e:	709a      	strb	r2, [r3, #2]
		USART5_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001540:	4b30      	ldr	r3, [pc, #192]	@ (8001604 <DMA1_Stream7_IRQHandler+0x164>)
 8001542:	2201      	movs	r2, #1
 8001544:	709a      	strb	r2, [r3, #2]
		TIM4_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8001546:	4b30      	ldr	r3, [pc, #192]	@ (8001608 <DMA1_Stream7_IRQHandler+0x168>)
 8001548:	2201      	movs	r2, #1
 800154a:	709a      	strb	r2, [r3, #2]
		TIM2_CH2_DMA_Flag.Transfer_Error_Flag = true;
 800154c:	4b2f      	ldr	r3, [pc, #188]	@ (800160c <DMA1_Stream7_IRQHandler+0x16c>)
 800154e:	2201      	movs	r2, #1
 8001550:	709a      	strb	r2, [r3, #2]
		TIM2_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8001552:	4b2f      	ldr	r3, [pc, #188]	@ (8001610 <DMA1_Stream7_IRQHandler+0x170>)
 8001554:	2201      	movs	r2, #1
 8001556:	709a      	strb	r2, [r3, #2]
		DMA1_Stream7_Flag.Transfer_Error_Flag = true;
 8001558:	4b2e      	ldr	r3, [pc, #184]	@ (8001614 <DMA1_Stream7_IRQHandler+0x174>)
 800155a:	2201      	movs	r2, #1
 800155c:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 800155e:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <DMA1_Stream7_IRQHandler+0x158>)
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	4a25      	ldr	r2, [pc, #148]	@ (80015f8 <DMA1_Stream7_IRQHandler+0x158>)
 8001564:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001568:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF7)
 800156a:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <DMA1_Stream7_IRQHandler+0x158>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d01a      	beq.n	80015ac <DMA1_Stream7_IRQHandler+0x10c>
	{
		I2S3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001576:	4b21      	ldr	r3, [pc, #132]	@ (80015fc <DMA1_Stream7_IRQHandler+0x15c>)
 8001578:	2201      	movs	r2, #1
 800157a:	705a      	strb	r2, [r3, #1]
		I2C2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800157c:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <DMA1_Stream7_IRQHandler+0x160>)
 800157e:	2201      	movs	r2, #1
 8001580:	705a      	strb	r2, [r3, #1]
		USART5_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <DMA1_Stream7_IRQHandler+0x164>)
 8001584:	2201      	movs	r2, #1
 8001586:	705a      	strb	r2, [r3, #1]
		TIM4_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001588:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <DMA1_Stream7_IRQHandler+0x168>)
 800158a:	2201      	movs	r2, #1
 800158c:	705a      	strb	r2, [r3, #1]
		TIM2_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800158e:	4b1f      	ldr	r3, [pc, #124]	@ (800160c <DMA1_Stream7_IRQHandler+0x16c>)
 8001590:	2201      	movs	r2, #1
 8001592:	705a      	strb	r2, [r3, #1]
		TIM2_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001594:	4b1e      	ldr	r3, [pc, #120]	@ (8001610 <DMA1_Stream7_IRQHandler+0x170>)
 8001596:	2201      	movs	r2, #1
 8001598:	705a      	strb	r2, [r3, #1]
		DMA1_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 800159a:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <DMA1_Stream7_IRQHandler+0x174>)
 800159c:	2201      	movs	r2, #1
 800159e:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 80015a0:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <DMA1_Stream7_IRQHandler+0x158>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <DMA1_Stream7_IRQHandler+0x158>)
 80015a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015aa:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF7)
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <DMA1_Stream7_IRQHandler+0x158>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d01a      	beq.n	80015ee <DMA1_Stream7_IRQHandler+0x14e>
	{
		I2S3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80015b8:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <DMA1_Stream7_IRQHandler+0x15c>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
		I2C2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <DMA1_Stream7_IRQHandler+0x160>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
		USART5_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <DMA1_Stream7_IRQHandler+0x164>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
		TIM4_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <DMA1_Stream7_IRQHandler+0x168>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
		TIM2_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <DMA1_Stream7_IRQHandler+0x16c>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
		TIM2_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <DMA1_Stream7_IRQHandler+0x170>)
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <DMA1_Stream7_IRQHandler+0x174>)
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80015e2:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <DMA1_Stream7_IRQHandler+0x158>)
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	4a04      	ldr	r2, [pc, #16]	@ (80015f8 <DMA1_Stream7_IRQHandler+0x158>)
 80015e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80015ec:	60d3      	str	r3, [r2, #12]
	}
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40026000 	.word	0x40026000
 80015fc:	200002a0 	.word	0x200002a0
 8001600:	200002b8 	.word	0x200002b8
 8001604:	20000338 	.word	0x20000338
 8001608:	20000428 	.word	0x20000428
 800160c:	200003e0 	.word	0x200003e0
 8001610:	200003f0 	.word	0x200003f0
 8001614:	200004b8 	.word	0x200004b8

08001618 <DMA2_Stream0_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream0_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream0_IRQHandler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF0)
 800161c:	4b45      	ldr	r3, [pc, #276]	@ (8001734 <DMA2_Stream0_IRQHandler+0x11c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d014      	beq.n	8001652 <DMA2_Stream0_IRQHandler+0x3a>
	{
		SPI1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001628:	4b43      	ldr	r3, [pc, #268]	@ (8001738 <DMA2_Stream0_IRQHandler+0x120>)
 800162a:	2201      	movs	r2, #1
 800162c:	711a      	strb	r2, [r3, #4]
		ADC1_DMA_Flag.Fifo_Error_Flag = true;
 800162e:	4b43      	ldr	r3, [pc, #268]	@ (800173c <DMA2_Stream0_IRQHandler+0x124>)
 8001630:	2201      	movs	r2, #1
 8001632:	711a      	strb	r2, [r3, #4]
		TIM1_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8001634:	4b42      	ldr	r3, [pc, #264]	@ (8001740 <DMA2_Stream0_IRQHandler+0x128>)
 8001636:	2201      	movs	r2, #1
 8001638:	711a      	strb	r2, [r3, #4]
		TIM1_COM_DMA_Flag.Fifo_Error_Flag = true;
 800163a:	4b42      	ldr	r3, [pc, #264]	@ (8001744 <DMA2_Stream0_IRQHandler+0x12c>)
 800163c:	2201      	movs	r2, #1
 800163e:	711a      	strb	r2, [r3, #4]
		DMA2_Stream0_Flag.Fifo_Error_Flag = true;
 8001640:	4b41      	ldr	r3, [pc, #260]	@ (8001748 <DMA2_Stream0_IRQHandler+0x130>)
 8001642:	2201      	movs	r2, #1
 8001644:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8001646:	4b3b      	ldr	r3, [pc, #236]	@ (8001734 <DMA2_Stream0_IRQHandler+0x11c>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	4a3a      	ldr	r2, [pc, #232]	@ (8001734 <DMA2_Stream0_IRQHandler+0x11c>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF0)
 8001652:	4b38      	ldr	r3, [pc, #224]	@ (8001734 <DMA2_Stream0_IRQHandler+0x11c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	2b00      	cmp	r3, #0
 800165c:	d014      	beq.n	8001688 <DMA2_Stream0_IRQHandler+0x70>
	{
		SPI1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800165e:	4b36      	ldr	r3, [pc, #216]	@ (8001738 <DMA2_Stream0_IRQHandler+0x120>)
 8001660:	2201      	movs	r2, #1
 8001662:	70da      	strb	r2, [r3, #3]
		ADC1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001664:	4b35      	ldr	r3, [pc, #212]	@ (800173c <DMA2_Stream0_IRQHandler+0x124>)
 8001666:	2201      	movs	r2, #1
 8001668:	70da      	strb	r2, [r3, #3]
		TIM1_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 800166a:	4b35      	ldr	r3, [pc, #212]	@ (8001740 <DMA2_Stream0_IRQHandler+0x128>)
 800166c:	2201      	movs	r2, #1
 800166e:	70da      	strb	r2, [r3, #3]
		TIM1_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001670:	4b34      	ldr	r3, [pc, #208]	@ (8001744 <DMA2_Stream0_IRQHandler+0x12c>)
 8001672:	2201      	movs	r2, #1
 8001674:	70da      	strb	r2, [r3, #3]
		DMA2_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8001676:	4b34      	ldr	r3, [pc, #208]	@ (8001748 <DMA2_Stream0_IRQHandler+0x130>)
 8001678:	2201      	movs	r2, #1
 800167a:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 800167c:	4b2d      	ldr	r3, [pc, #180]	@ (8001734 <DMA2_Stream0_IRQHandler+0x11c>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4a2c      	ldr	r2, [pc, #176]	@ (8001734 <DMA2_Stream0_IRQHandler+0x11c>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF0)
 8001688:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <DMA2_Stream0_IRQHandler+0x11c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d014      	beq.n	80016be <DMA2_Stream0_IRQHandler+0xa6>
	{
		SPI1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001694:	4b28      	ldr	r3, [pc, #160]	@ (8001738 <DMA2_Stream0_IRQHandler+0x120>)
 8001696:	2201      	movs	r2, #1
 8001698:	709a      	strb	r2, [r3, #2]
		ADC1_DMA_Flag.Transfer_Error_Flag = true;
 800169a:	4b28      	ldr	r3, [pc, #160]	@ (800173c <DMA2_Stream0_IRQHandler+0x124>)
 800169c:	2201      	movs	r2, #1
 800169e:	709a      	strb	r2, [r3, #2]
		TIM1_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 80016a0:	4b27      	ldr	r3, [pc, #156]	@ (8001740 <DMA2_Stream0_IRQHandler+0x128>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	709a      	strb	r2, [r3, #2]
		TIM1_COM_DMA_Flag.Transfer_Error_Flag = true;
 80016a6:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <DMA2_Stream0_IRQHandler+0x12c>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	709a      	strb	r2, [r3, #2]
		DMA2_Stream0_Flag.Transfer_Error_Flag = true;
 80016ac:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <DMA2_Stream0_IRQHandler+0x130>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 80016b2:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <DMA2_Stream0_IRQHandler+0x11c>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001734 <DMA2_Stream0_IRQHandler+0x11c>)
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF0)
 80016be:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <DMA2_Stream0_IRQHandler+0x11c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d014      	beq.n	80016f4 <DMA2_Stream0_IRQHandler+0xdc>
	{
		SPI1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80016ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <DMA2_Stream0_IRQHandler+0x120>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	705a      	strb	r2, [r3, #1]
		ADC1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <DMA2_Stream0_IRQHandler+0x124>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	705a      	strb	r2, [r3, #1]
		TIM1_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <DMA2_Stream0_IRQHandler+0x128>)
 80016d8:	2201      	movs	r2, #1
 80016da:	705a      	strb	r2, [r3, #1]
		TIM1_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <DMA2_Stream0_IRQHandler+0x12c>)
 80016de:	2201      	movs	r2, #1
 80016e0:	705a      	strb	r2, [r3, #1]
		DMA2_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 80016e2:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <DMA2_Stream0_IRQHandler+0x130>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <DMA2_Stream0_IRQHandler+0x11c>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4a11      	ldr	r2, [pc, #68]	@ (8001734 <DMA2_Stream0_IRQHandler+0x11c>)
 80016ee:	f043 0310 	orr.w	r3, r3, #16
 80016f2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF0)
 80016f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <DMA2_Stream0_IRQHandler+0x11c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0320 	and.w	r3, r3, #32
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d014      	beq.n	800172a <DMA2_Stream0_IRQHandler+0x112>
	{
		SPI1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001700:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <DMA2_Stream0_IRQHandler+0x120>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
		ADC1_DMA_Flag.Transfer_Complete_Flag = true;
 8001706:	4b0d      	ldr	r3, [pc, #52]	@ (800173c <DMA2_Stream0_IRQHandler+0x124>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
		TIM1_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <DMA2_Stream0_IRQHandler+0x128>)
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
		TIM1_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8001712:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <DMA2_Stream0_IRQHandler+0x12c>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
 8001718:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <DMA2_Stream0_IRQHandler+0x130>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 800171e:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <DMA2_Stream0_IRQHandler+0x11c>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <DMA2_Stream0_IRQHandler+0x11c>)
 8001724:	f043 0320 	orr.w	r3, r3, #32
 8001728:	6093      	str	r3, [r2, #8]
	}
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	40026400 	.word	0x40026400
 8001738:	200002c8 	.word	0x200002c8
 800173c:	20000468 	.word	0x20000468
 8001740:	20000388 	.word	0x20000388
 8001744:	20000390 	.word	0x20000390
 8001748:	200004c0 	.word	0x200004c0

0800174c <DMA2_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream1_IRQHandler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF1)
 8001750:	4b5c      	ldr	r3, [pc, #368]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x178>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01d      	beq.n	8001798 <DMA2_Stream1_IRQHandler+0x4c>
	{
		ADC3_DMA_Flag.Fifo_Error_Flag = true;
 800175c:	4b5a      	ldr	r3, [pc, #360]	@ (80018c8 <DMA2_Stream1_IRQHandler+0x17c>)
 800175e:	2201      	movs	r2, #1
 8001760:	711a      	strb	r2, [r3, #4]
		TIM1_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8001762:	4b5a      	ldr	r3, [pc, #360]	@ (80018cc <DMA2_Stream1_IRQHandler+0x180>)
 8001764:	2201      	movs	r2, #1
 8001766:	711a      	strb	r2, [r3, #4]
		TIM8_UP_DMA_Flag.Fifo_Error_Flag = true;
 8001768:	4b59      	ldr	r3, [pc, #356]	@ (80018d0 <DMA2_Stream1_IRQHandler+0x184>)
 800176a:	2201      	movs	r2, #1
 800176c:	711a      	strb	r2, [r3, #4]
		TIM8_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 800176e:	4b59      	ldr	r3, [pc, #356]	@ (80018d4 <DMA2_Stream1_IRQHandler+0x188>)
 8001770:	2201      	movs	r2, #1
 8001772:	711a      	strb	r2, [r3, #4]
		TIM8_COM_DMA_Flag.Fifo_Error_Flag = true;
 8001774:	4b58      	ldr	r3, [pc, #352]	@ (80018d8 <DMA2_Stream1_IRQHandler+0x18c>)
 8001776:	2201      	movs	r2, #1
 8001778:	711a      	strb	r2, [r3, #4]
		DCMI_DMA_Flag.Fifo_Error_Flag = true;
 800177a:	4b58      	ldr	r3, [pc, #352]	@ (80018dc <DMA2_Stream1_IRQHandler+0x190>)
 800177c:	2201      	movs	r2, #1
 800177e:	711a      	strb	r2, [r3, #4]
		USART6_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001780:	4b57      	ldr	r3, [pc, #348]	@ (80018e0 <DMA2_Stream1_IRQHandler+0x194>)
 8001782:	2201      	movs	r2, #1
 8001784:	711a      	strb	r2, [r3, #4]
		DMA2_Stream1_Flag.Fifo_Error_Flag = true;
 8001786:	4b57      	ldr	r3, [pc, #348]	@ (80018e4 <DMA2_Stream1_IRQHandler+0x198>)
 8001788:	2201      	movs	r2, #1
 800178a:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 800178c:	4b4d      	ldr	r3, [pc, #308]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x178>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a4c      	ldr	r2, [pc, #304]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x178>)
 8001792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001796:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF1)
 8001798:	4b4a      	ldr	r3, [pc, #296]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x178>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d01d      	beq.n	80017e0 <DMA2_Stream1_IRQHandler+0x94>
	{
		ADC3_DMA_Flag.Direct_Mode_Error_Flag = true;
 80017a4:	4b48      	ldr	r3, [pc, #288]	@ (80018c8 <DMA2_Stream1_IRQHandler+0x17c>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	70da      	strb	r2, [r3, #3]
		TIM1_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 80017aa:	4b48      	ldr	r3, [pc, #288]	@ (80018cc <DMA2_Stream1_IRQHandler+0x180>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	70da      	strb	r2, [r3, #3]
		TIM8_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 80017b0:	4b47      	ldr	r3, [pc, #284]	@ (80018d0 <DMA2_Stream1_IRQHandler+0x184>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	70da      	strb	r2, [r3, #3]
		TIM8_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 80017b6:	4b47      	ldr	r3, [pc, #284]	@ (80018d4 <DMA2_Stream1_IRQHandler+0x188>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	70da      	strb	r2, [r3, #3]
		TIM8_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 80017bc:	4b46      	ldr	r3, [pc, #280]	@ (80018d8 <DMA2_Stream1_IRQHandler+0x18c>)
 80017be:	2201      	movs	r2, #1
 80017c0:	70da      	strb	r2, [r3, #3]
		DCMI_DMA_Flag.Direct_Mode_Error_Flag = true;
 80017c2:	4b46      	ldr	r3, [pc, #280]	@ (80018dc <DMA2_Stream1_IRQHandler+0x190>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	70da      	strb	r2, [r3, #3]
		USART6_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80017c8:	4b45      	ldr	r3, [pc, #276]	@ (80018e0 <DMA2_Stream1_IRQHandler+0x194>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	70da      	strb	r2, [r3, #3]
		DMA2_Stream1_Flag.Direct_Mode_Error_Flag = true;
 80017ce:	4b45      	ldr	r3, [pc, #276]	@ (80018e4 <DMA2_Stream1_IRQHandler+0x198>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80017d4:	4b3b      	ldr	r3, [pc, #236]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x178>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a3a      	ldr	r2, [pc, #232]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x178>)
 80017da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017de:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF1)
 80017e0:	4b38      	ldr	r3, [pc, #224]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x178>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d01d      	beq.n	8001828 <DMA2_Stream1_IRQHandler+0xdc>
	{
		ADC3_DMA_Flag.Transfer_Error_Flag = true;
 80017ec:	4b36      	ldr	r3, [pc, #216]	@ (80018c8 <DMA2_Stream1_IRQHandler+0x17c>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	709a      	strb	r2, [r3, #2]
		TIM1_CH1_DMA_Flag.Transfer_Error_Flag = true;
 80017f2:	4b36      	ldr	r3, [pc, #216]	@ (80018cc <DMA2_Stream1_IRQHandler+0x180>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	709a      	strb	r2, [r3, #2]
		TIM8_UP_DMA_Flag.Transfer_Error_Flag = true;
 80017f8:	4b35      	ldr	r3, [pc, #212]	@ (80018d0 <DMA2_Stream1_IRQHandler+0x184>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	709a      	strb	r2, [r3, #2]
		TIM8_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 80017fe:	4b35      	ldr	r3, [pc, #212]	@ (80018d4 <DMA2_Stream1_IRQHandler+0x188>)
 8001800:	2201      	movs	r2, #1
 8001802:	709a      	strb	r2, [r3, #2]
		TIM8_COM_DMA_Flag.Transfer_Error_Flag = true;
 8001804:	4b34      	ldr	r3, [pc, #208]	@ (80018d8 <DMA2_Stream1_IRQHandler+0x18c>)
 8001806:	2201      	movs	r2, #1
 8001808:	709a      	strb	r2, [r3, #2]
		DCMI_DMA_Flag.Transfer_Error_Flag = true;
 800180a:	4b34      	ldr	r3, [pc, #208]	@ (80018dc <DMA2_Stream1_IRQHandler+0x190>)
 800180c:	2201      	movs	r2, #1
 800180e:	709a      	strb	r2, [r3, #2]
		USART6_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001810:	4b33      	ldr	r3, [pc, #204]	@ (80018e0 <DMA2_Stream1_IRQHandler+0x194>)
 8001812:	2201      	movs	r2, #1
 8001814:	709a      	strb	r2, [r3, #2]
		DMA2_Stream1_Flag.Transfer_Error_Flag = true;
 8001816:	4b33      	ldr	r3, [pc, #204]	@ (80018e4 <DMA2_Stream1_IRQHandler+0x198>)
 8001818:	2201      	movs	r2, #1
 800181a:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 800181c:	4b29      	ldr	r3, [pc, #164]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x178>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4a28      	ldr	r2, [pc, #160]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x178>)
 8001822:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001826:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF1)
 8001828:	4b26      	ldr	r3, [pc, #152]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x178>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01d      	beq.n	8001870 <DMA2_Stream1_IRQHandler+0x124>
	{
		ADC3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001834:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <DMA2_Stream1_IRQHandler+0x17c>)
 8001836:	2201      	movs	r2, #1
 8001838:	705a      	strb	r2, [r3, #1]
		TIM1_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800183a:	4b24      	ldr	r3, [pc, #144]	@ (80018cc <DMA2_Stream1_IRQHandler+0x180>)
 800183c:	2201      	movs	r2, #1
 800183e:	705a      	strb	r2, [r3, #1]
		TIM8_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001840:	4b23      	ldr	r3, [pc, #140]	@ (80018d0 <DMA2_Stream1_IRQHandler+0x184>)
 8001842:	2201      	movs	r2, #1
 8001844:	705a      	strb	r2, [r3, #1]
		TIM8_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <DMA2_Stream1_IRQHandler+0x188>)
 8001848:	2201      	movs	r2, #1
 800184a:	705a      	strb	r2, [r3, #1]
		TIM8_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800184c:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <DMA2_Stream1_IRQHandler+0x18c>)
 800184e:	2201      	movs	r2, #1
 8001850:	705a      	strb	r2, [r3, #1]
		DCMI_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001852:	4b22      	ldr	r3, [pc, #136]	@ (80018dc <DMA2_Stream1_IRQHandler+0x190>)
 8001854:	2201      	movs	r2, #1
 8001856:	705a      	strb	r2, [r3, #1]
		USART6_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001858:	4b21      	ldr	r3, [pc, #132]	@ (80018e0 <DMA2_Stream1_IRQHandler+0x194>)
 800185a:	2201      	movs	r2, #1
 800185c:	705a      	strb	r2, [r3, #1]
		DMA2_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 800185e:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <DMA2_Stream1_IRQHandler+0x198>)
 8001860:	2201      	movs	r2, #1
 8001862:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001864:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x178>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	4a16      	ldr	r2, [pc, #88]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x178>)
 800186a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800186e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF1)
 8001870:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x178>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001878:	2b00      	cmp	r3, #0
 800187a:	d01d      	beq.n	80018b8 <DMA2_Stream1_IRQHandler+0x16c>
	{
		ADC3_DMA_Flag.Transfer_Complete_Flag = true;
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <DMA2_Stream1_IRQHandler+0x17c>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
		TIM1_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8001882:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <DMA2_Stream1_IRQHandler+0x180>)
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
		TIM8_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8001888:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <DMA2_Stream1_IRQHandler+0x184>)
 800188a:	2201      	movs	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
		TIM8_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 800188e:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <DMA2_Stream1_IRQHandler+0x188>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
		TIM8_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8001894:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <DMA2_Stream1_IRQHandler+0x18c>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
		DCMI_DMA_Flag.Transfer_Complete_Flag = true;
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <DMA2_Stream1_IRQHandler+0x190>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
		USART6_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <DMA2_Stream1_IRQHandler+0x194>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
 80018a6:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <DMA2_Stream1_IRQHandler+0x198>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x178>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x178>)
 80018b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018b6:	6093      	str	r3, [r2, #8]
	}
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40026400 	.word	0x40026400
 80018c8:	20000478 	.word	0x20000478
 80018cc:	20000368 	.word	0x20000368
 80018d0:	20000398 	.word	0x20000398
 80018d4:	200003c0 	.word	0x200003c0
 80018d8:	200003c8 	.word	0x200003c8
 80018dc:	20000460 	.word	0x20000460
 80018e0:	20000340 	.word	0x20000340
 80018e4:	200004c8 	.word	0x200004c8

080018e8 <DMA2_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream2_IRQHandler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF2)
 80018ec:	4b3e      	ldr	r3, [pc, #248]	@ (80019e8 <DMA2_Stream2_IRQHandler+0x100>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d011      	beq.n	800191c <DMA2_Stream2_IRQHandler+0x34>
	{
		TIM8_CH1_DMA_Flag.Fifo_Error_Flag = true;
 80018f8:	4b3c      	ldr	r3, [pc, #240]	@ (80019ec <DMA2_Stream2_IRQHandler+0x104>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	711a      	strb	r2, [r3, #4]
		USART1_RX_DMA_Flag.Fifo_Error_Flag = true;
 80018fe:	4b3c      	ldr	r3, [pc, #240]	@ (80019f0 <DMA2_Stream2_IRQHandler+0x108>)
 8001900:	2201      	movs	r2, #1
 8001902:	711a      	strb	r2, [r3, #4]
		ADC2_DMA_Flag.Fifo_Error_Flag = true;
 8001904:	4b3b      	ldr	r3, [pc, #236]	@ (80019f4 <DMA2_Stream2_IRQHandler+0x10c>)
 8001906:	2201      	movs	r2, #1
 8001908:	711a      	strb	r2, [r3, #4]
		DMA2_Stream2_Flag.Fifo_Error_Flag = true;
 800190a:	4b3b      	ldr	r3, [pc, #236]	@ (80019f8 <DMA2_Stream2_IRQHandler+0x110>)
 800190c:	2201      	movs	r2, #1
 800190e:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001910:	4b35      	ldr	r3, [pc, #212]	@ (80019e8 <DMA2_Stream2_IRQHandler+0x100>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a34      	ldr	r2, [pc, #208]	@ (80019e8 <DMA2_Stream2_IRQHandler+0x100>)
 8001916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800191a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF2)
 800191c:	4b32      	ldr	r3, [pc, #200]	@ (80019e8 <DMA2_Stream2_IRQHandler+0x100>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d011      	beq.n	800194c <DMA2_Stream2_IRQHandler+0x64>
	{
		TIM8_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001928:	4b30      	ldr	r3, [pc, #192]	@ (80019ec <DMA2_Stream2_IRQHandler+0x104>)
 800192a:	2201      	movs	r2, #1
 800192c:	70da      	strb	r2, [r3, #3]
		USART1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800192e:	4b30      	ldr	r3, [pc, #192]	@ (80019f0 <DMA2_Stream2_IRQHandler+0x108>)
 8001930:	2201      	movs	r2, #1
 8001932:	70da      	strb	r2, [r3, #3]
		ADC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001934:	4b2f      	ldr	r3, [pc, #188]	@ (80019f4 <DMA2_Stream2_IRQHandler+0x10c>)
 8001936:	2201      	movs	r2, #1
 8001938:	70da      	strb	r2, [r3, #3]
		DMA2_Stream2_Flag.Direct_Mode_Error_Flag = true;
 800193a:	4b2f      	ldr	r3, [pc, #188]	@ (80019f8 <DMA2_Stream2_IRQHandler+0x110>)
 800193c:	2201      	movs	r2, #1
 800193e:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001940:	4b29      	ldr	r3, [pc, #164]	@ (80019e8 <DMA2_Stream2_IRQHandler+0x100>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4a28      	ldr	r2, [pc, #160]	@ (80019e8 <DMA2_Stream2_IRQHandler+0x100>)
 8001946:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800194a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF2)
 800194c:	4b26      	ldr	r3, [pc, #152]	@ (80019e8 <DMA2_Stream2_IRQHandler+0x100>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d011      	beq.n	800197c <DMA2_Stream2_IRQHandler+0x94>
	{
		TIM8_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8001958:	4b24      	ldr	r3, [pc, #144]	@ (80019ec <DMA2_Stream2_IRQHandler+0x104>)
 800195a:	2201      	movs	r2, #1
 800195c:	709a      	strb	r2, [r3, #2]
		USART1_RX_DMA_Flag.Transfer_Error_Flag = true;
 800195e:	4b24      	ldr	r3, [pc, #144]	@ (80019f0 <DMA2_Stream2_IRQHandler+0x108>)
 8001960:	2201      	movs	r2, #1
 8001962:	709a      	strb	r2, [r3, #2]
		ADC2_DMA_Flag.Transfer_Error_Flag = true;
 8001964:	4b23      	ldr	r3, [pc, #140]	@ (80019f4 <DMA2_Stream2_IRQHandler+0x10c>)
 8001966:	2201      	movs	r2, #1
 8001968:	709a      	strb	r2, [r3, #2]
		DMA2_Stream2_Flag.Transfer_Error_Flag = true;
 800196a:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <DMA2_Stream2_IRQHandler+0x110>)
 800196c:	2201      	movs	r2, #1
 800196e:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001970:	4b1d      	ldr	r3, [pc, #116]	@ (80019e8 <DMA2_Stream2_IRQHandler+0x100>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4a1c      	ldr	r2, [pc, #112]	@ (80019e8 <DMA2_Stream2_IRQHandler+0x100>)
 8001976:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800197a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF2)
 800197c:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <DMA2_Stream2_IRQHandler+0x100>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d011      	beq.n	80019ac <DMA2_Stream2_IRQHandler+0xc4>
	{
		TIM8_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001988:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <DMA2_Stream2_IRQHandler+0x104>)
 800198a:	2201      	movs	r2, #1
 800198c:	705a      	strb	r2, [r3, #1]
		USART1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800198e:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <DMA2_Stream2_IRQHandler+0x108>)
 8001990:	2201      	movs	r2, #1
 8001992:	705a      	strb	r2, [r3, #1]
		ADC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001994:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <DMA2_Stream2_IRQHandler+0x10c>)
 8001996:	2201      	movs	r2, #1
 8001998:	705a      	strb	r2, [r3, #1]
		DMA2_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 800199a:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <DMA2_Stream2_IRQHandler+0x110>)
 800199c:	2201      	movs	r2, #1
 800199e:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <DMA2_Stream2_IRQHandler+0x100>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a10      	ldr	r2, [pc, #64]	@ (80019e8 <DMA2_Stream2_IRQHandler+0x100>)
 80019a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019aa:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF2)
 80019ac:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <DMA2_Stream2_IRQHandler+0x100>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d011      	beq.n	80019dc <DMA2_Stream2_IRQHandler+0xf4>
	{
		TIM8_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <DMA2_Stream2_IRQHandler+0x104>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
		USART1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80019be:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <DMA2_Stream2_IRQHandler+0x108>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
		ADC2_DMA_Flag.Transfer_Complete_Flag = true;
 80019c4:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <DMA2_Stream2_IRQHandler+0x10c>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <DMA2_Stream2_IRQHandler+0x110>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80019d0:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <DMA2_Stream2_IRQHandler+0x100>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4a04      	ldr	r2, [pc, #16]	@ (80019e8 <DMA2_Stream2_IRQHandler+0x100>)
 80019d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019da:	6093      	str	r3, [r2, #8]
	}
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40026400 	.word	0x40026400
 80019ec:	200003a0 	.word	0x200003a0
 80019f0:	200002f8 	.word	0x200002f8
 80019f4:	20000470 	.word	0x20000470
 80019f8:	200004d0 	.word	0x200004d0

080019fc <DMA2_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream3_IRQHandler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF3)
 8001a00:	4b36      	ldr	r3, [pc, #216]	@ (8001adc <DMA2_Stream3_IRQHandler+0xe0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00e      	beq.n	8001a2a <DMA2_Stream3_IRQHandler+0x2e>
	{
		SDIO_RXTX_DMA_Flag.Fifo_Error_Flag = true;
 8001a0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ae0 <DMA2_Stream3_IRQHandler+0xe4>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	711a      	strb	r2, [r3, #4]
		SPI1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001a12:	4b34      	ldr	r3, [pc, #208]	@ (8001ae4 <DMA2_Stream3_IRQHandler+0xe8>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	711a      	strb	r2, [r3, #4]
		DMA2_Stream3_Flag.Fifo_Error_Flag = true;
 8001a18:	4b33      	ldr	r3, [pc, #204]	@ (8001ae8 <DMA2_Stream3_IRQHandler+0xec>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001a1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001adc <DMA2_Stream3_IRQHandler+0xe0>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	4a2e      	ldr	r2, [pc, #184]	@ (8001adc <DMA2_Stream3_IRQHandler+0xe0>)
 8001a24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a28:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF3)
 8001a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001adc <DMA2_Stream3_IRQHandler+0xe0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00e      	beq.n	8001a54 <DMA2_Stream3_IRQHandler+0x58>
	{
		SDIO_RXTX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001a36:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae0 <DMA2_Stream3_IRQHandler+0xe4>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	70da      	strb	r2, [r3, #3]
		SPI1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001a3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ae4 <DMA2_Stream3_IRQHandler+0xe8>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	70da      	strb	r2, [r3, #3]
		DMA2_Stream3_Flag.Direct_Mode_Error_Flag = true;
 8001a42:	4b29      	ldr	r3, [pc, #164]	@ (8001ae8 <DMA2_Stream3_IRQHandler+0xec>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001a48:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <DMA2_Stream3_IRQHandler+0xe0>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	4a23      	ldr	r2, [pc, #140]	@ (8001adc <DMA2_Stream3_IRQHandler+0xe0>)
 8001a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a52:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF3)
 8001a54:	4b21      	ldr	r3, [pc, #132]	@ (8001adc <DMA2_Stream3_IRQHandler+0xe0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00e      	beq.n	8001a7e <DMA2_Stream3_IRQHandler+0x82>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Error_Flag = true;
 8001a60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae0 <DMA2_Stream3_IRQHandler+0xe4>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	709a      	strb	r2, [r3, #2]
		SPI1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001a66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae4 <DMA2_Stream3_IRQHandler+0xe8>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	709a      	strb	r2, [r3, #2]
		DMA2_Stream3_Flag.Transfer_Error_Flag = true;
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <DMA2_Stream3_IRQHandler+0xec>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <DMA2_Stream3_IRQHandler+0xe0>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	4a19      	ldr	r2, [pc, #100]	@ (8001adc <DMA2_Stream3_IRQHandler+0xe0>)
 8001a78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a7c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF3)
 8001a7e:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <DMA2_Stream3_IRQHandler+0xe0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00e      	beq.n	8001aa8 <DMA2_Stream3_IRQHandler+0xac>
	{
		SDIO_RXTX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <DMA2_Stream3_IRQHandler+0xe4>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	705a      	strb	r2, [r3, #1]
		SPI1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001a90:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <DMA2_Stream3_IRQHandler+0xe8>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	705a      	strb	r2, [r3, #1]
		DMA2_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8001a96:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <DMA2_Stream3_IRQHandler+0xec>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <DMA2_Stream3_IRQHandler+0xe0>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	@ (8001adc <DMA2_Stream3_IRQHandler+0xe0>)
 8001aa2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001aa6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF3)
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <DMA2_Stream3_IRQHandler+0xe0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00e      	beq.n	8001ad2 <DMA2_Stream3_IRQHandler+0xd6>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Complete_Flag = true;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <DMA2_Stream3_IRQHandler+0xe4>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
		SPI1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001aba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <DMA2_Stream3_IRQHandler+0xe8>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <DMA2_Stream3_IRQHandler+0xec>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001ac6:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <DMA2_Stream3_IRQHandler+0xe0>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <DMA2_Stream3_IRQHandler+0xe0>)
 8001acc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ad0:	6093      	str	r3, [r2, #8]
	}
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40026400 	.word	0x40026400
 8001ae0:	20000458 	.word	0x20000458
 8001ae4:	200002e0 	.word	0x200002e0
 8001ae8:	200004d8 	.word	0x200004d8

08001aec <DMA2_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream4_IRQHandler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF4)
 8001af0:	4b36      	ldr	r3, [pc, #216]	@ (8001bcc <DMA2_Stream4_IRQHandler+0xe0>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00e      	beq.n	8001b1a <DMA2_Stream4_IRQHandler+0x2e>
	{
		TIM1_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8001afc:	4b34      	ldr	r3, [pc, #208]	@ (8001bd0 <DMA2_Stream4_IRQHandler+0xe4>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	711a      	strb	r2, [r3, #4]
		TIM8_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001b02:	4b34      	ldr	r3, [pc, #208]	@ (8001bd4 <DMA2_Stream4_IRQHandler+0xe8>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	711a      	strb	r2, [r3, #4]
		DMA2_Stream4_Flag.Fifo_Error_Flag = true;
 8001b08:	4b33      	ldr	r3, [pc, #204]	@ (8001bd8 <DMA2_Stream4_IRQHandler+0xec>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF4;
 8001b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001bcc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	4a2e      	ldr	r2, [pc, #184]	@ (8001bcc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF4)
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bcc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00e      	beq.n	8001b44 <DMA2_Stream4_IRQHandler+0x58>
	{
		TIM1_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001b26:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd0 <DMA2_Stream4_IRQHandler+0xe4>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	70da      	strb	r2, [r3, #3]
		TIM8_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001b2c:	4b29      	ldr	r3, [pc, #164]	@ (8001bd4 <DMA2_Stream4_IRQHandler+0xe8>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	70da      	strb	r2, [r3, #3]
		DMA2_Stream4_Flag.Direct_Mode_Error_Flag = true;
 8001b32:	4b29      	ldr	r3, [pc, #164]	@ (8001bd8 <DMA2_Stream4_IRQHandler+0xec>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001b38:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4a23      	ldr	r2, [pc, #140]	@ (8001bcc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF4)
 8001b44:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00e      	beq.n	8001b6e <DMA2_Stream4_IRQHandler+0x82>
	{
		TIM1_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8001b50:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd0 <DMA2_Stream4_IRQHandler+0xe4>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	709a      	strb	r2, [r3, #2]
		TIM8_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001b56:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd4 <DMA2_Stream4_IRQHandler+0xe8>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	709a      	strb	r2, [r3, #2]
		DMA2_Stream4_Flag.Transfer_Error_Flag = true;
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd8 <DMA2_Stream4_IRQHandler+0xec>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8001b62:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	4a19      	ldr	r2, [pc, #100]	@ (8001bcc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF4)
 8001b6e:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00e      	beq.n	8001b98 <DMA2_Stream4_IRQHandler+0xac>
	{
		TIM1_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001b7a:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <DMA2_Stream4_IRQHandler+0xe4>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	705a      	strb	r2, [r3, #1]
		TIM8_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001b80:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <DMA2_Stream4_IRQHandler+0xe8>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	705a      	strb	r2, [r3, #1]
		DMA2_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 8001b86:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <DMA2_Stream4_IRQHandler+0xec>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	4a0e      	ldr	r2, [pc, #56]	@ (8001bcc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b92:	f043 0310 	orr.w	r3, r3, #16
 8001b96:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF4)
 8001b98:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0320 	and.w	r3, r3, #32
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00e      	beq.n	8001bc2 <DMA2_Stream4_IRQHandler+0xd6>
	{
		TIM1_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <DMA2_Stream4_IRQHandler+0xe4>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
		TIM8_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <DMA2_Stream4_IRQHandler+0xe8>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <DMA2_Stream4_IRQHandler+0xec>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8001bb6:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <DMA2_Stream4_IRQHandler+0xe0>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	4a04      	ldr	r2, [pc, #16]	@ (8001bcc <DMA2_Stream4_IRQHandler+0xe0>)
 8001bbc:	f043 0320 	orr.w	r3, r3, #32
 8001bc0:	60d3      	str	r3, [r2, #12]
	}
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	40026400 	.word	0x40026400
 8001bd0:	20000380 	.word	0x20000380
 8001bd4:	200003a8 	.word	0x200003a8
 8001bd8:	200004e0 	.word	0x200004e0

08001bdc <DMA2_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream5_IRQHandler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF5)
 8001be0:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00b      	beq.n	8001c04 <DMA2_Stream5_IRQHandler+0x28>
	{
		TIM1_UP_DMA_Flag.Fifo_Error_Flag = true;
 8001bec:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca4 <DMA2_Stream5_IRQHandler+0xc8>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	711a      	strb	r2, [r3, #4]
		DMA2_Stream5_Flag.Fifo_Error_Flag = true;
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca8 <DMA2_Stream5_IRQHandler+0xcc>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001bf8:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4a28      	ldr	r2, [pc, #160]	@ (8001ca0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001bfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c02:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF5)
 8001c04:	4b26      	ldr	r3, [pc, #152]	@ (8001ca0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00b      	beq.n	8001c28 <DMA2_Stream5_IRQHandler+0x4c>
	{
		TIM1_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001c10:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <DMA2_Stream5_IRQHandler+0xc8>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	70da      	strb	r2, [r3, #3]
		DMA2_Stream5_Flag.Direct_Mode_Error_Flag = true;
 8001c16:	4b24      	ldr	r3, [pc, #144]	@ (8001ca8 <DMA2_Stream5_IRQHandler+0xcc>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001c1c:	4b20      	ldr	r3, [pc, #128]	@ (8001ca0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c26:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF5)
 8001c28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00b      	beq.n	8001c4c <DMA2_Stream5_IRQHandler+0x70>
	{
		TIM1_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001c34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <DMA2_Stream5_IRQHandler+0xc8>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	709a      	strb	r2, [r3, #2]
		DMA2_Stream5_Flag.Transfer_Error_Flag = true;
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <DMA2_Stream5_IRQHandler+0xcc>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8001c40:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4a16      	ldr	r2, [pc, #88]	@ (8001ca0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c4a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF5)
 8001c4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00b      	beq.n	8001c70 <DMA2_Stream5_IRQHandler+0x94>
	{
		TIM1_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001c58:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <DMA2_Stream5_IRQHandler+0xc8>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	705a      	strb	r2, [r3, #1]
		DMA2_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 8001c5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ca8 <DMA2_Stream5_IRQHandler+0xcc>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001c64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c6e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF5)
 8001c70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00b      	beq.n	8001c94 <DMA2_Stream5_IRQHandler+0xb8>
	{
		TIM1_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <DMA2_Stream5_IRQHandler+0xc8>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
 8001c82:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <DMA2_Stream5_IRQHandler+0xcc>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ca0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c8e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c92:	60d3      	str	r3, [r2, #12]
	}
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40026400 	.word	0x40026400
 8001ca4:	20000360 	.word	0x20000360
 8001ca8:	200004e8 	.word	0x200004e8

08001cac <DMA2_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream6_IRQHandler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF6)
 8001cb0:	4b45      	ldr	r3, [pc, #276]	@ (8001dc8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d014      	beq.n	8001ce6 <DMA2_Stream6_IRQHandler+0x3a>
	{
		TIM1_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001cbc:	4b43      	ldr	r3, [pc, #268]	@ (8001dcc <DMA2_Stream6_IRQHandler+0x120>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	711a      	strb	r2, [r3, #4]
		TIM1_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001cc2:	4b43      	ldr	r3, [pc, #268]	@ (8001dd0 <DMA2_Stream6_IRQHandler+0x124>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	711a      	strb	r2, [r3, #4]
		TIM8_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001cc8:	4b42      	ldr	r3, [pc, #264]	@ (8001dd4 <DMA2_Stream6_IRQHandler+0x128>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	711a      	strb	r2, [r3, #4]
		USART6_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001cce:	4b42      	ldr	r3, [pc, #264]	@ (8001dd8 <DMA2_Stream6_IRQHandler+0x12c>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	711a      	strb	r2, [r3, #4]
		DMA2_Stream6_Flag.Fifo_Error_Flag = true;
 8001cd4:	4b41      	ldr	r3, [pc, #260]	@ (8001ddc <DMA2_Stream6_IRQHandler+0x130>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001cda:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	4a3a      	ldr	r2, [pc, #232]	@ (8001dc8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF6)
 8001ce6:	4b38      	ldr	r3, [pc, #224]	@ (8001dc8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d014      	beq.n	8001d1c <DMA2_Stream6_IRQHandler+0x70>
	{
		TIM1_CH2_DMA_Flag.Direct_Mode_Error_Flag= true;
 8001cf2:	4b36      	ldr	r3, [pc, #216]	@ (8001dcc <DMA2_Stream6_IRQHandler+0x120>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	70da      	strb	r2, [r3, #3]
		TIM1_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cf8:	4b35      	ldr	r3, [pc, #212]	@ (8001dd0 <DMA2_Stream6_IRQHandler+0x124>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	70da      	strb	r2, [r3, #3]
		TIM8_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cfe:	4b35      	ldr	r3, [pc, #212]	@ (8001dd4 <DMA2_Stream6_IRQHandler+0x128>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	70da      	strb	r2, [r3, #3]
		USART6_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001d04:	4b34      	ldr	r3, [pc, #208]	@ (8001dd8 <DMA2_Stream6_IRQHandler+0x12c>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	70da      	strb	r2, [r3, #3]
		DMA2_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8001d0a:	4b34      	ldr	r3, [pc, #208]	@ (8001ddc <DMA2_Stream6_IRQHandler+0x130>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001d10:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4a2c      	ldr	r2, [pc, #176]	@ (8001dc8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d1a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF6)
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d014      	beq.n	8001d52 <DMA2_Stream6_IRQHandler+0xa6>
	{
		TIM1_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001d28:	4b28      	ldr	r3, [pc, #160]	@ (8001dcc <DMA2_Stream6_IRQHandler+0x120>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	709a      	strb	r2, [r3, #2]
		TIM1_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8001d2e:	4b28      	ldr	r3, [pc, #160]	@ (8001dd0 <DMA2_Stream6_IRQHandler+0x124>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	709a      	strb	r2, [r3, #2]
		TIM8_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8001d34:	4b27      	ldr	r3, [pc, #156]	@ (8001dd4 <DMA2_Stream6_IRQHandler+0x128>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	709a      	strb	r2, [r3, #2]
		USART6_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001d3a:	4b27      	ldr	r3, [pc, #156]	@ (8001dd8 <DMA2_Stream6_IRQHandler+0x12c>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	709a      	strb	r2, [r3, #2]
		DMA2_Stream6_Flag.Transfer_Error_Flag = true;
 8001d40:	4b26      	ldr	r3, [pc, #152]	@ (8001ddc <DMA2_Stream6_IRQHandler+0x130>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001d46:	4b20      	ldr	r3, [pc, #128]	@ (8001dc8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d50:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF6)
 8001d52:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d014      	beq.n	8001d88 <DMA2_Stream6_IRQHandler+0xdc>
	{
		TIM1_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <DMA2_Stream6_IRQHandler+0x120>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	705a      	strb	r2, [r3, #1]
		TIM1_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d64:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <DMA2_Stream6_IRQHandler+0x124>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	705a      	strb	r2, [r3, #1]
		TIM8_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <DMA2_Stream6_IRQHandler+0x128>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	705a      	strb	r2, [r3, #1]
		USART6_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d70:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <DMA2_Stream6_IRQHandler+0x12c>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	705a      	strb	r2, [r3, #1]
		DMA2_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8001d76:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <DMA2_Stream6_IRQHandler+0x130>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001d7c:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4a11      	ldr	r2, [pc, #68]	@ (8001dc8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d86:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF6)
 8001d88:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d014      	beq.n	8001dbe <DMA2_Stream6_IRQHandler+0x112>
	{
		TIM1_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001d94:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <DMA2_Stream6_IRQHandler+0x120>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
		TIM1_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <DMA2_Stream6_IRQHandler+0x124>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
		TIM8_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <DMA2_Stream6_IRQHandler+0x128>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
		USART6_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001da6:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <DMA2_Stream6_IRQHandler+0x12c>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
 8001dac:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <DMA2_Stream6_IRQHandler+0x130>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8001db2:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001db8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dbc:	60d3      	str	r3, [r2, #12]
	}
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	40026400 	.word	0x40026400
 8001dcc:	20000370 	.word	0x20000370
 8001dd0:	20000378 	.word	0x20000378
 8001dd4:	200003b0 	.word	0x200003b0
 8001dd8:	20000348 	.word	0x20000348
 8001ddc:	200004f0 	.word	0x200004f0

08001de0 <DMA2_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream7_IRQHandler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF7)
 8001de4:	4b36      	ldr	r3, [pc, #216]	@ (8001ec0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00e      	beq.n	8001e0e <DMA2_Stream7_IRQHandler+0x2e>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8001df0:	4b33      	ldr	r3, [pc, #204]	@ (8001ec0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4a32      	ldr	r2, [pc, #200]	@ (8001ec0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001df6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dfa:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8001dfc:	4b31      	ldr	r3, [pc, #196]	@ (8001ec4 <DMA2_Stream7_IRQHandler+0xe4>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	711a      	strb	r2, [r3, #4]
		USART1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001e02:	4b31      	ldr	r3, [pc, #196]	@ (8001ec8 <DMA2_Stream7_IRQHandler+0xe8>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	711a      	strb	r2, [r3, #4]
		DMA2_Stream7_Flag.Fifo_Error_Flag = true;
 8001e08:	4b30      	ldr	r3, [pc, #192]	@ (8001ecc <DMA2_Stream7_IRQHandler+0xec>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	711a      	strb	r2, [r3, #4]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF7)
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00e      	beq.n	8001e38 <DMA2_Stream7_IRQHandler+0x58>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8001e1a:	4b29      	ldr	r3, [pc, #164]	@ (8001ec0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	4a28      	ldr	r2, [pc, #160]	@ (8001ec0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001e20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e24:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e26:	4b27      	ldr	r3, [pc, #156]	@ (8001ec4 <DMA2_Stream7_IRQHandler+0xe4>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	70da      	strb	r2, [r3, #3]
		USART1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e2c:	4b26      	ldr	r3, [pc, #152]	@ (8001ec8 <DMA2_Stream7_IRQHandler+0xe8>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	70da      	strb	r2, [r3, #3]
		DMA2_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8001e32:	4b26      	ldr	r3, [pc, #152]	@ (8001ecc <DMA2_Stream7_IRQHandler+0xec>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	70da      	strb	r2, [r3, #3]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF7)
 8001e38:	4b21      	ldr	r3, [pc, #132]	@ (8001ec0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00e      	beq.n	8001e62 <DMA2_Stream7_IRQHandler+0x82>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8001e44:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001e4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e4e:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8001e50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec4 <DMA2_Stream7_IRQHandler+0xe4>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	709a      	strb	r2, [r3, #2]
		USART1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001e56:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <DMA2_Stream7_IRQHandler+0xe8>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	709a      	strb	r2, [r3, #2]
		DMA2_Stream7_Flag.Transfer_Error_Flag = true;
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <DMA2_Stream7_IRQHandler+0xec>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	709a      	strb	r2, [r3, #2]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF7)
 8001e62:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00e      	beq.n	8001e8c <DMA2_Stream7_IRQHandler+0xac>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001e6e:	4b14      	ldr	r3, [pc, #80]	@ (8001ec0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	4a13      	ldr	r2, [pc, #76]	@ (8001ec0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001e74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e78:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001e7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <DMA2_Stream7_IRQHandler+0xe4>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	705a      	strb	r2, [r3, #1]
		USART1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001e80:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <DMA2_Stream7_IRQHandler+0xe8>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	705a      	strb	r2, [r3, #1]
		DMA2_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8001e86:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <DMA2_Stream7_IRQHandler+0xec>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	705a      	strb	r2, [r3, #1]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF7)
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00e      	beq.n	8001eb6 <DMA2_Stream7_IRQHandler+0xd6>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001e98:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4a08      	ldr	r2, [pc, #32]	@ (8001ec0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001e9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ea2:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8001ea4:	4b07      	ldr	r3, [pc, #28]	@ (8001ec4 <DMA2_Stream7_IRQHandler+0xe4>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	701a      	strb	r2, [r3, #0]
		USART1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <DMA2_Stream7_IRQHandler+0xe8>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <DMA2_Stream7_IRQHandler+0xec>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]

	}
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40026400 	.word	0x40026400
 8001ec4:	200003b8 	.word	0x200003b8
 8001ec8:	20000300 	.word	0x20000300
 8001ecc:	200004f8 	.word	0x200004f8

08001ed0 <DMA_Reset_Flags>:
 * and transfer error.
 *
 * @param flag The `DMA_Flags_Typedef` structure whose flags are to be reset.
 */
void DMA_Reset_Flags(DMA_Flags_Typedef *flag)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	flag->Direct_Mode_Error_Flag = false;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	70da      	strb	r2, [r3, #3]
	flag->Fifo_Error_Flag = false;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	711a      	strb	r2, [r3, #4]
	flag->Half_Transfer_Complete_Flag = false;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	705a      	strb	r2, [r3, #1]
	flag->Transfer_Complete_Flag = false;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
	flag->Transfer_Error_Flag = false;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	709a      	strb	r2, [r3, #2]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0c      	ldr	r2, [pc, #48]	@ (8001f44 <DMA_Clock_Enable+0x40>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d105      	bne.n	8001f22 <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8001f16:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <DMA_Clock_Enable+0x44>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f48 <DMA_Clock_Enable+0x44>)
 8001f1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f20:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a09      	ldr	r2, [pc, #36]	@ (8001f4c <DMA_Clock_Enable+0x48>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d105      	bne.n	8001f38 <DMA_Clock_Enable+0x34>
		{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <DMA_Clock_Enable+0x44>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f30:	4a05      	ldr	r2, [pc, #20]	@ (8001f48 <DMA_Clock_Enable+0x44>)
 8001f32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f36:	6313      	str	r3, [r2, #48]	@ 0x30
		}
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	40026000 	.word	0x40026000
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40026400 	.word	0x40026400

08001f50 <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
    DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ffd3 	bl	8001f04 <DMA_Clock_Enable>
    config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	6819      	ldr	r1, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7a1b      	ldrb	r3, [r3, #8]
 8001f68:	065a      	lsls	r2, r3, #25
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	6819      	ldr	r1, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699a      	ldr	r2, [r3, #24]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->flow_control;  // Set flow control
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	6819      	ldr	r1, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->priority_level;  // Set priority level
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	6819      	ldr	r1, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	6819      	ldr	r1, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	6819      	ldr	r1, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	6819      	ldr	r1, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]

    // Configure DMA interrupts if enabled


     if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	f000 80f4 	beq.w	80021d2 <DMA_Init+0x282>
    {

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	2280      	movs	r2, #128	@ 0x80
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	61da      	str	r2, [r3, #28]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <DMA_Init+0xc0>
        {
        	config->Request.Stream->FCR |= config->interrupts;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	6959      	ldr	r1, [r3, #20]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69da      	ldr	r2, [r3, #28]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	430a      	orrs	r2, r1
 800200e:	615a      	str	r2, [r3, #20]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2210      	movs	r2, #16
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	61da      	str	r2, [r3, #28]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d007      	beq.n	8002034 <DMA_Init+0xe4>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TCIE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f042 0210 	orr.w	r2, r2, #16
 8002032:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2208      	movs	r2, #8
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	61da      	str	r2, [r3, #28]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <DMA_Init+0x108>
        {
        	config->Request.Stream->CR |= DMA_SxCR_HTIE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f042 0208 	orr.w	r2, r2, #8
 8002056:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	2204      	movs	r2, #4
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	61da      	str	r2, [r3, #28]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d007      	beq.n	800207c <DMA_Init+0x12c>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TEIE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f042 0204 	orr.w	r2, r2, #4
 800207a:	601a      	str	r2, [r3, #0]
        }
        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	2202      	movs	r2, #2
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	61da      	str	r2, [r3, #28]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d007      	beq.n	80020a0 <DMA_Init+0x150>
        {
        	config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f042 0202 	orr.w	r2, r2, #2
 800209e:	601a      	str	r2, [r3, #0]
        }

        // Enable the corresponding NVIC interrupt for the DMA stream
        if(config->Request.Controller == DMA1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a67      	ldr	r2, [pc, #412]	@ (8002244 <DMA_Init+0x2f4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d147      	bne.n	800213a <DMA_Init+0x1ea>
        {
            if(config->Request.Stream == DMA1_Stream0){
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4a66      	ldr	r2, [pc, #408]	@ (8002248 <DMA_Init+0x2f8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d103      	bne.n	80020bc <DMA_Init+0x16c>
            	NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80020b4:	200b      	movs	r0, #11
 80020b6:	f7fe fd43 	bl	8000b40 <__NVIC_EnableIRQ>
 80020ba:	e08a      	b.n	80021d2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream1){
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a62      	ldr	r2, [pc, #392]	@ (800224c <DMA_Init+0x2fc>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d103      	bne.n	80020ce <DMA_Init+0x17e>
            	NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80020c6:	200c      	movs	r0, #12
 80020c8:	f7fe fd3a 	bl	8000b40 <__NVIC_EnableIRQ>
 80020cc:	e081      	b.n	80021d2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream2){
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002250 <DMA_Init+0x300>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d103      	bne.n	80020e0 <DMA_Init+0x190>
            	NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80020d8:	200d      	movs	r0, #13
 80020da:	f7fe fd31 	bl	8000b40 <__NVIC_EnableIRQ>
 80020de:	e078      	b.n	80021d2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream3){
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a5b      	ldr	r2, [pc, #364]	@ (8002254 <DMA_Init+0x304>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d103      	bne.n	80020f2 <DMA_Init+0x1a2>
            	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80020ea:	200e      	movs	r0, #14
 80020ec:	f7fe fd28 	bl	8000b40 <__NVIC_EnableIRQ>
 80020f0:	e06f      	b.n	80021d2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream4){
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4a58      	ldr	r2, [pc, #352]	@ (8002258 <DMA_Init+0x308>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d103      	bne.n	8002104 <DMA_Init+0x1b4>
            	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80020fc:	200f      	movs	r0, #15
 80020fe:	f7fe fd1f 	bl	8000b40 <__NVIC_EnableIRQ>
 8002102:	e066      	b.n	80021d2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream5){
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a54      	ldr	r2, [pc, #336]	@ (800225c <DMA_Init+0x30c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d103      	bne.n	8002116 <DMA_Init+0x1c6>
            	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800210e:	2010      	movs	r0, #16
 8002110:	f7fe fd16 	bl	8000b40 <__NVIC_EnableIRQ>
 8002114:	e05d      	b.n	80021d2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream6) {
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4a51      	ldr	r2, [pc, #324]	@ (8002260 <DMA_Init+0x310>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d103      	bne.n	8002128 <DMA_Init+0x1d8>
            	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002120:	2011      	movs	r0, #17
 8002122:	f7fe fd0d 	bl	8000b40 <__NVIC_EnableIRQ>
 8002126:	e054      	b.n	80021d2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream7){
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a4d      	ldr	r2, [pc, #308]	@ (8002264 <DMA_Init+0x314>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d14f      	bne.n	80021d2 <DMA_Init+0x282>
            	NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002132:	202f      	movs	r0, #47	@ 0x2f
 8002134:	f7fe fd04 	bl	8000b40 <__NVIC_EnableIRQ>
 8002138:	e04b      	b.n	80021d2 <DMA_Init+0x282>
            }
        }
        else if(config->Request.Controller == DMA2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a4a      	ldr	r2, [pc, #296]	@ (8002268 <DMA_Init+0x318>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d146      	bne.n	80021d2 <DMA_Init+0x282>
        {
            if(config->Request.Stream == DMA2_Stream0){
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a48      	ldr	r2, [pc, #288]	@ (800226c <DMA_Init+0x31c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d103      	bne.n	8002156 <DMA_Init+0x206>
            	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800214e:	2038      	movs	r0, #56	@ 0x38
 8002150:	f7fe fcf6 	bl	8000b40 <__NVIC_EnableIRQ>
 8002154:	e03d      	b.n	80021d2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream1){
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4a45      	ldr	r2, [pc, #276]	@ (8002270 <DMA_Init+0x320>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d103      	bne.n	8002168 <DMA_Init+0x218>
            	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002160:	2039      	movs	r0, #57	@ 0x39
 8002162:	f7fe fced 	bl	8000b40 <__NVIC_EnableIRQ>
 8002166:	e034      	b.n	80021d2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream2){
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a41      	ldr	r2, [pc, #260]	@ (8002274 <DMA_Init+0x324>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d103      	bne.n	800217a <DMA_Init+0x22a>
            	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002172:	203a      	movs	r0, #58	@ 0x3a
 8002174:	f7fe fce4 	bl	8000b40 <__NVIC_EnableIRQ>
 8002178:	e02b      	b.n	80021d2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream3){
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4a3e      	ldr	r2, [pc, #248]	@ (8002278 <DMA_Init+0x328>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d103      	bne.n	800218c <DMA_Init+0x23c>
            	NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002184:	203b      	movs	r0, #59	@ 0x3b
 8002186:	f7fe fcdb 	bl	8000b40 <__NVIC_EnableIRQ>
 800218a:	e022      	b.n	80021d2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream4){
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a3a      	ldr	r2, [pc, #232]	@ (800227c <DMA_Init+0x32c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d103      	bne.n	800219e <DMA_Init+0x24e>
            	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002196:	203c      	movs	r0, #60	@ 0x3c
 8002198:	f7fe fcd2 	bl	8000b40 <__NVIC_EnableIRQ>
 800219c:	e019      	b.n	80021d2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream5){
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4a37      	ldr	r2, [pc, #220]	@ (8002280 <DMA_Init+0x330>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d103      	bne.n	80021b0 <DMA_Init+0x260>
            	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80021a8:	2044      	movs	r0, #68	@ 0x44
 80021aa:	f7fe fcc9 	bl	8000b40 <__NVIC_EnableIRQ>
 80021ae:	e010      	b.n	80021d2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream6){
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a33      	ldr	r2, [pc, #204]	@ (8002284 <DMA_Init+0x334>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d103      	bne.n	80021c2 <DMA_Init+0x272>
            	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80021ba:	2045      	movs	r0, #69	@ 0x45
 80021bc:	f7fe fcc0 	bl	8000b40 <__NVIC_EnableIRQ>
 80021c0:	e007      	b.n	80021d2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream7){
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4a30      	ldr	r2, [pc, #192]	@ (8002288 <DMA_Init+0x338>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d102      	bne.n	80021d2 <DMA_Init+0x282>
            	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80021cc:	2046      	movs	r0, #70	@ 0x46
 80021ce:	f7fe fcb7 	bl	8000b40 <__NVIC_EnableIRQ>
            }
        }
    }

    // Configure memory and peripheral pointer increments
    config->Request.Stream->CR |= config->memory_pointer_increment;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	8c1b      	ldrh	r3, [r3, #32]
 80021dc:	4619      	mov	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_pointer_increment;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80021f0:	4619      	mov	r1, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]

    // Configure circular mode
    if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002202:	4293      	cmp	r3, r2
 8002204:	d108      	bne.n	8002218 <DMA_Init+0x2c8>
    {
        config->Request.Stream->CR |= DMA_SxCR_CIRC;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	e010      	b.n	800223a <DMA_Init+0x2ea>
    }
    else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2200      	movs	r2, #0
 800221e:	4293      	cmp	r3, r2
 8002220:	d108      	bne.n	8002234 <DMA_Init+0x2e4>
    {
        config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e002      	b.n	800223a <DMA_Init+0x2ea>
    }
    else
    {
        return -1;  // Return -1 if circular mode configuration is invalid
 8002234:	f04f 33ff 	mov.w	r3, #4294967295
 8002238:	e000      	b.n	800223c <DMA_Init+0x2ec>
    }

    return 1;  // Return 1 on successful initialization
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40026000 	.word	0x40026000
 8002248:	40026010 	.word	0x40026010
 800224c:	40026028 	.word	0x40026028
 8002250:	40026040 	.word	0x40026040
 8002254:	40026058 	.word	0x40026058
 8002258:	40026070 	.word	0x40026070
 800225c:	40026088 	.word	0x40026088
 8002260:	400260a0 	.word	0x400260a0
 8002264:	400260b8 	.word	0x400260b8
 8002268:	40026400 	.word	0x40026400
 800226c:	40026410 	.word	0x40026410
 8002270:	40026428 	.word	0x40026428
 8002274:	40026440 	.word	0x40026440
 8002278:	40026458 	.word	0x40026458
 800227c:	40026470 	.word	0x40026470
 8002280:	40026488 	.word	0x40026488
 8002284:	400264a0 	.word	0x400264a0
 8002288:	400264b8 	.word	0x400264b8

0800228c <DMA_Set_Target>:
 * memory increment before applying the new settings.
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	config -> Request.Stream -> CR &= ~DMA_SxCR_EN;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f022 0201 	bic.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

    // Clear previous data size and memory increment settings
    config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 80022b2:	601a      	str	r2, [r3, #0]

    // Set the peripheral data size
    config -> Request.Stream -> CR |= config -> peripheral_data_size;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	6819      	ldr	r1, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]

    // Set the memory data size
    config -> Request.Stream -> CR |= config -> memory_data_size;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	6819      	ldr	r1, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

    // Set the number of data items to be transferred
    config -> Request.Stream -> NDTR = config -> buffer_length;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	605a      	str	r2, [r3, #4]

    // Set memory pointer increment mode
    config -> Request.Stream -> CR |= config -> memory_pointer_increment;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	8c1b      	ldrh	r3, [r3, #32]
 80022ec:	4619      	mov	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]

    // Set the memory address
    config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80022fe:	60da      	str	r2, [r3, #12]

    // Set the peripheral address
    config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002308:	609a      	str	r2, [r3, #8]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <DMA_Set_Trigger>:
 * number and the DMA controller (DMA1 or DMA2).
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the configuration settings.
 */
void DMA_Set_Trigger(DMA_Config *config)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
    // Bit shift values for streams 0 to 7
    static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
    static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

    DMA_TypeDef *controller = config->Request.Controller;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	617b      	str	r3, [r7, #20]
    DMA_Stream_TypeDef *stream = config->Request.Stream;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	613b      	str	r3, [r7, #16]
    uint32_t shift;

    if (controller == DMA1 || controller == DMA2)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	4a43      	ldr	r2, [pc, #268]	@ (800243c <DMA_Set_Trigger+0x124>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d003      	beq.n	800233c <DMA_Set_Trigger+0x24>
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	4a42      	ldr	r2, [pc, #264]	@ (8002440 <DMA_Set_Trigger+0x128>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d178      	bne.n	800242e <DMA_Set_Trigger+0x116>
    {
        // Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
        if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4a41      	ldr	r2, [pc, #260]	@ (8002444 <DMA_Set_Trigger+0x12c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d918      	bls.n	8002376 <DMA_Set_Trigger+0x5e>
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4a40      	ldr	r2, [pc, #256]	@ (8002448 <DMA_Set_Trigger+0x130>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d814      	bhi.n	8002376 <DMA_Set_Trigger+0x5e>
        {
            shift = LIFCR_Shifts[stream - DMA1_Stream0];
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4b3f      	ldr	r3, [pc, #252]	@ (800244c <DMA_Set_Trigger+0x134>)
 8002350:	4413      	add	r3, r2
 8002352:	10db      	asrs	r3, r3, #3
 8002354:	4a3e      	ldr	r2, [pc, #248]	@ (8002450 <DMA_Set_Trigger+0x138>)
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	461a      	mov	r2, r3
 800235c:	4b3d      	ldr	r3, [pc, #244]	@ (8002454 <DMA_Set_Trigger+0x13c>)
 800235e:	5c9b      	ldrb	r3, [r3, r2]
 8002360:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	213f      	movs	r1, #63	@ 0x3f
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	fa01 f202 	lsl.w	r2, r1, r2
 800236e:	431a      	orrs	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	e055      	b.n	8002422 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4a37      	ldr	r2, [pc, #220]	@ (8002458 <DMA_Set_Trigger+0x140>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d918      	bls.n	80023b0 <DMA_Set_Trigger+0x98>
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4a36      	ldr	r2, [pc, #216]	@ (800245c <DMA_Set_Trigger+0x144>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d814      	bhi.n	80023b0 <DMA_Set_Trigger+0x98>
        {
            shift = HIFCR_Shifts[stream - DMA1_Stream4];
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4b35      	ldr	r3, [pc, #212]	@ (8002460 <DMA_Set_Trigger+0x148>)
 800238a:	4413      	add	r3, r2
 800238c:	10db      	asrs	r3, r3, #3
 800238e:	4a30      	ldr	r2, [pc, #192]	@ (8002450 <DMA_Set_Trigger+0x138>)
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	461a      	mov	r2, r3
 8002396:	4b33      	ldr	r3, [pc, #204]	@ (8002464 <DMA_Set_Trigger+0x14c>)
 8002398:	5c9b      	ldrb	r3, [r3, r2]
 800239a:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	213f      	movs	r1, #63	@ 0x3f
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	fa01 f202 	lsl.w	r2, r1, r2
 80023a8:	431a      	orrs	r2, r3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	e038      	b.n	8002422 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002468 <DMA_Set_Trigger+0x150>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d918      	bls.n	80023ea <DMA_Set_Trigger+0xd2>
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4a2c      	ldr	r2, [pc, #176]	@ (800246c <DMA_Set_Trigger+0x154>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d814      	bhi.n	80023ea <DMA_Set_Trigger+0xd2>
        {
            shift = LIFCR_Shifts[stream - DMA2_Stream0];
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002470 <DMA_Set_Trigger+0x158>)
 80023c4:	4413      	add	r3, r2
 80023c6:	10db      	asrs	r3, r3, #3
 80023c8:	4a21      	ldr	r2, [pc, #132]	@ (8002450 <DMA_Set_Trigger+0x138>)
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b20      	ldr	r3, [pc, #128]	@ (8002454 <DMA_Set_Trigger+0x13c>)
 80023d2:	5c9b      	ldrb	r3, [r3, r2]
 80023d4:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	213f      	movs	r1, #63	@ 0x3f
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	fa01 f202 	lsl.w	r2, r1, r2
 80023e2:	431a      	orrs	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	e01b      	b.n	8002422 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4a21      	ldr	r2, [pc, #132]	@ (8002474 <DMA_Set_Trigger+0x15c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d917      	bls.n	8002422 <DMA_Set_Trigger+0x10a>
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4a20      	ldr	r2, [pc, #128]	@ (8002478 <DMA_Set_Trigger+0x160>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d813      	bhi.n	8002422 <DMA_Set_Trigger+0x10a>
        {
            shift = HIFCR_Shifts[stream - DMA2_Stream4];
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4b1f      	ldr	r3, [pc, #124]	@ (800247c <DMA_Set_Trigger+0x164>)
 80023fe:	4413      	add	r3, r2
 8002400:	10db      	asrs	r3, r3, #3
 8002402:	4a13      	ldr	r2, [pc, #76]	@ (8002450 <DMA_Set_Trigger+0x138>)
 8002404:	fb02 f303 	mul.w	r3, r2, r3
 8002408:	461a      	mov	r2, r3
 800240a:	4b16      	ldr	r3, [pc, #88]	@ (8002464 <DMA_Set_Trigger+0x14c>)
 800240c:	5c9b      	ldrb	r3, [r3, r2]
 800240e:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	213f      	movs	r1, #63	@ 0x3f
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	fa01 f202 	lsl.w	r2, r1, r2
 800241c:	431a      	orrs	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	60da      	str	r2, [r3, #12]
        }

        stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f043 0201 	orr.w	r2, r3, #1
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	601a      	str	r2, [r3, #0]
    }
}
 800242e:	bf00      	nop
 8002430:	371c      	adds	r7, #28
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40026000 	.word	0x40026000
 8002440:	40026400 	.word	0x40026400
 8002444:	4002600f 	.word	0x4002600f
 8002448:	40026058 	.word	0x40026058
 800244c:	bffd9ff0 	.word	0xbffd9ff0
 8002450:	aaaaaaab 	.word	0xaaaaaaab
 8002454:	080033a4 	.word	0x080033a4
 8002458:	4002606f 	.word	0x4002606f
 800245c:	400260b8 	.word	0x400260b8
 8002460:	bffd9f90 	.word	0xbffd9f90
 8002464:	080033a8 	.word	0x080033a8
 8002468:	4002640f 	.word	0x4002640f
 800246c:	40026458 	.word	0x40026458
 8002470:	bffd9bf0 	.word	0xbffd9bf0
 8002474:	4002646f 	.word	0x4002646f
 8002478:	400264b8 	.word	0x400264b8
 800247c:	bffd9b90 	.word	0xbffd9b90

08002480 <GPIO_Clock_Enable>:
 * @brief  Enables the clock for a specific GPIO port.
 * @param  PORT: Pointer to GPIO port base address.
 * @retval 0 on success, -1 on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a25      	ldr	r2, [pc, #148]	@ (8002520 <GPIO_Clock_Enable+0xa0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d106      	bne.n	800249e <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8002490:	4b24      	ldr	r3, [pc, #144]	@ (8002524 <GPIO_Clock_Enable+0xa4>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002494:	4a23      	ldr	r2, [pc, #140]	@ (8002524 <GPIO_Clock_Enable+0xa4>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6313      	str	r3, [r2, #48]	@ 0x30
 800249c:	e039      	b.n	8002512 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a21      	ldr	r2, [pc, #132]	@ (8002528 <GPIO_Clock_Enable+0xa8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d106      	bne.n	80024b4 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 80024a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002524 <GPIO_Clock_Enable+0xa4>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002524 <GPIO_Clock_Enable+0xa4>)
 80024ac:	f043 0302 	orr.w	r3, r3, #2
 80024b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024b2:	e02e      	b.n	8002512 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a1d      	ldr	r2, [pc, #116]	@ (800252c <GPIO_Clock_Enable+0xac>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d106      	bne.n	80024ca <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 80024bc:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <GPIO_Clock_Enable+0xa4>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c0:	4a18      	ldr	r2, [pc, #96]	@ (8002524 <GPIO_Clock_Enable+0xa4>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c8:	e023      	b.n	8002512 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a18      	ldr	r2, [pc, #96]	@ (8002530 <GPIO_Clock_Enable+0xb0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d106      	bne.n	80024e0 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 80024d2:	4b14      	ldr	r3, [pc, #80]	@ (8002524 <GPIO_Clock_Enable+0xa4>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	4a13      	ldr	r2, [pc, #76]	@ (8002524 <GPIO_Clock_Enable+0xa4>)
 80024d8:	f043 0308 	orr.w	r3, r3, #8
 80024dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024de:	e018      	b.n	8002512 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <GPIO_Clock_Enable+0xb4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d106      	bne.n	80024f6 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 80024e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002524 <GPIO_Clock_Enable+0xa4>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002524 <GPIO_Clock_Enable+0xa4>)
 80024ee:	f043 0310 	orr.w	r3, r3, #16
 80024f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f4:	e00d      	b.n	8002512 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002538 <GPIO_Clock_Enable+0xb8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d106      	bne.n	800250c <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 80024fe:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <GPIO_Clock_Enable+0xa4>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	4a08      	ldr	r2, [pc, #32]	@ (8002524 <GPIO_Clock_Enable+0xa4>)
 8002504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002508:	6313      	str	r3, [r2, #48]	@ 0x30
 800250a:	e002      	b.n	8002512 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
 8002510:	e000      	b.n	8002514 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8002512:	2301      	movs	r3, #1
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40020000 	.word	0x40020000
 8002524:	40023800 	.word	0x40023800
 8002528:	40020400 	.word	0x40020400
 800252c:	40020800 	.word	0x40020800
 8002530:	40020c00 	.word	0x40020c00
 8002534:	40021000 	.word	0x40021000
 8002538:	40021c00 	.word	0x40021c00

0800253c <GPIO_Pin_Init>:
 * @param  speed: Speed level (low, medium, high, very high).
 * @param  pull: Pull-up/pull-down configuration (none, pull-up, pull-down).
 * @param  alternate_function: Alternate function selection (0-15).
 */
void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	4608      	mov	r0, r1
 8002546:	4611      	mov	r1, r2
 8002548:	461a      	mov	r2, r3
 800254a:	4603      	mov	r3, r0
 800254c:	70fb      	strb	r3, [r7, #3]
 800254e:	460b      	mov	r3, r1
 8002550:	70bb      	strb	r3, [r7, #2]
 8002552:	4613      	mov	r3, r2
 8002554:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ff92 	bl	8002480 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	78b9      	ldrb	r1, [r7, #2]
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	0052      	lsls	r2, r2, #1
 8002566:	fa01 f202 	lsl.w	r2, r1, r2
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	601a      	str	r2, [r3, #0]

	if(output_type != GPIO_Configuration.Output_Type.None) Port -> OTYPER |= output_type << pin;
 8002570:	2202      	movs	r2, #2
 8002572:	787b      	ldrb	r3, [r7, #1]
 8002574:	4293      	cmp	r3, r2
 8002576:	d008      	beq.n	800258a <GPIO_Pin_Init+0x4e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	7879      	ldrb	r1, [r7, #1]
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	fa01 f202 	lsl.w	r2, r1, r2
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	605a      	str	r2, [r3, #4]
	if(speed != GPIO_Configuration.Speed.None) Port -> OSPEEDR |= speed << (pin*2);
 800258a:	2204      	movs	r2, #4
 800258c:	7c3b      	ldrb	r3, [r7, #16]
 800258e:	4293      	cmp	r3, r2
 8002590:	d009      	beq.n	80025a6 <GPIO_Pin_Init+0x6a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	7c39      	ldrb	r1, [r7, #16]
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	0052      	lsls	r2, r2, #1
 800259c:	fa01 f202 	lsl.w	r2, r1, r2
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	609a      	str	r2, [r3, #8]
	if(pull != GPIO_Configuration.Pull.None) Port -> PUPDR |= pull << (pin*2);
 80025a6:	2204      	movs	r2, #4
 80025a8:	7d3b      	ldrb	r3, [r7, #20]
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d009      	beq.n	80025c2 <GPIO_Pin_Init+0x86>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	7d39      	ldrb	r1, [r7, #20]
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	0052      	lsls	r2, r2, #1
 80025b8:	fa01 f202 	lsl.w	r2, r1, r2
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	2b07      	cmp	r3, #7
 80025c6:	d80a      	bhi.n	80025de <GPIO_Pin_Init+0xa2>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	7e39      	ldrb	r1, [r7, #24]
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	0092      	lsls	r2, r2, #2
 80025d2:	fa01 f202 	lsl.w	r2, r1, r2
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 80025dc:	e00a      	b.n	80025f4 <GPIO_Pin_Init+0xb8>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	7e39      	ldrb	r1, [r7, #24]
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	3a08      	subs	r2, #8
 80025e8:	0092      	lsls	r2, r2, #2
 80025ea:	fa01 f202 	lsl.w	r2, r1, r2
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db0a      	blt.n	8002626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	490c      	ldr	r1, [pc, #48]	@ (8002648 <__NVIC_SetPriority+0x4c>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	440b      	add	r3, r1
 8002620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002624:	e00a      	b.n	800263c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4908      	ldr	r1, [pc, #32]	@ (800264c <__NVIC_SetPriority+0x50>)
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	3b04      	subs	r3, #4
 8002634:	0112      	lsls	r2, r2, #4
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	440b      	add	r3, r1
 800263a:	761a      	strb	r2, [r3, #24]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000e100 	.word	0xe000e100
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002660:	d301      	bcc.n	8002666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002662:	2301      	movs	r3, #1
 8002664:	e00f      	b.n	8002686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002666:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <SysTick_Config+0x40>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800266e:	210f      	movs	r1, #15
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	f7ff ffc2 	bl	80025fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002678:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <SysTick_Config+0x40>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267e:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <SysTick_Config+0x40>)
 8002680:	2207      	movs	r2, #7
 8002682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	e000e010 	.word	0xe000e010

08002694 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
//	uint8_t pll_m = 4;
//	uint8_t pll_n = 168; //192
//	uint8_t pll_p = 0;
//	uint8_t pll_q = 7;

	SystemInit();
 800269a:	f000 fb91 	bl	8002dc0 <SystemInit>

	uint8_t pll_m = 8;
 800269e:	2308      	movs	r3, #8
 80026a0:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 80026a2:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80026a6:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 80026ac:	2307      	movs	r3, #7
 80026ae:	70bb      	strb	r3, [r7, #2]

	RCC->PLLCFGR = 0x00000000;
 80026b0:	4b3c      	ldr	r3, [pc, #240]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 80026b6:	4b3b      	ldr	r3, [pc, #236]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a3a      	ldr	r2, [pc, #232]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 80026c2:	bf00      	nop
 80026c4:	4b37      	ldr	r3, [pc, #220]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f9      	beq.n	80026c4 <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80026d0:	4b34      	ldr	r3, [pc, #208]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 80026d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d4:	4a33      	ldr	r2, [pc, #204]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 80026d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026da:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 80026dc:	4b32      	ldr	r3, [pc, #200]	@ (80027a8 <MCU_Clock_Setup+0x114>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a31      	ldr	r2, [pc, #196]	@ (80027a8 <MCU_Clock_Setup+0x114>)
 80026e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e6:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 80026e8:	4b30      	ldr	r3, [pc, #192]	@ (80027ac <MCU_Clock_Setup+0x118>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a2f      	ldr	r2, [pc, #188]	@ (80027ac <MCU_Clock_Setup+0x118>)
 80026ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026f2:	f043 0305 	orr.w	r3, r3, #5
 80026f6:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 80026f8:	4b2a      	ldr	r3, [pc, #168]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	78ba      	ldrb	r2, [r7, #2]
 80026fe:	0611      	lsls	r1, r2, #24
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	0412      	lsls	r2, r2, #16
 8002704:	4311      	orrs	r1, r2
 8002706:	88ba      	ldrh	r2, [r7, #4]
 8002708:	0192      	lsls	r2, r2, #6
 800270a:	4311      	orrs	r1, r2
 800270c:	79fa      	ldrb	r2, [r7, #7]
 800270e:	430a      	orrs	r2, r1
 8002710:	4611      	mov	r1, r2
 8002712:	4a24      	ldr	r2, [pc, #144]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 8002714:	430b      	orrs	r3, r1
 8002716:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8002718:	4b22      	ldr	r3, [pc, #136]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a21      	ldr	r2, [pc, #132]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 800271e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002722:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8002724:	4b1f      	ldr	r3, [pc, #124]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 8002726:	4a1f      	ldr	r2, [pc, #124]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 800272c:	4b1d      	ldr	r3, [pc, #116]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	4a1c      	ldr	r2, [pc, #112]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 8002732:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8002736:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002738:	4b1a      	ldr	r3, [pc, #104]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a19      	ldr	r2, [pc, #100]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 800273e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002742:	6093      	str	r3, [r2, #8]




	RCC -> CR |= RCC_CR_PLLON;
 8002744:	4b17      	ldr	r3, [pc, #92]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a16      	ldr	r2, [pc, #88]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 800274a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800274e:	6013      	str	r3, [r2, #0]



	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8002750:	bf00      	nop
 8002752:	4b14      	ldr	r3, [pc, #80]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f9      	beq.n	8002752 <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 800275e:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	4a10      	ldr	r2, [pc, #64]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 800276a:	bf00      	nop
 800276c:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b08      	cmp	r3, #8
 8002776:	d1f9      	bne.n	800276c <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 8002778:	f000 fb34 	bl	8002de4 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 800277c:	4b0c      	ldr	r3, [pc, #48]	@ (80027b0 <MCU_Clock_Setup+0x11c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	08db      	lsrs	r3, r3, #3
 8002782:	4a0c      	ldr	r2, [pc, #48]	@ (80027b4 <MCU_Clock_Setup+0x120>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	085b      	lsrs	r3, r3, #1
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff ff60 	bl	8002650 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002790:	4b04      	ldr	r3, [pc, #16]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 8002792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002794:	4a03      	ldr	r2, [pc, #12]	@ (80027a4 <MCU_Clock_Setup+0x110>)
 8002796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800279a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40007000 	.word	0x40007000
 80027ac:	40023c00 	.word	0x40023c00
 80027b0:	20000220 	.word	0x20000220
 80027b4:	18618619 	.word	0x18618619

080027b8 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 80027bc:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <Delay_Config+0x2c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 80027c2:	4b08      	ldr	r3, [pc, #32]	@ (80027e4 <Delay_Config+0x2c>)
 80027c4:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80027c8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80027ca:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <Delay_Config+0x2c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 80027d0:	4b04      	ldr	r3, [pc, #16]	@ (80027e4 <Delay_Config+0x2c>)
 80027d2:	2205      	movs	r2, #5
 80027d4:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 80027f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80027f6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800283c <Delay_ms+0x54>
 80027fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002802:	ee17 3a90 	vmov	r3, s15
 8002806:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8002808:	4a0d      	ldr	r2, [pc, #52]	@ (8002840 <Delay_ms+0x58>)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 800280e:	4b0c      	ldr	r3, [pc, #48]	@ (8002840 <Delay_ms+0x58>)
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8002814:	4b0a      	ldr	r3, [pc, #40]	@ (8002840 <Delay_ms+0x58>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a09      	ldr	r2, [pc, #36]	@ (8002840 <Delay_ms+0x58>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8002820:	bf00      	nop
 8002822:	4b07      	ldr	r3, [pc, #28]	@ (8002840 <Delay_ms+0x58>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f9      	beq.n	8002822 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	48241000 	.word	0x48241000
 8002840:	e000e010 	.word	0xe000e010

08002844 <Delay_s>:
	return ms;
}


__STATIC_INLINE uint32_t Delay_s(unsigned long s)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	s = s * 1000;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002852:	fb02 f303 	mul.w	r3, r2, r3
 8002856:	607b      	str	r3, [r7, #4]
	for (; s>0; s--)
 8002858:	e006      	b.n	8002868 <Delay_s+0x24>
	{
		Delay_ms(1);
 800285a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800285e:	f7ff ffc3 	bl	80027e8 <Delay_ms>
	for (; s>0; s--)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3b01      	subs	r3, #1
 8002866:	607b      	str	r3, [r7, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f5      	bne.n	800285a <Delay_s+0x16>
	}
	return (0UL);
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <TIM6_DAC_IRQHandler>:
ADC_Config sensor_config;



void TIM6_DAC_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
	TIM6 -> SR &= ~TIM_SR_UIF;
 800287e:	4b15      	ldr	r3, [pc, #84]	@ (80028d4 <TIM6_DAC_IRQHandler+0x5c>)
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	4a14      	ldr	r2, [pc, #80]	@ (80028d4 <TIM6_DAC_IRQHandler+0x5c>)
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	6113      	str	r3, [r2, #16]

	Get_Temperature(sensor_buffer[0]);
 800288a:	4b13      	ldr	r3, [pc, #76]	@ (80028d8 <TIM6_DAC_IRQHandler+0x60>)
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f000 f85a 	bl	8002948 <Get_Temperature>
	Get_Pressure(sensor_buffer[1]);
 8002894:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <TIM6_DAC_IRQHandler+0x60>)
 8002896:	885b      	ldrh	r3, [r3, #2]
 8002898:	4618      	mov	r0, r3
 800289a:	f000 f903 	bl	8002aa4 <Get_Pressure>

	float saturation_temp = Get_Saturation_Temp_From_Pressure(pressure, R454B_Saturation_Table, R545B_Table_Size);
 800289e:	4b0f      	ldr	r3, [pc, #60]	@ (80028dc <TIM6_DAC_IRQHandler+0x64>)
 80028a0:	edd3 7a00 	vldr	s15, [r3]
 80028a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028a8:	2244      	movs	r2, #68	@ 0x44
 80028aa:	490d      	ldr	r1, [pc, #52]	@ (80028e0 <TIM6_DAC_IRQHandler+0x68>)
 80028ac:	ee17 0a90 	vmov	r0, s15
 80028b0:	f000 f926 	bl	8002b00 <Get_Saturation_Temp_From_Pressure>
 80028b4:	ed87 0a01 	vstr	s0, [r7, #4]

	float superheat = temp_kelvin - saturation_temp;
 80028b8:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <TIM6_DAC_IRQHandler+0x6c>)
 80028ba:	ed93 7a00 	vldr	s14, [r3]
 80028be:	edd7 7a01 	vldr	s15, [r7, #4]
 80028c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c6:	edc7 7a00 	vstr	s15, [r7]
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40001000 	.word	0x40001000
 80028d8:	20002488 	.word	0x20002488
 80028dc:	20002484 	.word	0x20002484
 80028e0:	20000000 	.word	0x20000000
 80028e4:	2000247c 	.word	0x2000247c

080028e8 <main>:
	NVIC_SetPriority(TIM6_DAC_IRQn,1);
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
}

int main(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 80028ee:	f7ff fed1 	bl	8002694 <MCU_Clock_Setup>
	Delay_Config();
 80028f2:	f7ff ff61 	bl	80027b8 <Delay_Config>
//	Console_Init(9600); //921600

	for(int i = 0; i < array_length; i++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	e007      	b.n	800290c <main+0x24>
	{
		data_array[i] = 0;
 80028fc:	4a10      	ldr	r2, [pc, #64]	@ (8002940 <main+0x58>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2100      	movs	r1, #0
 8002902:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < array_length; i++)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3301      	adds	r3, #1
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002912:	ddf3      	ble.n	80028fc <main+0x14>
	}

	Init_Stepper_Motor();
 8002914:	f000 f978 	bl	8002c08 <Init_Stepper_Motor>


	for(;;)
	{

		Set_Stepper_Motor_Position(10, 1000);
 8002918:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800291c:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8002920:	f000 f9e0 	bl	8002ce4 <Set_Stepper_Motor_Position>
		Delay_s(1);
 8002924:	2001      	movs	r0, #1
 8002926:	f7ff ff8d 	bl	8002844 <Delay_s>
		Set_Stepper_Motor_Position(2000, 200);
 800292a:	20c8      	movs	r0, #200	@ 0xc8
 800292c:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8002944 <main+0x5c>
 8002930:	f000 f9d8 	bl	8002ce4 <Set_Stepper_Motor_Position>
		Delay_s(1);
 8002934:	2001      	movs	r0, #1
 8002936:	f7ff ff85 	bl	8002844 <Delay_s>
		Set_Stepper_Motor_Position(10, 1000);
 800293a:	bf00      	nop
 800293c:	e7ec      	b.n	8002918 <main+0x30>
 800293e:	bf00      	nop
 8002940:	20000538 	.word	0x20000538
 8002944:	44fa0000 	.word	0x44fa0000

08002948 <Get_Temperature>:
	}
}


void Get_Temperature(uint16_t adc_value)
{
 8002948:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	80fb      	strh	r3, [r7, #6]
	float Vout = 0.0;
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
	float R_thermistor = 0.0;
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	60bb      	str	r3, [r7, #8]


	Vout = (adc_value / 1024.0)*VIN;
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd fd82 	bl	800046c <__aeabi_i2d>
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	4b44      	ldr	r3, [pc, #272]	@ (8002a80 <Get_Temperature+0x138>)
 800296e:	f7fd ff11 	bl	8000794 <__aeabi_ddiv>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4614      	mov	r4, r2
 8002978:	461d      	mov	r5, r3
 800297a:	4b42      	ldr	r3, [pc, #264]	@ (8002a84 <Get_Temperature+0x13c>)
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fd87 	bl	8000490 <__aeabi_f2d>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4620      	mov	r0, r4
 8002988:	4629      	mov	r1, r5
 800298a:	f7fd fdd9 	bl	8000540 <__aeabi_dmul>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	f7fe f883 	bl	8000aa0 <__aeabi_d2f>
 800299a:	4603      	mov	r3, r0
 800299c:	60fb      	str	r3, [r7, #12]
	R_thermistor = R_FIXED * (VIN / Vout - 1);
 800299e:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8002a88 <Get_Temperature+0x140>
 80029a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80029a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80029ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029b2:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8002a8c <Get_Temperature+0x144>
 80029b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ba:	edc7 7a02 	vstr	s15, [r7, #8]

	temp_kelvin = 1 / ((1/T0) + (1/BETA) * log(R_thermistor/R0));
 80029be:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8002a90 <Get_Temperature+0x148>
 80029c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80029c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80029ca:	ee16 0a90 	vmov	r0, s13
 80029ce:	f7fd fd5f 	bl	8000490 <__aeabi_f2d>
 80029d2:	4604      	mov	r4, r0
 80029d4:	460d      	mov	r5, r1
 80029d6:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8002a94 <Get_Temperature+0x14c>
 80029da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80029de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80029e2:	ee16 0a90 	vmov	r0, s13
 80029e6:	f7fd fd53 	bl	8000490 <__aeabi_f2d>
 80029ea:	4680      	mov	r8, r0
 80029ec:	4689      	mov	r9, r1
 80029ee:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002a8c <Get_Temperature+0x144>
 80029f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80029f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029fa:	ee16 0a90 	vmov	r0, s13
 80029fe:	f7fd fd47 	bl	8000490 <__aeabi_f2d>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	ec43 2b10 	vmov	d0, r2, r3
 8002a0a:	f000 fac1 	bl	8002f90 <log>
 8002a0e:	ec53 2b10 	vmov	r2, r3, d0
 8002a12:	4640      	mov	r0, r8
 8002a14:	4649      	mov	r1, r9
 8002a16:	f7fd fd93 	bl	8000540 <__aeabi_dmul>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4620      	mov	r0, r4
 8002a20:	4629      	mov	r1, r5
 8002a22:	f7fd fbd7 	bl	80001d4 <__adddf3>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	f04f 0000 	mov.w	r0, #0
 8002a2e:	491a      	ldr	r1, [pc, #104]	@ (8002a98 <Get_Temperature+0x150>)
 8002a30:	f7fd feb0 	bl	8000794 <__aeabi_ddiv>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	f7fe f830 	bl	8000aa0 <__aeabi_d2f>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4a16      	ldr	r2, [pc, #88]	@ (8002a9c <Get_Temperature+0x154>)
 8002a44:	6013      	str	r3, [r2, #0]
	temp_celsius = temp_kelvin - 273.15;
 8002a46:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <Get_Temperature+0x154>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fd20 	bl	8000490 <__aeabi_f2d>
 8002a50:	a309      	add	r3, pc, #36	@ (adr r3, 8002a78 <Get_Temperature+0x130>)
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	f7fd fbbb 	bl	80001d0 <__aeabi_dsub>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	f7fe f81d 	bl	8000aa0 <__aeabi_d2f>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa0 <Get_Temperature+0x158>)
 8002a6a:	6013      	str	r3, [r2, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a76:	bf00      	nop
 8002a78:	66666666 	.word	0x66666666
 8002a7c:	40711266 	.word	0x40711266
 8002a80:	40900000 	.word	0x40900000
 8002a84:	40533333 	.word	0x40533333
 8002a88:	40533333 	.word	0x40533333
 8002a8c:	461c4000 	.word	0x461c4000
 8002a90:	43951333 	.word	0x43951333
 8002a94:	4576e000 	.word	0x4576e000
 8002a98:	3ff00000 	.word	0x3ff00000
 8002a9c:	2000247c 	.word	0x2000247c
 8002aa0:	20002480 	.word	0x20002480

08002aa4 <Get_Pressure>:


void Get_Pressure(uint16_t adc_value)
{
 8002aa4:	b5b0      	push	{r4, r5, r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	80fb      	strh	r3, [r7, #6]
	pressure = (adc_value / 1024.0)*MAX_PRESSURE;
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fcdb 	bl	800046c <__aeabi_i2d>
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	4b0f      	ldr	r3, [pc, #60]	@ (8002af8 <Get_Pressure+0x54>)
 8002abc:	f7fd fe6a 	bl	8000794 <__aeabi_ddiv>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4614      	mov	r4, r2
 8002ac6:	461d      	mov	r5, r3
 8002ac8:	2332      	movs	r3, #50	@ 0x32
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fcce 	bl	800046c <__aeabi_i2d>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	f7fd fd32 	bl	8000540 <__aeabi_dmul>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7fd ffdc 	bl	8000aa0 <__aeabi_d2f>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a04      	ldr	r2, [pc, #16]	@ (8002afc <Get_Pressure+0x58>)
 8002aec:	6013      	str	r3, [r2, #0]
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bdb0      	pop	{r4, r5, r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40900000 	.word	0x40900000
 8002afc:	20002484 	.word	0x20002484

08002b00 <Get_Saturation_Temp_From_Pressure>:


float Get_Saturation_Temp_From_Pressure(int pressure, PressureTempEntry *saturation_table, int TABLE_SIZE)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b08b      	sub	sp, #44	@ 0x2c
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
	// Handle edge cases: pressure below the range
	if (pressure <= saturation_table[0].pressure) {
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	dc02      	bgt.n	8002b1c <Get_Saturation_Temp_From_Pressure+0x1c>
		return saturation_table[0].temp_avg;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	e06a      	b.n	8002bf2 <Get_Saturation_Temp_From_Pressure+0xf2>
	}
	// Handle edge cases: pressure above the range
	else if (pressure >= saturation_table[TABLE_SIZE - 1].pressure) {
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002b22:	3b01      	subs	r3, #1
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	4413      	add	r3, r2
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	db08      	blt.n	8002b44 <Get_Saturation_Temp_From_Pressure+0x44>
		return saturation_table[TABLE_SIZE - 1].temp_avg;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	4413      	add	r3, r2
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	e056      	b.n	8002bf2 <Get_Saturation_Temp_From_Pressure+0xf2>
	}

    // Search for the correct interval in the table
    for (int i = 0; i < TABLE_SIZE - 1; i++) {
 8002b44:	2300      	movs	r3, #0
 8002b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b48:	e04d      	b.n	8002be6 <Get_Saturation_Temp_From_Pressure+0xe6>
        if (pressure >= saturation_table[i].pressure && pressure <= saturation_table[i + 1].pressure) {
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	4413      	add	r3, r2
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	db42      	blt.n	8002be0 <Get_Saturation_Temp_From_Pressure+0xe0>
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	4413      	add	r3, r2
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	dc39      	bgt.n	8002be0 <Get_Saturation_Temp_From_Pressure+0xe0>
            // Perform linear interpolation
            int pressure_low = saturation_table[i].pressure;
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	4413      	add	r3, r2
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	623b      	str	r3, [r7, #32]
            int pressure_high = saturation_table[i + 1].pressure;
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	4413      	add	r3, r2
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	61fb      	str	r3, [r7, #28]
            float temp_low = saturation_table[i].temp_avg;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	61bb      	str	r3, [r7, #24]
            float temp_high = saturation_table[i + 1].temp_avg;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b94:	3301      	adds	r3, #1
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	617b      	str	r3, [r7, #20]

            // Linear interpolation formula
            float saturation_temp = temp_low + (pressure - pressure_low) * (temp_high - temp_low) / (float)(pressure_high - pressure_low);
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bae:	edd7 6a05 	vldr	s13, [r7, #20]
 8002bb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bb6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002bba:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	ee07 3a90 	vmov	s15, r3
 8002bc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bd0:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd8:	edc7 7a04 	vstr	s15, [r7, #16]
            return saturation_temp;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	e008      	b.n	8002bf2 <Get_Saturation_Temp_From_Pressure+0xf2>
    for (int i = 0; i < TABLE_SIZE - 1; i++) {
 8002be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be2:	3301      	adds	r3, #1
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bec:	429a      	cmp	r2, r3
 8002bee:	dbac      	blt.n	8002b4a <Get_Saturation_Temp_From_Pressure+0x4a>
        }
    }

    // If not found, return an error value (should not reach here if data is properly bounded)
    return -999.9;
 8002bf0:	4b04      	ldr	r3, [pc, #16]	@ (8002c04 <Get_Saturation_Temp_From_Pressure+0x104>)
}
 8002bf2:	ee07 3a90 	vmov	s15, r3
 8002bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bfa:	372c      	adds	r7, #44	@ 0x2c
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	c479f99a 	.word	0xc479f99a

08002c08 <Init_Stepper_Motor>:



void Init_Stepper_Motor(void)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af04      	add	r7, sp, #16
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN; // Enable TIM5 clock
 8002c0e:	4b30      	ldr	r3, [pc, #192]	@ (8002cd0 <Init_Stepper_Motor+0xc8>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd0 <Init_Stepper_Motor+0xc8>)
 8002c14:	f043 0304 	orr.w	r3, r3, #4
 8002c18:	6413      	str	r3, [r2, #64]	@ 0x40
	GPIO_Pin_Init(GPIOD, 12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.TIM_4);
 8002c1a:	2002      	movs	r0, #2
 8002c1c:	2400      	movs	r4, #0
 8002c1e:	2303      	movs	r3, #3
 8002c20:	2200      	movs	r2, #0
 8002c22:	2102      	movs	r1, #2
 8002c24:	9102      	str	r1, [sp, #8]
 8002c26:	9201      	str	r2, [sp, #4]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	4623      	mov	r3, r4
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	210c      	movs	r1, #12
 8002c30:	4828      	ldr	r0, [pc, #160]	@ (8002cd4 <Init_Stepper_Motor+0xcc>)
 8002c32:	f7ff fc83 	bl	800253c <GPIO_Pin_Init>

	Stepper_Motor.Request = DMA_Configuration.Request.TIM4_CH1;
 8002c36:	4a28      	ldr	r2, [pc, #160]	@ (8002cd8 <Init_Stepper_Motor+0xd0>)
 8002c38:	4b28      	ldr	r3, [pc, #160]	@ (8002cdc <Init_Stepper_Motor+0xd4>)
 8002c3a:	4614      	mov	r4, r2
 8002c3c:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8002c40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Stepper_Motor.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4b23      	ldr	r3, [pc, #140]	@ (8002cd8 <Init_Stepper_Motor+0xd0>)
 8002c4c:	619a      	str	r2, [r3, #24]
	Stepper_Motor.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002c4e:	2200      	movs	r2, #0
 8002c50:	4b21      	ldr	r3, [pc, #132]	@ (8002cd8 <Init_Stepper_Motor+0xd0>)
 8002c52:	60da      	str	r2, [r3, #12]
	Stepper_Motor.interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002c54:	2210      	movs	r2, #16
 8002c56:	4b20      	ldr	r3, [pc, #128]	@ (8002cd8 <Init_Stepper_Motor+0xd0>)
 8002c58:	61da      	str	r2, [r3, #28]
	Stepper_Motor.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002c5a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd8 <Init_Stepper_Motor+0xd0>)
 8002c60:	615a      	str	r2, [r3, #20]
	Stepper_Motor.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002c62:	2240      	movs	r2, #64	@ 0x40
 8002c64:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd8 <Init_Stepper_Motor+0xd0>)
 8002c66:	611a      	str	r2, [r3, #16]

	Stepper_Motor.memory_data_size = DMA_Configuration.Memory_Data_Size.word;
 8002c68:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd8 <Init_Stepper_Motor+0xd0>)
 8002c6e:	629a      	str	r2, [r3, #40]	@ 0x28
	Stepper_Motor.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002c70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	4b18      	ldr	r3, [pc, #96]	@ (8002cd8 <Init_Stepper_Motor+0xd0>)
 8002c78:	841a      	strh	r2, [r3, #32]

	Stepper_Motor.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	4b16      	ldr	r3, [pc, #88]	@ (8002cd8 <Init_Stepper_Motor+0xd0>)
 8002c80:	845a      	strh	r2, [r3, #34]	@ 0x22
	Stepper_Motor.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.word;
 8002c82:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c86:	4b14      	ldr	r3, [pc, #80]	@ (8002cd8 <Init_Stepper_Motor+0xd0>)
 8002c88:	625a      	str	r2, [r3, #36]	@ 0x24

	DMA_Init(&Stepper_Motor);
 8002c8a:	4813      	ldr	r0, [pc, #76]	@ (8002cd8 <Init_Stepper_Motor+0xd0>)
 8002c8c:	f7ff f960 	bl	8001f50 <DMA_Init>

    TIM4 -> CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 8002c90:	4b13      	ldr	r3, [pc, #76]	@ (8002ce0 <Init_Stepper_Motor+0xd8>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	4a12      	ldr	r2, [pc, #72]	@ (8002ce0 <Init_Stepper_Motor+0xd8>)
 8002c96:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002c9a:	6193      	str	r3, [r2, #24]
    TIM4 -> CCMR1 |= TIM_CCMR1_OC1PE;
 8002c9c:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <Init_Stepper_Motor+0xd8>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce0 <Init_Stepper_Motor+0xd8>)
 8002ca2:	f043 0308 	orr.w	r3, r3, #8
 8002ca6:	6193      	str	r3, [r2, #24]
    TIM4 -> CCER |= TIM_CCER_CC1E;
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce0 <Init_Stepper_Motor+0xd8>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4a0c      	ldr	r2, [pc, #48]	@ (8002ce0 <Init_Stepper_Motor+0xd8>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6213      	str	r3, [r2, #32]
    TIM4 -> DIER |= TIM_DIER_CC1DE;
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce0 <Init_Stepper_Motor+0xd8>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4a09      	ldr	r2, [pc, #36]	@ (8002ce0 <Init_Stepper_Motor+0xd8>)
 8002cba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cbe:	60d3      	str	r3, [r2, #12]
//    TIM4->PSC = 84000000/(100*2000);                   // Prescaler
    TIM4->ARR = 100;                                   // Auto-reload value (period)
 8002cc0:	4b07      	ldr	r3, [pc, #28]	@ (8002ce0 <Init_Stepper_Motor+0xd8>)
 8002cc2:	2264      	movs	r2, #100	@ 0x64
 8002cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002cc6:	bf00      	nop
 8002cc8:	3704      	adds	r7, #4
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd90      	pop	{r4, r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40020c00 	.word	0x40020c00
 8002cd8:	20000500 	.word	0x20000500
 8002cdc:	080033ac 	.word	0x080033ac
 8002ce0:	40000800 	.word	0x40000800

08002ce4 <Set_Stepper_Motor_Position>:



void Set_Stepper_Motor_Position(float control_signal, uint16_t speed)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	ed87 0a01 	vstr	s0, [r7, #4]
 8002cee:	4603      	mov	r3, r0
 8002cf0:	807b      	strh	r3, [r7, #2]
    TIM4->PSC = 84000000/(100*speed)-1;                   // Prescaler
 8002cf2:	887b      	ldrh	r3, [r7, #2]
 8002cf4:	2264      	movs	r2, #100	@ 0x64
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	4a2b      	ldr	r2, [pc, #172]	@ (8002da8 <Set_Stepper_Motor_Position+0xc4>)
 8002cfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d00:	1e5a      	subs	r2, r3, #1
 8002d02:	4b2a      	ldr	r3, [pc, #168]	@ (8002dac <Set_Stepper_Motor_Position+0xc8>)
 8002d04:	629a      	str	r2, [r3, #40]	@ 0x28
	for(int i = 0; i < array_length; i++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	e007      	b.n	8002d1c <Set_Stepper_Motor_Position+0x38>
	{
		data_array[i] = 0;
 8002d0c:	4a28      	ldr	r2, [pc, #160]	@ (8002db0 <Set_Stepper_Motor_Position+0xcc>)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2100      	movs	r1, #0
 8002d12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < array_length; i++)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002d22:	ddf3      	ble.n	8002d0c <Set_Stepper_Motor_Position+0x28>
	}

	for(int i =0 ; i < (uint32_t)control_signal; i++)
 8002d24:	2300      	movs	r3, #0
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	e007      	b.n	8002d3a <Set_Stepper_Motor_Position+0x56>
	{
		data_array[i]= 50;
 8002d2a:	4a21      	ldr	r2, [pc, #132]	@ (8002db0 <Set_Stepper_Motor_Position+0xcc>)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2132      	movs	r1, #50	@ 0x32
 8002d30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i =0 ; i < (uint32_t)control_signal; i++)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	3301      	adds	r3, #1
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d42:	ee17 2a90 	vmov	r2, s15
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d8ee      	bhi.n	8002d2a <Set_Stepper_Motor_Position+0x46>
	}

	Stepper_Motor.memory_address = (uint32_t)&(data_array[0]);
 8002d4c:	4a18      	ldr	r2, [pc, #96]	@ (8002db0 <Set_Stepper_Motor_Position+0xcc>)
 8002d4e:	4b19      	ldr	r3, [pc, #100]	@ (8002db4 <Set_Stepper_Motor_Position+0xd0>)
 8002d50:	631a      	str	r2, [r3, #48]	@ 0x30
	Stepper_Motor.peripheral_address = (uint32_t)&(TIM4->CCR1);
 8002d52:	4b18      	ldr	r3, [pc, #96]	@ (8002db4 <Set_Stepper_Motor_Position+0xd0>)
 8002d54:	4a18      	ldr	r2, [pc, #96]	@ (8002db8 <Set_Stepper_Motor_Position+0xd4>)
 8002d56:	62da      	str	r2, [r3, #44]	@ 0x2c
	Stepper_Motor.buffer_length = control_signal+1;
 8002d58:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d68:	ee17 3a90 	vmov	r3, s15
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	4b11      	ldr	r3, [pc, #68]	@ (8002db4 <Set_Stepper_Motor_Position+0xd0>)
 8002d70:	869a      	strh	r2, [r3, #52]	@ 0x34
	DMA_Set_Target(&Stepper_Motor);
 8002d72:	4810      	ldr	r0, [pc, #64]	@ (8002db4 <Set_Stepper_Motor_Position+0xd0>)
 8002d74:	f7ff fa8a 	bl	800228c <DMA_Set_Target>
	DMA_Set_Trigger(&Stepper_Motor);
 8002d78:	480e      	ldr	r0, [pc, #56]	@ (8002db4 <Set_Stepper_Motor_Position+0xd0>)
 8002d7a:	f7ff facd 	bl	8002318 <DMA_Set_Trigger>

	TIM4 -> CR1 |= TIM_CR1_CEN;
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <Set_Stepper_Motor_Position+0xc8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a0a      	ldr	r2, [pc, #40]	@ (8002dac <Set_Stepper_Motor_Position+0xc8>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	6013      	str	r3, [r2, #0]

	while(TIM4_CH1_DMA_Flag.Transfer_Complete_Flag != true){}
 8002d8a:	bf00      	nop
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dbc <Set_Stepper_Motor_Position+0xd8>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	f083 0301 	eor.w	r3, r3, #1
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f8      	bne.n	8002d8c <Set_Stepper_Motor_Position+0xa8>
	DMA_Reset_Flags(&TIM4_CH1_DMA_Flag);
 8002d9a:	4808      	ldr	r0, [pc, #32]	@ (8002dbc <Set_Stepper_Motor_Position+0xd8>)
 8002d9c:	f7ff f898 	bl	8001ed0 <DMA_Reset_Flags>

}
 8002da0:	bf00      	nop
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	0501bd00 	.word	0x0501bd00
 8002dac:	40000800 	.word	0x40000800
 8002db0:	20000538 	.word	0x20000538
 8002db4:	20000500 	.word	0x20000500
 8002db8:	40000834 	.word	0x40000834
 8002dbc:	20000418 	.word	0x20000418

08002dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dc4:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <SystemInit+0x20>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dca:	4a05      	ldr	r2, [pc, #20]	@ (8002de0 <SystemInit+0x20>)
 8002dcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	2302      	movs	r3, #2
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002dfe:	4b34      	ldr	r3, [pc, #208]	@ (8002ed0 <SystemCoreClockUpdate+0xec>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d011      	beq.n	8002e32 <SystemCoreClockUpdate+0x4e>
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d844      	bhi.n	8002e9e <SystemCoreClockUpdate+0xba>
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <SystemCoreClockUpdate+0x3e>
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d004      	beq.n	8002e2a <SystemCoreClockUpdate+0x46>
 8002e20:	e03d      	b.n	8002e9e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002e22:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed4 <SystemCoreClockUpdate+0xf0>)
 8002e24:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed8 <SystemCoreClockUpdate+0xf4>)
 8002e26:	601a      	str	r2, [r3, #0]
      break;
 8002e28:	e03d      	b.n	8002ea6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed4 <SystemCoreClockUpdate+0xf0>)
 8002e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002edc <SystemCoreClockUpdate+0xf8>)
 8002e2e:	601a      	str	r2, [r3, #0]
      break;
 8002e30:	e039      	b.n	8002ea6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002e32:	4b27      	ldr	r3, [pc, #156]	@ (8002ed0 <SystemCoreClockUpdate+0xec>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	0d9b      	lsrs	r3, r3, #22
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e3e:	4b24      	ldr	r3, [pc, #144]	@ (8002ed0 <SystemCoreClockUpdate+0xec>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e46:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00c      	beq.n	8002e68 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002e4e:	4a23      	ldr	r2, [pc, #140]	@ (8002edc <SystemCoreClockUpdate+0xf8>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e56:	4a1e      	ldr	r2, [pc, #120]	@ (8002ed0 <SystemCoreClockUpdate+0xec>)
 8002e58:	6852      	ldr	r2, [r2, #4]
 8002e5a:	0992      	lsrs	r2, r2, #6
 8002e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e60:	fb02 f303 	mul.w	r3, r2, r3
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e00b      	b.n	8002e80 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002e68:	4a1b      	ldr	r2, [pc, #108]	@ (8002ed8 <SystemCoreClockUpdate+0xf4>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e70:	4a17      	ldr	r2, [pc, #92]	@ (8002ed0 <SystemCoreClockUpdate+0xec>)
 8002e72:	6852      	ldr	r2, [r2, #4]
 8002e74:	0992      	lsrs	r2, r2, #6
 8002e76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e7a:	fb02 f303 	mul.w	r3, r2, r3
 8002e7e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002e80:	4b13      	ldr	r3, [pc, #76]	@ (8002ed0 <SystemCoreClockUpdate+0xec>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	0c1b      	lsrs	r3, r3, #16
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e98:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed4 <SystemCoreClockUpdate+0xf0>)
 8002e9a:	6013      	str	r3, [r2, #0]
      break;
 8002e9c:	e003      	b.n	8002ea6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed4 <SystemCoreClockUpdate+0xf0>)
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed8 <SystemCoreClockUpdate+0xf4>)
 8002ea2:	601a      	str	r2, [r3, #0]
      break;
 8002ea4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <SystemCoreClockUpdate+0xec>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee0 <SystemCoreClockUpdate+0xfc>)
 8002eb2:	5cd3      	ldrb	r3, [r2, r3]
 8002eb4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002eb6:	4b07      	ldr	r3, [pc, #28]	@ (8002ed4 <SystemCoreClockUpdate+0xf0>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec0:	4a04      	ldr	r2, [pc, #16]	@ (8002ed4 <SystemCoreClockUpdate+0xf0>)
 8002ec2:	6013      	str	r3, [r2, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	20000220 	.word	0x20000220
 8002ed8:	00f42400 	.word	0x00f42400
 8002edc:	017d7840 	.word	0x017d7840
 8002ee0:	080037a8 	.word	0x080037a8

08002ee4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ee4:	480d      	ldr	r0, [pc, #52]	@ (8002f1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ee6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ee8:	f7ff ff6a 	bl	8002dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eec:	480c      	ldr	r0, [pc, #48]	@ (8002f20 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eee:	490d      	ldr	r1, [pc, #52]	@ (8002f24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f28 <LoopForever+0xe>)
  movs r3, #0
 8002ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ef4:	e002      	b.n	8002efc <LoopCopyDataInit>

08002ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002efa:	3304      	adds	r3, #4

08002efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f00:	d3f9      	bcc.n	8002ef6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f02:	4a0a      	ldr	r2, [pc, #40]	@ (8002f2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f04:	4c0a      	ldr	r4, [pc, #40]	@ (8002f30 <LoopForever+0x16>)
  movs r3, #0
 8002f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f08:	e001      	b.n	8002f0e <LoopFillZerobss>

08002f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f0c:	3204      	adds	r2, #4

08002f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f10:	d3fb      	bcc.n	8002f0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f12:	f000 f817 	bl	8002f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f16:	f7ff fce7 	bl	80028e8 <main>

08002f1a <LoopForever>:

LoopForever:
  b LoopForever
 8002f1a:	e7fe      	b.n	8002f1a <LoopForever>
  ldr   r0, =_estack
 8002f1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f24:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8002f28:	080037c4 	.word	0x080037c4
  ldr r2, =_sbss
 8002f2c:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 8002f30:	200025c4 	.word	0x200025c4

08002f34 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f34:	e7fe      	b.n	8002f34 <ADC_IRQHandler>
	...

08002f38 <__errno>:
 8002f38:	4b01      	ldr	r3, [pc, #4]	@ (8002f40 <__errno+0x8>)
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	20000224 	.word	0x20000224

08002f44 <__libc_init_array>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	4d0d      	ldr	r5, [pc, #52]	@ (8002f7c <__libc_init_array+0x38>)
 8002f48:	4c0d      	ldr	r4, [pc, #52]	@ (8002f80 <__libc_init_array+0x3c>)
 8002f4a:	1b64      	subs	r4, r4, r5
 8002f4c:	10a4      	asrs	r4, r4, #2
 8002f4e:	2600      	movs	r6, #0
 8002f50:	42a6      	cmp	r6, r4
 8002f52:	d109      	bne.n	8002f68 <__libc_init_array+0x24>
 8002f54:	4d0b      	ldr	r5, [pc, #44]	@ (8002f84 <__libc_init_array+0x40>)
 8002f56:	4c0c      	ldr	r4, [pc, #48]	@ (8002f88 <__libc_init_array+0x44>)
 8002f58:	f000 fa18 	bl	800338c <_init>
 8002f5c:	1b64      	subs	r4, r4, r5
 8002f5e:	10a4      	asrs	r4, r4, #2
 8002f60:	2600      	movs	r6, #0
 8002f62:	42a6      	cmp	r6, r4
 8002f64:	d105      	bne.n	8002f72 <__libc_init_array+0x2e>
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
 8002f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f6c:	4798      	blx	r3
 8002f6e:	3601      	adds	r6, #1
 8002f70:	e7ee      	b.n	8002f50 <__libc_init_array+0xc>
 8002f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f76:	4798      	blx	r3
 8002f78:	3601      	adds	r6, #1
 8002f7a:	e7f2      	b.n	8002f62 <__libc_init_array+0x1e>
 8002f7c:	080037bc 	.word	0x080037bc
 8002f80:	080037bc 	.word	0x080037bc
 8002f84:	080037bc 	.word	0x080037bc
 8002f88:	080037c0 	.word	0x080037c0
 8002f8c:	00000000 	.word	0x00000000

08002f90 <log>:
 8002f90:	b538      	push	{r3, r4, r5, lr}
 8002f92:	ed2d 8b02 	vpush	{d8}
 8002f96:	ec55 4b10 	vmov	r4, r5, d0
 8002f9a:	f000 f841 	bl	8003020 <__ieee754_log>
 8002f9e:	4622      	mov	r2, r4
 8002fa0:	462b      	mov	r3, r5
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	eeb0 8a40 	vmov.f32	s16, s0
 8002faa:	eef0 8a60 	vmov.f32	s17, s1
 8002fae:	f7fd fd61 	bl	8000a74 <__aeabi_dcmpun>
 8002fb2:	b998      	cbnz	r0, 8002fdc <log+0x4c>
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	4620      	mov	r0, r4
 8002fba:	4629      	mov	r1, r5
 8002fbc:	f7fd fd50 	bl	8000a60 <__aeabi_dcmpgt>
 8002fc0:	b960      	cbnz	r0, 8002fdc <log+0x4c>
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	4629      	mov	r1, r5
 8002fca:	f7fd fd21 	bl	8000a10 <__aeabi_dcmpeq>
 8002fce:	b160      	cbz	r0, 8002fea <log+0x5a>
 8002fd0:	f7ff ffb2 	bl	8002f38 <__errno>
 8002fd4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8003000 <log+0x70>
 8002fd8:	2322      	movs	r3, #34	@ 0x22
 8002fda:	6003      	str	r3, [r0, #0]
 8002fdc:	eeb0 0a48 	vmov.f32	s0, s16
 8002fe0:	eef0 0a68 	vmov.f32	s1, s17
 8002fe4:	ecbd 8b02 	vpop	{d8}
 8002fe8:	bd38      	pop	{r3, r4, r5, pc}
 8002fea:	f7ff ffa5 	bl	8002f38 <__errno>
 8002fee:	ecbd 8b02 	vpop	{d8}
 8002ff2:	2321      	movs	r3, #33	@ 0x21
 8002ff4:	6003      	str	r3, [r0, #0]
 8002ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ffa:	4803      	ldr	r0, [pc, #12]	@ (8003008 <log+0x78>)
 8002ffc:	f000 b808 	b.w	8003010 <nan>
 8003000:	00000000 	.word	0x00000000
 8003004:	fff00000 	.word	0xfff00000
 8003008:	080037b8 	.word	0x080037b8
 800300c:	00000000 	.word	0x00000000

08003010 <nan>:
 8003010:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8003018 <nan+0x8>
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	00000000 	.word	0x00000000
 800301c:	7ff80000 	.word	0x7ff80000

08003020 <__ieee754_log>:
 8003020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003024:	ec51 0b10 	vmov	r0, r1, d0
 8003028:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800302c:	b087      	sub	sp, #28
 800302e:	460d      	mov	r5, r1
 8003030:	da26      	bge.n	8003080 <__ieee754_log+0x60>
 8003032:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003036:	4303      	orrs	r3, r0
 8003038:	4602      	mov	r2, r0
 800303a:	d10a      	bne.n	8003052 <__ieee754_log+0x32>
 800303c:	49ce      	ldr	r1, [pc, #824]	@ (8003378 <__ieee754_log+0x358>)
 800303e:	2200      	movs	r2, #0
 8003040:	2300      	movs	r3, #0
 8003042:	2000      	movs	r0, #0
 8003044:	f7fd fba6 	bl	8000794 <__aeabi_ddiv>
 8003048:	ec41 0b10 	vmov	d0, r0, r1
 800304c:	b007      	add	sp, #28
 800304e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003052:	2900      	cmp	r1, #0
 8003054:	da05      	bge.n	8003062 <__ieee754_log+0x42>
 8003056:	460b      	mov	r3, r1
 8003058:	f7fd f8ba 	bl	80001d0 <__aeabi_dsub>
 800305c:	2200      	movs	r2, #0
 800305e:	2300      	movs	r3, #0
 8003060:	e7f0      	b.n	8003044 <__ieee754_log+0x24>
 8003062:	4bc6      	ldr	r3, [pc, #792]	@ (800337c <__ieee754_log+0x35c>)
 8003064:	2200      	movs	r2, #0
 8003066:	f7fd fa6b 	bl	8000540 <__aeabi_dmul>
 800306a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800306e:	460d      	mov	r5, r1
 8003070:	4ac3      	ldr	r2, [pc, #780]	@ (8003380 <__ieee754_log+0x360>)
 8003072:	4295      	cmp	r5, r2
 8003074:	dd06      	ble.n	8003084 <__ieee754_log+0x64>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	f7fd f8ab 	bl	80001d4 <__adddf3>
 800307e:	e7e3      	b.n	8003048 <__ieee754_log+0x28>
 8003080:	2300      	movs	r3, #0
 8003082:	e7f5      	b.n	8003070 <__ieee754_log+0x50>
 8003084:	152c      	asrs	r4, r5, #20
 8003086:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800308a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800308e:	441c      	add	r4, r3
 8003090:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8003094:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8003098:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800309c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 80030a0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 80030a4:	ea42 0105 	orr.w	r1, r2, r5
 80030a8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80030ac:	2200      	movs	r2, #0
 80030ae:	4bb5      	ldr	r3, [pc, #724]	@ (8003384 <__ieee754_log+0x364>)
 80030b0:	f7fd f88e 	bl	80001d0 <__aeabi_dsub>
 80030b4:	1cab      	adds	r3, r5, #2
 80030b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	4682      	mov	sl, r0
 80030be:	468b      	mov	fp, r1
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	dc53      	bgt.n	800316e <__ieee754_log+0x14e>
 80030c6:	2300      	movs	r3, #0
 80030c8:	f7fd fca2 	bl	8000a10 <__aeabi_dcmpeq>
 80030cc:	b1d0      	cbz	r0, 8003104 <__ieee754_log+0xe4>
 80030ce:	2c00      	cmp	r4, #0
 80030d0:	f000 8120 	beq.w	8003314 <__ieee754_log+0x2f4>
 80030d4:	4620      	mov	r0, r4
 80030d6:	f7fd f9c9 	bl	800046c <__aeabi_i2d>
 80030da:	a391      	add	r3, pc, #580	@ (adr r3, 8003320 <__ieee754_log+0x300>)
 80030dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e0:	4606      	mov	r6, r0
 80030e2:	460f      	mov	r7, r1
 80030e4:	f7fd fa2c 	bl	8000540 <__aeabi_dmul>
 80030e8:	a38f      	add	r3, pc, #572	@ (adr r3, 8003328 <__ieee754_log+0x308>)
 80030ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ee:	4604      	mov	r4, r0
 80030f0:	460d      	mov	r5, r1
 80030f2:	4630      	mov	r0, r6
 80030f4:	4639      	mov	r1, r7
 80030f6:	f7fd fa23 	bl	8000540 <__aeabi_dmul>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4620      	mov	r0, r4
 8003100:	4629      	mov	r1, r5
 8003102:	e7ba      	b.n	800307a <__ieee754_log+0x5a>
 8003104:	a38a      	add	r3, pc, #552	@ (adr r3, 8003330 <__ieee754_log+0x310>)
 8003106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310a:	4650      	mov	r0, sl
 800310c:	4659      	mov	r1, fp
 800310e:	f7fd fa17 	bl	8000540 <__aeabi_dmul>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	2000      	movs	r0, #0
 8003118:	499b      	ldr	r1, [pc, #620]	@ (8003388 <__ieee754_log+0x368>)
 800311a:	f7fd f859 	bl	80001d0 <__aeabi_dsub>
 800311e:	4652      	mov	r2, sl
 8003120:	4606      	mov	r6, r0
 8003122:	460f      	mov	r7, r1
 8003124:	465b      	mov	r3, fp
 8003126:	4650      	mov	r0, sl
 8003128:	4659      	mov	r1, fp
 800312a:	f7fd fa09 	bl	8000540 <__aeabi_dmul>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4630      	mov	r0, r6
 8003134:	4639      	mov	r1, r7
 8003136:	f7fd fa03 	bl	8000540 <__aeabi_dmul>
 800313a:	4606      	mov	r6, r0
 800313c:	460f      	mov	r7, r1
 800313e:	b914      	cbnz	r4, 8003146 <__ieee754_log+0x126>
 8003140:	4632      	mov	r2, r6
 8003142:	463b      	mov	r3, r7
 8003144:	e0a0      	b.n	8003288 <__ieee754_log+0x268>
 8003146:	4620      	mov	r0, r4
 8003148:	f7fd f990 	bl	800046c <__aeabi_i2d>
 800314c:	a374      	add	r3, pc, #464	@ (adr r3, 8003320 <__ieee754_log+0x300>)
 800314e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003152:	4680      	mov	r8, r0
 8003154:	4689      	mov	r9, r1
 8003156:	f7fd f9f3 	bl	8000540 <__aeabi_dmul>
 800315a:	a373      	add	r3, pc, #460	@ (adr r3, 8003328 <__ieee754_log+0x308>)
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	4604      	mov	r4, r0
 8003162:	460d      	mov	r5, r1
 8003164:	4640      	mov	r0, r8
 8003166:	4649      	mov	r1, r9
 8003168:	f7fd f9ea 	bl	8000540 <__aeabi_dmul>
 800316c:	e0a5      	b.n	80032ba <__ieee754_log+0x29a>
 800316e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003172:	f7fd f82f 	bl	80001d4 <__adddf3>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4650      	mov	r0, sl
 800317c:	4659      	mov	r1, fp
 800317e:	f7fd fb09 	bl	8000794 <__aeabi_ddiv>
 8003182:	e9cd 0100 	strd	r0, r1, [sp]
 8003186:	4620      	mov	r0, r4
 8003188:	f7fd f970 	bl	800046c <__aeabi_i2d>
 800318c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	f7fd f9d2 	bl	8000540 <__aeabi_dmul>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031a4:	f7fd f9cc 	bl	8000540 <__aeabi_dmul>
 80031a8:	a363      	add	r3, pc, #396	@ (adr r3, 8003338 <__ieee754_log+0x318>)
 80031aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ae:	4680      	mov	r8, r0
 80031b0:	4689      	mov	r9, r1
 80031b2:	f7fd f9c5 	bl	8000540 <__aeabi_dmul>
 80031b6:	a362      	add	r3, pc, #392	@ (adr r3, 8003340 <__ieee754_log+0x320>)
 80031b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031bc:	f7fd f80a 	bl	80001d4 <__adddf3>
 80031c0:	4642      	mov	r2, r8
 80031c2:	464b      	mov	r3, r9
 80031c4:	f7fd f9bc 	bl	8000540 <__aeabi_dmul>
 80031c8:	a35f      	add	r3, pc, #380	@ (adr r3, 8003348 <__ieee754_log+0x328>)
 80031ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ce:	f7fd f801 	bl	80001d4 <__adddf3>
 80031d2:	4642      	mov	r2, r8
 80031d4:	464b      	mov	r3, r9
 80031d6:	f7fd f9b3 	bl	8000540 <__aeabi_dmul>
 80031da:	a35d      	add	r3, pc, #372	@ (adr r3, 8003350 <__ieee754_log+0x330>)
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	f7fc fff8 	bl	80001d4 <__adddf3>
 80031e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031e8:	f7fd f9aa 	bl	8000540 <__aeabi_dmul>
 80031ec:	a35a      	add	r3, pc, #360	@ (adr r3, 8003358 <__ieee754_log+0x338>)
 80031ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80031f6:	4640      	mov	r0, r8
 80031f8:	4649      	mov	r1, r9
 80031fa:	f7fd f9a1 	bl	8000540 <__aeabi_dmul>
 80031fe:	a358      	add	r3, pc, #352	@ (adr r3, 8003360 <__ieee754_log+0x340>)
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	f7fc ffe6 	bl	80001d4 <__adddf3>
 8003208:	4642      	mov	r2, r8
 800320a:	464b      	mov	r3, r9
 800320c:	f7fd f998 	bl	8000540 <__aeabi_dmul>
 8003210:	a355      	add	r3, pc, #340	@ (adr r3, 8003368 <__ieee754_log+0x348>)
 8003212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003216:	f7fc ffdd 	bl	80001d4 <__adddf3>
 800321a:	4642      	mov	r2, r8
 800321c:	464b      	mov	r3, r9
 800321e:	f7fd f98f 	bl	8000540 <__aeabi_dmul>
 8003222:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800322e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003232:	f7fc ffcf 	bl	80001d4 <__adddf3>
 8003236:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800323a:	3551      	adds	r5, #81	@ 0x51
 800323c:	4335      	orrs	r5, r6
 800323e:	2d00      	cmp	r5, #0
 8003240:	4680      	mov	r8, r0
 8003242:	4689      	mov	r9, r1
 8003244:	dd48      	ble.n	80032d8 <__ieee754_log+0x2b8>
 8003246:	4b50      	ldr	r3, [pc, #320]	@ (8003388 <__ieee754_log+0x368>)
 8003248:	2200      	movs	r2, #0
 800324a:	4650      	mov	r0, sl
 800324c:	4659      	mov	r1, fp
 800324e:	f7fd f977 	bl	8000540 <__aeabi_dmul>
 8003252:	4652      	mov	r2, sl
 8003254:	465b      	mov	r3, fp
 8003256:	f7fd f973 	bl	8000540 <__aeabi_dmul>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4606      	mov	r6, r0
 8003260:	460f      	mov	r7, r1
 8003262:	4640      	mov	r0, r8
 8003264:	4649      	mov	r1, r9
 8003266:	f7fc ffb5 	bl	80001d4 <__adddf3>
 800326a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800326e:	f7fd f967 	bl	8000540 <__aeabi_dmul>
 8003272:	4680      	mov	r8, r0
 8003274:	4689      	mov	r9, r1
 8003276:	b964      	cbnz	r4, 8003292 <__ieee754_log+0x272>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4630      	mov	r0, r6
 800327e:	4639      	mov	r1, r7
 8003280:	f7fc ffa6 	bl	80001d0 <__aeabi_dsub>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4650      	mov	r0, sl
 800328a:	4659      	mov	r1, fp
 800328c:	f7fc ffa0 	bl	80001d0 <__aeabi_dsub>
 8003290:	e6da      	b.n	8003048 <__ieee754_log+0x28>
 8003292:	a323      	add	r3, pc, #140	@ (adr r3, 8003320 <__ieee754_log+0x300>)
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800329c:	f7fd f950 	bl	8000540 <__aeabi_dmul>
 80032a0:	a321      	add	r3, pc, #132	@ (adr r3, 8003328 <__ieee754_log+0x308>)
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	4604      	mov	r4, r0
 80032a8:	460d      	mov	r5, r1
 80032aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032ae:	f7fd f947 	bl	8000540 <__aeabi_dmul>
 80032b2:	4642      	mov	r2, r8
 80032b4:	464b      	mov	r3, r9
 80032b6:	f7fc ff8d 	bl	80001d4 <__adddf3>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4630      	mov	r0, r6
 80032c0:	4639      	mov	r1, r7
 80032c2:	f7fc ff85 	bl	80001d0 <__aeabi_dsub>
 80032c6:	4652      	mov	r2, sl
 80032c8:	465b      	mov	r3, fp
 80032ca:	f7fc ff81 	bl	80001d0 <__aeabi_dsub>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4620      	mov	r0, r4
 80032d4:	4629      	mov	r1, r5
 80032d6:	e7d9      	b.n	800328c <__ieee754_log+0x26c>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4650      	mov	r0, sl
 80032de:	4659      	mov	r1, fp
 80032e0:	f7fc ff76 	bl	80001d0 <__aeabi_dsub>
 80032e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80032e8:	f7fd f92a 	bl	8000540 <__aeabi_dmul>
 80032ec:	4606      	mov	r6, r0
 80032ee:	460f      	mov	r7, r1
 80032f0:	2c00      	cmp	r4, #0
 80032f2:	f43f af25 	beq.w	8003140 <__ieee754_log+0x120>
 80032f6:	a30a      	add	r3, pc, #40	@ (adr r3, 8003320 <__ieee754_log+0x300>)
 80032f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003300:	f7fd f91e 	bl	8000540 <__aeabi_dmul>
 8003304:	a308      	add	r3, pc, #32	@ (adr r3, 8003328 <__ieee754_log+0x308>)
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	4604      	mov	r4, r0
 800330c:	460d      	mov	r5, r1
 800330e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003312:	e729      	b.n	8003168 <__ieee754_log+0x148>
 8003314:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8003370 <__ieee754_log+0x350>
 8003318:	e698      	b.n	800304c <__ieee754_log+0x2c>
 800331a:	bf00      	nop
 800331c:	f3af 8000 	nop.w
 8003320:	fee00000 	.word	0xfee00000
 8003324:	3fe62e42 	.word	0x3fe62e42
 8003328:	35793c76 	.word	0x35793c76
 800332c:	3dea39ef 	.word	0x3dea39ef
 8003330:	55555555 	.word	0x55555555
 8003334:	3fd55555 	.word	0x3fd55555
 8003338:	df3e5244 	.word	0xdf3e5244
 800333c:	3fc2f112 	.word	0x3fc2f112
 8003340:	96cb03de 	.word	0x96cb03de
 8003344:	3fc74664 	.word	0x3fc74664
 8003348:	94229359 	.word	0x94229359
 800334c:	3fd24924 	.word	0x3fd24924
 8003350:	55555593 	.word	0x55555593
 8003354:	3fe55555 	.word	0x3fe55555
 8003358:	d078c69f 	.word	0xd078c69f
 800335c:	3fc39a09 	.word	0x3fc39a09
 8003360:	1d8e78af 	.word	0x1d8e78af
 8003364:	3fcc71c5 	.word	0x3fcc71c5
 8003368:	9997fa04 	.word	0x9997fa04
 800336c:	3fd99999 	.word	0x3fd99999
	...
 8003378:	c3500000 	.word	0xc3500000
 800337c:	43500000 	.word	0x43500000
 8003380:	7fefffff 	.word	0x7fefffff
 8003384:	3ff00000 	.word	0x3ff00000
 8003388:	3fe00000 	.word	0x3fe00000

0800338c <_init>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	bf00      	nop
 8003390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003392:	bc08      	pop	{r3}
 8003394:	469e      	mov	lr, r3
 8003396:	4770      	bx	lr

08003398 <_fini>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	bf00      	nop
 800339c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339e:	bc08      	pop	{r3}
 80033a0:	469e      	mov	lr, r3
 80033a2:	4770      	bx	lr
