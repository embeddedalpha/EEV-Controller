
EEV_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c44  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001dcc  08001dcc  00002dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ddc  08001ddc  00003004  2**0
                  CONTENTS
  4 .ARM          00000000  08001ddc  08001ddc  00003004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ddc  08001ddc  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ddc  08001ddc  00002ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001de0  08001de0  00002de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001de4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003004  2**0
                  CONTENTS
 10 .bss          00000324  20000004  20000004  00003004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000328  20000328  00003004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000635a  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c59  00000000  00000000  0000938e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000260  00000000  00000000  00009fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001c6  00000000  00000000  0000a248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000e71  00000000  00000000  0000a40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004082  00000000  00000000  0000b27f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090302  00000000  00000000  0000f301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009f603  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000834  00000000  00000000  0009f648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0009fe7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001db4 	.word	0x08001db4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001db4 	.word	0x08001db4

080001c8 <UART4_IRQHandler>:
char TRX_Buffer[RX_Buffer_Length];

USART_Config serial;

void UART4_IRQHandler(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	if(rx_get_flag == 1)
 80001ce:	4b19      	ldr	r3, [pc, #100]	@ (8000234 <UART4_IRQHandler+0x6c>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	d128      	bne.n	8000228 <UART4_IRQHandler+0x60>
	{
		volatile uint32_t temp;

		temp = UART4 -> SR;
 80001d6:	4b18      	ldr	r3, [pc, #96]	@ (8000238 <UART4_IRQHandler+0x70>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	607b      	str	r3, [r7, #4]
		temp = UART4 -> DR;
 80001dc:	4b16      	ldr	r3, [pc, #88]	@ (8000238 <UART4_IRQHandler+0x70>)
 80001de:	685b      	ldr	r3, [r3, #4]
 80001e0:	607b      	str	r3, [r7, #4]

		serial.USART_DMA_Instance_RX.Request.Stream->CR &= ~DMA_SxCR_EN;
 80001e2:	4b16      	ldr	r3, [pc, #88]	@ (800023c <UART4_IRQHandler+0x74>)
 80001e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	4b14      	ldr	r3, [pc, #80]	@ (800023c <UART4_IRQHandler+0x74>)
 80001ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80001ec:	f022 0201 	bic.w	r2, r2, #1
 80001f0:	601a      	str	r2, [r3, #0]

		RX_Length = RX_Buffer_Length - serial.USART_DMA_Instance_RX.Request.Stream->NDTR;
 80001f2:	4b12      	ldr	r3, [pc, #72]	@ (800023c <UART4_IRQHandler+0x74>)
 80001f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80001fc:	461a      	mov	r2, r3
 80001fe:	4b10      	ldr	r3, [pc, #64]	@ (8000240 <UART4_IRQHandler+0x78>)
 8000200:	601a      	str	r2, [r3, #0]

		serial.USART_DMA_Instance_RX.Request.Stream -> NDTR &= RX_Buffer_Length;
 8000202:	4b0e      	ldr	r3, [pc, #56]	@ (800023c <UART4_IRQHandler+0x74>)
 8000204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000206:	685a      	ldr	r2, [r3, #4]
 8000208:	4b0c      	ldr	r3, [pc, #48]	@ (800023c <UART4_IRQHandler+0x74>)
 800020a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800020c:	f002 0264 	and.w	r2, r2, #100	@ 0x64
 8000210:	605a      	str	r2, [r3, #4]
		serial.USART_DMA_Instance_RX.Request.Stream -> CR |= DMA_SxCR_EN;
 8000212:	4b0a      	ldr	r3, [pc, #40]	@ (800023c <UART4_IRQHandler+0x74>)
 8000214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	4b08      	ldr	r3, [pc, #32]	@ (800023c <UART4_IRQHandler+0x74>)
 800021a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800021c:	f042 0201 	orr.w	r2, r2, #1
 8000220:	601a      	str	r2, [r3, #0]

		rx_flag = 1;
 8000222:	4b08      	ldr	r3, [pc, #32]	@ (8000244 <UART4_IRQHandler+0x7c>)
 8000224:	2201      	movs	r2, #1
 8000226:	601a      	str	r2, [r3, #0]
	}

}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	20000020 	.word	0x20000020
 8000238:	40004c00 	.word	0x40004c00
 800023c:	2000002c 	.word	0x2000002c
 8000240:	20000028 	.word	0x20000028
 8000244:	20000024 	.word	0x20000024

08000248 <DMA1_Stream0_IRQHandler>:
 * status flags for FIFO error, direct mode error, transfer error, half
 * transfer complete, and transfer complete, and clears the respective
 * interrupt flag after handling it.
 */
void DMA1_Stream0_IRQHandler(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF0)
 800024c:	4b54      	ldr	r3, [pc, #336]	@ (80003a0 <DMA1_Stream0_IRQHandler+0x158>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f003 0301 	and.w	r3, r3, #1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d01a      	beq.n	800028e <DMA1_Stream0_IRQHandler+0x46>
	{
		TIM5_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000258:	4b52      	ldr	r3, [pc, #328]	@ (80003a4 <DMA1_Stream0_IRQHandler+0x15c>)
 800025a:	2201      	movs	r2, #1
 800025c:	715a      	strb	r2, [r3, #5]
		TIM4_CH1_DMA_Flag.Fifo_Error_Flag = true;
 800025e:	4b52      	ldr	r3, [pc, #328]	@ (80003a8 <DMA1_Stream0_IRQHandler+0x160>)
 8000260:	2201      	movs	r2, #1
 8000262:	715a      	strb	r2, [r3, #5]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000264:	4b51      	ldr	r3, [pc, #324]	@ (80003ac <DMA1_Stream0_IRQHandler+0x164>)
 8000266:	2201      	movs	r2, #1
 8000268:	715a      	strb	r2, [r3, #5]
		USART5_RX_DMA_Flag.Fifo_Error_Flag = true;
 800026a:	4b51      	ldr	r3, [pc, #324]	@ (80003b0 <DMA1_Stream0_IRQHandler+0x168>)
 800026c:	2201      	movs	r2, #1
 800026e:	715a      	strb	r2, [r3, #5]
		I2C1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000270:	4b50      	ldr	r3, [pc, #320]	@ (80003b4 <DMA1_Stream0_IRQHandler+0x16c>)
 8000272:	2201      	movs	r2, #1
 8000274:	715a      	strb	r2, [r3, #5]
		SPI3_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000276:	4b50      	ldr	r3, [pc, #320]	@ (80003b8 <DMA1_Stream0_IRQHandler+0x170>)
 8000278:	2201      	movs	r2, #1
 800027a:	715a      	strb	r2, [r3, #5]
		DMA1_Stream0_Flag.Fifo_Error_Flag = true;
 800027c:	4b4f      	ldr	r3, [pc, #316]	@ (80003bc <DMA1_Stream0_IRQHandler+0x174>)
 800027e:	2201      	movs	r2, #1
 8000280:	715a      	strb	r2, [r3, #5]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000282:	4b47      	ldr	r3, [pc, #284]	@ (80003a0 <DMA1_Stream0_IRQHandler+0x158>)
 8000284:	689b      	ldr	r3, [r3, #8]
 8000286:	4a46      	ldr	r2, [pc, #280]	@ (80003a0 <DMA1_Stream0_IRQHandler+0x158>)
 8000288:	f043 0301 	orr.w	r3, r3, #1
 800028c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF0)
 800028e:	4b44      	ldr	r3, [pc, #272]	@ (80003a0 <DMA1_Stream0_IRQHandler+0x158>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f003 0304 	and.w	r3, r3, #4
 8000296:	2b00      	cmp	r3, #0
 8000298:	d01a      	beq.n	80002d0 <DMA1_Stream0_IRQHandler+0x88>
	{
		TIM5_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 800029a:	4b42      	ldr	r3, [pc, #264]	@ (80003a4 <DMA1_Stream0_IRQHandler+0x15c>)
 800029c:	2201      	movs	r2, #1
 800029e:	711a      	strb	r2, [r3, #4]
		TIM4_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 80002a0:	4b41      	ldr	r3, [pc, #260]	@ (80003a8 <DMA1_Stream0_IRQHandler+0x160>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80002a6:	4b41      	ldr	r3, [pc, #260]	@ (80003ac <DMA1_Stream0_IRQHandler+0x164>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	711a      	strb	r2, [r3, #4]
		USART5_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80002ac:	4b40      	ldr	r3, [pc, #256]	@ (80003b0 <DMA1_Stream0_IRQHandler+0x168>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	711a      	strb	r2, [r3, #4]
		I2C1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80002b2:	4b40      	ldr	r3, [pc, #256]	@ (80003b4 <DMA1_Stream0_IRQHandler+0x16c>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	711a      	strb	r2, [r3, #4]
		SPI3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80002b8:	4b3f      	ldr	r3, [pc, #252]	@ (80003b8 <DMA1_Stream0_IRQHandler+0x170>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	711a      	strb	r2, [r3, #4]
		DMA1_Stream0_Flag.Direct_Mode_Error_Flag = true;
 80002be:	4b3f      	ldr	r3, [pc, #252]	@ (80003bc <DMA1_Stream0_IRQHandler+0x174>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 80002c4:	4b36      	ldr	r3, [pc, #216]	@ (80003a0 <DMA1_Stream0_IRQHandler+0x158>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	4a35      	ldr	r2, [pc, #212]	@ (80003a0 <DMA1_Stream0_IRQHandler+0x158>)
 80002ca:	f043 0304 	orr.w	r3, r3, #4
 80002ce:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF0)
 80002d0:	4b33      	ldr	r3, [pc, #204]	@ (80003a0 <DMA1_Stream0_IRQHandler+0x158>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f003 0308 	and.w	r3, r3, #8
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d01a      	beq.n	8000312 <DMA1_Stream0_IRQHandler+0xca>
	{
		TIM5_CH3_DMA_Flag.Transfer_Error_Flag= true;
 80002dc:	4b31      	ldr	r3, [pc, #196]	@ (80003a4 <DMA1_Stream0_IRQHandler+0x15c>)
 80002de:	2201      	movs	r2, #1
 80002e0:	70da      	strb	r2, [r3, #3]
		TIM4_CH1_DMA_Flag.Transfer_Error_Flag = true;
 80002e2:	4b31      	ldr	r3, [pc, #196]	@ (80003a8 <DMA1_Stream0_IRQHandler+0x160>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 80002e8:	4b30      	ldr	r3, [pc, #192]	@ (80003ac <DMA1_Stream0_IRQHandler+0x164>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	70da      	strb	r2, [r3, #3]
		USART5_RX_DMA_Flag.Transfer_Error_Flag = true;
 80002ee:	4b30      	ldr	r3, [pc, #192]	@ (80003b0 <DMA1_Stream0_IRQHandler+0x168>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	70da      	strb	r2, [r3, #3]
		I2C1_RX_DMA_Flag.Transfer_Error_Flag = true;
 80002f4:	4b2f      	ldr	r3, [pc, #188]	@ (80003b4 <DMA1_Stream0_IRQHandler+0x16c>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	70da      	strb	r2, [r3, #3]
		SPI3_RX_DMA_Flag.Transfer_Error_Flag = true;
 80002fa:	4b2f      	ldr	r3, [pc, #188]	@ (80003b8 <DMA1_Stream0_IRQHandler+0x170>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	70da      	strb	r2, [r3, #3]
		DMA1_Stream0_Flag.Transfer_Error_Flag = true;
 8000300:	4b2e      	ldr	r3, [pc, #184]	@ (80003bc <DMA1_Stream0_IRQHandler+0x174>)
 8000302:	2201      	movs	r2, #1
 8000304:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000306:	4b26      	ldr	r3, [pc, #152]	@ (80003a0 <DMA1_Stream0_IRQHandler+0x158>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	4a25      	ldr	r2, [pc, #148]	@ (80003a0 <DMA1_Stream0_IRQHandler+0x158>)
 800030c:	f043 0308 	orr.w	r3, r3, #8
 8000310:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF0)
 8000312:	4b23      	ldr	r3, [pc, #140]	@ (80003a0 <DMA1_Stream0_IRQHandler+0x158>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f003 0310 	and.w	r3, r3, #16
 800031a:	2b00      	cmp	r3, #0
 800031c:	d01a      	beq.n	8000354 <DMA1_Stream0_IRQHandler+0x10c>
	{
		TIM5_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800031e:	4b21      	ldr	r3, [pc, #132]	@ (80003a4 <DMA1_Stream0_IRQHandler+0x15c>)
 8000320:	2201      	movs	r2, #1
 8000322:	709a      	strb	r2, [r3, #2]
		TIM4_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000324:	4b20      	ldr	r3, [pc, #128]	@ (80003a8 <DMA1_Stream0_IRQHandler+0x160>)
 8000326:	2201      	movs	r2, #1
 8000328:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800032a:	4b20      	ldr	r3, [pc, #128]	@ (80003ac <DMA1_Stream0_IRQHandler+0x164>)
 800032c:	2201      	movs	r2, #1
 800032e:	709a      	strb	r2, [r3, #2]
		USART5_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000330:	4b1f      	ldr	r3, [pc, #124]	@ (80003b0 <DMA1_Stream0_IRQHandler+0x168>)
 8000332:	2201      	movs	r2, #1
 8000334:	709a      	strb	r2, [r3, #2]
		I2C1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000336:	4b1f      	ldr	r3, [pc, #124]	@ (80003b4 <DMA1_Stream0_IRQHandler+0x16c>)
 8000338:	2201      	movs	r2, #1
 800033a:	709a      	strb	r2, [r3, #2]
		SPI3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800033c:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <DMA1_Stream0_IRQHandler+0x170>)
 800033e:	2201      	movs	r2, #1
 8000340:	709a      	strb	r2, [r3, #2]
		DMA1_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8000342:	4b1e      	ldr	r3, [pc, #120]	@ (80003bc <DMA1_Stream0_IRQHandler+0x174>)
 8000344:	2201      	movs	r2, #1
 8000346:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000348:	4b15      	ldr	r3, [pc, #84]	@ (80003a0 <DMA1_Stream0_IRQHandler+0x158>)
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	4a14      	ldr	r2, [pc, #80]	@ (80003a0 <DMA1_Stream0_IRQHandler+0x158>)
 800034e:	f043 0310 	orr.w	r3, r3, #16
 8000352:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF0)
 8000354:	4b12      	ldr	r3, [pc, #72]	@ (80003a0 <DMA1_Stream0_IRQHandler+0x158>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f003 0320 	and.w	r3, r3, #32
 800035c:	2b00      	cmp	r3, #0
 800035e:	d01a      	beq.n	8000396 <DMA1_Stream0_IRQHandler+0x14e>
	{
		TIM5_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000360:	4b10      	ldr	r3, [pc, #64]	@ (80003a4 <DMA1_Stream0_IRQHandler+0x15c>)
 8000362:	2201      	movs	r2, #1
 8000364:	705a      	strb	r2, [r3, #1]
		TIM4_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8000366:	4b10      	ldr	r3, [pc, #64]	@ (80003a8 <DMA1_Stream0_IRQHandler+0x160>)
 8000368:	2201      	movs	r2, #1
 800036a:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800036c:	4b0f      	ldr	r3, [pc, #60]	@ (80003ac <DMA1_Stream0_IRQHandler+0x164>)
 800036e:	2201      	movs	r2, #1
 8000370:	705a      	strb	r2, [r3, #1]
		USART5_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000372:	4b0f      	ldr	r3, [pc, #60]	@ (80003b0 <DMA1_Stream0_IRQHandler+0x168>)
 8000374:	2201      	movs	r2, #1
 8000376:	705a      	strb	r2, [r3, #1]
		I2C1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000378:	4b0e      	ldr	r3, [pc, #56]	@ (80003b4 <DMA1_Stream0_IRQHandler+0x16c>)
 800037a:	2201      	movs	r2, #1
 800037c:	705a      	strb	r2, [r3, #1]
		SPI3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800037e:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <DMA1_Stream0_IRQHandler+0x170>)
 8000380:	2201      	movs	r2, #1
 8000382:	705a      	strb	r2, [r3, #1]
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
 8000384:	4b0d      	ldr	r3, [pc, #52]	@ (80003bc <DMA1_Stream0_IRQHandler+0x174>)
 8000386:	2201      	movs	r2, #1
 8000388:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 800038a:	4b05      	ldr	r3, [pc, #20]	@ (80003a0 <DMA1_Stream0_IRQHandler+0x158>)
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	4a04      	ldr	r2, [pc, #16]	@ (80003a0 <DMA1_Stream0_IRQHandler+0x158>)
 8000390:	f043 0320 	orr.w	r3, r3, #32
 8000394:	6093      	str	r3, [r2, #8]
	}
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	40026000 	.word	0x40026000
 80003a4:	20000258 	.word	0x20000258
 80003a8:	20000238 	.word	0x20000238
 80003ac:	20000178 	.word	0x20000178
 80003b0:	20000150 	.word	0x20000150
 80003b4:	200000c8 	.word	0x200000c8
 80003b8:	200000f8 	.word	0x200000f8
 80003bc:	200002a0 	.word	0x200002a0

080003c0 <DMA1_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream1_IRQHandler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF1)
 80003c4:	4b45      	ldr	r3, [pc, #276]	@ (80004dc <DMA1_Stream1_IRQHandler+0x11c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d014      	beq.n	80003fa <DMA1_Stream1_IRQHandler+0x3a>
	{
		TIM2_CH3_DMA_Flag.Fifo_Error_Flag = true;
 80003d0:	4b43      	ldr	r3, [pc, #268]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x120>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	715a      	strb	r2, [r3, #5]
		TIM6_UP_DMA_Flag.Fifo_Error_Flag = true;
 80003d6:	4b43      	ldr	r3, [pc, #268]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x124>)
 80003d8:	2201      	movs	r2, #1
 80003da:	715a      	strb	r2, [r3, #5]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 80003dc:	4b42      	ldr	r3, [pc, #264]	@ (80004e8 <DMA1_Stream1_IRQHandler+0x128>)
 80003de:	2201      	movs	r2, #1
 80003e0:	715a      	strb	r2, [r3, #5]
		USART3_RX_DMA_Flag.Fifo_Error_Flag = true;
 80003e2:	4b42      	ldr	r3, [pc, #264]	@ (80004ec <DMA1_Stream1_IRQHandler+0x12c>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	715a      	strb	r2, [r3, #5]
		DMA1_Stream1_Flag.Fifo_Error_Flag = true;
 80003e8:	4b41      	ldr	r3, [pc, #260]	@ (80004f0 <DMA1_Stream1_IRQHandler+0x130>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	715a      	strb	r2, [r3, #5]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80003ee:	4b3b      	ldr	r3, [pc, #236]	@ (80004dc <DMA1_Stream1_IRQHandler+0x11c>)
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	4a3a      	ldr	r2, [pc, #232]	@ (80004dc <DMA1_Stream1_IRQHandler+0x11c>)
 80003f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003f8:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF1)
 80003fa:	4b38      	ldr	r3, [pc, #224]	@ (80004dc <DMA1_Stream1_IRQHandler+0x11c>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000402:	2b00      	cmp	r3, #0
 8000404:	d014      	beq.n	8000430 <DMA1_Stream1_IRQHandler+0x70>
	{
		TIM2_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000406:	4b36      	ldr	r3, [pc, #216]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x120>)
 8000408:	2201      	movs	r2, #1
 800040a:	711a      	strb	r2, [r3, #4]
		TIM6_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 800040c:	4b35      	ldr	r3, [pc, #212]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x124>)
 800040e:	2201      	movs	r2, #1
 8000410:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000412:	4b35      	ldr	r3, [pc, #212]	@ (80004e8 <DMA1_Stream1_IRQHandler+0x128>)
 8000414:	2201      	movs	r2, #1
 8000416:	711a      	strb	r2, [r3, #4]
		USART3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000418:	4b34      	ldr	r3, [pc, #208]	@ (80004ec <DMA1_Stream1_IRQHandler+0x12c>)
 800041a:	2201      	movs	r2, #1
 800041c:	711a      	strb	r2, [r3, #4]
		DMA1_Stream1_Flag.Direct_Mode_Error_Flag = true;
 800041e:	4b34      	ldr	r3, [pc, #208]	@ (80004f0 <DMA1_Stream1_IRQHandler+0x130>)
 8000420:	2201      	movs	r2, #1
 8000422:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000424:	4b2d      	ldr	r3, [pc, #180]	@ (80004dc <DMA1_Stream1_IRQHandler+0x11c>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	4a2c      	ldr	r2, [pc, #176]	@ (80004dc <DMA1_Stream1_IRQHandler+0x11c>)
 800042a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800042e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF1)
 8000430:	4b2a      	ldr	r3, [pc, #168]	@ (80004dc <DMA1_Stream1_IRQHandler+0x11c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000438:	2b00      	cmp	r3, #0
 800043a:	d014      	beq.n	8000466 <DMA1_Stream1_IRQHandler+0xa6>
	{
		TIM2_CH3_DMA_Flag.Transfer_Error_Flag = true;
 800043c:	4b28      	ldr	r3, [pc, #160]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x120>)
 800043e:	2201      	movs	r2, #1
 8000440:	70da      	strb	r2, [r3, #3]
		TIM6_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000442:	4b28      	ldr	r3, [pc, #160]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x124>)
 8000444:	2201      	movs	r2, #1
 8000446:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000448:	4b27      	ldr	r3, [pc, #156]	@ (80004e8 <DMA1_Stream1_IRQHandler+0x128>)
 800044a:	2201      	movs	r2, #1
 800044c:	70da      	strb	r2, [r3, #3]
		USART3_RX_DMA_Flag.Transfer_Error_Flag = true;
 800044e:	4b27      	ldr	r3, [pc, #156]	@ (80004ec <DMA1_Stream1_IRQHandler+0x12c>)
 8000450:	2201      	movs	r2, #1
 8000452:	70da      	strb	r2, [r3, #3]
		DMA1_Stream1_Flag.Transfer_Error_Flag = true;
 8000454:	4b26      	ldr	r3, [pc, #152]	@ (80004f0 <DMA1_Stream1_IRQHandler+0x130>)
 8000456:	2201      	movs	r2, #1
 8000458:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 800045a:	4b20      	ldr	r3, [pc, #128]	@ (80004dc <DMA1_Stream1_IRQHandler+0x11c>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	4a1f      	ldr	r2, [pc, #124]	@ (80004dc <DMA1_Stream1_IRQHandler+0x11c>)
 8000460:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000464:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF1)
 8000466:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <DMA1_Stream1_IRQHandler+0x11c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800046e:	2b00      	cmp	r3, #0
 8000470:	d014      	beq.n	800049c <DMA1_Stream1_IRQHandler+0xdc>
	{
		TIM2_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000472:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x120>)
 8000474:	2201      	movs	r2, #1
 8000476:	709a      	strb	r2, [r3, #2]
		TIM6_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000478:	4b1a      	ldr	r3, [pc, #104]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x124>)
 800047a:	2201      	movs	r2, #1
 800047c:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800047e:	4b1a      	ldr	r3, [pc, #104]	@ (80004e8 <DMA1_Stream1_IRQHandler+0x128>)
 8000480:	2201      	movs	r2, #1
 8000482:	709a      	strb	r2, [r3, #2]
		USART3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000484:	4b19      	ldr	r3, [pc, #100]	@ (80004ec <DMA1_Stream1_IRQHandler+0x12c>)
 8000486:	2201      	movs	r2, #1
 8000488:	709a      	strb	r2, [r3, #2]
		DMA1_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 800048a:	4b19      	ldr	r3, [pc, #100]	@ (80004f0 <DMA1_Stream1_IRQHandler+0x130>)
 800048c:	2201      	movs	r2, #1
 800048e:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000490:	4b12      	ldr	r3, [pc, #72]	@ (80004dc <DMA1_Stream1_IRQHandler+0x11c>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	4a11      	ldr	r2, [pc, #68]	@ (80004dc <DMA1_Stream1_IRQHandler+0x11c>)
 8000496:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800049a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF1)
 800049c:	4b0f      	ldr	r3, [pc, #60]	@ (80004dc <DMA1_Stream1_IRQHandler+0x11c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d014      	beq.n	80004d2 <DMA1_Stream1_IRQHandler+0x112>
	{
		TIM2_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 80004a8:	4b0d      	ldr	r3, [pc, #52]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x120>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	705a      	strb	r2, [r3, #1]
		TIM6_UP_DMA_Flag.Transfer_Complete_Flag = true;
 80004ae:	4b0d      	ldr	r3, [pc, #52]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x124>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <DMA1_Stream1_IRQHandler+0x128>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	705a      	strb	r2, [r3, #1]
		USART3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80004ba:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <DMA1_Stream1_IRQHandler+0x12c>)
 80004bc:	2201      	movs	r2, #1
 80004be:	705a      	strb	r2, [r3, #1]
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
 80004c0:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <DMA1_Stream1_IRQHandler+0x130>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 80004c6:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <DMA1_Stream1_IRQHandler+0x11c>)
 80004c8:	689b      	ldr	r3, [r3, #8]
 80004ca:	4a04      	ldr	r2, [pc, #16]	@ (80004dc <DMA1_Stream1_IRQHandler+0x11c>)
 80004cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004d0:	6093      	str	r3, [r2, #8]
	}
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	40026000 	.word	0x40026000
 80004e0:	20000208 	.word	0x20000208
 80004e4:	20000268 	.word	0x20000268
 80004e8:	20000170 	.word	0x20000170
 80004ec:	20000138 	.word	0x20000138
 80004f0:	200002a8 	.word	0x200002a8

080004f4 <DMA1_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream2_IRQHandler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF2)
 80004f8:	4b2f      	ldr	r3, [pc, #188]	@ (80005b8 <DMA1_Stream2_IRQHandler+0xc4>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000500:	2b00      	cmp	r3, #0
 8000502:	d00b      	beq.n	800051c <DMA1_Stream2_IRQHandler+0x28>
	{
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000504:	4b2d      	ldr	r3, [pc, #180]	@ (80005bc <DMA1_Stream2_IRQHandler+0xc8>)
 8000506:	2201      	movs	r2, #1
 8000508:	715a      	strb	r2, [r3, #5]
		DMA1_Stream2_Flag.Fifo_Error_Flag = true;
 800050a:	4b2d      	ldr	r3, [pc, #180]	@ (80005c0 <DMA1_Stream2_IRQHandler+0xcc>)
 800050c:	2201      	movs	r2, #1
 800050e:	715a      	strb	r2, [r3, #5]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000510:	4b29      	ldr	r3, [pc, #164]	@ (80005b8 <DMA1_Stream2_IRQHandler+0xc4>)
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	4a28      	ldr	r2, [pc, #160]	@ (80005b8 <DMA1_Stream2_IRQHandler+0xc4>)
 8000516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800051a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF2)
 800051c:	4b26      	ldr	r3, [pc, #152]	@ (80005b8 <DMA1_Stream2_IRQHandler+0xc4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000524:	2b00      	cmp	r3, #0
 8000526:	d00b      	beq.n	8000540 <DMA1_Stream2_IRQHandler+0x4c>
	{
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000528:	4b24      	ldr	r3, [pc, #144]	@ (80005bc <DMA1_Stream2_IRQHandler+0xc8>)
 800052a:	2201      	movs	r2, #1
 800052c:	711a      	strb	r2, [r3, #4]
		DMA1_Stream2_Flag.Direct_Mode_Error_Flag = true;
 800052e:	4b24      	ldr	r3, [pc, #144]	@ (80005c0 <DMA1_Stream2_IRQHandler+0xcc>)
 8000530:	2201      	movs	r2, #1
 8000532:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8000534:	4b20      	ldr	r3, [pc, #128]	@ (80005b8 <DMA1_Stream2_IRQHandler+0xc4>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	4a1f      	ldr	r2, [pc, #124]	@ (80005b8 <DMA1_Stream2_IRQHandler+0xc4>)
 800053a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800053e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF2)
 8000540:	4b1d      	ldr	r3, [pc, #116]	@ (80005b8 <DMA1_Stream2_IRQHandler+0xc4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000548:	2b00      	cmp	r3, #0
 800054a:	d00b      	beq.n	8000564 <DMA1_Stream2_IRQHandler+0x70>
	{
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 800054c:	4b1b      	ldr	r3, [pc, #108]	@ (80005bc <DMA1_Stream2_IRQHandler+0xc8>)
 800054e:	2201      	movs	r2, #1
 8000550:	70da      	strb	r2, [r3, #3]
		DMA1_Stream2_Flag.Transfer_Error_Flag = true;
 8000552:	4b1b      	ldr	r3, [pc, #108]	@ (80005c0 <DMA1_Stream2_IRQHandler+0xcc>)
 8000554:	2201      	movs	r2, #1
 8000556:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8000558:	4b17      	ldr	r3, [pc, #92]	@ (80005b8 <DMA1_Stream2_IRQHandler+0xc4>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	4a16      	ldr	r2, [pc, #88]	@ (80005b8 <DMA1_Stream2_IRQHandler+0xc4>)
 800055e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000562:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF2)
 8000564:	4b14      	ldr	r3, [pc, #80]	@ (80005b8 <DMA1_Stream2_IRQHandler+0xc4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800056c:	2b00      	cmp	r3, #0
 800056e:	d00b      	beq.n	8000588 <DMA1_Stream2_IRQHandler+0x94>
	{
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000570:	4b12      	ldr	r3, [pc, #72]	@ (80005bc <DMA1_Stream2_IRQHandler+0xc8>)
 8000572:	2201      	movs	r2, #1
 8000574:	709a      	strb	r2, [r3, #2]
		DMA1_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8000576:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <DMA1_Stream2_IRQHandler+0xcc>)
 8000578:	2201      	movs	r2, #1
 800057a:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 800057c:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <DMA1_Stream2_IRQHandler+0xc4>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	4a0d      	ldr	r2, [pc, #52]	@ (80005b8 <DMA1_Stream2_IRQHandler+0xc4>)
 8000582:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000586:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF2)
 8000588:	4b0b      	ldr	r3, [pc, #44]	@ (80005b8 <DMA1_Stream2_IRQHandler+0xc4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000590:	2b00      	cmp	r3, #0
 8000592:	d00b      	beq.n	80005ac <DMA1_Stream2_IRQHandler+0xb8>
	{
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000594:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <DMA1_Stream2_IRQHandler+0xc8>)
 8000596:	2201      	movs	r2, #1
 8000598:	705a      	strb	r2, [r3, #1]
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <DMA1_Stream2_IRQHandler+0xcc>)
 800059c:	2201      	movs	r2, #1
 800059e:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80005a0:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <DMA1_Stream2_IRQHandler+0xc4>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <DMA1_Stream2_IRQHandler+0xc4>)
 80005a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005aa:	6093      	str	r3, [r2, #8]
	}
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40026000 	.word	0x40026000
 80005bc:	20000140 	.word	0x20000140
 80005c0:	200002b0 	.word	0x200002b0

080005c4 <DMA1_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream3_IRQHandler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF3)
 80005c8:	4b54      	ldr	r3, [pc, #336]	@ (800071c <DMA1_Stream3_IRQHandler+0x158>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d01a      	beq.n	800060a <DMA1_Stream3_IRQHandler+0x46>
	{
		TIM5_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 80005d4:	4b52      	ldr	r3, [pc, #328]	@ (8000720 <DMA1_Stream3_IRQHandler+0x15c>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	715a      	strb	r2, [r3, #5]
		TIM4_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80005da:	4b52      	ldr	r3, [pc, #328]	@ (8000724 <DMA1_Stream3_IRQHandler+0x160>)
 80005dc:	2201      	movs	r2, #1
 80005de:	715a      	strb	r2, [r3, #5]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 80005e0:	4b51      	ldr	r3, [pc, #324]	@ (8000728 <DMA1_Stream3_IRQHandler+0x164>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	715a      	strb	r2, [r3, #5]
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80005e6:	4b51      	ldr	r3, [pc, #324]	@ (800072c <DMA1_Stream3_IRQHandler+0x168>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	715a      	strb	r2, [r3, #5]
		I2S2_RX_DMA_Flag.Fifo_Error_Flag = true;
 80005ec:	4b50      	ldr	r3, [pc, #320]	@ (8000730 <DMA1_Stream3_IRQHandler+0x16c>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	715a      	strb	r2, [r3, #5]
		SPI2_RX_DMA_Flag.Fifo_Error_Flag = true;
 80005f2:	4b50      	ldr	r3, [pc, #320]	@ (8000734 <DMA1_Stream3_IRQHandler+0x170>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	715a      	strb	r2, [r3, #5]
		DMA1_Stream3_Flag.Fifo_Error_Flag = true;
 80005f8:	4b4f      	ldr	r3, [pc, #316]	@ (8000738 <DMA1_Stream3_IRQHandler+0x174>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	715a      	strb	r2, [r3, #5]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80005fe:	4b47      	ldr	r3, [pc, #284]	@ (800071c <DMA1_Stream3_IRQHandler+0x158>)
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	4a46      	ldr	r2, [pc, #280]	@ (800071c <DMA1_Stream3_IRQHandler+0x158>)
 8000604:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000608:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF3)
 800060a:	4b44      	ldr	r3, [pc, #272]	@ (800071c <DMA1_Stream3_IRQHandler+0x158>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01a      	beq.n	800064c <DMA1_Stream3_IRQHandler+0x88>
	{
		TIM5_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000616:	4b42      	ldr	r3, [pc, #264]	@ (8000720 <DMA1_Stream3_IRQHandler+0x15c>)
 8000618:	2201      	movs	r2, #1
 800061a:	711a      	strb	r2, [r3, #4]
		TIM4_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800061c:	4b41      	ldr	r3, [pc, #260]	@ (8000724 <DMA1_Stream3_IRQHandler+0x160>)
 800061e:	2201      	movs	r2, #1
 8000620:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000622:	4b41      	ldr	r3, [pc, #260]	@ (8000728 <DMA1_Stream3_IRQHandler+0x164>)
 8000624:	2201      	movs	r2, #1
 8000626:	711a      	strb	r2, [r3, #4]
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000628:	4b40      	ldr	r3, [pc, #256]	@ (800072c <DMA1_Stream3_IRQHandler+0x168>)
 800062a:	2201      	movs	r2, #1
 800062c:	711a      	strb	r2, [r3, #4]
		I2S2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800062e:	4b40      	ldr	r3, [pc, #256]	@ (8000730 <DMA1_Stream3_IRQHandler+0x16c>)
 8000630:	2201      	movs	r2, #1
 8000632:	711a      	strb	r2, [r3, #4]
		SPI2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000634:	4b3f      	ldr	r3, [pc, #252]	@ (8000734 <DMA1_Stream3_IRQHandler+0x170>)
 8000636:	2201      	movs	r2, #1
 8000638:	711a      	strb	r2, [r3, #4]
		DMA1_Stream3_Flag.Direct_Mode_Error_Flag = true;
 800063a:	4b3f      	ldr	r3, [pc, #252]	@ (8000738 <DMA1_Stream3_IRQHandler+0x174>)
 800063c:	2201      	movs	r2, #1
 800063e:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8000640:	4b36      	ldr	r3, [pc, #216]	@ (800071c <DMA1_Stream3_IRQHandler+0x158>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	4a35      	ldr	r2, [pc, #212]	@ (800071c <DMA1_Stream3_IRQHandler+0x158>)
 8000646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800064a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF3)
 800064c:	4b33      	ldr	r3, [pc, #204]	@ (800071c <DMA1_Stream3_IRQHandler+0x158>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000654:	2b00      	cmp	r3, #0
 8000656:	d01a      	beq.n	800068e <DMA1_Stream3_IRQHandler+0xca>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000658:	4b31      	ldr	r3, [pc, #196]	@ (8000720 <DMA1_Stream3_IRQHandler+0x15c>)
 800065a:	2201      	movs	r2, #1
 800065c:	70da      	strb	r2, [r3, #3]
		TIM4_CH2_DMA_Flag.Transfer_Error_Flag = true;
 800065e:	4b31      	ldr	r3, [pc, #196]	@ (8000724 <DMA1_Stream3_IRQHandler+0x160>)
 8000660:	2201      	movs	r2, #1
 8000662:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000664:	4b30      	ldr	r3, [pc, #192]	@ (8000728 <DMA1_Stream3_IRQHandler+0x164>)
 8000666:	2201      	movs	r2, #1
 8000668:	70da      	strb	r2, [r3, #3]
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 800066a:	4b30      	ldr	r3, [pc, #192]	@ (800072c <DMA1_Stream3_IRQHandler+0x168>)
 800066c:	2201      	movs	r2, #1
 800066e:	70da      	strb	r2, [r3, #3]
		I2S2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000670:	4b2f      	ldr	r3, [pc, #188]	@ (8000730 <DMA1_Stream3_IRQHandler+0x16c>)
 8000672:	2201      	movs	r2, #1
 8000674:	70da      	strb	r2, [r3, #3]
		SPI2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000676:	4b2f      	ldr	r3, [pc, #188]	@ (8000734 <DMA1_Stream3_IRQHandler+0x170>)
 8000678:	2201      	movs	r2, #1
 800067a:	70da      	strb	r2, [r3, #3]
		DMA1_Stream3_Flag.Transfer_Error_Flag = true;
 800067c:	4b2e      	ldr	r3, [pc, #184]	@ (8000738 <DMA1_Stream3_IRQHandler+0x174>)
 800067e:	2201      	movs	r2, #1
 8000680:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8000682:	4b26      	ldr	r3, [pc, #152]	@ (800071c <DMA1_Stream3_IRQHandler+0x158>)
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	4a25      	ldr	r2, [pc, #148]	@ (800071c <DMA1_Stream3_IRQHandler+0x158>)
 8000688:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800068c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF3)
 800068e:	4b23      	ldr	r3, [pc, #140]	@ (800071c <DMA1_Stream3_IRQHandler+0x158>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000696:	2b00      	cmp	r3, #0
 8000698:	d01a      	beq.n	80006d0 <DMA1_Stream3_IRQHandler+0x10c>
	{
		TIM5_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800069a:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <DMA1_Stream3_IRQHandler+0x15c>)
 800069c:	2201      	movs	r2, #1
 800069e:	709a      	strb	r2, [r3, #2]
		TIM4_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80006a0:	4b20      	ldr	r3, [pc, #128]	@ (8000724 <DMA1_Stream3_IRQHandler+0x160>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80006a6:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <DMA1_Stream3_IRQHandler+0x164>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	709a      	strb	r2, [r3, #2]
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <DMA1_Stream3_IRQHandler+0x168>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	709a      	strb	r2, [r3, #2]
		I2S2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <DMA1_Stream3_IRQHandler+0x16c>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	709a      	strb	r2, [r3, #2]
		SPI2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80006b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <DMA1_Stream3_IRQHandler+0x170>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	709a      	strb	r2, [r3, #2]
		DMA1_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 80006be:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <DMA1_Stream3_IRQHandler+0x174>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 80006c4:	4b15      	ldr	r3, [pc, #84]	@ (800071c <DMA1_Stream3_IRQHandler+0x158>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	4a14      	ldr	r2, [pc, #80]	@ (800071c <DMA1_Stream3_IRQHandler+0x158>)
 80006ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006ce:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF3)
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <DMA1_Stream3_IRQHandler+0x158>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d01a      	beq.n	8000712 <DMA1_Stream3_IRQHandler+0x14e>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 80006dc:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <DMA1_Stream3_IRQHandler+0x15c>)
 80006de:	2201      	movs	r2, #1
 80006e0:	705a      	strb	r2, [r3, #1]
		TIM4_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80006e2:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <DMA1_Stream3_IRQHandler+0x160>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <DMA1_Stream3_IRQHandler+0x164>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	705a      	strb	r2, [r3, #1]
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <DMA1_Stream3_IRQHandler+0x168>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	705a      	strb	r2, [r3, #1]
		I2S2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <DMA1_Stream3_IRQHandler+0x16c>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	705a      	strb	r2, [r3, #1]
		SPI2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <DMA1_Stream3_IRQHandler+0x170>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	705a      	strb	r2, [r3, #1]
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
 8000700:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <DMA1_Stream3_IRQHandler+0x174>)
 8000702:	2201      	movs	r2, #1
 8000704:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8000706:	4b05      	ldr	r3, [pc, #20]	@ (800071c <DMA1_Stream3_IRQHandler+0x158>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	4a04      	ldr	r2, [pc, #16]	@ (800071c <DMA1_Stream3_IRQHandler+0x158>)
 800070c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000710:	6093      	str	r3, [r2, #8]
	}
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	40026000 	.word	0x40026000
 8000720:	20000260 	.word	0x20000260
 8000724:	20000240 	.word	0x20000240
 8000728:	20000170 	.word	0x20000170
 800072c:	20000140 	.word	0x20000140
 8000730:	200000b0 	.word	0x200000b0
 8000734:	200000f0 	.word	0x200000f0
 8000738:	200002b8 	.word	0x200002b8

0800073c <DMA1_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream4_IRQHandler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF4)
 8000740:	4b54      	ldr	r3, [pc, #336]	@ (8000894 <DMA1_Stream4_IRQHandler+0x158>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	2b00      	cmp	r3, #0
 800074a:	d01a      	beq.n	8000782 <DMA1_Stream4_IRQHandler+0x46>
	{
		TIM5_CH2_DMA_Flag.Fifo_Error_Flag = true;
 800074c:	4b52      	ldr	r3, [pc, #328]	@ (8000898 <DMA1_Stream4_IRQHandler+0x15c>)
 800074e:	2201      	movs	r2, #1
 8000750:	715a      	strb	r2, [r3, #5]
		TIM3_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000752:	4b52      	ldr	r3, [pc, #328]	@ (800089c <DMA1_Stream4_IRQHandler+0x160>)
 8000754:	2201      	movs	r2, #1
 8000756:	715a      	strb	r2, [r3, #5]
		USART4_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000758:	4b51      	ldr	r3, [pc, #324]	@ (80008a0 <DMA1_Stream4_IRQHandler+0x164>)
 800075a:	2201      	movs	r2, #1
 800075c:	715a      	strb	r2, [r3, #5]
		I2C3_TX_DMA_Flag.Fifo_Error_Flag = true;
 800075e:	4b51      	ldr	r3, [pc, #324]	@ (80008a4 <DMA1_Stream4_IRQHandler+0x168>)
 8000760:	2201      	movs	r2, #1
 8000762:	715a      	strb	r2, [r3, #5]
		I2S2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000764:	4b50      	ldr	r3, [pc, #320]	@ (80008a8 <DMA1_Stream4_IRQHandler+0x16c>)
 8000766:	2201      	movs	r2, #1
 8000768:	715a      	strb	r2, [r3, #5]
		SPI2_TX_DMA_Flag.Fifo_Error_Flag = true;
 800076a:	4b50      	ldr	r3, [pc, #320]	@ (80008ac <DMA1_Stream4_IRQHandler+0x170>)
 800076c:	2201      	movs	r2, #1
 800076e:	715a      	strb	r2, [r3, #5]
		DMA1_Stream4_Flag.Fifo_Error_Flag = true;
 8000770:	4b4f      	ldr	r3, [pc, #316]	@ (80008b0 <DMA1_Stream4_IRQHandler+0x174>)
 8000772:	2201      	movs	r2, #1
 8000774:	715a      	strb	r2, [r3, #5]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF4;
 8000776:	4b47      	ldr	r3, [pc, #284]	@ (8000894 <DMA1_Stream4_IRQHandler+0x158>)
 8000778:	68db      	ldr	r3, [r3, #12]
 800077a:	4a46      	ldr	r2, [pc, #280]	@ (8000894 <DMA1_Stream4_IRQHandler+0x158>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF4)
 8000782:	4b44      	ldr	r3, [pc, #272]	@ (8000894 <DMA1_Stream4_IRQHandler+0x158>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	2b00      	cmp	r3, #0
 800078c:	d01a      	beq.n	80007c4 <DMA1_Stream4_IRQHandler+0x88>
	{
		TIM5_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800078e:	4b42      	ldr	r3, [pc, #264]	@ (8000898 <DMA1_Stream4_IRQHandler+0x15c>)
 8000790:	2201      	movs	r2, #1
 8000792:	711a      	strb	r2, [r3, #4]
		TIM3_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000794:	4b41      	ldr	r3, [pc, #260]	@ (800089c <DMA1_Stream4_IRQHandler+0x160>)
 8000796:	2201      	movs	r2, #1
 8000798:	711a      	strb	r2, [r3, #4]
		USART4_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800079a:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <DMA1_Stream4_IRQHandler+0x164>)
 800079c:	2201      	movs	r2, #1
 800079e:	711a      	strb	r2, [r3, #4]
		I2C3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80007a0:	4b40      	ldr	r3, [pc, #256]	@ (80008a4 <DMA1_Stream4_IRQHandler+0x168>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	711a      	strb	r2, [r3, #4]
		I2S2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80007a6:	4b40      	ldr	r3, [pc, #256]	@ (80008a8 <DMA1_Stream4_IRQHandler+0x16c>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	711a      	strb	r2, [r3, #4]
		SPI2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80007ac:	4b3f      	ldr	r3, [pc, #252]	@ (80008ac <DMA1_Stream4_IRQHandler+0x170>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	711a      	strb	r2, [r3, #4]
		DMA1_Stream4_Flag.Direct_Mode_Error_Flag = true;
 80007b2:	4b3f      	ldr	r3, [pc, #252]	@ (80008b0 <DMA1_Stream4_IRQHandler+0x174>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80007b8:	4b36      	ldr	r3, [pc, #216]	@ (8000894 <DMA1_Stream4_IRQHandler+0x158>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	4a35      	ldr	r2, [pc, #212]	@ (8000894 <DMA1_Stream4_IRQHandler+0x158>)
 80007be:	f043 0304 	orr.w	r3, r3, #4
 80007c2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF4)
 80007c4:	4b33      	ldr	r3, [pc, #204]	@ (8000894 <DMA1_Stream4_IRQHandler+0x158>)
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	f003 0308 	and.w	r3, r3, #8
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d01a      	beq.n	8000806 <DMA1_Stream4_IRQHandler+0xca>
	{
		TIM5_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80007d0:	4b31      	ldr	r3, [pc, #196]	@ (8000898 <DMA1_Stream4_IRQHandler+0x15c>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	70da      	strb	r2, [r3, #3]
		TIM3_CH1_DMA_Flag.Transfer_Error_Flag = true;
 80007d6:	4b31      	ldr	r3, [pc, #196]	@ (800089c <DMA1_Stream4_IRQHandler+0x160>)
 80007d8:	2201      	movs	r2, #1
 80007da:	70da      	strb	r2, [r3, #3]
		USART4_TX_DMA_Flag.Transfer_Error_Flag = true;
 80007dc:	4b30      	ldr	r3, [pc, #192]	@ (80008a0 <DMA1_Stream4_IRQHandler+0x164>)
 80007de:	2201      	movs	r2, #1
 80007e0:	70da      	strb	r2, [r3, #3]
		I2C3_TX_DMA_Flag.Transfer_Error_Flag = true;
 80007e2:	4b30      	ldr	r3, [pc, #192]	@ (80008a4 <DMA1_Stream4_IRQHandler+0x168>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	70da      	strb	r2, [r3, #3]
		I2S2_TX_DMA_Flag.Transfer_Error_Flag = true;
 80007e8:	4b2f      	ldr	r3, [pc, #188]	@ (80008a8 <DMA1_Stream4_IRQHandler+0x16c>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	70da      	strb	r2, [r3, #3]
		SPI2_TX_DMA_Flag.Transfer_Error_Flag = true;
 80007ee:	4b2f      	ldr	r3, [pc, #188]	@ (80008ac <DMA1_Stream4_IRQHandler+0x170>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	70da      	strb	r2, [r3, #3]
		DMA1_Stream4_Flag.Transfer_Error_Flag = true;
 80007f4:	4b2e      	ldr	r3, [pc, #184]	@ (80008b0 <DMA1_Stream4_IRQHandler+0x174>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80007fa:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <DMA1_Stream4_IRQHandler+0x158>)
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	4a25      	ldr	r2, [pc, #148]	@ (8000894 <DMA1_Stream4_IRQHandler+0x158>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF4)
 8000806:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <DMA1_Stream4_IRQHandler+0x158>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	f003 0310 	and.w	r3, r3, #16
 800080e:	2b00      	cmp	r3, #0
 8000810:	d01a      	beq.n	8000848 <DMA1_Stream4_IRQHandler+0x10c>
	{
		TIM5_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000812:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <DMA1_Stream4_IRQHandler+0x15c>)
 8000814:	2201      	movs	r2, #1
 8000816:	709a      	strb	r2, [r3, #2]
		TIM3_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000818:	4b20      	ldr	r3, [pc, #128]	@ (800089c <DMA1_Stream4_IRQHandler+0x160>)
 800081a:	2201      	movs	r2, #1
 800081c:	709a      	strb	r2, [r3, #2]
		USART4_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800081e:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <DMA1_Stream4_IRQHandler+0x164>)
 8000820:	2201      	movs	r2, #1
 8000822:	709a      	strb	r2, [r3, #2]
		I2C3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000824:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <DMA1_Stream4_IRQHandler+0x168>)
 8000826:	2201      	movs	r2, #1
 8000828:	709a      	strb	r2, [r3, #2]
		I2S2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800082a:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <DMA1_Stream4_IRQHandler+0x16c>)
 800082c:	2201      	movs	r2, #1
 800082e:	709a      	strb	r2, [r3, #2]
		SPI2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000830:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <DMA1_Stream4_IRQHandler+0x170>)
 8000832:	2201      	movs	r2, #1
 8000834:	709a      	strb	r2, [r3, #2]
		DMA1_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 8000836:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <DMA1_Stream4_IRQHandler+0x174>)
 8000838:	2201      	movs	r2, #1
 800083a:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 800083c:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <DMA1_Stream4_IRQHandler+0x158>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	4a14      	ldr	r2, [pc, #80]	@ (8000894 <DMA1_Stream4_IRQHandler+0x158>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF4)
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <DMA1_Stream4_IRQHandler+0x158>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f003 0320 	and.w	r3, r3, #32
 8000850:	2b00      	cmp	r3, #0
 8000852:	d01a      	beq.n	800088a <DMA1_Stream4_IRQHandler+0x14e>
	{
		TIM5_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8000854:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <DMA1_Stream4_IRQHandler+0x15c>)
 8000856:	2201      	movs	r2, #1
 8000858:	705a      	strb	r2, [r3, #1]
		TIM3_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 800085a:	4b10      	ldr	r3, [pc, #64]	@ (800089c <DMA1_Stream4_IRQHandler+0x160>)
 800085c:	2201      	movs	r2, #1
 800085e:	705a      	strb	r2, [r3, #1]
		USART4_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <DMA1_Stream4_IRQHandler+0x164>)
 8000862:	2201      	movs	r2, #1
 8000864:	705a      	strb	r2, [r3, #1]
		I2C3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <DMA1_Stream4_IRQHandler+0x168>)
 8000868:	2201      	movs	r2, #1
 800086a:	705a      	strb	r2, [r3, #1]
		I2S2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800086c:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <DMA1_Stream4_IRQHandler+0x16c>)
 800086e:	2201      	movs	r2, #1
 8000870:	705a      	strb	r2, [r3, #1]
		SPI2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <DMA1_Stream4_IRQHandler+0x170>)
 8000874:	2201      	movs	r2, #1
 8000876:	705a      	strb	r2, [r3, #1]
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
 8000878:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <DMA1_Stream4_IRQHandler+0x174>)
 800087a:	2201      	movs	r2, #1
 800087c:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800087e:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <DMA1_Stream4_IRQHandler+0x158>)
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	4a04      	ldr	r2, [pc, #16]	@ (8000894 <DMA1_Stream4_IRQHandler+0x158>)
 8000884:	f043 0320 	orr.w	r3, r3, #32
 8000888:	60d3      	str	r3, [r2, #12]
	}
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	40026000 	.word	0x40026000
 8000898:	20000250 	.word	0x20000250
 800089c:	20000218 	.word	0x20000218
 80008a0:	20000148 	.word	0x20000148
 80008a4:	200000e0 	.word	0x200000e0
 80008a8:	200000b8 	.word	0x200000b8
 80008ac:	20000108 	.word	0x20000108
 80008b0:	200002c0 	.word	0x200002c0

080008b4 <DMA1_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream5_IRQHandler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF5)
 80008b8:	4b54      	ldr	r3, [pc, #336]	@ (8000a0c <DMA1_Stream5_IRQHandler+0x158>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d01a      	beq.n	80008fa <DMA1_Stream5_IRQHandler+0x46>
	{
		SPI3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80008c4:	4b52      	ldr	r3, [pc, #328]	@ (8000a10 <DMA1_Stream5_IRQHandler+0x15c>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	715a      	strb	r2, [r3, #5]
		TIM3_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 80008ca:	4b52      	ldr	r3, [pc, #328]	@ (8000a14 <DMA1_Stream5_IRQHandler+0x160>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	715a      	strb	r2, [r3, #5]
		TIM2_CH1_DMA_Flag.Fifo_Error_Flag =  true;
 80008d0:	4b51      	ldr	r3, [pc, #324]	@ (8000a18 <DMA1_Stream5_IRQHandler+0x164>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	715a      	strb	r2, [r3, #5]
		DAC2_DMA_Flag.Fifo_Error_Flag = true;
 80008d6:	4b51      	ldr	r3, [pc, #324]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x168>)
 80008d8:	2201      	movs	r2, #1
 80008da:	715a      	strb	r2, [r3, #5]
		TIM3_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80008dc:	4b50      	ldr	r3, [pc, #320]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x16c>)
 80008de:	2201      	movs	r2, #1
 80008e0:	715a      	strb	r2, [r3, #5]
		USART2_RX_DMA_Flag.Fifo_Error_Flag = true;
 80008e2:	4b50      	ldr	r3, [pc, #320]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x170>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	715a      	strb	r2, [r3, #5]
		DMA1_Stream5_Flag.Fifo_Error_Flag = true;
 80008e8:	4b4f      	ldr	r3, [pc, #316]	@ (8000a28 <DMA1_Stream5_IRQHandler+0x174>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	715a      	strb	r2, [r3, #5]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 80008ee:	4b47      	ldr	r3, [pc, #284]	@ (8000a0c <DMA1_Stream5_IRQHandler+0x158>)
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	4a46      	ldr	r2, [pc, #280]	@ (8000a0c <DMA1_Stream5_IRQHandler+0x158>)
 80008f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008f8:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF5)
 80008fa:	4b44      	ldr	r3, [pc, #272]	@ (8000a0c <DMA1_Stream5_IRQHandler+0x158>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000902:	2b00      	cmp	r3, #0
 8000904:	d01a      	beq.n	800093c <DMA1_Stream5_IRQHandler+0x88>
	{
		SPI3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000906:	4b42      	ldr	r3, [pc, #264]	@ (8000a10 <DMA1_Stream5_IRQHandler+0x15c>)
 8000908:	2201      	movs	r2, #1
 800090a:	711a      	strb	r2, [r3, #4]
		TIM3_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 800090c:	4b41      	ldr	r3, [pc, #260]	@ (8000a14 <DMA1_Stream5_IRQHandler+0x160>)
 800090e:	2201      	movs	r2, #1
 8000910:	711a      	strb	r2, [r3, #4]
		TIM2_CH1_DMA_Flag.Direct_Mode_Error_Flag =  true;
 8000912:	4b41      	ldr	r3, [pc, #260]	@ (8000a18 <DMA1_Stream5_IRQHandler+0x164>)
 8000914:	2201      	movs	r2, #1
 8000916:	711a      	strb	r2, [r3, #4]
		DAC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000918:	4b40      	ldr	r3, [pc, #256]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x168>)
 800091a:	2201      	movs	r2, #1
 800091c:	711a      	strb	r2, [r3, #4]
		TIM3_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800091e:	4b40      	ldr	r3, [pc, #256]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x16c>)
 8000920:	2201      	movs	r2, #1
 8000922:	711a      	strb	r2, [r3, #4]
		USART2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000924:	4b3f      	ldr	r3, [pc, #252]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x170>)
 8000926:	2201      	movs	r2, #1
 8000928:	711a      	strb	r2, [r3, #4]
		DMA1_Stream5_Flag.Direct_Mode_Error_Flag = true;
 800092a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a28 <DMA1_Stream5_IRQHandler+0x174>)
 800092c:	2201      	movs	r2, #1
 800092e:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8000930:	4b36      	ldr	r3, [pc, #216]	@ (8000a0c <DMA1_Stream5_IRQHandler+0x158>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	4a35      	ldr	r2, [pc, #212]	@ (8000a0c <DMA1_Stream5_IRQHandler+0x158>)
 8000936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800093a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF5)
 800093c:	4b33      	ldr	r3, [pc, #204]	@ (8000a0c <DMA1_Stream5_IRQHandler+0x158>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000944:	2b00      	cmp	r3, #0
 8000946:	d01a      	beq.n	800097e <DMA1_Stream5_IRQHandler+0xca>
	{
		SPI3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000948:	4b31      	ldr	r3, [pc, #196]	@ (8000a10 <DMA1_Stream5_IRQHandler+0x15c>)
 800094a:	2201      	movs	r2, #1
 800094c:	70da      	strb	r2, [r3, #3]
		TIM3_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 800094e:	4b31      	ldr	r3, [pc, #196]	@ (8000a14 <DMA1_Stream5_IRQHandler+0x160>)
 8000950:	2201      	movs	r2, #1
 8000952:	70da      	strb	r2, [r3, #3]
		TIM2_CH1_DMA_Flag.Transfer_Error_Flag =  true;
 8000954:	4b30      	ldr	r3, [pc, #192]	@ (8000a18 <DMA1_Stream5_IRQHandler+0x164>)
 8000956:	2201      	movs	r2, #1
 8000958:	70da      	strb	r2, [r3, #3]
		DAC2_DMA_Flag.Transfer_Error_Flag = true;
 800095a:	4b30      	ldr	r3, [pc, #192]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x168>)
 800095c:	2201      	movs	r2, #1
 800095e:	70da      	strb	r2, [r3, #3]
		TIM3_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8000960:	4b2f      	ldr	r3, [pc, #188]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x16c>)
 8000962:	2201      	movs	r2, #1
 8000964:	70da      	strb	r2, [r3, #3]
		USART2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000966:	4b2f      	ldr	r3, [pc, #188]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x170>)
 8000968:	2201      	movs	r2, #1
 800096a:	70da      	strb	r2, [r3, #3]
		DMA1_Stream5_Flag.Transfer_Error_Flag = true;
 800096c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a28 <DMA1_Stream5_IRQHandler+0x174>)
 800096e:	2201      	movs	r2, #1
 8000970:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8000972:	4b26      	ldr	r3, [pc, #152]	@ (8000a0c <DMA1_Stream5_IRQHandler+0x158>)
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	4a25      	ldr	r2, [pc, #148]	@ (8000a0c <DMA1_Stream5_IRQHandler+0x158>)
 8000978:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800097c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF5)
 800097e:	4b23      	ldr	r3, [pc, #140]	@ (8000a0c <DMA1_Stream5_IRQHandler+0x158>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000986:	2b00      	cmp	r3, #0
 8000988:	d01a      	beq.n	80009c0 <DMA1_Stream5_IRQHandler+0x10c>
	{
		SPI3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800098a:	4b21      	ldr	r3, [pc, #132]	@ (8000a10 <DMA1_Stream5_IRQHandler+0x15c>)
 800098c:	2201      	movs	r2, #1
 800098e:	709a      	strb	r2, [r3, #2]
		TIM3_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000990:	4b20      	ldr	r3, [pc, #128]	@ (8000a14 <DMA1_Stream5_IRQHandler+0x160>)
 8000992:	2201      	movs	r2, #1
 8000994:	709a      	strb	r2, [r3, #2]
		TIM2_CH1_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8000996:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <DMA1_Stream5_IRQHandler+0x164>)
 8000998:	2201      	movs	r2, #1
 800099a:	709a      	strb	r2, [r3, #2]
		DAC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800099c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x168>)
 800099e:	2201      	movs	r2, #1
 80009a0:	709a      	strb	r2, [r3, #2]
		TIM3_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80009a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x16c>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	709a      	strb	r2, [r3, #2]
		USART2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x170>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	709a      	strb	r2, [r3, #2]
		DMA1_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 80009ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <DMA1_Stream5_IRQHandler+0x174>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <DMA1_Stream5_IRQHandler+0x158>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	4a14      	ldr	r2, [pc, #80]	@ (8000a0c <DMA1_Stream5_IRQHandler+0x158>)
 80009ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009be:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF5)
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <DMA1_Stream5_IRQHandler+0x158>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d01a      	beq.n	8000a02 <DMA1_Stream5_IRQHandler+0x14e>
	{
		SPI3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80009cc:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <DMA1_Stream5_IRQHandler+0x15c>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	705a      	strb	r2, [r3, #1]
		TIM3_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <DMA1_Stream5_IRQHandler+0x160>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	705a      	strb	r2, [r3, #1]
		TIM2_CH1_DMA_Flag.Transfer_Complete_Flag =  true;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <DMA1_Stream5_IRQHandler+0x164>)
 80009da:	2201      	movs	r2, #1
 80009dc:	705a      	strb	r2, [r3, #1]
		DAC2_DMA_Flag.Transfer_Complete_Flag = true;
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x168>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	705a      	strb	r2, [r3, #1]
		TIM3_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x16c>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	705a      	strb	r2, [r3, #1]
		USART2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x170>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	705a      	strb	r2, [r3, #1]
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <DMA1_Stream5_IRQHandler+0x174>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80009f6:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <DMA1_Stream5_IRQHandler+0x158>)
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <DMA1_Stream5_IRQHandler+0x158>)
 80009fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a00:	60d3      	str	r3, [r2, #12]
	}
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	40026000 	.word	0x40026000
 8000a10:	20000110 	.word	0x20000110
 8000a14:	20000230 	.word	0x20000230
 8000a18:	200001f8 	.word	0x200001f8
 8000a1c:	20000270 	.word	0x20000270
 8000a20:	20000220 	.word	0x20000220
 8000a24:	20000128 	.word	0x20000128
 8000a28:	200002c8 	.word	0x200002c8

08000a2c <DMA1_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream6_IRQHandler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF6)
 8000a30:	4b47      	ldr	r3, [pc, #284]	@ (8000b50 <DMA1_Stream6_IRQHandler+0x124>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d017      	beq.n	8000a6c <DMA1_Stream6_IRQHandler+0x40>
	{
		TIM3_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000a3c:	4b45      	ldr	r3, [pc, #276]	@ (8000b54 <DMA1_Stream6_IRQHandler+0x128>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	715a      	strb	r2, [r3, #5]
		TIM2_UP_DMA_Flag.Fifo_Error_Flag = true;
 8000a42:	4b45      	ldr	r3, [pc, #276]	@ (8000b58 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	715a      	strb	r2, [r3, #5]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000a48:	4b44      	ldr	r3, [pc, #272]	@ (8000b5c <DMA1_Stream6_IRQHandler+0x130>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	715a      	strb	r2, [r3, #5]
		USART2_TX_DMA_Flag.Fifo_Error_Flag =  true;
 8000a4e:	4b44      	ldr	r3, [pc, #272]	@ (8000b60 <DMA1_Stream6_IRQHandler+0x134>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	715a      	strb	r2, [r3, #5]
		I2C1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000a54:	4b43      	ldr	r3, [pc, #268]	@ (8000b64 <DMA1_Stream6_IRQHandler+0x138>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	715a      	strb	r2, [r3, #5]
		DMA1_Stream6_Flag.Fifo_Error_Flag = true;
 8000a5a:	4b43      	ldr	r3, [pc, #268]	@ (8000b68 <DMA1_Stream6_IRQHandler+0x13c>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	715a      	strb	r2, [r3, #5]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8000a60:	4b3b      	ldr	r3, [pc, #236]	@ (8000b50 <DMA1_Stream6_IRQHandler+0x124>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	4a3a      	ldr	r2, [pc, #232]	@ (8000b50 <DMA1_Stream6_IRQHandler+0x124>)
 8000a66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a6a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF6)
 8000a6c:	4b38      	ldr	r3, [pc, #224]	@ (8000b50 <DMA1_Stream6_IRQHandler+0x124>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d014      	beq.n	8000aa2 <DMA1_Stream6_IRQHandler+0x76>
	{
		TIM2_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000a78:	4b37      	ldr	r3, [pc, #220]	@ (8000b58 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000a7e:	4b37      	ldr	r3, [pc, #220]	@ (8000b5c <DMA1_Stream6_IRQHandler+0x130>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	711a      	strb	r2, [r3, #4]
		USART2_TX_DMA_Flag.Direct_Mode_Error_Flag =  true;
 8000a84:	4b36      	ldr	r3, [pc, #216]	@ (8000b60 <DMA1_Stream6_IRQHandler+0x134>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	711a      	strb	r2, [r3, #4]
		I2C1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000a8a:	4b36      	ldr	r3, [pc, #216]	@ (8000b64 <DMA1_Stream6_IRQHandler+0x138>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	711a      	strb	r2, [r3, #4]
		DMA1_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8000a90:	4b35      	ldr	r3, [pc, #212]	@ (8000b68 <DMA1_Stream6_IRQHandler+0x13c>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8000a96:	4b2e      	ldr	r3, [pc, #184]	@ (8000b50 <DMA1_Stream6_IRQHandler+0x124>)
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	4a2d      	ldr	r2, [pc, #180]	@ (8000b50 <DMA1_Stream6_IRQHandler+0x124>)
 8000a9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000aa0:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF6)
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b50 <DMA1_Stream6_IRQHandler+0x124>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d014      	beq.n	8000ad8 <DMA1_Stream6_IRQHandler+0xac>
	{
		TIM2_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000aae:	4b2a      	ldr	r3, [pc, #168]	@ (8000b58 <DMA1_Stream6_IRQHandler+0x12c>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000ab4:	4b29      	ldr	r3, [pc, #164]	@ (8000b5c <DMA1_Stream6_IRQHandler+0x130>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	70da      	strb	r2, [r3, #3]
		USART2_TX_DMA_Flag.Transfer_Error_Flag =  true;
 8000aba:	4b29      	ldr	r3, [pc, #164]	@ (8000b60 <DMA1_Stream6_IRQHandler+0x134>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	70da      	strb	r2, [r3, #3]
		I2C1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000ac0:	4b28      	ldr	r3, [pc, #160]	@ (8000b64 <DMA1_Stream6_IRQHandler+0x138>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	70da      	strb	r2, [r3, #3]
		DMA1_Stream6_Flag.Transfer_Error_Flag = true;
 8000ac6:	4b28      	ldr	r3, [pc, #160]	@ (8000b68 <DMA1_Stream6_IRQHandler+0x13c>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8000acc:	4b20      	ldr	r3, [pc, #128]	@ (8000b50 <DMA1_Stream6_IRQHandler+0x124>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8000b50 <DMA1_Stream6_IRQHandler+0x124>)
 8000ad2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ad6:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF6)
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <DMA1_Stream6_IRQHandler+0x124>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d014      	beq.n	8000b0e <DMA1_Stream6_IRQHandler+0xe2>
	{
		TIM2_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <DMA1_Stream6_IRQHandler+0x12c>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <DMA1_Stream6_IRQHandler+0x130>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	709a      	strb	r2, [r3, #2]
		USART2_TX_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b60 <DMA1_Stream6_IRQHandler+0x134>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	709a      	strb	r2, [r3, #2]
		I2C1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000af6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <DMA1_Stream6_IRQHandler+0x138>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	709a      	strb	r2, [r3, #2]
		DMA1_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <DMA1_Stream6_IRQHandler+0x13c>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <DMA1_Stream6_IRQHandler+0x124>)
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <DMA1_Stream6_IRQHandler+0x124>)
 8000b08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000b0c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF6)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <DMA1_Stream6_IRQHandler+0x124>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d014      	beq.n	8000b44 <DMA1_Stream6_IRQHandler+0x118>
	{
		TIM2_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <DMA1_Stream6_IRQHandler+0x12c>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000b20:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <DMA1_Stream6_IRQHandler+0x130>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	705a      	strb	r2, [r3, #1]
		USART2_TX_DMA_Flag.Transfer_Complete_Flag =  true;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <DMA1_Stream6_IRQHandler+0x134>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	705a      	strb	r2, [r3, #1]
		I2C1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b64 <DMA1_Stream6_IRQHandler+0x138>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	705a      	strb	r2, [r3, #1]
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <DMA1_Stream6_IRQHandler+0x13c>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <DMA1_Stream6_IRQHandler+0x124>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <DMA1_Stream6_IRQHandler+0x124>)
 8000b3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b42:	60d3      	str	r3, [r2, #12]
	}
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40026000 	.word	0x40026000
 8000b54:	20000228 	.word	0x20000228
 8000b58:	200001f0 	.word	0x200001f0
 8000b5c:	20000178 	.word	0x20000178
 8000b60:	20000130 	.word	0x20000130
 8000b64:	200000d0 	.word	0x200000d0
 8000b68:	200002d0 	.word	0x200002d0

08000b6c <DMA1_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream7_IRQHandler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF7)
 8000b70:	4b54      	ldr	r3, [pc, #336]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x158>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d01a      	beq.n	8000bb2 <DMA1_Stream7_IRQHandler+0x46>
	{
		I2S3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000b7c:	4b52      	ldr	r3, [pc, #328]	@ (8000cc8 <DMA1_Stream7_IRQHandler+0x15c>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	715a      	strb	r2, [r3, #5]
		I2C2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000b82:	4b52      	ldr	r3, [pc, #328]	@ (8000ccc <DMA1_Stream7_IRQHandler+0x160>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	715a      	strb	r2, [r3, #5]
		USART5_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000b88:	4b51      	ldr	r3, [pc, #324]	@ (8000cd0 <DMA1_Stream7_IRQHandler+0x164>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	715a      	strb	r2, [r3, #5]
		TIM4_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000b8e:	4b51      	ldr	r3, [pc, #324]	@ (8000cd4 <DMA1_Stream7_IRQHandler+0x168>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	715a      	strb	r2, [r3, #5]
		TIM2_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000b94:	4b50      	ldr	r3, [pc, #320]	@ (8000cd8 <DMA1_Stream7_IRQHandler+0x16c>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	715a      	strb	r2, [r3, #5]
		TIM2_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8000b9a:	4b50      	ldr	r3, [pc, #320]	@ (8000cdc <DMA1_Stream7_IRQHandler+0x170>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	715a      	strb	r2, [r3, #5]

		DMA1_Stream7_Flag.Fifo_Error_Flag = true;
 8000ba0:	4b4f      	ldr	r3, [pc, #316]	@ (8000ce0 <DMA1_Stream7_IRQHandler+0x174>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	715a      	strb	r2, [r3, #5]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8000ba6:	4b47      	ldr	r3, [pc, #284]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x158>)
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	4a46      	ldr	r2, [pc, #280]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x158>)
 8000bac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bb0:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF7)
 8000bb2:	4b44      	ldr	r3, [pc, #272]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x158>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d01a      	beq.n	8000bf4 <DMA1_Stream7_IRQHandler+0x88>
	{
		I2S3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000bbe:	4b42      	ldr	r3, [pc, #264]	@ (8000cc8 <DMA1_Stream7_IRQHandler+0x15c>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	711a      	strb	r2, [r3, #4]
		I2C2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000bc4:	4b41      	ldr	r3, [pc, #260]	@ (8000ccc <DMA1_Stream7_IRQHandler+0x160>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	711a      	strb	r2, [r3, #4]
		USART5_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000bca:	4b41      	ldr	r3, [pc, #260]	@ (8000cd0 <DMA1_Stream7_IRQHandler+0x164>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	711a      	strb	r2, [r3, #4]
		TIM4_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000bd0:	4b40      	ldr	r3, [pc, #256]	@ (8000cd4 <DMA1_Stream7_IRQHandler+0x168>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	711a      	strb	r2, [r3, #4]
		TIM2_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000bd6:	4b40      	ldr	r3, [pc, #256]	@ (8000cd8 <DMA1_Stream7_IRQHandler+0x16c>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	711a      	strb	r2, [r3, #4]
		TIM2_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000bdc:	4b3f      	ldr	r3, [pc, #252]	@ (8000cdc <DMA1_Stream7_IRQHandler+0x170>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	711a      	strb	r2, [r3, #4]
		DMA1_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8000be2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce0 <DMA1_Stream7_IRQHandler+0x174>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8000be8:	4b36      	ldr	r3, [pc, #216]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x158>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	4a35      	ldr	r2, [pc, #212]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x158>)
 8000bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bf2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF7)
 8000bf4:	4b33      	ldr	r3, [pc, #204]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x158>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d01a      	beq.n	8000c36 <DMA1_Stream7_IRQHandler+0xca>
	{
		I2S3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000c00:	4b31      	ldr	r3, [pc, #196]	@ (8000cc8 <DMA1_Stream7_IRQHandler+0x15c>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	70da      	strb	r2, [r3, #3]
		I2C2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000c06:	4b31      	ldr	r3, [pc, #196]	@ (8000ccc <DMA1_Stream7_IRQHandler+0x160>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	70da      	strb	r2, [r3, #3]
		USART5_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000c0c:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <DMA1_Stream7_IRQHandler+0x164>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	70da      	strb	r2, [r3, #3]
		TIM4_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8000c12:	4b30      	ldr	r3, [pc, #192]	@ (8000cd4 <DMA1_Stream7_IRQHandler+0x168>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	70da      	strb	r2, [r3, #3]
		TIM2_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8000c18:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd8 <DMA1_Stream7_IRQHandler+0x16c>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	70da      	strb	r2, [r3, #3]
		TIM2_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8000c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000cdc <DMA1_Stream7_IRQHandler+0x170>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	70da      	strb	r2, [r3, #3]
		DMA1_Stream7_Flag.Transfer_Error_Flag = true;
 8000c24:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce0 <DMA1_Stream7_IRQHandler+0x174>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8000c2a:	4b26      	ldr	r3, [pc, #152]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x158>)
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	4a25      	ldr	r2, [pc, #148]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x158>)
 8000c30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c34:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF7)
 8000c36:	4b23      	ldr	r3, [pc, #140]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x158>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d01a      	beq.n	8000c78 <DMA1_Stream7_IRQHandler+0x10c>
	{
		I2S3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c42:	4b21      	ldr	r3, [pc, #132]	@ (8000cc8 <DMA1_Stream7_IRQHandler+0x15c>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	709a      	strb	r2, [r3, #2]
		I2C2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c48:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <DMA1_Stream7_IRQHandler+0x160>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	709a      	strb	r2, [r3, #2]
		USART5_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c4e:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <DMA1_Stream7_IRQHandler+0x164>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	709a      	strb	r2, [r3, #2]
		TIM4_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <DMA1_Stream7_IRQHandler+0x168>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	709a      	strb	r2, [r3, #2]
		TIM2_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <DMA1_Stream7_IRQHandler+0x16c>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	709a      	strb	r2, [r3, #2]
		TIM2_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c60:	4b1e      	ldr	r3, [pc, #120]	@ (8000cdc <DMA1_Stream7_IRQHandler+0x170>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	709a      	strb	r2, [r3, #2]
		DMA1_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <DMA1_Stream7_IRQHandler+0x174>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x158>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	4a14      	ldr	r2, [pc, #80]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x158>)
 8000c72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c76:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF7)
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x158>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d01a      	beq.n	8000cba <DMA1_Stream7_IRQHandler+0x14e>
	{
		I2S3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000c84:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <DMA1_Stream7_IRQHandler+0x15c>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	705a      	strb	r2, [r3, #1]
		I2C2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <DMA1_Stream7_IRQHandler+0x160>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	705a      	strb	r2, [r3, #1]
		USART5_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <DMA1_Stream7_IRQHandler+0x164>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	705a      	strb	r2, [r3, #1]
		TIM4_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000c96:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <DMA1_Stream7_IRQHandler+0x168>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	705a      	strb	r2, [r3, #1]
		TIM2_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <DMA1_Stream7_IRQHandler+0x16c>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	705a      	strb	r2, [r3, #1]
		TIM2_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <DMA1_Stream7_IRQHandler+0x170>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	705a      	strb	r2, [r3, #1]
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <DMA1_Stream7_IRQHandler+0x174>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8000cae:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x158>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x158>)
 8000cb4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000cb8:	60d3      	str	r3, [r2, #12]
	}
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	40026000 	.word	0x40026000
 8000cc8:	200000c0 	.word	0x200000c0
 8000ccc:	200000d8 	.word	0x200000d8
 8000cd0:	20000158 	.word	0x20000158
 8000cd4:	20000248 	.word	0x20000248
 8000cd8:	20000200 	.word	0x20000200
 8000cdc:	20000210 	.word	0x20000210
 8000ce0:	200002d8 	.word	0x200002d8

08000ce4 <DMA2_Stream0_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream0_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream0_IRQHandler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF0)
 8000ce8:	4b45      	ldr	r3, [pc, #276]	@ (8000e00 <DMA2_Stream0_IRQHandler+0x11c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d014      	beq.n	8000d1e <DMA2_Stream0_IRQHandler+0x3a>
	{
		SPI1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000cf4:	4b43      	ldr	r3, [pc, #268]	@ (8000e04 <DMA2_Stream0_IRQHandler+0x120>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	715a      	strb	r2, [r3, #5]
		ADC1_DMA_Flag.Fifo_Error_Flag = true;
 8000cfa:	4b43      	ldr	r3, [pc, #268]	@ (8000e08 <DMA2_Stream0_IRQHandler+0x124>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	715a      	strb	r2, [r3, #5]
		TIM1_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000d00:	4b42      	ldr	r3, [pc, #264]	@ (8000e0c <DMA2_Stream0_IRQHandler+0x128>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	715a      	strb	r2, [r3, #5]
		TIM1_COM_DMA_Flag.Fifo_Error_Flag = true;
 8000d06:	4b42      	ldr	r3, [pc, #264]	@ (8000e10 <DMA2_Stream0_IRQHandler+0x12c>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	715a      	strb	r2, [r3, #5]
		DMA2_Stream0_Flag.Fifo_Error_Flag = true;
 8000d0c:	4b41      	ldr	r3, [pc, #260]	@ (8000e14 <DMA2_Stream0_IRQHandler+0x130>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	715a      	strb	r2, [r3, #5]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000d12:	4b3b      	ldr	r3, [pc, #236]	@ (8000e00 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	4a3a      	ldr	r2, [pc, #232]	@ (8000e00 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF0)
 8000d1e:	4b38      	ldr	r3, [pc, #224]	@ (8000e00 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d014      	beq.n	8000d54 <DMA2_Stream0_IRQHandler+0x70>
	{
		SPI1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d2a:	4b36      	ldr	r3, [pc, #216]	@ (8000e04 <DMA2_Stream0_IRQHandler+0x120>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	711a      	strb	r2, [r3, #4]
		ADC1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d30:	4b35      	ldr	r3, [pc, #212]	@ (8000e08 <DMA2_Stream0_IRQHandler+0x124>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	711a      	strb	r2, [r3, #4]
		TIM1_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d36:	4b35      	ldr	r3, [pc, #212]	@ (8000e0c <DMA2_Stream0_IRQHandler+0x128>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	711a      	strb	r2, [r3, #4]
		TIM1_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d3c:	4b34      	ldr	r3, [pc, #208]	@ (8000e10 <DMA2_Stream0_IRQHandler+0x12c>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	711a      	strb	r2, [r3, #4]
		DMA2_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8000d42:	4b34      	ldr	r3, [pc, #208]	@ (8000e14 <DMA2_Stream0_IRQHandler+0x130>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000d48:	4b2d      	ldr	r3, [pc, #180]	@ (8000e00 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e00 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF0)
 8000d54:	4b2a      	ldr	r3, [pc, #168]	@ (8000e00 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0308 	and.w	r3, r3, #8
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d014      	beq.n	8000d8a <DMA2_Stream0_IRQHandler+0xa6>
	{
		SPI1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000d60:	4b28      	ldr	r3, [pc, #160]	@ (8000e04 <DMA2_Stream0_IRQHandler+0x120>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	70da      	strb	r2, [r3, #3]
		ADC1_DMA_Flag.Transfer_Error_Flag = true;
 8000d66:	4b28      	ldr	r3, [pc, #160]	@ (8000e08 <DMA2_Stream0_IRQHandler+0x124>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	70da      	strb	r2, [r3, #3]
		TIM1_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000d6c:	4b27      	ldr	r3, [pc, #156]	@ (8000e0c <DMA2_Stream0_IRQHandler+0x128>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	70da      	strb	r2, [r3, #3]
		TIM1_COM_DMA_Flag.Transfer_Error_Flag = true;
 8000d72:	4b27      	ldr	r3, [pc, #156]	@ (8000e10 <DMA2_Stream0_IRQHandler+0x12c>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	70da      	strb	r2, [r3, #3]
		DMA2_Stream0_Flag.Transfer_Error_Flag = true;
 8000d78:	4b26      	ldr	r3, [pc, #152]	@ (8000e14 <DMA2_Stream0_IRQHandler+0x130>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000d7e:	4b20      	ldr	r3, [pc, #128]	@ (8000e00 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	4a1f      	ldr	r2, [pc, #124]	@ (8000e00 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF0)
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d014      	beq.n	8000dc0 <DMA2_Stream0_IRQHandler+0xdc>
	{
		SPI1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	@ (8000e04 <DMA2_Stream0_IRQHandler+0x120>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	709a      	strb	r2, [r3, #2]
		ADC1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <DMA2_Stream0_IRQHandler+0x124>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	709a      	strb	r2, [r3, #2]
		TIM1_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <DMA2_Stream0_IRQHandler+0x128>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	709a      	strb	r2, [r3, #2]
		TIM1_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000da8:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <DMA2_Stream0_IRQHandler+0x12c>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	709a      	strb	r2, [r3, #2]
		DMA2_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <DMA2_Stream0_IRQHandler+0x130>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <DMA2_Stream0_IRQHandler+0x11c>)
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	4a11      	ldr	r2, [pc, #68]	@ (8000e00 <DMA2_Stream0_IRQHandler+0x11c>)
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF0)
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <DMA2_Stream0_IRQHandler+0x11c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0320 	and.w	r3, r3, #32
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d014      	beq.n	8000df6 <DMA2_Stream0_IRQHandler+0x112>
	{
		SPI1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <DMA2_Stream0_IRQHandler+0x120>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	705a      	strb	r2, [r3, #1]
		ADC1_DMA_Flag.Transfer_Complete_Flag = true;
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <DMA2_Stream0_IRQHandler+0x124>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	705a      	strb	r2, [r3, #1]
		TIM1_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <DMA2_Stream0_IRQHandler+0x128>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	705a      	strb	r2, [r3, #1]
		TIM1_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8000dde:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <DMA2_Stream0_IRQHandler+0x12c>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	705a      	strb	r2, [r3, #1]
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
 8000de4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <DMA2_Stream0_IRQHandler+0x130>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000dea:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <DMA2_Stream0_IRQHandler+0x11c>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <DMA2_Stream0_IRQHandler+0x11c>)
 8000df0:	f043 0320 	orr.w	r3, r3, #32
 8000df4:	6093      	str	r3, [r2, #8]
	}
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	40026400 	.word	0x40026400
 8000e04:	200000e8 	.word	0x200000e8
 8000e08:	20000288 	.word	0x20000288
 8000e0c:	200001a8 	.word	0x200001a8
 8000e10:	200001b0 	.word	0x200001b0
 8000e14:	200002e0 	.word	0x200002e0

08000e18 <DMA2_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream1_IRQHandler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF1)
 8000e1c:	4b5c      	ldr	r3, [pc, #368]	@ (8000f90 <DMA2_Stream1_IRQHandler+0x178>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d01d      	beq.n	8000e64 <DMA2_Stream1_IRQHandler+0x4c>
	{
		ADC3_DMA_Flag.Fifo_Error_Flag = true;
 8000e28:	4b5a      	ldr	r3, [pc, #360]	@ (8000f94 <DMA2_Stream1_IRQHandler+0x17c>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	715a      	strb	r2, [r3, #5]
		TIM1_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000e2e:	4b5a      	ldr	r3, [pc, #360]	@ (8000f98 <DMA2_Stream1_IRQHandler+0x180>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	715a      	strb	r2, [r3, #5]
		TIM8_UP_DMA_Flag.Fifo_Error_Flag = true;
 8000e34:	4b59      	ldr	r3, [pc, #356]	@ (8000f9c <DMA2_Stream1_IRQHandler+0x184>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	715a      	strb	r2, [r3, #5]
		TIM8_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000e3a:	4b59      	ldr	r3, [pc, #356]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x188>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	715a      	strb	r2, [r3, #5]
		TIM8_COM_DMA_Flag.Fifo_Error_Flag = true;
 8000e40:	4b58      	ldr	r3, [pc, #352]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x18c>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	715a      	strb	r2, [r3, #5]
		DCMI_DMA_Flag.Fifo_Error_Flag = true;
 8000e46:	4b58      	ldr	r3, [pc, #352]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x190>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	715a      	strb	r2, [r3, #5]
		USART6_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000e4c:	4b57      	ldr	r3, [pc, #348]	@ (8000fac <DMA2_Stream1_IRQHandler+0x194>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	715a      	strb	r2, [r3, #5]
		DMA2_Stream1_Flag.Fifo_Error_Flag = true;
 8000e52:	4b57      	ldr	r3, [pc, #348]	@ (8000fb0 <DMA2_Stream1_IRQHandler+0x198>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	715a      	strb	r2, [r3, #5]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000e58:	4b4d      	ldr	r3, [pc, #308]	@ (8000f90 <DMA2_Stream1_IRQHandler+0x178>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000f90 <DMA2_Stream1_IRQHandler+0x178>)
 8000e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e62:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF1)
 8000e64:	4b4a      	ldr	r3, [pc, #296]	@ (8000f90 <DMA2_Stream1_IRQHandler+0x178>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d01d      	beq.n	8000eac <DMA2_Stream1_IRQHandler+0x94>
	{
		ADC3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e70:	4b48      	ldr	r3, [pc, #288]	@ (8000f94 <DMA2_Stream1_IRQHandler+0x17c>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	711a      	strb	r2, [r3, #4]
		TIM1_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e76:	4b48      	ldr	r3, [pc, #288]	@ (8000f98 <DMA2_Stream1_IRQHandler+0x180>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	711a      	strb	r2, [r3, #4]
		TIM8_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e7c:	4b47      	ldr	r3, [pc, #284]	@ (8000f9c <DMA2_Stream1_IRQHandler+0x184>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	711a      	strb	r2, [r3, #4]
		TIM8_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e82:	4b47      	ldr	r3, [pc, #284]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x188>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	711a      	strb	r2, [r3, #4]
		TIM8_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e88:	4b46      	ldr	r3, [pc, #280]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x18c>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	711a      	strb	r2, [r3, #4]
		DCMI_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e8e:	4b46      	ldr	r3, [pc, #280]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x190>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	711a      	strb	r2, [r3, #4]
		USART6_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e94:	4b45      	ldr	r3, [pc, #276]	@ (8000fac <DMA2_Stream1_IRQHandler+0x194>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	711a      	strb	r2, [r3, #4]
		DMA2_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8000e9a:	4b45      	ldr	r3, [pc, #276]	@ (8000fb0 <DMA2_Stream1_IRQHandler+0x198>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8000f90 <DMA2_Stream1_IRQHandler+0x178>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	4a3a      	ldr	r2, [pc, #232]	@ (8000f90 <DMA2_Stream1_IRQHandler+0x178>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eaa:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF1)
 8000eac:	4b38      	ldr	r3, [pc, #224]	@ (8000f90 <DMA2_Stream1_IRQHandler+0x178>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d01d      	beq.n	8000ef4 <DMA2_Stream1_IRQHandler+0xdc>
	{
		ADC3_DMA_Flag.Transfer_Error_Flag = true;
 8000eb8:	4b36      	ldr	r3, [pc, #216]	@ (8000f94 <DMA2_Stream1_IRQHandler+0x17c>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	70da      	strb	r2, [r3, #3]
		TIM1_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000ebe:	4b36      	ldr	r3, [pc, #216]	@ (8000f98 <DMA2_Stream1_IRQHandler+0x180>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	70da      	strb	r2, [r3, #3]
		TIM8_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000ec4:	4b35      	ldr	r3, [pc, #212]	@ (8000f9c <DMA2_Stream1_IRQHandler+0x184>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	70da      	strb	r2, [r3, #3]
		TIM8_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000eca:	4b35      	ldr	r3, [pc, #212]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x188>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	70da      	strb	r2, [r3, #3]
		TIM8_COM_DMA_Flag.Transfer_Error_Flag = true;
 8000ed0:	4b34      	ldr	r3, [pc, #208]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x18c>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	70da      	strb	r2, [r3, #3]
		DCMI_DMA_Flag.Transfer_Error_Flag = true;
 8000ed6:	4b34      	ldr	r3, [pc, #208]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x190>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	70da      	strb	r2, [r3, #3]
		USART6_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000edc:	4b33      	ldr	r3, [pc, #204]	@ (8000fac <DMA2_Stream1_IRQHandler+0x194>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	70da      	strb	r2, [r3, #3]
		DMA2_Stream1_Flag.Transfer_Error_Flag = true;
 8000ee2:	4b33      	ldr	r3, [pc, #204]	@ (8000fb0 <DMA2_Stream1_IRQHandler+0x198>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000ee8:	4b29      	ldr	r3, [pc, #164]	@ (8000f90 <DMA2_Stream1_IRQHandler+0x178>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	4a28      	ldr	r2, [pc, #160]	@ (8000f90 <DMA2_Stream1_IRQHandler+0x178>)
 8000eee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ef2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF1)
 8000ef4:	4b26      	ldr	r3, [pc, #152]	@ (8000f90 <DMA2_Stream1_IRQHandler+0x178>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d01d      	beq.n	8000f3c <DMA2_Stream1_IRQHandler+0x124>
	{
		ADC3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f00:	4b24      	ldr	r3, [pc, #144]	@ (8000f94 <DMA2_Stream1_IRQHandler+0x17c>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	709a      	strb	r2, [r3, #2]
		TIM1_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f06:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <DMA2_Stream1_IRQHandler+0x180>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	709a      	strb	r2, [r3, #2]
		TIM8_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f0c:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <DMA2_Stream1_IRQHandler+0x184>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	709a      	strb	r2, [r3, #2]
		TIM8_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f12:	4b23      	ldr	r3, [pc, #140]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x188>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	709a      	strb	r2, [r3, #2]
		TIM8_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f18:	4b22      	ldr	r3, [pc, #136]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x18c>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	709a      	strb	r2, [r3, #2]
		DCMI_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f1e:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x190>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	709a      	strb	r2, [r3, #2]
		USART6_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f24:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <DMA2_Stream1_IRQHandler+0x194>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	709a      	strb	r2, [r3, #2]
		DMA2_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <DMA2_Stream1_IRQHandler+0x198>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000f30:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <DMA2_Stream1_IRQHandler+0x178>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	4a16      	ldr	r2, [pc, #88]	@ (8000f90 <DMA2_Stream1_IRQHandler+0x178>)
 8000f36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f3a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF1)
 8000f3c:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <DMA2_Stream1_IRQHandler+0x178>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d01d      	beq.n	8000f84 <DMA2_Stream1_IRQHandler+0x16c>
	{
		ADC3_DMA_Flag.Transfer_Complete_Flag = true;
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <DMA2_Stream1_IRQHandler+0x17c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	705a      	strb	r2, [r3, #1]
		TIM1_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8000f4e:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <DMA2_Stream1_IRQHandler+0x180>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	705a      	strb	r2, [r3, #1]
		TIM8_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8000f54:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <DMA2_Stream1_IRQHandler+0x184>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	705a      	strb	r2, [r3, #1]
		TIM8_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x188>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	705a      	strb	r2, [r3, #1]
		TIM8_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8000f60:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x18c>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	705a      	strb	r2, [r3, #1]
		DCMI_DMA_Flag.Transfer_Complete_Flag = true;
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x190>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	705a      	strb	r2, [r3, #1]
		USART6_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <DMA2_Stream1_IRQHandler+0x194>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	705a      	strb	r2, [r3, #1]
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <DMA2_Stream1_IRQHandler+0x198>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000f78:	4b05      	ldr	r3, [pc, #20]	@ (8000f90 <DMA2_Stream1_IRQHandler+0x178>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <DMA2_Stream1_IRQHandler+0x178>)
 8000f7e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f82:	6093      	str	r3, [r2, #8]
	}
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40026400 	.word	0x40026400
 8000f94:	20000298 	.word	0x20000298
 8000f98:	20000188 	.word	0x20000188
 8000f9c:	200001b8 	.word	0x200001b8
 8000fa0:	200001e0 	.word	0x200001e0
 8000fa4:	200001e8 	.word	0x200001e8
 8000fa8:	20000280 	.word	0x20000280
 8000fac:	20000160 	.word	0x20000160
 8000fb0:	200002e8 	.word	0x200002e8

08000fb4 <DMA2_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream2_IRQHandler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF2)
 8000fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80010b4 <DMA2_Stream2_IRQHandler+0x100>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d011      	beq.n	8000fe8 <DMA2_Stream2_IRQHandler+0x34>
	{
		TIM8_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000fc4:	4b3c      	ldr	r3, [pc, #240]	@ (80010b8 <DMA2_Stream2_IRQHandler+0x104>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	715a      	strb	r2, [r3, #5]
		USART1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000fca:	4b3c      	ldr	r3, [pc, #240]	@ (80010bc <DMA2_Stream2_IRQHandler+0x108>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	715a      	strb	r2, [r3, #5]
		ADC2_DMA_Flag.Fifo_Error_Flag = true;
 8000fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80010c0 <DMA2_Stream2_IRQHandler+0x10c>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	715a      	strb	r2, [r3, #5]
		DMA2_Stream2_Flag.Fifo_Error_Flag = true;
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80010c4 <DMA2_Stream2_IRQHandler+0x110>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	715a      	strb	r2, [r3, #5]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000fdc:	4b35      	ldr	r3, [pc, #212]	@ (80010b4 <DMA2_Stream2_IRQHandler+0x100>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	4a34      	ldr	r2, [pc, #208]	@ (80010b4 <DMA2_Stream2_IRQHandler+0x100>)
 8000fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fe6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF2)
 8000fe8:	4b32      	ldr	r3, [pc, #200]	@ (80010b4 <DMA2_Stream2_IRQHandler+0x100>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d011      	beq.n	8001018 <DMA2_Stream2_IRQHandler+0x64>
	{
		TIM8_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000ff4:	4b30      	ldr	r3, [pc, #192]	@ (80010b8 <DMA2_Stream2_IRQHandler+0x104>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	711a      	strb	r2, [r3, #4]
		USART1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000ffa:	4b30      	ldr	r3, [pc, #192]	@ (80010bc <DMA2_Stream2_IRQHandler+0x108>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	711a      	strb	r2, [r3, #4]
		ADC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001000:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <DMA2_Stream2_IRQHandler+0x10c>)
 8001002:	2201      	movs	r2, #1
 8001004:	711a      	strb	r2, [r3, #4]
		DMA2_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8001006:	4b2f      	ldr	r3, [pc, #188]	@ (80010c4 <DMA2_Stream2_IRQHandler+0x110>)
 8001008:	2201      	movs	r2, #1
 800100a:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 800100c:	4b29      	ldr	r3, [pc, #164]	@ (80010b4 <DMA2_Stream2_IRQHandler+0x100>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	4a28      	ldr	r2, [pc, #160]	@ (80010b4 <DMA2_Stream2_IRQHandler+0x100>)
 8001012:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001016:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF2)
 8001018:	4b26      	ldr	r3, [pc, #152]	@ (80010b4 <DMA2_Stream2_IRQHandler+0x100>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d011      	beq.n	8001048 <DMA2_Stream2_IRQHandler+0x94>
	{
		TIM8_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8001024:	4b24      	ldr	r3, [pc, #144]	@ (80010b8 <DMA2_Stream2_IRQHandler+0x104>)
 8001026:	2201      	movs	r2, #1
 8001028:	70da      	strb	r2, [r3, #3]
		USART1_RX_DMA_Flag.Transfer_Error_Flag = true;
 800102a:	4b24      	ldr	r3, [pc, #144]	@ (80010bc <DMA2_Stream2_IRQHandler+0x108>)
 800102c:	2201      	movs	r2, #1
 800102e:	70da      	strb	r2, [r3, #3]
		ADC2_DMA_Flag.Transfer_Error_Flag = true;
 8001030:	4b23      	ldr	r3, [pc, #140]	@ (80010c0 <DMA2_Stream2_IRQHandler+0x10c>)
 8001032:	2201      	movs	r2, #1
 8001034:	70da      	strb	r2, [r3, #3]
		DMA2_Stream2_Flag.Transfer_Error_Flag = true;
 8001036:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <DMA2_Stream2_IRQHandler+0x110>)
 8001038:	2201      	movs	r2, #1
 800103a:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 800103c:	4b1d      	ldr	r3, [pc, #116]	@ (80010b4 <DMA2_Stream2_IRQHandler+0x100>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	4a1c      	ldr	r2, [pc, #112]	@ (80010b4 <DMA2_Stream2_IRQHandler+0x100>)
 8001042:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001046:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF2)
 8001048:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <DMA2_Stream2_IRQHandler+0x100>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d011      	beq.n	8001078 <DMA2_Stream2_IRQHandler+0xc4>
	{
		TIM8_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001054:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <DMA2_Stream2_IRQHandler+0x104>)
 8001056:	2201      	movs	r2, #1
 8001058:	709a      	strb	r2, [r3, #2]
		USART1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800105a:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <DMA2_Stream2_IRQHandler+0x108>)
 800105c:	2201      	movs	r2, #1
 800105e:	709a      	strb	r2, [r3, #2]
		ADC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001060:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <DMA2_Stream2_IRQHandler+0x10c>)
 8001062:	2201      	movs	r2, #1
 8001064:	709a      	strb	r2, [r3, #2]
		DMA2_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8001066:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <DMA2_Stream2_IRQHandler+0x110>)
 8001068:	2201      	movs	r2, #1
 800106a:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <DMA2_Stream2_IRQHandler+0x100>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <DMA2_Stream2_IRQHandler+0x100>)
 8001072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001076:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF2)
 8001078:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <DMA2_Stream2_IRQHandler+0x100>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d011      	beq.n	80010a8 <DMA2_Stream2_IRQHandler+0xf4>
	{
		TIM8_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <DMA2_Stream2_IRQHandler+0x104>)
 8001086:	2201      	movs	r2, #1
 8001088:	705a      	strb	r2, [r3, #1]
		USART1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800108a:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <DMA2_Stream2_IRQHandler+0x108>)
 800108c:	2201      	movs	r2, #1
 800108e:	705a      	strb	r2, [r3, #1]
		ADC2_DMA_Flag.Transfer_Complete_Flag = true;
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <DMA2_Stream2_IRQHandler+0x10c>)
 8001092:	2201      	movs	r2, #1
 8001094:	705a      	strb	r2, [r3, #1]
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <DMA2_Stream2_IRQHandler+0x110>)
 8001098:	2201      	movs	r2, #1
 800109a:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <DMA2_Stream2_IRQHandler+0x100>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <DMA2_Stream2_IRQHandler+0x100>)
 80010a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010a6:	6093      	str	r3, [r2, #8]
	}
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40026400 	.word	0x40026400
 80010b8:	200001c0 	.word	0x200001c0
 80010bc:	20000118 	.word	0x20000118
 80010c0:	20000290 	.word	0x20000290
 80010c4:	200002f0 	.word	0x200002f0

080010c8 <DMA2_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream3_IRQHandler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF3)
 80010cc:	4b36      	ldr	r3, [pc, #216]	@ (80011a8 <DMA2_Stream3_IRQHandler+0xe0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00e      	beq.n	80010f6 <DMA2_Stream3_IRQHandler+0x2e>
	{
		SDIO_RXTX_DMA_Flag.Fifo_Error_Flag = true;
 80010d8:	4b34      	ldr	r3, [pc, #208]	@ (80011ac <DMA2_Stream3_IRQHandler+0xe4>)
 80010da:	2201      	movs	r2, #1
 80010dc:	715a      	strb	r2, [r3, #5]
		SPI1_TX_DMA_Flag.Fifo_Error_Flag = true;
 80010de:	4b34      	ldr	r3, [pc, #208]	@ (80011b0 <DMA2_Stream3_IRQHandler+0xe8>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	715a      	strb	r2, [r3, #5]
		DMA2_Stream3_Flag.Fifo_Error_Flag = true;
 80010e4:	4b33      	ldr	r3, [pc, #204]	@ (80011b4 <DMA2_Stream3_IRQHandler+0xec>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	715a      	strb	r2, [r3, #5]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80010ea:	4b2f      	ldr	r3, [pc, #188]	@ (80011a8 <DMA2_Stream3_IRQHandler+0xe0>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	4a2e      	ldr	r2, [pc, #184]	@ (80011a8 <DMA2_Stream3_IRQHandler+0xe0>)
 80010f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010f4:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF3)
 80010f6:	4b2c      	ldr	r3, [pc, #176]	@ (80011a8 <DMA2_Stream3_IRQHandler+0xe0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00e      	beq.n	8001120 <DMA2_Stream3_IRQHandler+0x58>
	{
		SDIO_RXTX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001102:	4b2a      	ldr	r3, [pc, #168]	@ (80011ac <DMA2_Stream3_IRQHandler+0xe4>)
 8001104:	2201      	movs	r2, #1
 8001106:	711a      	strb	r2, [r3, #4]
		SPI1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001108:	4b29      	ldr	r3, [pc, #164]	@ (80011b0 <DMA2_Stream3_IRQHandler+0xe8>)
 800110a:	2201      	movs	r2, #1
 800110c:	711a      	strb	r2, [r3, #4]
		DMA2_Stream3_Flag.Direct_Mode_Error_Flag = true;
 800110e:	4b29      	ldr	r3, [pc, #164]	@ (80011b4 <DMA2_Stream3_IRQHandler+0xec>)
 8001110:	2201      	movs	r2, #1
 8001112:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001114:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <DMA2_Stream3_IRQHandler+0xe0>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	4a23      	ldr	r2, [pc, #140]	@ (80011a8 <DMA2_Stream3_IRQHandler+0xe0>)
 800111a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800111e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF3)
 8001120:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <DMA2_Stream3_IRQHandler+0xe0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00e      	beq.n	800114a <DMA2_Stream3_IRQHandler+0x82>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Error_Flag = true;
 800112c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <DMA2_Stream3_IRQHandler+0xe4>)
 800112e:	2201      	movs	r2, #1
 8001130:	70da      	strb	r2, [r3, #3]
		SPI1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <DMA2_Stream3_IRQHandler+0xe8>)
 8001134:	2201      	movs	r2, #1
 8001136:	70da      	strb	r2, [r3, #3]
		DMA2_Stream3_Flag.Transfer_Error_Flag = true;
 8001138:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <DMA2_Stream3_IRQHandler+0xec>)
 800113a:	2201      	movs	r2, #1
 800113c:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <DMA2_Stream3_IRQHandler+0xe0>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	4a19      	ldr	r2, [pc, #100]	@ (80011a8 <DMA2_Stream3_IRQHandler+0xe0>)
 8001144:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001148:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF3)
 800114a:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <DMA2_Stream3_IRQHandler+0xe0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00e      	beq.n	8001174 <DMA2_Stream3_IRQHandler+0xac>
	{
		SDIO_RXTX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <DMA2_Stream3_IRQHandler+0xe4>)
 8001158:	2201      	movs	r2, #1
 800115a:	709a      	strb	r2, [r3, #2]
		SPI1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800115c:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <DMA2_Stream3_IRQHandler+0xe8>)
 800115e:	2201      	movs	r2, #1
 8001160:	709a      	strb	r2, [r3, #2]
		DMA2_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <DMA2_Stream3_IRQHandler+0xec>)
 8001164:	2201      	movs	r2, #1
 8001166:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <DMA2_Stream3_IRQHandler+0xe0>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4a0e      	ldr	r2, [pc, #56]	@ (80011a8 <DMA2_Stream3_IRQHandler+0xe0>)
 800116e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001172:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF3)
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <DMA2_Stream3_IRQHandler+0xe0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00e      	beq.n	800119e <DMA2_Stream3_IRQHandler+0xd6>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Complete_Flag = true;
 8001180:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <DMA2_Stream3_IRQHandler+0xe4>)
 8001182:	2201      	movs	r2, #1
 8001184:	705a      	strb	r2, [r3, #1]
		SPI1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <DMA2_Stream3_IRQHandler+0xe8>)
 8001188:	2201      	movs	r2, #1
 800118a:	705a      	strb	r2, [r3, #1]
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <DMA2_Stream3_IRQHandler+0xec>)
 800118e:	2201      	movs	r2, #1
 8001190:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001192:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <DMA2_Stream3_IRQHandler+0xe0>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <DMA2_Stream3_IRQHandler+0xe0>)
 8001198:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800119c:	6093      	str	r3, [r2, #8]
	}
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40026400 	.word	0x40026400
 80011ac:	20000278 	.word	0x20000278
 80011b0:	20000100 	.word	0x20000100
 80011b4:	200002f8 	.word	0x200002f8

080011b8 <DMA2_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream4_IRQHandler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF4)
 80011bc:	4b36      	ldr	r3, [pc, #216]	@ (8001298 <DMA2_Stream4_IRQHandler+0xe0>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00e      	beq.n	80011e6 <DMA2_Stream4_IRQHandler+0x2e>
	{
		TIM1_CH4_DMA_Flag.Fifo_Error_Flag = true;
 80011c8:	4b34      	ldr	r3, [pc, #208]	@ (800129c <DMA2_Stream4_IRQHandler+0xe4>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	715a      	strb	r2, [r3, #5]
		TIM8_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80011ce:	4b34      	ldr	r3, [pc, #208]	@ (80012a0 <DMA2_Stream4_IRQHandler+0xe8>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	715a      	strb	r2, [r3, #5]
		DMA2_Stream4_Flag.Fifo_Error_Flag = true;
 80011d4:	4b33      	ldr	r3, [pc, #204]	@ (80012a4 <DMA2_Stream4_IRQHandler+0xec>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	715a      	strb	r2, [r3, #5]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF4;
 80011da:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <DMA2_Stream4_IRQHandler+0xe0>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	4a2e      	ldr	r2, [pc, #184]	@ (8001298 <DMA2_Stream4_IRQHandler+0xe0>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF4)
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <DMA2_Stream4_IRQHandler+0xe0>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00e      	beq.n	8001210 <DMA2_Stream4_IRQHandler+0x58>
	{
		TIM1_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011f2:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <DMA2_Stream4_IRQHandler+0xe4>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	711a      	strb	r2, [r3, #4]
		TIM8_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011f8:	4b29      	ldr	r3, [pc, #164]	@ (80012a0 <DMA2_Stream4_IRQHandler+0xe8>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	711a      	strb	r2, [r3, #4]
		DMA2_Stream4_Flag.Direct_Mode_Error_Flag = true;
 80011fe:	4b29      	ldr	r3, [pc, #164]	@ (80012a4 <DMA2_Stream4_IRQHandler+0xec>)
 8001200:	2201      	movs	r2, #1
 8001202:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001204:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <DMA2_Stream4_IRQHandler+0xe0>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	4a23      	ldr	r2, [pc, #140]	@ (8001298 <DMA2_Stream4_IRQHandler+0xe0>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF4)
 8001210:	4b21      	ldr	r3, [pc, #132]	@ (8001298 <DMA2_Stream4_IRQHandler+0xe0>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00e      	beq.n	800123a <DMA2_Stream4_IRQHandler+0x82>
	{
		TIM1_CH4_DMA_Flag.Transfer_Error_Flag = true;
 800121c:	4b1f      	ldr	r3, [pc, #124]	@ (800129c <DMA2_Stream4_IRQHandler+0xe4>)
 800121e:	2201      	movs	r2, #1
 8001220:	70da      	strb	r2, [r3, #3]
		TIM8_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001222:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <DMA2_Stream4_IRQHandler+0xe8>)
 8001224:	2201      	movs	r2, #1
 8001226:	70da      	strb	r2, [r3, #3]
		DMA2_Stream4_Flag.Transfer_Error_Flag = true;
 8001228:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <DMA2_Stream4_IRQHandler+0xec>)
 800122a:	2201      	movs	r2, #1
 800122c:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 800122e:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <DMA2_Stream4_IRQHandler+0xe0>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	4a19      	ldr	r2, [pc, #100]	@ (8001298 <DMA2_Stream4_IRQHandler+0xe0>)
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF4)
 800123a:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <DMA2_Stream4_IRQHandler+0xe0>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00e      	beq.n	8001264 <DMA2_Stream4_IRQHandler+0xac>
	{
		TIM1_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <DMA2_Stream4_IRQHandler+0xe4>)
 8001248:	2201      	movs	r2, #1
 800124a:	709a      	strb	r2, [r3, #2]
		TIM8_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800124c:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <DMA2_Stream4_IRQHandler+0xe8>)
 800124e:	2201      	movs	r2, #1
 8001250:	709a      	strb	r2, [r3, #2]
		DMA2_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 8001252:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <DMA2_Stream4_IRQHandler+0xec>)
 8001254:	2201      	movs	r2, #1
 8001256:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001258:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <DMA2_Stream4_IRQHandler+0xe0>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	4a0e      	ldr	r2, [pc, #56]	@ (8001298 <DMA2_Stream4_IRQHandler+0xe0>)
 800125e:	f043 0310 	orr.w	r3, r3, #16
 8001262:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF4)
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <DMA2_Stream4_IRQHandler+0xe0>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0320 	and.w	r3, r3, #32
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00e      	beq.n	800128e <DMA2_Stream4_IRQHandler+0xd6>
	{
		TIM1_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8001270:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <DMA2_Stream4_IRQHandler+0xe4>)
 8001272:	2201      	movs	r2, #1
 8001274:	705a      	strb	r2, [r3, #1]
		TIM8_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <DMA2_Stream4_IRQHandler+0xe8>)
 8001278:	2201      	movs	r2, #1
 800127a:	705a      	strb	r2, [r3, #1]
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <DMA2_Stream4_IRQHandler+0xec>)
 800127e:	2201      	movs	r2, #1
 8001280:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8001282:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <DMA2_Stream4_IRQHandler+0xe0>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <DMA2_Stream4_IRQHandler+0xe0>)
 8001288:	f043 0320 	orr.w	r3, r3, #32
 800128c:	60d3      	str	r3, [r2, #12]
	}
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	40026400 	.word	0x40026400
 800129c:	200001a0 	.word	0x200001a0
 80012a0:	200001c8 	.word	0x200001c8
 80012a4:	20000300 	.word	0x20000300

080012a8 <DMA2_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream5_IRQHandler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF5)
 80012ac:	4b2f      	ldr	r3, [pc, #188]	@ (800136c <DMA2_Stream5_IRQHandler+0xc4>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00b      	beq.n	80012d0 <DMA2_Stream5_IRQHandler+0x28>
	{
		TIM1_UP_DMA_Flag.Fifo_Error_Flag = true;
 80012b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001370 <DMA2_Stream5_IRQHandler+0xc8>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	715a      	strb	r2, [r3, #5]
		DMA2_Stream5_Flag.Fifo_Error_Flag = true;
 80012be:	4b2d      	ldr	r3, [pc, #180]	@ (8001374 <DMA2_Stream5_IRQHandler+0xcc>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	715a      	strb	r2, [r3, #5]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 80012c4:	4b29      	ldr	r3, [pc, #164]	@ (800136c <DMA2_Stream5_IRQHandler+0xc4>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	4a28      	ldr	r2, [pc, #160]	@ (800136c <DMA2_Stream5_IRQHandler+0xc4>)
 80012ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012ce:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF5)
 80012d0:	4b26      	ldr	r3, [pc, #152]	@ (800136c <DMA2_Stream5_IRQHandler+0xc4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00b      	beq.n	80012f4 <DMA2_Stream5_IRQHandler+0x4c>
	{
		TIM1_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 80012dc:	4b24      	ldr	r3, [pc, #144]	@ (8001370 <DMA2_Stream5_IRQHandler+0xc8>)
 80012de:	2201      	movs	r2, #1
 80012e0:	711a      	strb	r2, [r3, #4]
		DMA2_Stream5_Flag.Direct_Mode_Error_Flag = true;
 80012e2:	4b24      	ldr	r3, [pc, #144]	@ (8001374 <DMA2_Stream5_IRQHandler+0xcc>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80012e8:	4b20      	ldr	r3, [pc, #128]	@ (800136c <DMA2_Stream5_IRQHandler+0xc4>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4a1f      	ldr	r2, [pc, #124]	@ (800136c <DMA2_Stream5_IRQHandler+0xc4>)
 80012ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012f2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF5)
 80012f4:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <DMA2_Stream5_IRQHandler+0xc4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00b      	beq.n	8001318 <DMA2_Stream5_IRQHandler+0x70>
	{
		TIM1_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001300:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <DMA2_Stream5_IRQHandler+0xc8>)
 8001302:	2201      	movs	r2, #1
 8001304:	70da      	strb	r2, [r3, #3]
		DMA2_Stream5_Flag.Transfer_Error_Flag = true;
 8001306:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <DMA2_Stream5_IRQHandler+0xcc>)
 8001308:	2201      	movs	r2, #1
 800130a:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 800130c:	4b17      	ldr	r3, [pc, #92]	@ (800136c <DMA2_Stream5_IRQHandler+0xc4>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4a16      	ldr	r2, [pc, #88]	@ (800136c <DMA2_Stream5_IRQHandler+0xc4>)
 8001312:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001316:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF5)
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <DMA2_Stream5_IRQHandler+0xc4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00b      	beq.n	800133c <DMA2_Stream5_IRQHandler+0x94>
	{
		TIM1_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <DMA2_Stream5_IRQHandler+0xc8>)
 8001326:	2201      	movs	r2, #1
 8001328:	709a      	strb	r2, [r3, #2]
		DMA2_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <DMA2_Stream5_IRQHandler+0xcc>)
 800132c:	2201      	movs	r2, #1
 800132e:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001330:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <DMA2_Stream5_IRQHandler+0xc4>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4a0d      	ldr	r2, [pc, #52]	@ (800136c <DMA2_Stream5_IRQHandler+0xc4>)
 8001336:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800133a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF5)
 800133c:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <DMA2_Stream5_IRQHandler+0xc4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00b      	beq.n	8001360 <DMA2_Stream5_IRQHandler+0xb8>
	{
		TIM1_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <DMA2_Stream5_IRQHandler+0xc8>)
 800134a:	2201      	movs	r2, #1
 800134c:	705a      	strb	r2, [r3, #1]
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <DMA2_Stream5_IRQHandler+0xcc>)
 8001350:	2201      	movs	r2, #1
 8001352:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8001354:	4b05      	ldr	r3, [pc, #20]	@ (800136c <DMA2_Stream5_IRQHandler+0xc4>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4a04      	ldr	r2, [pc, #16]	@ (800136c <DMA2_Stream5_IRQHandler+0xc4>)
 800135a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800135e:	60d3      	str	r3, [r2, #12]
	}
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40026400 	.word	0x40026400
 8001370:	20000180 	.word	0x20000180
 8001374:	20000308 	.word	0x20000308

08001378 <DMA2_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream6_IRQHandler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF6)
 800137c:	4b45      	ldr	r3, [pc, #276]	@ (8001494 <DMA2_Stream6_IRQHandler+0x11c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d014      	beq.n	80013b2 <DMA2_Stream6_IRQHandler+0x3a>
	{
		TIM1_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001388:	4b43      	ldr	r3, [pc, #268]	@ (8001498 <DMA2_Stream6_IRQHandler+0x120>)
 800138a:	2201      	movs	r2, #1
 800138c:	715a      	strb	r2, [r3, #5]
		TIM1_CH3_DMA_Flag.Fifo_Error_Flag = true;
 800138e:	4b43      	ldr	r3, [pc, #268]	@ (800149c <DMA2_Stream6_IRQHandler+0x124>)
 8001390:	2201      	movs	r2, #1
 8001392:	715a      	strb	r2, [r3, #5]
		TIM8_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001394:	4b42      	ldr	r3, [pc, #264]	@ (80014a0 <DMA2_Stream6_IRQHandler+0x128>)
 8001396:	2201      	movs	r2, #1
 8001398:	715a      	strb	r2, [r3, #5]
		USART6_TX_DMA_Flag.Fifo_Error_Flag = true;
 800139a:	4b42      	ldr	r3, [pc, #264]	@ (80014a4 <DMA2_Stream6_IRQHandler+0x12c>)
 800139c:	2201      	movs	r2, #1
 800139e:	715a      	strb	r2, [r3, #5]
		DMA2_Stream6_Flag.Fifo_Error_Flag = true;
 80013a0:	4b41      	ldr	r3, [pc, #260]	@ (80014a8 <DMA2_Stream6_IRQHandler+0x130>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	715a      	strb	r2, [r3, #5]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 80013a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001494 <DMA2_Stream6_IRQHandler+0x11c>)
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	4a3a      	ldr	r2, [pc, #232]	@ (8001494 <DMA2_Stream6_IRQHandler+0x11c>)
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013b0:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF6)
 80013b2:	4b38      	ldr	r3, [pc, #224]	@ (8001494 <DMA2_Stream6_IRQHandler+0x11c>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d014      	beq.n	80013e8 <DMA2_Stream6_IRQHandler+0x70>
	{
		TIM1_CH2_DMA_Flag.Direct_Mode_Error_Flag= true;
 80013be:	4b36      	ldr	r3, [pc, #216]	@ (8001498 <DMA2_Stream6_IRQHandler+0x120>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	711a      	strb	r2, [r3, #4]
		TIM1_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013c4:	4b35      	ldr	r3, [pc, #212]	@ (800149c <DMA2_Stream6_IRQHandler+0x124>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	711a      	strb	r2, [r3, #4]
		TIM8_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013ca:	4b35      	ldr	r3, [pc, #212]	@ (80014a0 <DMA2_Stream6_IRQHandler+0x128>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	711a      	strb	r2, [r3, #4]
		USART6_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013d0:	4b34      	ldr	r3, [pc, #208]	@ (80014a4 <DMA2_Stream6_IRQHandler+0x12c>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	711a      	strb	r2, [r3, #4]
		DMA2_Stream6_Flag.Direct_Mode_Error_Flag = true;
 80013d6:	4b34      	ldr	r3, [pc, #208]	@ (80014a8 <DMA2_Stream6_IRQHandler+0x130>)
 80013d8:	2201      	movs	r2, #1
 80013da:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80013dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001494 <DMA2_Stream6_IRQHandler+0x11c>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001494 <DMA2_Stream6_IRQHandler+0x11c>)
 80013e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e6:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF6)
 80013e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001494 <DMA2_Stream6_IRQHandler+0x11c>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d014      	beq.n	800141e <DMA2_Stream6_IRQHandler+0xa6>
	{
		TIM1_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80013f4:	4b28      	ldr	r3, [pc, #160]	@ (8001498 <DMA2_Stream6_IRQHandler+0x120>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	70da      	strb	r2, [r3, #3]
		TIM1_CH3_DMA_Flag.Transfer_Error_Flag = true;
 80013fa:	4b28      	ldr	r3, [pc, #160]	@ (800149c <DMA2_Stream6_IRQHandler+0x124>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	70da      	strb	r2, [r3, #3]
		TIM8_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8001400:	4b27      	ldr	r3, [pc, #156]	@ (80014a0 <DMA2_Stream6_IRQHandler+0x128>)
 8001402:	2201      	movs	r2, #1
 8001404:	70da      	strb	r2, [r3, #3]
		USART6_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001406:	4b27      	ldr	r3, [pc, #156]	@ (80014a4 <DMA2_Stream6_IRQHandler+0x12c>)
 8001408:	2201      	movs	r2, #1
 800140a:	70da      	strb	r2, [r3, #3]
		DMA2_Stream6_Flag.Transfer_Error_Flag = true;
 800140c:	4b26      	ldr	r3, [pc, #152]	@ (80014a8 <DMA2_Stream6_IRQHandler+0x130>)
 800140e:	2201      	movs	r2, #1
 8001410:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001412:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <DMA2_Stream6_IRQHandler+0x11c>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	4a1f      	ldr	r2, [pc, #124]	@ (8001494 <DMA2_Stream6_IRQHandler+0x11c>)
 8001418:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800141c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF6)
 800141e:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <DMA2_Stream6_IRQHandler+0x11c>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d014      	beq.n	8001454 <DMA2_Stream6_IRQHandler+0xdc>
	{
		TIM1_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800142a:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <DMA2_Stream6_IRQHandler+0x120>)
 800142c:	2201      	movs	r2, #1
 800142e:	709a      	strb	r2, [r3, #2]
		TIM1_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001430:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <DMA2_Stream6_IRQHandler+0x124>)
 8001432:	2201      	movs	r2, #1
 8001434:	709a      	strb	r2, [r3, #2]
		TIM8_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001436:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <DMA2_Stream6_IRQHandler+0x128>)
 8001438:	2201      	movs	r2, #1
 800143a:	709a      	strb	r2, [r3, #2]
		USART6_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800143c:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <DMA2_Stream6_IRQHandler+0x12c>)
 800143e:	2201      	movs	r2, #1
 8001440:	709a      	strb	r2, [r3, #2]
		DMA2_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8001442:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <DMA2_Stream6_IRQHandler+0x130>)
 8001444:	2201      	movs	r2, #1
 8001446:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <DMA2_Stream6_IRQHandler+0x11c>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	4a11      	ldr	r2, [pc, #68]	@ (8001494 <DMA2_Stream6_IRQHandler+0x11c>)
 800144e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001452:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF6)
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <DMA2_Stream6_IRQHandler+0x11c>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d014      	beq.n	800148a <DMA2_Stream6_IRQHandler+0x112>
	{
		TIM1_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001460:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <DMA2_Stream6_IRQHandler+0x120>)
 8001462:	2201      	movs	r2, #1
 8001464:	705a      	strb	r2, [r3, #1]
		TIM1_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001466:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <DMA2_Stream6_IRQHandler+0x124>)
 8001468:	2201      	movs	r2, #1
 800146a:	705a      	strb	r2, [r3, #1]
		TIM8_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <DMA2_Stream6_IRQHandler+0x128>)
 800146e:	2201      	movs	r2, #1
 8001470:	705a      	strb	r2, [r3, #1]
		USART6_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001472:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <DMA2_Stream6_IRQHandler+0x12c>)
 8001474:	2201      	movs	r2, #1
 8001476:	705a      	strb	r2, [r3, #1]
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <DMA2_Stream6_IRQHandler+0x130>)
 800147a:	2201      	movs	r2, #1
 800147c:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 800147e:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <DMA2_Stream6_IRQHandler+0x11c>)
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <DMA2_Stream6_IRQHandler+0x11c>)
 8001484:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001488:	60d3      	str	r3, [r2, #12]
	}
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40026400 	.word	0x40026400
 8001498:	20000190 	.word	0x20000190
 800149c:	20000198 	.word	0x20000198
 80014a0:	200001d0 	.word	0x200001d0
 80014a4:	20000168 	.word	0x20000168
 80014a8:	20000310 	.word	0x20000310

080014ac <DMA2_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream7_IRQHandler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF7)
 80014b0:	4b3e      	ldr	r3, [pc, #248]	@ (80015ac <DMA2_Stream7_IRQHandler+0x100>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d011      	beq.n	80014e0 <DMA2_Stream7_IRQHandler+0x34>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 80014bc:	4b3c      	ldr	r3, [pc, #240]	@ (80015b0 <DMA2_Stream7_IRQHandler+0x104>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80014c2:	4b3a      	ldr	r3, [pc, #232]	@ (80015ac <DMA2_Stream7_IRQHandler+0x100>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	4a39      	ldr	r2, [pc, #228]	@ (80015ac <DMA2_Stream7_IRQHandler+0x100>)
 80014c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014cc:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Fifo_Error_Flag = true;
 80014ce:	4b39      	ldr	r3, [pc, #228]	@ (80015b4 <DMA2_Stream7_IRQHandler+0x108>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	715a      	strb	r2, [r3, #5]
		USART1_TX_DMA_Flag.Fifo_Error_Flag = true;
 80014d4:	4b36      	ldr	r3, [pc, #216]	@ (80015b0 <DMA2_Stream7_IRQHandler+0x104>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	715a      	strb	r2, [r3, #5]
		DMA2_Stream7_Flag.Fifo_Error_Flag = true;
 80014da:	4b37      	ldr	r3, [pc, #220]	@ (80015b8 <DMA2_Stream7_IRQHandler+0x10c>)
 80014dc:	2201      	movs	r2, #1
 80014de:	715a      	strb	r2, [r3, #5]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF7)
 80014e0:	4b32      	ldr	r3, [pc, #200]	@ (80015ac <DMA2_Stream7_IRQHandler+0x100>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d011      	beq.n	8001510 <DMA2_Stream7_IRQHandler+0x64>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 80014ec:	4b30      	ldr	r3, [pc, #192]	@ (80015b0 <DMA2_Stream7_IRQHandler+0x104>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80014f2:	4b2e      	ldr	r3, [pc, #184]	@ (80015ac <DMA2_Stream7_IRQHandler+0x100>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	4a2d      	ldr	r2, [pc, #180]	@ (80015ac <DMA2_Stream7_IRQHandler+0x100>)
 80014f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014fc:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 80014fe:	4b2d      	ldr	r3, [pc, #180]	@ (80015b4 <DMA2_Stream7_IRQHandler+0x108>)
 8001500:	2201      	movs	r2, #1
 8001502:	711a      	strb	r2, [r3, #4]
		USART1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001504:	4b2a      	ldr	r3, [pc, #168]	@ (80015b0 <DMA2_Stream7_IRQHandler+0x104>)
 8001506:	2201      	movs	r2, #1
 8001508:	711a      	strb	r2, [r3, #4]
		DMA2_Stream7_Flag.Direct_Mode_Error_Flag = true;
 800150a:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <DMA2_Stream7_IRQHandler+0x10c>)
 800150c:	2201      	movs	r2, #1
 800150e:	711a      	strb	r2, [r3, #4]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF7)
 8001510:	4b26      	ldr	r3, [pc, #152]	@ (80015ac <DMA2_Stream7_IRQHandler+0x100>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d011      	beq.n	8001540 <DMA2_Stream7_IRQHandler+0x94>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 800151c:	4b24      	ldr	r3, [pc, #144]	@ (80015b0 <DMA2_Stream7_IRQHandler+0x104>)
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8001522:	4b22      	ldr	r3, [pc, #136]	@ (80015ac <DMA2_Stream7_IRQHandler+0x100>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	4a21      	ldr	r2, [pc, #132]	@ (80015ac <DMA2_Stream7_IRQHandler+0x100>)
 8001528:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800152c:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Error_Flag = true;
 800152e:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <DMA2_Stream7_IRQHandler+0x108>)
 8001530:	2201      	movs	r2, #1
 8001532:	70da      	strb	r2, [r3, #3]
		USART1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001534:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <DMA2_Stream7_IRQHandler+0x104>)
 8001536:	2201      	movs	r2, #1
 8001538:	70da      	strb	r2, [r3, #3]
		DMA2_Stream7_Flag.Transfer_Error_Flag = true;
 800153a:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <DMA2_Stream7_IRQHandler+0x10c>)
 800153c:	2201      	movs	r2, #1
 800153e:	70da      	strb	r2, [r3, #3]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF7)
 8001540:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <DMA2_Stream7_IRQHandler+0x100>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d011      	beq.n	8001570 <DMA2_Stream7_IRQHandler+0xc4>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 800154c:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <DMA2_Stream7_IRQHandler+0x104>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001552:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <DMA2_Stream7_IRQHandler+0x100>)
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	4a15      	ldr	r2, [pc, #84]	@ (80015ac <DMA2_Stream7_IRQHandler+0x100>)
 8001558:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800155c:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800155e:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <DMA2_Stream7_IRQHandler+0x108>)
 8001560:	2201      	movs	r2, #1
 8001562:	709a      	strb	r2, [r3, #2]
		USART1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <DMA2_Stream7_IRQHandler+0x104>)
 8001566:	2201      	movs	r2, #1
 8001568:	709a      	strb	r2, [r3, #2]
		DMA2_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 800156a:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <DMA2_Stream7_IRQHandler+0x10c>)
 800156c:	2201      	movs	r2, #1
 800156e:	709a      	strb	r2, [r3, #2]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF7)
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <DMA2_Stream7_IRQHandler+0x100>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d011      	beq.n	80015a0 <DMA2_Stream7_IRQHandler+0xf4>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <DMA2_Stream7_IRQHandler+0x104>)
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001582:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <DMA2_Stream7_IRQHandler+0x100>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	4a09      	ldr	r2, [pc, #36]	@ (80015ac <DMA2_Stream7_IRQHandler+0x100>)
 8001588:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800158c:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <DMA2_Stream7_IRQHandler+0x108>)
 8001590:	2201      	movs	r2, #1
 8001592:	705a      	strb	r2, [r3, #1]
		USART1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <DMA2_Stream7_IRQHandler+0x104>)
 8001596:	2201      	movs	r2, #1
 8001598:	705a      	strb	r2, [r3, #1]
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
 800159a:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <DMA2_Stream7_IRQHandler+0x10c>)
 800159c:	2201      	movs	r2, #1
 800159e:	705a      	strb	r2, [r3, #1]

	}
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40026400 	.word	0x40026400
 80015b0:	20000120 	.word	0x20000120
 80015b4:	200001d8 	.word	0x200001d8
 80015b8:	20000318 	.word	0x20000318

080015bc <GPIO_Clock_Enable>:
 * @brief  Enables the clock for a specific GPIO port.
 * @param  PORT: Pointer to GPIO port base address.
 * @retval 0 on success, -1 on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a25      	ldr	r2, [pc, #148]	@ (800165c <GPIO_Clock_Enable+0xa0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d106      	bne.n	80015da <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 80015cc:	4b24      	ldr	r3, [pc, #144]	@ (8001660 <GPIO_Clock_Enable+0xa4>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d0:	4a23      	ldr	r2, [pc, #140]	@ (8001660 <GPIO_Clock_Enable+0xa4>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d8:	e039      	b.n	800164e <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a21      	ldr	r2, [pc, #132]	@ (8001664 <GPIO_Clock_Enable+0xa8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d106      	bne.n	80015f0 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001660 <GPIO_Clock_Enable+0xa4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001660 <GPIO_Clock_Enable+0xa4>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	e02e      	b.n	800164e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001668 <GPIO_Clock_Enable+0xac>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d106      	bne.n	8001606 <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 80015f8:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <GPIO_Clock_Enable+0xa4>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fc:	4a18      	ldr	r2, [pc, #96]	@ (8001660 <GPIO_Clock_Enable+0xa4>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	6313      	str	r3, [r2, #48]	@ 0x30
 8001604:	e023      	b.n	800164e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a18      	ldr	r2, [pc, #96]	@ (800166c <GPIO_Clock_Enable+0xb0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d106      	bne.n	800161c <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <GPIO_Clock_Enable+0xa4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a13      	ldr	r2, [pc, #76]	@ (8001660 <GPIO_Clock_Enable+0xa4>)
 8001614:	f043 0308 	orr.w	r3, r3, #8
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	e018      	b.n	800164e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a14      	ldr	r2, [pc, #80]	@ (8001670 <GPIO_Clock_Enable+0xb4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d106      	bne.n	8001632 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8001624:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <GPIO_Clock_Enable+0xa4>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001628:	4a0d      	ldr	r2, [pc, #52]	@ (8001660 <GPIO_Clock_Enable+0xa4>)
 800162a:	f043 0310 	orr.w	r3, r3, #16
 800162e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001630:	e00d      	b.n	800164e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a0f      	ldr	r2, [pc, #60]	@ (8001674 <GPIO_Clock_Enable+0xb8>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d106      	bne.n	8001648 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <GPIO_Clock_Enable+0xa4>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a08      	ldr	r2, [pc, #32]	@ (8001660 <GPIO_Clock_Enable+0xa4>)
 8001640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	e002      	b.n	800164e <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
 800164c:	e000      	b.n	8001650 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	40020000 	.word	0x40020000
 8001660:	40023800 	.word	0x40023800
 8001664:	40020400 	.word	0x40020400
 8001668:	40020800 	.word	0x40020800
 800166c:	40020c00 	.word	0x40020c00
 8001670:	40021000 	.word	0x40021000
 8001674:	40021c00 	.word	0x40021c00

08001678 <GPIO_Pin_Init>:
 * @param  speed: Speed level (low, medium, high, very high).
 * @param  pull: Pull-up/pull-down configuration (none, pull-up, pull-down).
 * @param  alternate_function: Alternate function selection (0-15).
 */
void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	4608      	mov	r0, r1
 8001682:	4611      	mov	r1, r2
 8001684:	461a      	mov	r2, r3
 8001686:	4603      	mov	r3, r0
 8001688:	70fb      	strb	r3, [r7, #3]
 800168a:	460b      	mov	r3, r1
 800168c:	70bb      	strb	r3, [r7, #2]
 800168e:	4613      	mov	r3, r2
 8001690:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ff92 	bl	80015bc <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	78b9      	ldrb	r1, [r7, #2]
 800169e:	78fa      	ldrb	r2, [r7, #3]
 80016a0:	0052      	lsls	r2, r2, #1
 80016a2:	fa01 f202 	lsl.w	r2, r1, r2
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	601a      	str	r2, [r3, #0]

	if(output_type != GPIO_Configuration.Output_Type.None) Port -> OTYPER |= output_type << pin;
 80016ac:	2202      	movs	r2, #2
 80016ae:	787b      	ldrb	r3, [r7, #1]
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d008      	beq.n	80016c6 <GPIO_Pin_Init+0x4e>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	7879      	ldrb	r1, [r7, #1]
 80016ba:	78fa      	ldrb	r2, [r7, #3]
 80016bc:	fa01 f202 	lsl.w	r2, r1, r2
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	605a      	str	r2, [r3, #4]
	if(speed != GPIO_Configuration.Speed.None) Port -> OSPEEDR |= speed << (pin*2);
 80016c6:	2204      	movs	r2, #4
 80016c8:	7c3b      	ldrb	r3, [r7, #16]
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d009      	beq.n	80016e2 <GPIO_Pin_Init+0x6a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	7c39      	ldrb	r1, [r7, #16]
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	0052      	lsls	r2, r2, #1
 80016d8:	fa01 f202 	lsl.w	r2, r1, r2
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	609a      	str	r2, [r3, #8]
	if(pull != GPIO_Configuration.Pull.None) Port -> PUPDR |= pull << (pin*2);
 80016e2:	2204      	movs	r2, #4
 80016e4:	7d3b      	ldrb	r3, [r7, #20]
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d009      	beq.n	80016fe <GPIO_Pin_Init+0x86>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	7d39      	ldrb	r1, [r7, #20]
 80016f0:	78fa      	ldrb	r2, [r7, #3]
 80016f2:	0052      	lsls	r2, r2, #1
 80016f4:	fa01 f202 	lsl.w	r2, r1, r2
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	2b07      	cmp	r3, #7
 8001702:	d80a      	bhi.n	800171a <GPIO_Pin_Init+0xa2>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	7e39      	ldrb	r1, [r7, #24]
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	0092      	lsls	r2, r2, #2
 800170e:	fa01 f202 	lsl.w	r2, r1, r2
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8001718:	e00a      	b.n	8001730 <GPIO_Pin_Init+0xb8>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171e:	7e39      	ldrb	r1, [r7, #24]
 8001720:	78fa      	ldrb	r2, [r7, #3]
 8001722:	3a08      	subs	r2, #8
 8001724:	0092      	lsls	r2, r2, #2
 8001726:	fa01 f202 	lsl.w	r2, r1, r2
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <USB_FS_Pins_Init>:
	return (USB_OTG_OUTEndpointTypeDef *)(USB_OTG_FS_PERIPH_BASE + USB_OTG_OUT_ENDPOINT_BASE + (endpoint_number * 0x20));
}


static void USB_FS_Pins_Init(bool id_pin_enable, bool sof_pin_enable, bool vbus_pin_enable)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b087      	sub	sp, #28
 800173c:	af04      	add	r7, sp, #16
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
 8001742:	460b      	mov	r3, r1
 8001744:	71bb      	strb	r3, [r7, #6]
 8001746:	4613      	mov	r3, r2
 8001748:	717b      	strb	r3, [r7, #5]
	// D+
	GPIO_Pin_Init(GPIOA, 11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.OTG_FS_1);
 800174a:	2002      	movs	r0, #2
 800174c:	2400      	movs	r4, #0
 800174e:	2303      	movs	r3, #3
 8001750:	2200      	movs	r2, #0
 8001752:	210a      	movs	r1, #10
 8001754:	9102      	str	r1, [sp, #8]
 8001756:	9201      	str	r2, [sp, #4]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	4623      	mov	r3, r4
 800175c:	4602      	mov	r2, r0
 800175e:	210b      	movs	r1, #11
 8001760:	4823      	ldr	r0, [pc, #140]	@ (80017f0 <USB_FS_Pins_Init+0xb8>)
 8001762:	f7ff ff89 	bl	8001678 <GPIO_Pin_Init>

	// D-
	GPIO_Pin_Init(GPIOA, 12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.OTG_FS_1);
 8001766:	2002      	movs	r0, #2
 8001768:	2400      	movs	r4, #0
 800176a:	2303      	movs	r3, #3
 800176c:	2200      	movs	r2, #0
 800176e:	210a      	movs	r1, #10
 8001770:	9102      	str	r1, [sp, #8]
 8001772:	9201      	str	r2, [sp, #4]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	4623      	mov	r3, r4
 8001778:	4602      	mov	r2, r0
 800177a:	210c      	movs	r1, #12
 800177c:	481c      	ldr	r0, [pc, #112]	@ (80017f0 <USB_FS_Pins_Init+0xb8>)
 800177e:	f7ff ff7b 	bl	8001678 <GPIO_Pin_Init>

	if(id_pin_enable)
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00d      	beq.n	80017a4 <USB_FS_Pins_Init+0x6c>
	{
		GPIO_Pin_Init(GPIOA, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.OTG_FS_1);
 8001788:	2002      	movs	r0, #2
 800178a:	2400      	movs	r4, #0
 800178c:	2303      	movs	r3, #3
 800178e:	2200      	movs	r2, #0
 8001790:	210a      	movs	r1, #10
 8001792:	9102      	str	r1, [sp, #8]
 8001794:	9201      	str	r2, [sp, #4]
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	4623      	mov	r3, r4
 800179a:	4602      	mov	r2, r0
 800179c:	210a      	movs	r1, #10
 800179e:	4814      	ldr	r0, [pc, #80]	@ (80017f0 <USB_FS_Pins_Init+0xb8>)
 80017a0:	f7ff ff6a 	bl	8001678 <GPIO_Pin_Init>
	}

	if(sof_pin_enable)
 80017a4:	79bb      	ldrb	r3, [r7, #6]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00d      	beq.n	80017c6 <USB_FS_Pins_Init+0x8e>
	{
		GPIO_Pin_Init(GPIOA, 8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.OTG_FS_1);
 80017aa:	2002      	movs	r0, #2
 80017ac:	2400      	movs	r4, #0
 80017ae:	2303      	movs	r3, #3
 80017b0:	2200      	movs	r2, #0
 80017b2:	210a      	movs	r1, #10
 80017b4:	9102      	str	r1, [sp, #8]
 80017b6:	9201      	str	r2, [sp, #4]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	4623      	mov	r3, r4
 80017bc:	4602      	mov	r2, r0
 80017be:	2108      	movs	r1, #8
 80017c0:	480b      	ldr	r0, [pc, #44]	@ (80017f0 <USB_FS_Pins_Init+0xb8>)
 80017c2:	f7ff ff59 	bl	8001678 <GPIO_Pin_Init>
	}

	if(vbus_pin_enable)
 80017c6:	797b      	ldrb	r3, [r7, #5]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00d      	beq.n	80017e8 <USB_FS_Pins_Init+0xb0>
	{
		GPIO_Pin_Init(GPIOA, 9, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);
 80017cc:	2000      	movs	r0, #0
 80017ce:	2402      	movs	r4, #2
 80017d0:	2303      	movs	r3, #3
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	9102      	str	r1, [sp, #8]
 80017d8:	9201      	str	r2, [sp, #4]
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	4623      	mov	r3, r4
 80017de:	4602      	mov	r2, r0
 80017e0:	2109      	movs	r1, #9
 80017e2:	4803      	ldr	r0, [pc, #12]	@ (80017f0 <USB_FS_Pins_Init+0xb8>)
 80017e4:	f7ff ff48 	bl	8001678 <GPIO_Pin_Init>
	}
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd90      	pop	{r4, r7, pc}
 80017f0:	40020000 	.word	0x40020000

080017f4 <USB_FS_Init>:

}


void USB_FS_Init(USB_FS_Config *config)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	dummyUSB = config;
 80017fc:	4a63      	ldr	r2, [pc, #396]	@ (800198c <USB_FS_Init+0x198>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]

	if((config->Mode == USB_FS_Configurations.Modes.Device) || (config->Mode == USB_FS_Configurations.Modes.Host))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2204      	movs	r2, #4
 8001808:	4293      	cmp	r3, r2
 800180a:	d004      	beq.n	8001816 <USB_FS_Init+0x22>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2203      	movs	r2, #3
 8001812:	4293      	cmp	r3, r2
 8001814:	d11a      	bne.n	800184c <USB_FS_Init+0x58>
	{
		RCC -> AHB2ENR |= RCC_AHB2ENR_OTGFSEN;
 8001816:	4b5e      	ldr	r3, [pc, #376]	@ (8001990 <USB_FS_Init+0x19c>)
 8001818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800181a:	4a5d      	ldr	r2, [pc, #372]	@ (8001990 <USB_FS_Init+0x19c>)
 800181c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001820:	6353      	str	r3, [r2, #52]	@ 0x34
		while(!(RCC -> AHB2ENR & RCC_AHB2ENR_OTGFSEN)){}
 8001822:	bf00      	nop
 8001824:	4b5a      	ldr	r3, [pc, #360]	@ (8001990 <USB_FS_Init+0x19c>)
 8001826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f9      	beq.n	8001824 <USB_FS_Init+0x30>
		USB_FS_Pins_Init(0, config->SOF_Pin_Enable, config->VBUS_Pin_Enable);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7859      	ldrb	r1, [r3, #1]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	789b      	ldrb	r3, [r3, #2]
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf14      	ite	ne
 800183c:	2301      	movne	r3, #1
 800183e:	2300      	moveq	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	461a      	mov	r2, r3
 8001844:	2000      	movs	r0, #0
 8001846:	f7ff ff77 	bl	8001738 <USB_FS_Pins_Init>
 800184a:	e01e      	b.n	800188a <USB_FS_Init+0x96>
	}
	else if(config->Mode == USB_FS_Configurations.Modes.Dual_Role_Device)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2202      	movs	r2, #2
 8001852:	4293      	cmp	r3, r2
 8001854:	d119      	bne.n	800188a <USB_FS_Init+0x96>
	{
		RCC -> AHB1ENR |= RCC_AHB2ENR_OTGFSEN;
 8001856:	4b4e      	ldr	r3, [pc, #312]	@ (8001990 <USB_FS_Init+0x19c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a4d      	ldr	r2, [pc, #308]	@ (8001990 <USB_FS_Init+0x19c>)
 800185c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
		while(!(RCC -> AHB2ENR & RCC_AHB2ENR_OTGFSEN)){}
 8001862:	bf00      	nop
 8001864:	4b4a      	ldr	r3, [pc, #296]	@ (8001990 <USB_FS_Init+0x19c>)
 8001866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f9      	beq.n	8001864 <USB_FS_Init+0x70>
		USB_FS_Pins_Init(1, config->SOF_Pin_Enable, config->VBUS_Pin_Enable);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7859      	ldrb	r1, [r3, #1]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	789b      	ldrb	r3, [r3, #2]
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf14      	ite	ne
 800187c:	2301      	movne	r3, #1
 800187e:	2300      	moveq	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	2001      	movs	r0, #1
 8001886:	f7ff ff57 	bl	8001738 <USB_FS_Pins_Init>
	}

	USB_OTG_FS -> GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT_Msk;
 800188a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001894:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8001898:	60d3      	str	r3, [r2, #12]
	USB_OTG_FS -> GUSBCFG |= (0x06 << USB_OTG_GUSBCFG_TRDT_Pos) && USB_OTG_GUSBCFG_TRDT_Msk ;
 800189a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	60d3      	str	r3, [r2, #12]

	USB_OTG_FS -> GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80018aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80018b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018b8:	60d3      	str	r3, [r2, #12]

	if(config->Mode == USB_FS_Configurations.Modes.Device)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2204      	movs	r2, #4
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d110      	bne.n	80018e6 <USB_FS_Init+0xf2>
	{
		USB_OTG_FS -> GUSBCFG &= ~USB_OTG_GUSBCFG_FDMOD_Msk;
 80018c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80018ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80018d2:	60d3      	str	r3, [r2, #12]
		USB_OTG_FS -> GUSBCFG |=  USB_OTG_GUSBCFG_FDMOD;
 80018d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80018de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80018e2:	60d3      	str	r3, [r2, #12]
 80018e4:	e014      	b.n	8001910 <USB_FS_Init+0x11c>
	}
	else if(config->Mode == USB_FS_Configurations.Modes.Host)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2203      	movs	r2, #3
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d10f      	bne.n	8001910 <USB_FS_Init+0x11c>
	{
		USB_OTG_FS -> GUSBCFG &= ~USB_OTG_GUSBCFG_FHMOD_Msk;
 80018f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80018fa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80018fe:	60d3      	str	r3, [r2, #12]
		USB_OTG_FS -> GUSBCFG |=  USB_OTG_GUSBCFG_FHMOD;
 8001900:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800190a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800190e:	60d3      	str	r3, [r2, #12]
	}


	USB_OTG_FS_DEVICE -> DCFG &= ~USB_OTG_DCFG_DSPD;
 8001910:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <USB_FS_Init+0x1a0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a1f      	ldr	r2, [pc, #124]	@ (8001994 <USB_FS_Init+0x1a0>)
 8001916:	f023 0303 	bic.w	r3, r3, #3
 800191a:	6013      	str	r3, [r2, #0]
	USB_OTG_FS_DEVICE -> DCFG |=  USB_OTG_DCFG_DSPD;
 800191c:	4b1d      	ldr	r3, [pc, #116]	@ (8001994 <USB_FS_Init+0x1a0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a1c      	ldr	r2, [pc, #112]	@ (8001994 <USB_FS_Init+0x1a0>)
 8001922:	f043 0303 	orr.w	r3, r3, #3
 8001926:	6013      	str	r3, [r2, #0]

	USB_OTG_FS -> GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001928:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800192c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800192e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001932:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001936:	6393      	str	r3, [r2, #56]	@ 0x38
	USB_OTG_FS -> GCCFG |=  USB_OTG_GCCFG_VBUSBSEN;
 8001938:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800193c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800193e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001942:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001946:	6393      	str	r3, [r2, #56]	@ 0x38

	USB_OTG_FS -> GINTMSK &= ~(USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_SOFM | USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM | USB_OTG_GINTMSK_IEPINT | USB_OTG_GINTMSK_RXFLVLM | USB_OTG_GINTSTS_OEPINT);
 8001948:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800194c:	699a      	ldr	r2, [r3, #24]
 800194e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8001952:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <USB_FS_Init+0x1a4>)
 8001954:	4013      	ands	r3, r2
 8001956:	618b      	str	r3, [r1, #24]
	USB_OTG_FS -> GINTMSK |= (USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_SOFM | USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM | USB_OTG_GINTMSK_IEPINT | USB_OTG_GINTMSK_RXFLVLM | USB_OTG_GINTSTS_OEPINT);
 8001958:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800195c:	699a      	ldr	r2, [r3, #24]
 800195e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8001962:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <USB_FS_Init+0x1a8>)
 8001964:	4313      	orrs	r3, r2
 8001966:	618b      	str	r3, [r1, #24]

	USB_OTG_FS -> GINTSTS = 0xFFFFFFFF;
 8001968:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800196c:	f04f 32ff 	mov.w	r2, #4294967295
 8001970:	615a      	str	r2, [r3, #20]

	USB_OTG_FS -> GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001972:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6093      	str	r3, [r2, #8]

	// High Speed USB will be worked on later
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000320 	.word	0x20000320
 8001990:	40023800 	.word	0x40023800
 8001994:	50000800 	.word	0x50000800
 8001998:	7ff3c7e7 	.word	0x7ff3c7e7
 800199c:	800c3818 	.word	0x800c3818

080019a0 <USB_FS_Connect>:

void USB_FS_Connect(USB_FS_Config *config)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	USB_OTG_FS -> GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80019a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80019b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b6:	6393      	str	r3, [r2, #56]	@ 0x38
	USB_OTG_FS_DEVICE -> DCTL &= ~USB_OTG_DCTL_SDIS;
 80019b8:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <USB_FS_Connect+0x30>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4a04      	ldr	r2, [pc, #16]	@ (80019d0 <USB_FS_Connect+0x30>)
 80019be:	f023 0302 	bic.w	r3, r3, #2
 80019c2:	6053      	str	r3, [r2, #4]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	50000800 	.word	0x50000800

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	@ (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	@ (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f7ff ffc2 	bl	80019d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
//	uint8_t pll_m = 4;
//	uint8_t pll_n = 168; //192
//	uint8_t pll_p = 0;
//	uint8_t pll_q = 7;

	SystemInit();
 8001a72:	f000 f8bf 	bl	8001bf4 <SystemInit>

	uint8_t pll_m = 8;
 8001a76:	2308      	movs	r3, #8
 8001a78:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8001a7a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a7e:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8001a84:	2307      	movs	r3, #7
 8001a86:	70bb      	strb	r3, [r7, #2]

	RCC->PLLCFGR = 0x00000000;
 8001a88:	4b3c      	ldr	r3, [pc, #240]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8001a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a3a      	ldr	r2, [pc, #232]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8001a9a:	bf00      	nop
 8001a9c:	4b37      	ldr	r3, [pc, #220]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f9      	beq.n	8001a9c <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8001aa8:	4b34      	ldr	r3, [pc, #208]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	4a33      	ldr	r2, [pc, #204]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8001ab4:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <MCU_Clock_Setup+0x114>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a31      	ldr	r2, [pc, #196]	@ (8001b80 <MCU_Clock_Setup+0x114>)
 8001aba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001abe:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8001ac0:	4b30      	ldr	r3, [pc, #192]	@ (8001b84 <MCU_Clock_Setup+0x118>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8001b84 <MCU_Clock_Setup+0x118>)
 8001ac6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001aca:	f043 0305 	orr.w	r3, r3, #5
 8001ace:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	78ba      	ldrb	r2, [r7, #2]
 8001ad6:	0611      	lsls	r1, r2, #24
 8001ad8:	78fa      	ldrb	r2, [r7, #3]
 8001ada:	0412      	lsls	r2, r2, #16
 8001adc:	4311      	orrs	r1, r2
 8001ade:	88ba      	ldrh	r2, [r7, #4]
 8001ae0:	0192      	lsls	r2, r2, #6
 8001ae2:	4311      	orrs	r1, r2
 8001ae4:	79fa      	ldrb	r2, [r7, #7]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4a24      	ldr	r2, [pc, #144]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001aec:	430b      	orrs	r3, r1
 8001aee:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8001af0:	4b22      	ldr	r3, [pc, #136]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a21      	ldr	r2, [pc, #132]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001af6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001afa:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8001afc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001afe:	4a1f      	ldr	r2, [pc, #124]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001b04:	4b1d      	ldr	r3, [pc, #116]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4a1c      	ldr	r2, [pc, #112]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001b0a:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8001b0e:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4a19      	ldr	r2, [pc, #100]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001b16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b1a:	6093      	str	r3, [r2, #8]




	RCC -> CR |= RCC_CR_PLLON;
 8001b1c:	4b17      	ldr	r3, [pc, #92]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a16      	ldr	r2, [pc, #88]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001b22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b26:	6013      	str	r3, [r2, #0]



	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8001b28:	bf00      	nop
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f9      	beq.n	8001b2a <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	4a10      	ldr	r2, [pc, #64]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8001b42:	bf00      	nop
 8001b44:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d1f9      	bne.n	8001b44 <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 8001b50:	f000 f862 	bl	8001c18 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8001b54:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <MCU_Clock_Setup+0x11c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	08db      	lsrs	r3, r3, #3
 8001b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b8c <MCU_Clock_Setup+0x120>)
 8001b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff60 	bl	8001a28 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001b68:	4b04      	ldr	r3, [pc, #16]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6c:	4a03      	ldr	r2, [pc, #12]	@ (8001b7c <MCU_Clock_Setup+0x110>)
 8001b6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b72:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40007000 	.word	0x40007000
 8001b84:	40023c00 	.word	0x40023c00
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	18618619 	.word	0x18618619

08001b90 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8001b94:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <Delay_Config+0x2c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <Delay_Config+0x2c>)
 8001b9c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001ba0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <Delay_Config+0x2c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <Delay_Config+0x2c>)
 8001baa:	2205      	movs	r2, #5
 8001bac:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000e010 	.word	0xe000e010

08001bc0 <main>:
USB_FS_Config testUSB;



int main(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8001bc4:	f7ff ff52 	bl	8001a6c <MCU_Clock_Setup>
	Delay_Config();
 8001bc8:	f7ff ffe2 	bl	8001b90 <Delay_Config>


	testUSB.Mode = USB_FS_Configurations.Modes.Device;
 8001bcc:	2204      	movs	r2, #4
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <main+0x30>)
 8001bd0:	701a      	strb	r2, [r3, #0]
	testUSB.SOF_Pin_Enable = 0;
 8001bd2:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <main+0x30>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	705a      	strb	r2, [r3, #1]
	testUSB.VBUS_Pin_Enable = 0;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <main+0x30>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	709a      	strb	r2, [r3, #2]

	USB_FS_Init(&testUSB);
 8001bde:	4804      	ldr	r0, [pc, #16]	@ (8001bf0 <main+0x30>)
 8001be0:	f7ff fe08 	bl	80017f4 <USB_FS_Init>
	USB_FS_Connect(&testUSB);
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <main+0x30>)
 8001be6:	f7ff fedb 	bl	80019a0 <USB_FS_Connect>



	for(;;)
 8001bea:	bf00      	nop
 8001bec:	e7fd      	b.n	8001bea <main+0x2a>
 8001bee:	bf00      	nop
 8001bf0:	20000324 	.word	0x20000324

08001bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <SystemInit+0x20>)
 8001bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bfe:	4a05      	ldr	r2, [pc, #20]	@ (8001c14 <SystemInit+0x20>)
 8001c00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	2302      	movs	r3, #2
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	2302      	movs	r3, #2
 8001c30:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001c32:	4b34      	ldr	r3, [pc, #208]	@ (8001d04 <SystemCoreClockUpdate+0xec>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d011      	beq.n	8001c66 <SystemCoreClockUpdate+0x4e>
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d844      	bhi.n	8001cd2 <SystemCoreClockUpdate+0xba>
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <SystemCoreClockUpdate+0x3e>
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d004      	beq.n	8001c5e <SystemCoreClockUpdate+0x46>
 8001c54:	e03d      	b.n	8001cd2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001c56:	4b2c      	ldr	r3, [pc, #176]	@ (8001d08 <SystemCoreClockUpdate+0xf0>)
 8001c58:	4a2c      	ldr	r2, [pc, #176]	@ (8001d0c <SystemCoreClockUpdate+0xf4>)
 8001c5a:	601a      	str	r2, [r3, #0]
      break;
 8001c5c:	e03d      	b.n	8001cda <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d08 <SystemCoreClockUpdate+0xf0>)
 8001c60:	4a2b      	ldr	r2, [pc, #172]	@ (8001d10 <SystemCoreClockUpdate+0xf8>)
 8001c62:	601a      	str	r2, [r3, #0]
      break;
 8001c64:	e039      	b.n	8001cda <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001c66:	4b27      	ldr	r3, [pc, #156]	@ (8001d04 <SystemCoreClockUpdate+0xec>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	0d9b      	lsrs	r3, r3, #22
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c72:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <SystemCoreClockUpdate+0xec>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c7a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00c      	beq.n	8001c9c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001c82:	4a23      	ldr	r2, [pc, #140]	@ (8001d10 <SystemCoreClockUpdate+0xf8>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d04 <SystemCoreClockUpdate+0xec>)
 8001c8c:	6852      	ldr	r2, [r2, #4]
 8001c8e:	0992      	lsrs	r2, r2, #6
 8001c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c94:	fb02 f303 	mul.w	r3, r2, r3
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	e00b      	b.n	8001cb4 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d0c <SystemCoreClockUpdate+0xf4>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	4a17      	ldr	r2, [pc, #92]	@ (8001d04 <SystemCoreClockUpdate+0xec>)
 8001ca6:	6852      	ldr	r2, [r2, #4]
 8001ca8:	0992      	lsrs	r2, r2, #6
 8001caa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
 8001cb2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001cb4:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <SystemCoreClockUpdate+0xec>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ccc:	4a0e      	ldr	r2, [pc, #56]	@ (8001d08 <SystemCoreClockUpdate+0xf0>)
 8001cce:	6013      	str	r3, [r2, #0]
      break;
 8001cd0:	e003      	b.n	8001cda <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <SystemCoreClockUpdate+0xf0>)
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d0c <SystemCoreClockUpdate+0xf4>)
 8001cd6:	601a      	str	r2, [r3, #0]
      break;
 8001cd8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001cda:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <SystemCoreClockUpdate+0xec>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	091b      	lsrs	r3, r3, #4
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	4a0b      	ldr	r2, [pc, #44]	@ (8001d14 <SystemCoreClockUpdate+0xfc>)
 8001ce6:	5cd3      	ldrb	r3, [r2, r3]
 8001ce8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001cea:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <SystemCoreClockUpdate+0xf0>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf4:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <SystemCoreClockUpdate+0xf0>)
 8001cf6:	6013      	str	r3, [r2, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	371c      	adds	r7, #28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40023800 	.word	0x40023800
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	00f42400 	.word	0x00f42400
 8001d10:	017d7840 	.word	0x017d7840
 8001d14:	08001dcc 	.word	0x08001dcc

08001d18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d18:	480d      	ldr	r0, [pc, #52]	@ (8001d50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d1a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d1c:	f7ff ff6a 	bl	8001bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d20:	480c      	ldr	r0, [pc, #48]	@ (8001d54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d22:	490d      	ldr	r1, [pc, #52]	@ (8001d58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d24:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <LoopForever+0xe>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d36:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d38:	4c0a      	ldr	r4, [pc, #40]	@ (8001d64 <LoopForever+0x16>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d46:	f000 f811 	bl	8001d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d4a:	f7ff ff39 	bl	8001bc0 <main>

08001d4e <LoopForever>:

LoopForever:
  b LoopForever
 8001d4e:	e7fe      	b.n	8001d4e <LoopForever>
  ldr   r0, =_estack
 8001d50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001d5c:	08001de4 	.word	0x08001de4
  ldr r2, =_sbss
 8001d60:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001d64:	20000328 	.word	0x20000328

08001d68 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC_IRQHandler>
	...

08001d6c <__libc_init_array>:
 8001d6c:	b570      	push	{r4, r5, r6, lr}
 8001d6e:	4d0d      	ldr	r5, [pc, #52]	@ (8001da4 <__libc_init_array+0x38>)
 8001d70:	4c0d      	ldr	r4, [pc, #52]	@ (8001da8 <__libc_init_array+0x3c>)
 8001d72:	1b64      	subs	r4, r4, r5
 8001d74:	10a4      	asrs	r4, r4, #2
 8001d76:	2600      	movs	r6, #0
 8001d78:	42a6      	cmp	r6, r4
 8001d7a:	d109      	bne.n	8001d90 <__libc_init_array+0x24>
 8001d7c:	4d0b      	ldr	r5, [pc, #44]	@ (8001dac <__libc_init_array+0x40>)
 8001d7e:	4c0c      	ldr	r4, [pc, #48]	@ (8001db0 <__libc_init_array+0x44>)
 8001d80:	f000 f818 	bl	8001db4 <_init>
 8001d84:	1b64      	subs	r4, r4, r5
 8001d86:	10a4      	asrs	r4, r4, #2
 8001d88:	2600      	movs	r6, #0
 8001d8a:	42a6      	cmp	r6, r4
 8001d8c:	d105      	bne.n	8001d9a <__libc_init_array+0x2e>
 8001d8e:	bd70      	pop	{r4, r5, r6, pc}
 8001d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d94:	4798      	blx	r3
 8001d96:	3601      	adds	r6, #1
 8001d98:	e7ee      	b.n	8001d78 <__libc_init_array+0xc>
 8001d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d9e:	4798      	blx	r3
 8001da0:	3601      	adds	r6, #1
 8001da2:	e7f2      	b.n	8001d8a <__libc_init_array+0x1e>
 8001da4:	08001ddc 	.word	0x08001ddc
 8001da8:	08001ddc 	.word	0x08001ddc
 8001dac:	08001ddc 	.word	0x08001ddc
 8001db0:	08001de0 	.word	0x08001de0

08001db4 <_init>:
 8001db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db6:	bf00      	nop
 8001db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dba:	bc08      	pop	{r3}
 8001dbc:	469e      	mov	lr, r3
 8001dbe:	4770      	bx	lr

08001dc0 <_fini>:
 8001dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc2:	bf00      	nop
 8001dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dc6:	bc08      	pop	{r3}
 8001dc8:	469e      	mov	lr, r3
 8001dca:	4770      	bx	lr
