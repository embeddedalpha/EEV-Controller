
EEV_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b30  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001cb8  08001cb8  00002cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cc8  08001cc8  00003004  2**0
                  CONTENTS
  4 .ARM          00000000  08001cc8  08001cc8  00003004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cc8  08001cc8  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cc8  08001cc8  00002cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ccc  08001ccc  00002ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001cd0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003004  2**0
                  CONTENTS
 10 .bss          0000043c  20000004  20000004  00003004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000440  20000440  00003004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004f76  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008bd  00000000  00000000  00007faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  00008868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000016a  00000000  00000000  00008a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000008eb  00000000  00000000  00008bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002f2a  00000000  00000000  0000949d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f605  00000000  00000000  0000c3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009b9cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000678  00000000  00000000  0009ba10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0009c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001ca0 	.word	0x08001ca0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001ca0 	.word	0x08001ca0

080001c8 <DMA1_Stream0_IRQHandler>:
 * status flags for FIFO error, direct mode error, transfer error, half
 * transfer complete, and transfer complete, and clears the respective
 * interrupt flag after handling it.
 */
void DMA1_Stream0_IRQHandler(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF0)
 80001cc:	4b54      	ldr	r3, [pc, #336]	@ (8000320 <DMA1_Stream0_IRQHandler+0x158>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	f003 0301 	and.w	r3, r3, #1
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d01a      	beq.n	800020e <DMA1_Stream0_IRQHandler+0x46>
	{
		TIM5_CH3_DMA_Flag.Fifo_Error_Flag = true;
 80001d8:	4b52      	ldr	r3, [pc, #328]	@ (8000324 <DMA1_Stream0_IRQHandler+0x15c>)
 80001da:	2201      	movs	r2, #1
 80001dc:	711a      	strb	r2, [r3, #4]
		TIM4_CH1_DMA_Flag.Fifo_Error_Flag = true;
 80001de:	4b52      	ldr	r3, [pc, #328]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 80001e4:	4b51      	ldr	r3, [pc, #324]	@ (800032c <DMA1_Stream0_IRQHandler+0x164>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	711a      	strb	r2, [r3, #4]
		USART5_RX_DMA_Flag.Fifo_Error_Flag = true;
 80001ea:	4b51      	ldr	r3, [pc, #324]	@ (8000330 <DMA1_Stream0_IRQHandler+0x168>)
 80001ec:	2201      	movs	r2, #1
 80001ee:	711a      	strb	r2, [r3, #4]
		I2C1_RX_DMA_Flag.Fifo_Error_Flag = true;
 80001f0:	4b50      	ldr	r3, [pc, #320]	@ (8000334 <DMA1_Stream0_IRQHandler+0x16c>)
 80001f2:	2201      	movs	r2, #1
 80001f4:	711a      	strb	r2, [r3, #4]
		SPI3_RX_DMA_Flag.Fifo_Error_Flag = true;
 80001f6:	4b50      	ldr	r3, [pc, #320]	@ (8000338 <DMA1_Stream0_IRQHandler+0x170>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	711a      	strb	r2, [r3, #4]
		DMA1_Stream0_Flag.Fifo_Error_Flag = true;
 80001fc:	4b4f      	ldr	r3, [pc, #316]	@ (800033c <DMA1_Stream0_IRQHandler+0x174>)
 80001fe:	2201      	movs	r2, #1
 8000200:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000202:	4b47      	ldr	r3, [pc, #284]	@ (8000320 <DMA1_Stream0_IRQHandler+0x158>)
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	4a46      	ldr	r2, [pc, #280]	@ (8000320 <DMA1_Stream0_IRQHandler+0x158>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF0)
 800020e:	4b44      	ldr	r3, [pc, #272]	@ (8000320 <DMA1_Stream0_IRQHandler+0x158>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f003 0304 	and.w	r3, r3, #4
 8000216:	2b00      	cmp	r3, #0
 8000218:	d01a      	beq.n	8000250 <DMA1_Stream0_IRQHandler+0x88>
	{
		TIM5_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 800021a:	4b42      	ldr	r3, [pc, #264]	@ (8000324 <DMA1_Stream0_IRQHandler+0x15c>)
 800021c:	2201      	movs	r2, #1
 800021e:	70da      	strb	r2, [r3, #3]
		TIM4_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000220:	4b41      	ldr	r3, [pc, #260]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 8000222:	2201      	movs	r2, #1
 8000224:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000226:	4b41      	ldr	r3, [pc, #260]	@ (800032c <DMA1_Stream0_IRQHandler+0x164>)
 8000228:	2201      	movs	r2, #1
 800022a:	70da      	strb	r2, [r3, #3]
		USART5_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800022c:	4b40      	ldr	r3, [pc, #256]	@ (8000330 <DMA1_Stream0_IRQHandler+0x168>)
 800022e:	2201      	movs	r2, #1
 8000230:	70da      	strb	r2, [r3, #3]
		I2C1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000232:	4b40      	ldr	r3, [pc, #256]	@ (8000334 <DMA1_Stream0_IRQHandler+0x16c>)
 8000234:	2201      	movs	r2, #1
 8000236:	70da      	strb	r2, [r3, #3]
		SPI3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000238:	4b3f      	ldr	r3, [pc, #252]	@ (8000338 <DMA1_Stream0_IRQHandler+0x170>)
 800023a:	2201      	movs	r2, #1
 800023c:	70da      	strb	r2, [r3, #3]
		DMA1_Stream0_Flag.Direct_Mode_Error_Flag = true;
 800023e:	4b3f      	ldr	r3, [pc, #252]	@ (800033c <DMA1_Stream0_IRQHandler+0x174>)
 8000240:	2201      	movs	r2, #1
 8000242:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000244:	4b36      	ldr	r3, [pc, #216]	@ (8000320 <DMA1_Stream0_IRQHandler+0x158>)
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	4a35      	ldr	r2, [pc, #212]	@ (8000320 <DMA1_Stream0_IRQHandler+0x158>)
 800024a:	f043 0304 	orr.w	r3, r3, #4
 800024e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF0)
 8000250:	4b33      	ldr	r3, [pc, #204]	@ (8000320 <DMA1_Stream0_IRQHandler+0x158>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f003 0308 	and.w	r3, r3, #8
 8000258:	2b00      	cmp	r3, #0
 800025a:	d01a      	beq.n	8000292 <DMA1_Stream0_IRQHandler+0xca>
	{
		TIM5_CH3_DMA_Flag.Transfer_Error_Flag= true;
 800025c:	4b31      	ldr	r3, [pc, #196]	@ (8000324 <DMA1_Stream0_IRQHandler+0x15c>)
 800025e:	2201      	movs	r2, #1
 8000260:	709a      	strb	r2, [r3, #2]
		TIM4_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000262:	4b31      	ldr	r3, [pc, #196]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 8000264:	2201      	movs	r2, #1
 8000266:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000268:	4b30      	ldr	r3, [pc, #192]	@ (800032c <DMA1_Stream0_IRQHandler+0x164>)
 800026a:	2201      	movs	r2, #1
 800026c:	709a      	strb	r2, [r3, #2]
		USART5_RX_DMA_Flag.Transfer_Error_Flag = true;
 800026e:	4b30      	ldr	r3, [pc, #192]	@ (8000330 <DMA1_Stream0_IRQHandler+0x168>)
 8000270:	2201      	movs	r2, #1
 8000272:	709a      	strb	r2, [r3, #2]
		I2C1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000274:	4b2f      	ldr	r3, [pc, #188]	@ (8000334 <DMA1_Stream0_IRQHandler+0x16c>)
 8000276:	2201      	movs	r2, #1
 8000278:	709a      	strb	r2, [r3, #2]
		SPI3_RX_DMA_Flag.Transfer_Error_Flag = true;
 800027a:	4b2f      	ldr	r3, [pc, #188]	@ (8000338 <DMA1_Stream0_IRQHandler+0x170>)
 800027c:	2201      	movs	r2, #1
 800027e:	709a      	strb	r2, [r3, #2]
		DMA1_Stream0_Flag.Transfer_Error_Flag = true;
 8000280:	4b2e      	ldr	r3, [pc, #184]	@ (800033c <DMA1_Stream0_IRQHandler+0x174>)
 8000282:	2201      	movs	r2, #1
 8000284:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000286:	4b26      	ldr	r3, [pc, #152]	@ (8000320 <DMA1_Stream0_IRQHandler+0x158>)
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	4a25      	ldr	r2, [pc, #148]	@ (8000320 <DMA1_Stream0_IRQHandler+0x158>)
 800028c:	f043 0308 	orr.w	r3, r3, #8
 8000290:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF0)
 8000292:	4b23      	ldr	r3, [pc, #140]	@ (8000320 <DMA1_Stream0_IRQHandler+0x158>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f003 0310 	and.w	r3, r3, #16
 800029a:	2b00      	cmp	r3, #0
 800029c:	d01a      	beq.n	80002d4 <DMA1_Stream0_IRQHandler+0x10c>
	{
		TIM5_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800029e:	4b21      	ldr	r3, [pc, #132]	@ (8000324 <DMA1_Stream0_IRQHandler+0x15c>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	705a      	strb	r2, [r3, #1]
		TIM4_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002a4:	4b20      	ldr	r3, [pc, #128]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002aa:	4b20      	ldr	r3, [pc, #128]	@ (800032c <DMA1_Stream0_IRQHandler+0x164>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	705a      	strb	r2, [r3, #1]
		USART5_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000330 <DMA1_Stream0_IRQHandler+0x168>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	705a      	strb	r2, [r3, #1]
		I2C1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000334 <DMA1_Stream0_IRQHandler+0x16c>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	705a      	strb	r2, [r3, #1]
		SPI3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000338 <DMA1_Stream0_IRQHandler+0x170>)
 80002be:	2201      	movs	r2, #1
 80002c0:	705a      	strb	r2, [r3, #1]
		DMA1_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 80002c2:	4b1e      	ldr	r3, [pc, #120]	@ (800033c <DMA1_Stream0_IRQHandler+0x174>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 80002c8:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <DMA1_Stream0_IRQHandler+0x158>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	4a14      	ldr	r2, [pc, #80]	@ (8000320 <DMA1_Stream0_IRQHandler+0x158>)
 80002ce:	f043 0310 	orr.w	r3, r3, #16
 80002d2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF0)
 80002d4:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <DMA1_Stream0_IRQHandler+0x158>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f003 0320 	and.w	r3, r3, #32
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d01a      	beq.n	8000316 <DMA1_Stream0_IRQHandler+0x14e>
	{
		TIM5_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 80002e0:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <DMA1_Stream0_IRQHandler+0x15c>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	701a      	strb	r2, [r3, #0]
		TIM4_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 80002e6:	4b10      	ldr	r3, [pc, #64]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	@ (800032c <DMA1_Stream0_IRQHandler+0x164>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	701a      	strb	r2, [r3, #0]
		USART5_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80002f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000330 <DMA1_Stream0_IRQHandler+0x168>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	701a      	strb	r2, [r3, #0]
		I2C1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80002f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000334 <DMA1_Stream0_IRQHandler+0x16c>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	701a      	strb	r2, [r3, #0]
		SPI3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000338 <DMA1_Stream0_IRQHandler+0x170>)
 8000300:	2201      	movs	r2, #1
 8000302:	701a      	strb	r2, [r3, #0]
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
 8000304:	4b0d      	ldr	r3, [pc, #52]	@ (800033c <DMA1_Stream0_IRQHandler+0x174>)
 8000306:	2201      	movs	r2, #1
 8000308:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 800030a:	4b05      	ldr	r3, [pc, #20]	@ (8000320 <DMA1_Stream0_IRQHandler+0x158>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	4a04      	ldr	r2, [pc, #16]	@ (8000320 <DMA1_Stream0_IRQHandler+0x158>)
 8000310:	f043 0320 	orr.w	r3, r3, #32
 8000314:	6093      	str	r3, [r2, #8]
	}
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	40026000 	.word	0x40026000
 8000324:	200001c8 	.word	0x200001c8
 8000328:	200001a8 	.word	0x200001a8
 800032c:	200000e8 	.word	0x200000e8
 8000330:	200000c0 	.word	0x200000c0
 8000334:	20000038 	.word	0x20000038
 8000338:	20000068 	.word	0x20000068
 800033c:	20000210 	.word	0x20000210

08000340 <DMA1_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream1_IRQHandler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF1)
 8000344:	4b45      	ldr	r3, [pc, #276]	@ (800045c <DMA1_Stream1_IRQHandler+0x11c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800034c:	2b00      	cmp	r3, #0
 800034e:	d014      	beq.n	800037a <DMA1_Stream1_IRQHandler+0x3a>
	{
		TIM2_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000350:	4b43      	ldr	r3, [pc, #268]	@ (8000460 <DMA1_Stream1_IRQHandler+0x120>)
 8000352:	2201      	movs	r2, #1
 8000354:	711a      	strb	r2, [r3, #4]
		TIM6_UP_DMA_Flag.Fifo_Error_Flag = true;
 8000356:	4b43      	ldr	r3, [pc, #268]	@ (8000464 <DMA1_Stream1_IRQHandler+0x124>)
 8000358:	2201      	movs	r2, #1
 800035a:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 800035c:	4b42      	ldr	r3, [pc, #264]	@ (8000468 <DMA1_Stream1_IRQHandler+0x128>)
 800035e:	2201      	movs	r2, #1
 8000360:	711a      	strb	r2, [r3, #4]
		USART3_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000362:	4b42      	ldr	r3, [pc, #264]	@ (800046c <DMA1_Stream1_IRQHandler+0x12c>)
 8000364:	2201      	movs	r2, #1
 8000366:	711a      	strb	r2, [r3, #4]
		DMA1_Stream1_Flag.Fifo_Error_Flag = true;
 8000368:	4b41      	ldr	r3, [pc, #260]	@ (8000470 <DMA1_Stream1_IRQHandler+0x130>)
 800036a:	2201      	movs	r2, #1
 800036c:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 800036e:	4b3b      	ldr	r3, [pc, #236]	@ (800045c <DMA1_Stream1_IRQHandler+0x11c>)
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	4a3a      	ldr	r2, [pc, #232]	@ (800045c <DMA1_Stream1_IRQHandler+0x11c>)
 8000374:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000378:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF1)
 800037a:	4b38      	ldr	r3, [pc, #224]	@ (800045c <DMA1_Stream1_IRQHandler+0x11c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000382:	2b00      	cmp	r3, #0
 8000384:	d014      	beq.n	80003b0 <DMA1_Stream1_IRQHandler+0x70>
	{
		TIM2_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000386:	4b36      	ldr	r3, [pc, #216]	@ (8000460 <DMA1_Stream1_IRQHandler+0x120>)
 8000388:	2201      	movs	r2, #1
 800038a:	70da      	strb	r2, [r3, #3]
		TIM6_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 800038c:	4b35      	ldr	r3, [pc, #212]	@ (8000464 <DMA1_Stream1_IRQHandler+0x124>)
 800038e:	2201      	movs	r2, #1
 8000390:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000392:	4b35      	ldr	r3, [pc, #212]	@ (8000468 <DMA1_Stream1_IRQHandler+0x128>)
 8000394:	2201      	movs	r2, #1
 8000396:	70da      	strb	r2, [r3, #3]
		USART3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000398:	4b34      	ldr	r3, [pc, #208]	@ (800046c <DMA1_Stream1_IRQHandler+0x12c>)
 800039a:	2201      	movs	r2, #1
 800039c:	70da      	strb	r2, [r3, #3]
		DMA1_Stream1_Flag.Direct_Mode_Error_Flag = true;
 800039e:	4b34      	ldr	r3, [pc, #208]	@ (8000470 <DMA1_Stream1_IRQHandler+0x130>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80003a4:	4b2d      	ldr	r3, [pc, #180]	@ (800045c <DMA1_Stream1_IRQHandler+0x11c>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a2c      	ldr	r2, [pc, #176]	@ (800045c <DMA1_Stream1_IRQHandler+0x11c>)
 80003aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003ae:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF1)
 80003b0:	4b2a      	ldr	r3, [pc, #168]	@ (800045c <DMA1_Stream1_IRQHandler+0x11c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d014      	beq.n	80003e6 <DMA1_Stream1_IRQHandler+0xa6>
	{
		TIM2_CH3_DMA_Flag.Transfer_Error_Flag = true;
 80003bc:	4b28      	ldr	r3, [pc, #160]	@ (8000460 <DMA1_Stream1_IRQHandler+0x120>)
 80003be:	2201      	movs	r2, #1
 80003c0:	709a      	strb	r2, [r3, #2]
		TIM6_UP_DMA_Flag.Transfer_Error_Flag = true;
 80003c2:	4b28      	ldr	r3, [pc, #160]	@ (8000464 <DMA1_Stream1_IRQHandler+0x124>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 80003c8:	4b27      	ldr	r3, [pc, #156]	@ (8000468 <DMA1_Stream1_IRQHandler+0x128>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	709a      	strb	r2, [r3, #2]
		USART3_RX_DMA_Flag.Transfer_Error_Flag = true;
 80003ce:	4b27      	ldr	r3, [pc, #156]	@ (800046c <DMA1_Stream1_IRQHandler+0x12c>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	709a      	strb	r2, [r3, #2]
		DMA1_Stream1_Flag.Transfer_Error_Flag = true;
 80003d4:	4b26      	ldr	r3, [pc, #152]	@ (8000470 <DMA1_Stream1_IRQHandler+0x130>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 80003da:	4b20      	ldr	r3, [pc, #128]	@ (800045c <DMA1_Stream1_IRQHandler+0x11c>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	4a1f      	ldr	r2, [pc, #124]	@ (800045c <DMA1_Stream1_IRQHandler+0x11c>)
 80003e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003e4:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF1)
 80003e6:	4b1d      	ldr	r3, [pc, #116]	@ (800045c <DMA1_Stream1_IRQHandler+0x11c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d014      	beq.n	800041c <DMA1_Stream1_IRQHandler+0xdc>
	{
		TIM2_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80003f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000460 <DMA1_Stream1_IRQHandler+0x120>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	705a      	strb	r2, [r3, #1]
		TIM6_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80003f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <DMA1_Stream1_IRQHandler+0x124>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80003fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000468 <DMA1_Stream1_IRQHandler+0x128>)
 8000400:	2201      	movs	r2, #1
 8000402:	705a      	strb	r2, [r3, #1]
		USART3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000404:	4b19      	ldr	r3, [pc, #100]	@ (800046c <DMA1_Stream1_IRQHandler+0x12c>)
 8000406:	2201      	movs	r2, #1
 8000408:	705a      	strb	r2, [r3, #1]
		DMA1_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 800040a:	4b19      	ldr	r3, [pc, #100]	@ (8000470 <DMA1_Stream1_IRQHandler+0x130>)
 800040c:	2201      	movs	r2, #1
 800040e:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000410:	4b12      	ldr	r3, [pc, #72]	@ (800045c <DMA1_Stream1_IRQHandler+0x11c>)
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	4a11      	ldr	r2, [pc, #68]	@ (800045c <DMA1_Stream1_IRQHandler+0x11c>)
 8000416:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800041a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF1)
 800041c:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <DMA1_Stream1_IRQHandler+0x11c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000424:	2b00      	cmp	r3, #0
 8000426:	d014      	beq.n	8000452 <DMA1_Stream1_IRQHandler+0x112>
	{
		TIM2_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000428:	4b0d      	ldr	r3, [pc, #52]	@ (8000460 <DMA1_Stream1_IRQHandler+0x120>)
 800042a:	2201      	movs	r2, #1
 800042c:	701a      	strb	r2, [r3, #0]
		TIM6_UP_DMA_Flag.Transfer_Complete_Flag = true;
 800042e:	4b0d      	ldr	r3, [pc, #52]	@ (8000464 <DMA1_Stream1_IRQHandler+0x124>)
 8000430:	2201      	movs	r2, #1
 8000432:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000434:	4b0c      	ldr	r3, [pc, #48]	@ (8000468 <DMA1_Stream1_IRQHandler+0x128>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
		USART3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800043a:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <DMA1_Stream1_IRQHandler+0x12c>)
 800043c:	2201      	movs	r2, #1
 800043e:	701a      	strb	r2, [r3, #0]
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
 8000440:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <DMA1_Stream1_IRQHandler+0x130>)
 8000442:	2201      	movs	r2, #1
 8000444:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000446:	4b05      	ldr	r3, [pc, #20]	@ (800045c <DMA1_Stream1_IRQHandler+0x11c>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	4a04      	ldr	r2, [pc, #16]	@ (800045c <DMA1_Stream1_IRQHandler+0x11c>)
 800044c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000450:	6093      	str	r3, [r2, #8]
	}
}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr
 800045c:	40026000 	.word	0x40026000
 8000460:	20000178 	.word	0x20000178
 8000464:	200001d8 	.word	0x200001d8
 8000468:	200000e0 	.word	0x200000e0
 800046c:	200000a8 	.word	0x200000a8
 8000470:	20000218 	.word	0x20000218

08000474 <DMA1_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream2_IRQHandler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF2)
 8000478:	4b2f      	ldr	r3, [pc, #188]	@ (8000538 <DMA1_Stream2_IRQHandler+0xc4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000480:	2b00      	cmp	r3, #0
 8000482:	d00b      	beq.n	800049c <DMA1_Stream2_IRQHandler+0x28>
	{
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000484:	4b2d      	ldr	r3, [pc, #180]	@ (800053c <DMA1_Stream2_IRQHandler+0xc8>)
 8000486:	2201      	movs	r2, #1
 8000488:	711a      	strb	r2, [r3, #4]
		DMA1_Stream2_Flag.Fifo_Error_Flag = true;
 800048a:	4b2d      	ldr	r3, [pc, #180]	@ (8000540 <DMA1_Stream2_IRQHandler+0xcc>)
 800048c:	2201      	movs	r2, #1
 800048e:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000490:	4b29      	ldr	r3, [pc, #164]	@ (8000538 <DMA1_Stream2_IRQHandler+0xc4>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	4a28      	ldr	r2, [pc, #160]	@ (8000538 <DMA1_Stream2_IRQHandler+0xc4>)
 8000496:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800049a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF2)
 800049c:	4b26      	ldr	r3, [pc, #152]	@ (8000538 <DMA1_Stream2_IRQHandler+0xc4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d00b      	beq.n	80004c0 <DMA1_Stream2_IRQHandler+0x4c>
	{
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80004a8:	4b24      	ldr	r3, [pc, #144]	@ (800053c <DMA1_Stream2_IRQHandler+0xc8>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	70da      	strb	r2, [r3, #3]
		DMA1_Stream2_Flag.Direct_Mode_Error_Flag = true;
 80004ae:	4b24      	ldr	r3, [pc, #144]	@ (8000540 <DMA1_Stream2_IRQHandler+0xcc>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 80004b4:	4b20      	ldr	r3, [pc, #128]	@ (8000538 <DMA1_Stream2_IRQHandler+0xc4>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	4a1f      	ldr	r2, [pc, #124]	@ (8000538 <DMA1_Stream2_IRQHandler+0xc4>)
 80004ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004be:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF2)
 80004c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000538 <DMA1_Stream2_IRQHandler+0xc4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d00b      	beq.n	80004e4 <DMA1_Stream2_IRQHandler+0x70>
	{
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 80004cc:	4b1b      	ldr	r3, [pc, #108]	@ (800053c <DMA1_Stream2_IRQHandler+0xc8>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	709a      	strb	r2, [r3, #2]
		DMA1_Stream2_Flag.Transfer_Error_Flag = true;
 80004d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <DMA1_Stream2_IRQHandler+0xcc>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 80004d8:	4b17      	ldr	r3, [pc, #92]	@ (8000538 <DMA1_Stream2_IRQHandler+0xc4>)
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	4a16      	ldr	r2, [pc, #88]	@ (8000538 <DMA1_Stream2_IRQHandler+0xc4>)
 80004de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004e2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF2)
 80004e4:	4b14      	ldr	r3, [pc, #80]	@ (8000538 <DMA1_Stream2_IRQHandler+0xc4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d00b      	beq.n	8000508 <DMA1_Stream2_IRQHandler+0x94>
	{
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80004f0:	4b12      	ldr	r3, [pc, #72]	@ (800053c <DMA1_Stream2_IRQHandler+0xc8>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	705a      	strb	r2, [r3, #1]
		DMA1_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 80004f6:	4b12      	ldr	r3, [pc, #72]	@ (8000540 <DMA1_Stream2_IRQHandler+0xcc>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 80004fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <DMA1_Stream2_IRQHandler+0xc4>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	4a0d      	ldr	r2, [pc, #52]	@ (8000538 <DMA1_Stream2_IRQHandler+0xc4>)
 8000502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000506:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF2)
 8000508:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <DMA1_Stream2_IRQHandler+0xc4>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000510:	2b00      	cmp	r3, #0
 8000512:	d00b      	beq.n	800052c <DMA1_Stream2_IRQHandler+0xb8>
	{
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000514:	4b09      	ldr	r3, [pc, #36]	@ (800053c <DMA1_Stream2_IRQHandler+0xc8>)
 8000516:	2201      	movs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
 800051a:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <DMA1_Stream2_IRQHandler+0xcc>)
 800051c:	2201      	movs	r2, #1
 800051e:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8000520:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <DMA1_Stream2_IRQHandler+0xc4>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	4a04      	ldr	r2, [pc, #16]	@ (8000538 <DMA1_Stream2_IRQHandler+0xc4>)
 8000526:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800052a:	6093      	str	r3, [r2, #8]
	}
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40026000 	.word	0x40026000
 800053c:	200000b0 	.word	0x200000b0
 8000540:	20000220 	.word	0x20000220

08000544 <DMA1_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream3_IRQHandler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF3)
 8000548:	4b54      	ldr	r3, [pc, #336]	@ (800069c <DMA1_Stream3_IRQHandler+0x158>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000550:	2b00      	cmp	r3, #0
 8000552:	d01a      	beq.n	800058a <DMA1_Stream3_IRQHandler+0x46>
	{
		TIM5_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000554:	4b52      	ldr	r3, [pc, #328]	@ (80006a0 <DMA1_Stream3_IRQHandler+0x15c>)
 8000556:	2201      	movs	r2, #1
 8000558:	711a      	strb	r2, [r3, #4]
		TIM4_CH2_DMA_Flag.Fifo_Error_Flag = true;
 800055a:	4b52      	ldr	r3, [pc, #328]	@ (80006a4 <DMA1_Stream3_IRQHandler+0x160>)
 800055c:	2201      	movs	r2, #1
 800055e:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000560:	4b51      	ldr	r3, [pc, #324]	@ (80006a8 <DMA1_Stream3_IRQHandler+0x164>)
 8000562:	2201      	movs	r2, #1
 8000564:	711a      	strb	r2, [r3, #4]
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000566:	4b51      	ldr	r3, [pc, #324]	@ (80006ac <DMA1_Stream3_IRQHandler+0x168>)
 8000568:	2201      	movs	r2, #1
 800056a:	711a      	strb	r2, [r3, #4]
		I2S2_RX_DMA_Flag.Fifo_Error_Flag = true;
 800056c:	4b50      	ldr	r3, [pc, #320]	@ (80006b0 <DMA1_Stream3_IRQHandler+0x16c>)
 800056e:	2201      	movs	r2, #1
 8000570:	711a      	strb	r2, [r3, #4]
		SPI2_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000572:	4b50      	ldr	r3, [pc, #320]	@ (80006b4 <DMA1_Stream3_IRQHandler+0x170>)
 8000574:	2201      	movs	r2, #1
 8000576:	711a      	strb	r2, [r3, #4]
		DMA1_Stream3_Flag.Fifo_Error_Flag = true;
 8000578:	4b4f      	ldr	r3, [pc, #316]	@ (80006b8 <DMA1_Stream3_IRQHandler+0x174>)
 800057a:	2201      	movs	r2, #1
 800057c:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 800057e:	4b47      	ldr	r3, [pc, #284]	@ (800069c <DMA1_Stream3_IRQHandler+0x158>)
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	4a46      	ldr	r2, [pc, #280]	@ (800069c <DMA1_Stream3_IRQHandler+0x158>)
 8000584:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000588:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF3)
 800058a:	4b44      	ldr	r3, [pc, #272]	@ (800069c <DMA1_Stream3_IRQHandler+0x158>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000592:	2b00      	cmp	r3, #0
 8000594:	d01a      	beq.n	80005cc <DMA1_Stream3_IRQHandler+0x88>
	{
		TIM5_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000596:	4b42      	ldr	r3, [pc, #264]	@ (80006a0 <DMA1_Stream3_IRQHandler+0x15c>)
 8000598:	2201      	movs	r2, #1
 800059a:	70da      	strb	r2, [r3, #3]
		TIM4_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800059c:	4b41      	ldr	r3, [pc, #260]	@ (80006a4 <DMA1_Stream3_IRQHandler+0x160>)
 800059e:	2201      	movs	r2, #1
 80005a0:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005a2:	4b41      	ldr	r3, [pc, #260]	@ (80006a8 <DMA1_Stream3_IRQHandler+0x164>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	70da      	strb	r2, [r3, #3]
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005a8:	4b40      	ldr	r3, [pc, #256]	@ (80006ac <DMA1_Stream3_IRQHandler+0x168>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	70da      	strb	r2, [r3, #3]
		I2S2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005ae:	4b40      	ldr	r3, [pc, #256]	@ (80006b0 <DMA1_Stream3_IRQHandler+0x16c>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	70da      	strb	r2, [r3, #3]
		SPI2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005b4:	4b3f      	ldr	r3, [pc, #252]	@ (80006b4 <DMA1_Stream3_IRQHandler+0x170>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	70da      	strb	r2, [r3, #3]
		DMA1_Stream3_Flag.Direct_Mode_Error_Flag = true;
 80005ba:	4b3f      	ldr	r3, [pc, #252]	@ (80006b8 <DMA1_Stream3_IRQHandler+0x174>)
 80005bc:	2201      	movs	r2, #1
 80005be:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80005c0:	4b36      	ldr	r3, [pc, #216]	@ (800069c <DMA1_Stream3_IRQHandler+0x158>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	4a35      	ldr	r2, [pc, #212]	@ (800069c <DMA1_Stream3_IRQHandler+0x158>)
 80005c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ca:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF3)
 80005cc:	4b33      	ldr	r3, [pc, #204]	@ (800069c <DMA1_Stream3_IRQHandler+0x158>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d01a      	beq.n	800060e <DMA1_Stream3_IRQHandler+0xca>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 80005d8:	4b31      	ldr	r3, [pc, #196]	@ (80006a0 <DMA1_Stream3_IRQHandler+0x15c>)
 80005da:	2201      	movs	r2, #1
 80005dc:	709a      	strb	r2, [r3, #2]
		TIM4_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80005de:	4b31      	ldr	r3, [pc, #196]	@ (80006a4 <DMA1_Stream3_IRQHandler+0x160>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 80005e4:	4b30      	ldr	r3, [pc, #192]	@ (80006a8 <DMA1_Stream3_IRQHandler+0x164>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	709a      	strb	r2, [r3, #2]
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 80005ea:	4b30      	ldr	r3, [pc, #192]	@ (80006ac <DMA1_Stream3_IRQHandler+0x168>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	709a      	strb	r2, [r3, #2]
		I2S2_RX_DMA_Flag.Transfer_Error_Flag = true;
 80005f0:	4b2f      	ldr	r3, [pc, #188]	@ (80006b0 <DMA1_Stream3_IRQHandler+0x16c>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	709a      	strb	r2, [r3, #2]
		SPI2_RX_DMA_Flag.Transfer_Error_Flag = true;
 80005f6:	4b2f      	ldr	r3, [pc, #188]	@ (80006b4 <DMA1_Stream3_IRQHandler+0x170>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	709a      	strb	r2, [r3, #2]
		DMA1_Stream3_Flag.Transfer_Error_Flag = true;
 80005fc:	4b2e      	ldr	r3, [pc, #184]	@ (80006b8 <DMA1_Stream3_IRQHandler+0x174>)
 80005fe:	2201      	movs	r2, #1
 8000600:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8000602:	4b26      	ldr	r3, [pc, #152]	@ (800069c <DMA1_Stream3_IRQHandler+0x158>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	4a25      	ldr	r2, [pc, #148]	@ (800069c <DMA1_Stream3_IRQHandler+0x158>)
 8000608:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800060c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF3)
 800060e:	4b23      	ldr	r3, [pc, #140]	@ (800069c <DMA1_Stream3_IRQHandler+0x158>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000616:	2b00      	cmp	r3, #0
 8000618:	d01a      	beq.n	8000650 <DMA1_Stream3_IRQHandler+0x10c>
	{
		TIM5_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800061a:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <DMA1_Stream3_IRQHandler+0x15c>)
 800061c:	2201      	movs	r2, #1
 800061e:	705a      	strb	r2, [r3, #1]
		TIM4_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000620:	4b20      	ldr	r3, [pc, #128]	@ (80006a4 <DMA1_Stream3_IRQHandler+0x160>)
 8000622:	2201      	movs	r2, #1
 8000624:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000626:	4b20      	ldr	r3, [pc, #128]	@ (80006a8 <DMA1_Stream3_IRQHandler+0x164>)
 8000628:	2201      	movs	r2, #1
 800062a:	705a      	strb	r2, [r3, #1]
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <DMA1_Stream3_IRQHandler+0x168>)
 800062e:	2201      	movs	r2, #1
 8000630:	705a      	strb	r2, [r3, #1]
		I2S2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000632:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <DMA1_Stream3_IRQHandler+0x16c>)
 8000634:	2201      	movs	r2, #1
 8000636:	705a      	strb	r2, [r3, #1]
		SPI2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000638:	4b1e      	ldr	r3, [pc, #120]	@ (80006b4 <DMA1_Stream3_IRQHandler+0x170>)
 800063a:	2201      	movs	r2, #1
 800063c:	705a      	strb	r2, [r3, #1]
		DMA1_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 800063e:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <DMA1_Stream3_IRQHandler+0x174>)
 8000640:	2201      	movs	r2, #1
 8000642:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8000644:	4b15      	ldr	r3, [pc, #84]	@ (800069c <DMA1_Stream3_IRQHandler+0x158>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	4a14      	ldr	r2, [pc, #80]	@ (800069c <DMA1_Stream3_IRQHandler+0x158>)
 800064a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800064e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF3)
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <DMA1_Stream3_IRQHandler+0x158>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000658:	2b00      	cmp	r3, #0
 800065a:	d01a      	beq.n	8000692 <DMA1_Stream3_IRQHandler+0x14e>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 800065c:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <DMA1_Stream3_IRQHandler+0x15c>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
		TIM4_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8000662:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <DMA1_Stream3_IRQHandler+0x160>)
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <DMA1_Stream3_IRQHandler+0x164>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800066e:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <DMA1_Stream3_IRQHandler+0x168>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
		I2S2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000674:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <DMA1_Stream3_IRQHandler+0x16c>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
		SPI2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800067a:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <DMA1_Stream3_IRQHandler+0x170>)
 800067c:	2201      	movs	r2, #1
 800067e:	701a      	strb	r2, [r3, #0]
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
 8000680:	4b0d      	ldr	r3, [pc, #52]	@ (80006b8 <DMA1_Stream3_IRQHandler+0x174>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8000686:	4b05      	ldr	r3, [pc, #20]	@ (800069c <DMA1_Stream3_IRQHandler+0x158>)
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	4a04      	ldr	r2, [pc, #16]	@ (800069c <DMA1_Stream3_IRQHandler+0x158>)
 800068c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000690:	6093      	str	r3, [r2, #8]
	}
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	40026000 	.word	0x40026000
 80006a0:	200001d0 	.word	0x200001d0
 80006a4:	200001b0 	.word	0x200001b0
 80006a8:	200000e0 	.word	0x200000e0
 80006ac:	200000b0 	.word	0x200000b0
 80006b0:	20000020 	.word	0x20000020
 80006b4:	20000060 	.word	0x20000060
 80006b8:	20000228 	.word	0x20000228

080006bc <DMA1_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream4_IRQHandler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF4)
 80006c0:	4b54      	ldr	r3, [pc, #336]	@ (8000814 <DMA1_Stream4_IRQHandler+0x158>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d01a      	beq.n	8000702 <DMA1_Stream4_IRQHandler+0x46>
	{
		TIM5_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80006cc:	4b52      	ldr	r3, [pc, #328]	@ (8000818 <DMA1_Stream4_IRQHandler+0x15c>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	711a      	strb	r2, [r3, #4]
		TIM3_CH1_DMA_Flag.Fifo_Error_Flag = true;
 80006d2:	4b52      	ldr	r3, [pc, #328]	@ (800081c <DMA1_Stream4_IRQHandler+0x160>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	711a      	strb	r2, [r3, #4]
		USART4_TX_DMA_Flag.Fifo_Error_Flag = true;
 80006d8:	4b51      	ldr	r3, [pc, #324]	@ (8000820 <DMA1_Stream4_IRQHandler+0x164>)
 80006da:	2201      	movs	r2, #1
 80006dc:	711a      	strb	r2, [r3, #4]
		I2C3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80006de:	4b51      	ldr	r3, [pc, #324]	@ (8000824 <DMA1_Stream4_IRQHandler+0x168>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	711a      	strb	r2, [r3, #4]
		I2S2_TX_DMA_Flag.Fifo_Error_Flag = true;
 80006e4:	4b50      	ldr	r3, [pc, #320]	@ (8000828 <DMA1_Stream4_IRQHandler+0x16c>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	711a      	strb	r2, [r3, #4]
		SPI2_TX_DMA_Flag.Fifo_Error_Flag = true;
 80006ea:	4b50      	ldr	r3, [pc, #320]	@ (800082c <DMA1_Stream4_IRQHandler+0x170>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	711a      	strb	r2, [r3, #4]
		DMA1_Stream4_Flag.Fifo_Error_Flag = true;
 80006f0:	4b4f      	ldr	r3, [pc, #316]	@ (8000830 <DMA1_Stream4_IRQHandler+0x174>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF4;
 80006f6:	4b47      	ldr	r3, [pc, #284]	@ (8000814 <DMA1_Stream4_IRQHandler+0x158>)
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	4a46      	ldr	r2, [pc, #280]	@ (8000814 <DMA1_Stream4_IRQHandler+0x158>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF4)
 8000702:	4b44      	ldr	r3, [pc, #272]	@ (8000814 <DMA1_Stream4_IRQHandler+0x158>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	2b00      	cmp	r3, #0
 800070c:	d01a      	beq.n	8000744 <DMA1_Stream4_IRQHandler+0x88>
	{
		TIM5_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800070e:	4b42      	ldr	r3, [pc, #264]	@ (8000818 <DMA1_Stream4_IRQHandler+0x15c>)
 8000710:	2201      	movs	r2, #1
 8000712:	70da      	strb	r2, [r3, #3]
		TIM3_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000714:	4b41      	ldr	r3, [pc, #260]	@ (800081c <DMA1_Stream4_IRQHandler+0x160>)
 8000716:	2201      	movs	r2, #1
 8000718:	70da      	strb	r2, [r3, #3]
		USART4_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800071a:	4b41      	ldr	r3, [pc, #260]	@ (8000820 <DMA1_Stream4_IRQHandler+0x164>)
 800071c:	2201      	movs	r2, #1
 800071e:	70da      	strb	r2, [r3, #3]
		I2C3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000720:	4b40      	ldr	r3, [pc, #256]	@ (8000824 <DMA1_Stream4_IRQHandler+0x168>)
 8000722:	2201      	movs	r2, #1
 8000724:	70da      	strb	r2, [r3, #3]
		I2S2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000726:	4b40      	ldr	r3, [pc, #256]	@ (8000828 <DMA1_Stream4_IRQHandler+0x16c>)
 8000728:	2201      	movs	r2, #1
 800072a:	70da      	strb	r2, [r3, #3]
		SPI2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800072c:	4b3f      	ldr	r3, [pc, #252]	@ (800082c <DMA1_Stream4_IRQHandler+0x170>)
 800072e:	2201      	movs	r2, #1
 8000730:	70da      	strb	r2, [r3, #3]
		DMA1_Stream4_Flag.Direct_Mode_Error_Flag = true;
 8000732:	4b3f      	ldr	r3, [pc, #252]	@ (8000830 <DMA1_Stream4_IRQHandler+0x174>)
 8000734:	2201      	movs	r2, #1
 8000736:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8000738:	4b36      	ldr	r3, [pc, #216]	@ (8000814 <DMA1_Stream4_IRQHandler+0x158>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	4a35      	ldr	r2, [pc, #212]	@ (8000814 <DMA1_Stream4_IRQHandler+0x158>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF4)
 8000744:	4b33      	ldr	r3, [pc, #204]	@ (8000814 <DMA1_Stream4_IRQHandler+0x158>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	f003 0308 	and.w	r3, r3, #8
 800074c:	2b00      	cmp	r3, #0
 800074e:	d01a      	beq.n	8000786 <DMA1_Stream4_IRQHandler+0xca>
	{
		TIM5_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8000750:	4b31      	ldr	r3, [pc, #196]	@ (8000818 <DMA1_Stream4_IRQHandler+0x15c>)
 8000752:	2201      	movs	r2, #1
 8000754:	709a      	strb	r2, [r3, #2]
		TIM3_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000756:	4b31      	ldr	r3, [pc, #196]	@ (800081c <DMA1_Stream4_IRQHandler+0x160>)
 8000758:	2201      	movs	r2, #1
 800075a:	709a      	strb	r2, [r3, #2]
		USART4_TX_DMA_Flag.Transfer_Error_Flag = true;
 800075c:	4b30      	ldr	r3, [pc, #192]	@ (8000820 <DMA1_Stream4_IRQHandler+0x164>)
 800075e:	2201      	movs	r2, #1
 8000760:	709a      	strb	r2, [r3, #2]
		I2C3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000762:	4b30      	ldr	r3, [pc, #192]	@ (8000824 <DMA1_Stream4_IRQHandler+0x168>)
 8000764:	2201      	movs	r2, #1
 8000766:	709a      	strb	r2, [r3, #2]
		I2S2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000768:	4b2f      	ldr	r3, [pc, #188]	@ (8000828 <DMA1_Stream4_IRQHandler+0x16c>)
 800076a:	2201      	movs	r2, #1
 800076c:	709a      	strb	r2, [r3, #2]
		SPI2_TX_DMA_Flag.Transfer_Error_Flag = true;
 800076e:	4b2f      	ldr	r3, [pc, #188]	@ (800082c <DMA1_Stream4_IRQHandler+0x170>)
 8000770:	2201      	movs	r2, #1
 8000772:	709a      	strb	r2, [r3, #2]
		DMA1_Stream4_Flag.Transfer_Error_Flag = true;
 8000774:	4b2e      	ldr	r3, [pc, #184]	@ (8000830 <DMA1_Stream4_IRQHandler+0x174>)
 8000776:	2201      	movs	r2, #1
 8000778:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 800077a:	4b26      	ldr	r3, [pc, #152]	@ (8000814 <DMA1_Stream4_IRQHandler+0x158>)
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	4a25      	ldr	r2, [pc, #148]	@ (8000814 <DMA1_Stream4_IRQHandler+0x158>)
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF4)
 8000786:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <DMA1_Stream4_IRQHandler+0x158>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	f003 0310 	and.w	r3, r3, #16
 800078e:	2b00      	cmp	r3, #0
 8000790:	d01a      	beq.n	80007c8 <DMA1_Stream4_IRQHandler+0x10c>
	{
		TIM5_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000792:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <DMA1_Stream4_IRQHandler+0x15c>)
 8000794:	2201      	movs	r2, #1
 8000796:	705a      	strb	r2, [r3, #1]
		TIM3_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000798:	4b20      	ldr	r3, [pc, #128]	@ (800081c <DMA1_Stream4_IRQHandler+0x160>)
 800079a:	2201      	movs	r2, #1
 800079c:	705a      	strb	r2, [r3, #1]
		USART4_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800079e:	4b20      	ldr	r3, [pc, #128]	@ (8000820 <DMA1_Stream4_IRQHandler+0x164>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	705a      	strb	r2, [r3, #1]
		I2C3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80007a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000824 <DMA1_Stream4_IRQHandler+0x168>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	705a      	strb	r2, [r3, #1]
		I2S2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80007aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <DMA1_Stream4_IRQHandler+0x16c>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	705a      	strb	r2, [r3, #1]
		SPI2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <DMA1_Stream4_IRQHandler+0x170>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	705a      	strb	r2, [r3, #1]
		DMA1_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 80007b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000830 <DMA1_Stream4_IRQHandler+0x174>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80007bc:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <DMA1_Stream4_IRQHandler+0x158>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	4a14      	ldr	r2, [pc, #80]	@ (8000814 <DMA1_Stream4_IRQHandler+0x158>)
 80007c2:	f043 0310 	orr.w	r3, r3, #16
 80007c6:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF4)
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <DMA1_Stream4_IRQHandler+0x158>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f003 0320 	and.w	r3, r3, #32
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d01a      	beq.n	800080a <DMA1_Stream4_IRQHandler+0x14e>
	{
		TIM5_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80007d4:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <DMA1_Stream4_IRQHandler+0x15c>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
		TIM3_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <DMA1_Stream4_IRQHandler+0x160>)
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]
		USART4_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <DMA1_Stream4_IRQHandler+0x164>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
		I2C3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80007e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <DMA1_Stream4_IRQHandler+0x168>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	701a      	strb	r2, [r3, #0]
		I2S2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <DMA1_Stream4_IRQHandler+0x16c>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	701a      	strb	r2, [r3, #0]
		SPI2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <DMA1_Stream4_IRQHandler+0x170>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <DMA1_Stream4_IRQHandler+0x174>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80007fe:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <DMA1_Stream4_IRQHandler+0x158>)
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <DMA1_Stream4_IRQHandler+0x158>)
 8000804:	f043 0320 	orr.w	r3, r3, #32
 8000808:	60d3      	str	r3, [r2, #12]
	}
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	40026000 	.word	0x40026000
 8000818:	200001c0 	.word	0x200001c0
 800081c:	20000188 	.word	0x20000188
 8000820:	200000b8 	.word	0x200000b8
 8000824:	20000050 	.word	0x20000050
 8000828:	20000028 	.word	0x20000028
 800082c:	20000078 	.word	0x20000078
 8000830:	20000230 	.word	0x20000230

08000834 <DMA1_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream5_IRQHandler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF5)
 8000838:	4b54      	ldr	r3, [pc, #336]	@ (800098c <DMA1_Stream5_IRQHandler+0x158>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000840:	2b00      	cmp	r3, #0
 8000842:	d01a      	beq.n	800087a <DMA1_Stream5_IRQHandler+0x46>
	{
		SPI3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000844:	4b52      	ldr	r3, [pc, #328]	@ (8000990 <DMA1_Stream5_IRQHandler+0x15c>)
 8000846:	2201      	movs	r2, #1
 8000848:	711a      	strb	r2, [r3, #4]
		TIM3_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 800084a:	4b52      	ldr	r3, [pc, #328]	@ (8000994 <DMA1_Stream5_IRQHandler+0x160>)
 800084c:	2201      	movs	r2, #1
 800084e:	711a      	strb	r2, [r3, #4]
		TIM2_CH1_DMA_Flag.Fifo_Error_Flag =  true;
 8000850:	4b51      	ldr	r3, [pc, #324]	@ (8000998 <DMA1_Stream5_IRQHandler+0x164>)
 8000852:	2201      	movs	r2, #1
 8000854:	711a      	strb	r2, [r3, #4]
		DAC2_DMA_Flag.Fifo_Error_Flag = true;
 8000856:	4b51      	ldr	r3, [pc, #324]	@ (800099c <DMA1_Stream5_IRQHandler+0x168>)
 8000858:	2201      	movs	r2, #1
 800085a:	711a      	strb	r2, [r3, #4]
		TIM3_CH2_DMA_Flag.Fifo_Error_Flag = true;
 800085c:	4b50      	ldr	r3, [pc, #320]	@ (80009a0 <DMA1_Stream5_IRQHandler+0x16c>)
 800085e:	2201      	movs	r2, #1
 8000860:	711a      	strb	r2, [r3, #4]
		USART2_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000862:	4b50      	ldr	r3, [pc, #320]	@ (80009a4 <DMA1_Stream5_IRQHandler+0x170>)
 8000864:	2201      	movs	r2, #1
 8000866:	711a      	strb	r2, [r3, #4]
		DMA1_Stream5_Flag.Fifo_Error_Flag = true;
 8000868:	4b4f      	ldr	r3, [pc, #316]	@ (80009a8 <DMA1_Stream5_IRQHandler+0x174>)
 800086a:	2201      	movs	r2, #1
 800086c:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 800086e:	4b47      	ldr	r3, [pc, #284]	@ (800098c <DMA1_Stream5_IRQHandler+0x158>)
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	4a46      	ldr	r2, [pc, #280]	@ (800098c <DMA1_Stream5_IRQHandler+0x158>)
 8000874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000878:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF5)
 800087a:	4b44      	ldr	r3, [pc, #272]	@ (800098c <DMA1_Stream5_IRQHandler+0x158>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000882:	2b00      	cmp	r3, #0
 8000884:	d01a      	beq.n	80008bc <DMA1_Stream5_IRQHandler+0x88>
	{
		SPI3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000886:	4b42      	ldr	r3, [pc, #264]	@ (8000990 <DMA1_Stream5_IRQHandler+0x15c>)
 8000888:	2201      	movs	r2, #1
 800088a:	70da      	strb	r2, [r3, #3]
		TIM3_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 800088c:	4b41      	ldr	r3, [pc, #260]	@ (8000994 <DMA1_Stream5_IRQHandler+0x160>)
 800088e:	2201      	movs	r2, #1
 8000890:	70da      	strb	r2, [r3, #3]
		TIM2_CH1_DMA_Flag.Direct_Mode_Error_Flag =  true;
 8000892:	4b41      	ldr	r3, [pc, #260]	@ (8000998 <DMA1_Stream5_IRQHandler+0x164>)
 8000894:	2201      	movs	r2, #1
 8000896:	70da      	strb	r2, [r3, #3]
		DAC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000898:	4b40      	ldr	r3, [pc, #256]	@ (800099c <DMA1_Stream5_IRQHandler+0x168>)
 800089a:	2201      	movs	r2, #1
 800089c:	70da      	strb	r2, [r3, #3]
		TIM3_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800089e:	4b40      	ldr	r3, [pc, #256]	@ (80009a0 <DMA1_Stream5_IRQHandler+0x16c>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	70da      	strb	r2, [r3, #3]
		USART2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80008a4:	4b3f      	ldr	r3, [pc, #252]	@ (80009a4 <DMA1_Stream5_IRQHandler+0x170>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	70da      	strb	r2, [r3, #3]
		DMA1_Stream5_Flag.Direct_Mode_Error_Flag = true;
 80008aa:	4b3f      	ldr	r3, [pc, #252]	@ (80009a8 <DMA1_Stream5_IRQHandler+0x174>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80008b0:	4b36      	ldr	r3, [pc, #216]	@ (800098c <DMA1_Stream5_IRQHandler+0x158>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	4a35      	ldr	r2, [pc, #212]	@ (800098c <DMA1_Stream5_IRQHandler+0x158>)
 80008b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ba:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF5)
 80008bc:	4b33      	ldr	r3, [pc, #204]	@ (800098c <DMA1_Stream5_IRQHandler+0x158>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d01a      	beq.n	80008fe <DMA1_Stream5_IRQHandler+0xca>
	{
		SPI3_TX_DMA_Flag.Transfer_Error_Flag = true;
 80008c8:	4b31      	ldr	r3, [pc, #196]	@ (8000990 <DMA1_Stream5_IRQHandler+0x15c>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	709a      	strb	r2, [r3, #2]
		TIM3_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 80008ce:	4b31      	ldr	r3, [pc, #196]	@ (8000994 <DMA1_Stream5_IRQHandler+0x160>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	709a      	strb	r2, [r3, #2]
		TIM2_CH1_DMA_Flag.Transfer_Error_Flag =  true;
 80008d4:	4b30      	ldr	r3, [pc, #192]	@ (8000998 <DMA1_Stream5_IRQHandler+0x164>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	709a      	strb	r2, [r3, #2]
		DAC2_DMA_Flag.Transfer_Error_Flag = true;
 80008da:	4b30      	ldr	r3, [pc, #192]	@ (800099c <DMA1_Stream5_IRQHandler+0x168>)
 80008dc:	2201      	movs	r2, #1
 80008de:	709a      	strb	r2, [r3, #2]
		TIM3_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80008e0:	4b2f      	ldr	r3, [pc, #188]	@ (80009a0 <DMA1_Stream5_IRQHandler+0x16c>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	709a      	strb	r2, [r3, #2]
		USART2_RX_DMA_Flag.Transfer_Error_Flag = true;
 80008e6:	4b2f      	ldr	r3, [pc, #188]	@ (80009a4 <DMA1_Stream5_IRQHandler+0x170>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	709a      	strb	r2, [r3, #2]
		DMA1_Stream5_Flag.Transfer_Error_Flag = true;
 80008ec:	4b2e      	ldr	r3, [pc, #184]	@ (80009a8 <DMA1_Stream5_IRQHandler+0x174>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80008f2:	4b26      	ldr	r3, [pc, #152]	@ (800098c <DMA1_Stream5_IRQHandler+0x158>)
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	4a25      	ldr	r2, [pc, #148]	@ (800098c <DMA1_Stream5_IRQHandler+0x158>)
 80008f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008fc:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF5)
 80008fe:	4b23      	ldr	r3, [pc, #140]	@ (800098c <DMA1_Stream5_IRQHandler+0x158>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000906:	2b00      	cmp	r3, #0
 8000908:	d01a      	beq.n	8000940 <DMA1_Stream5_IRQHandler+0x10c>
	{
		SPI3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <DMA1_Stream5_IRQHandler+0x15c>)
 800090c:	2201      	movs	r2, #1
 800090e:	705a      	strb	r2, [r3, #1]
		TIM3_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000910:	4b20      	ldr	r3, [pc, #128]	@ (8000994 <DMA1_Stream5_IRQHandler+0x160>)
 8000912:	2201      	movs	r2, #1
 8000914:	705a      	strb	r2, [r3, #1]
		TIM2_CH1_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8000916:	4b20      	ldr	r3, [pc, #128]	@ (8000998 <DMA1_Stream5_IRQHandler+0x164>)
 8000918:	2201      	movs	r2, #1
 800091a:	705a      	strb	r2, [r3, #1]
		DAC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800091c:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <DMA1_Stream5_IRQHandler+0x168>)
 800091e:	2201      	movs	r2, #1
 8000920:	705a      	strb	r2, [r3, #1]
		TIM3_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000922:	4b1f      	ldr	r3, [pc, #124]	@ (80009a0 <DMA1_Stream5_IRQHandler+0x16c>)
 8000924:	2201      	movs	r2, #1
 8000926:	705a      	strb	r2, [r3, #1]
		USART2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000928:	4b1e      	ldr	r3, [pc, #120]	@ (80009a4 <DMA1_Stream5_IRQHandler+0x170>)
 800092a:	2201      	movs	r2, #1
 800092c:	705a      	strb	r2, [r3, #1]
		DMA1_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 800092e:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <DMA1_Stream5_IRQHandler+0x174>)
 8000930:	2201      	movs	r2, #1
 8000932:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <DMA1_Stream5_IRQHandler+0x158>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	4a14      	ldr	r2, [pc, #80]	@ (800098c <DMA1_Stream5_IRQHandler+0x158>)
 800093a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800093e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF5)
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <DMA1_Stream5_IRQHandler+0x158>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000948:	2b00      	cmp	r3, #0
 800094a:	d01a      	beq.n	8000982 <DMA1_Stream5_IRQHandler+0x14e>
	{
		SPI3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800094c:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <DMA1_Stream5_IRQHandler+0x15c>)
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
		TIM3_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <DMA1_Stream5_IRQHandler+0x160>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
		TIM2_CH1_DMA_Flag.Transfer_Complete_Flag =  true;
 8000958:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <DMA1_Stream5_IRQHandler+0x164>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
		DAC2_DMA_Flag.Transfer_Complete_Flag = true;
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <DMA1_Stream5_IRQHandler+0x168>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
		TIM3_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8000964:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <DMA1_Stream5_IRQHandler+0x16c>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
		USART2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <DMA1_Stream5_IRQHandler+0x170>)
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
 8000970:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <DMA1_Stream5_IRQHandler+0x174>)
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8000976:	4b05      	ldr	r3, [pc, #20]	@ (800098c <DMA1_Stream5_IRQHandler+0x158>)
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	4a04      	ldr	r2, [pc, #16]	@ (800098c <DMA1_Stream5_IRQHandler+0x158>)
 800097c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000980:	60d3      	str	r3, [r2, #12]
	}
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	40026000 	.word	0x40026000
 8000990:	20000080 	.word	0x20000080
 8000994:	200001a0 	.word	0x200001a0
 8000998:	20000168 	.word	0x20000168
 800099c:	200001e0 	.word	0x200001e0
 80009a0:	20000190 	.word	0x20000190
 80009a4:	20000098 	.word	0x20000098
 80009a8:	20000238 	.word	0x20000238

080009ac <DMA1_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream6_IRQHandler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF6)
 80009b0:	4b47      	ldr	r3, [pc, #284]	@ (8000ad0 <DMA1_Stream6_IRQHandler+0x124>)
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d017      	beq.n	80009ec <DMA1_Stream6_IRQHandler+0x40>
	{
		TIM3_CH3_DMA_Flag.Fifo_Error_Flag = true;
 80009bc:	4b45      	ldr	r3, [pc, #276]	@ (8000ad4 <DMA1_Stream6_IRQHandler+0x128>)
 80009be:	2201      	movs	r2, #1
 80009c0:	711a      	strb	r2, [r3, #4]
		TIM2_UP_DMA_Flag.Fifo_Error_Flag = true;
 80009c2:	4b45      	ldr	r3, [pc, #276]	@ (8000ad8 <DMA1_Stream6_IRQHandler+0x12c>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 80009c8:	4b44      	ldr	r3, [pc, #272]	@ (8000adc <DMA1_Stream6_IRQHandler+0x130>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	711a      	strb	r2, [r3, #4]
		USART2_TX_DMA_Flag.Fifo_Error_Flag =  true;
 80009ce:	4b44      	ldr	r3, [pc, #272]	@ (8000ae0 <DMA1_Stream6_IRQHandler+0x134>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	711a      	strb	r2, [r3, #4]
		I2C1_TX_DMA_Flag.Fifo_Error_Flag = true;
 80009d4:	4b43      	ldr	r3, [pc, #268]	@ (8000ae4 <DMA1_Stream6_IRQHandler+0x138>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	711a      	strb	r2, [r3, #4]
		DMA1_Stream6_Flag.Fifo_Error_Flag = true;
 80009da:	4b43      	ldr	r3, [pc, #268]	@ (8000ae8 <DMA1_Stream6_IRQHandler+0x13c>)
 80009dc:	2201      	movs	r2, #1
 80009de:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 80009e0:	4b3b      	ldr	r3, [pc, #236]	@ (8000ad0 <DMA1_Stream6_IRQHandler+0x124>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	4a3a      	ldr	r2, [pc, #232]	@ (8000ad0 <DMA1_Stream6_IRQHandler+0x124>)
 80009e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009ea:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF6)
 80009ec:	4b38      	ldr	r3, [pc, #224]	@ (8000ad0 <DMA1_Stream6_IRQHandler+0x124>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d014      	beq.n	8000a22 <DMA1_Stream6_IRQHandler+0x76>
	{
		TIM2_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 80009f8:	4b37      	ldr	r3, [pc, #220]	@ (8000ad8 <DMA1_Stream6_IRQHandler+0x12c>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80009fe:	4b37      	ldr	r3, [pc, #220]	@ (8000adc <DMA1_Stream6_IRQHandler+0x130>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	70da      	strb	r2, [r3, #3]
		USART2_TX_DMA_Flag.Direct_Mode_Error_Flag =  true;
 8000a04:	4b36      	ldr	r3, [pc, #216]	@ (8000ae0 <DMA1_Stream6_IRQHandler+0x134>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	70da      	strb	r2, [r3, #3]
		I2C1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000a0a:	4b36      	ldr	r3, [pc, #216]	@ (8000ae4 <DMA1_Stream6_IRQHandler+0x138>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	70da      	strb	r2, [r3, #3]
		DMA1_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8000a10:	4b35      	ldr	r3, [pc, #212]	@ (8000ae8 <DMA1_Stream6_IRQHandler+0x13c>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8000a16:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad0 <DMA1_Stream6_IRQHandler+0x124>)
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad0 <DMA1_Stream6_IRQHandler+0x124>)
 8000a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a20:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF6)
 8000a22:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad0 <DMA1_Stream6_IRQHandler+0x124>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d014      	beq.n	8000a58 <DMA1_Stream6_IRQHandler+0xac>
	{
		TIM2_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad8 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000a34:	4b29      	ldr	r3, [pc, #164]	@ (8000adc <DMA1_Stream6_IRQHandler+0x130>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	709a      	strb	r2, [r3, #2]
		USART2_TX_DMA_Flag.Transfer_Error_Flag =  true;
 8000a3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ae0 <DMA1_Stream6_IRQHandler+0x134>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	709a      	strb	r2, [r3, #2]
		I2C1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000a40:	4b28      	ldr	r3, [pc, #160]	@ (8000ae4 <DMA1_Stream6_IRQHandler+0x138>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	709a      	strb	r2, [r3, #2]
		DMA1_Stream6_Flag.Transfer_Error_Flag = true;
 8000a46:	4b28      	ldr	r3, [pc, #160]	@ (8000ae8 <DMA1_Stream6_IRQHandler+0x13c>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8000a4c:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <DMA1_Stream6_IRQHandler+0x124>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	4a1f      	ldr	r2, [pc, #124]	@ (8000ad0 <DMA1_Stream6_IRQHandler+0x124>)
 8000a52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a56:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF6)
 8000a58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <DMA1_Stream6_IRQHandler+0x124>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d014      	beq.n	8000a8e <DMA1_Stream6_IRQHandler+0xe2>
	{
		TIM2_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <DMA1_Stream6_IRQHandler+0x130>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	705a      	strb	r2, [r3, #1]
		USART2_TX_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <DMA1_Stream6_IRQHandler+0x134>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	705a      	strb	r2, [r3, #1]
		I2C1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000a76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae4 <DMA1_Stream6_IRQHandler+0x138>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	705a      	strb	r2, [r3, #1]
		DMA1_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae8 <DMA1_Stream6_IRQHandler+0x13c>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8000a82:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <DMA1_Stream6_IRQHandler+0x124>)
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	4a12      	ldr	r2, [pc, #72]	@ (8000ad0 <DMA1_Stream6_IRQHandler+0x124>)
 8000a88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000a8c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF6)
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <DMA1_Stream6_IRQHandler+0x124>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d014      	beq.n	8000ac4 <DMA1_Stream6_IRQHandler+0x118>
	{
		TIM2_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <DMA1_Stream6_IRQHandler+0x130>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
		USART2_TX_DMA_Flag.Transfer_Complete_Flag =  true;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <DMA1_Stream6_IRQHandler+0x134>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
		I2C1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <DMA1_Stream6_IRQHandler+0x138>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <DMA1_Stream6_IRQHandler+0x13c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <DMA1_Stream6_IRQHandler+0x124>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <DMA1_Stream6_IRQHandler+0x124>)
 8000abe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ac2:	60d3      	str	r3, [r2, #12]
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40026000 	.word	0x40026000
 8000ad4:	20000198 	.word	0x20000198
 8000ad8:	20000160 	.word	0x20000160
 8000adc:	200000e8 	.word	0x200000e8
 8000ae0:	200000a0 	.word	0x200000a0
 8000ae4:	20000040 	.word	0x20000040
 8000ae8:	20000240 	.word	0x20000240

08000aec <DMA1_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream7_IRQHandler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF7)
 8000af0:	4b54      	ldr	r3, [pc, #336]	@ (8000c44 <DMA1_Stream7_IRQHandler+0x158>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d01a      	beq.n	8000b32 <DMA1_Stream7_IRQHandler+0x46>
	{
		I2S3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000afc:	4b52      	ldr	r3, [pc, #328]	@ (8000c48 <DMA1_Stream7_IRQHandler+0x15c>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	711a      	strb	r2, [r3, #4]
		I2C2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000b02:	4b52      	ldr	r3, [pc, #328]	@ (8000c4c <DMA1_Stream7_IRQHandler+0x160>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	711a      	strb	r2, [r3, #4]
		USART5_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000b08:	4b51      	ldr	r3, [pc, #324]	@ (8000c50 <DMA1_Stream7_IRQHandler+0x164>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	711a      	strb	r2, [r3, #4]
		TIM4_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000b0e:	4b51      	ldr	r3, [pc, #324]	@ (8000c54 <DMA1_Stream7_IRQHandler+0x168>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	711a      	strb	r2, [r3, #4]
		TIM2_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000b14:	4b50      	ldr	r3, [pc, #320]	@ (8000c58 <DMA1_Stream7_IRQHandler+0x16c>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	711a      	strb	r2, [r3, #4]
		TIM2_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8000b1a:	4b50      	ldr	r3, [pc, #320]	@ (8000c5c <DMA1_Stream7_IRQHandler+0x170>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	711a      	strb	r2, [r3, #4]

		DMA1_Stream7_Flag.Fifo_Error_Flag = true;
 8000b20:	4b4f      	ldr	r3, [pc, #316]	@ (8000c60 <DMA1_Stream7_IRQHandler+0x174>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8000b26:	4b47      	ldr	r3, [pc, #284]	@ (8000c44 <DMA1_Stream7_IRQHandler+0x158>)
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	4a46      	ldr	r2, [pc, #280]	@ (8000c44 <DMA1_Stream7_IRQHandler+0x158>)
 8000b2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b30:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF7)
 8000b32:	4b44      	ldr	r3, [pc, #272]	@ (8000c44 <DMA1_Stream7_IRQHandler+0x158>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d01a      	beq.n	8000b74 <DMA1_Stream7_IRQHandler+0x88>
	{
		I2S3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b3e:	4b42      	ldr	r3, [pc, #264]	@ (8000c48 <DMA1_Stream7_IRQHandler+0x15c>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	70da      	strb	r2, [r3, #3]
		I2C2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b44:	4b41      	ldr	r3, [pc, #260]	@ (8000c4c <DMA1_Stream7_IRQHandler+0x160>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	70da      	strb	r2, [r3, #3]
		USART5_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b4a:	4b41      	ldr	r3, [pc, #260]	@ (8000c50 <DMA1_Stream7_IRQHandler+0x164>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	70da      	strb	r2, [r3, #3]
		TIM4_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b50:	4b40      	ldr	r3, [pc, #256]	@ (8000c54 <DMA1_Stream7_IRQHandler+0x168>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	70da      	strb	r2, [r3, #3]
		TIM2_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b56:	4b40      	ldr	r3, [pc, #256]	@ (8000c58 <DMA1_Stream7_IRQHandler+0x16c>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	70da      	strb	r2, [r3, #3]
		TIM2_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b5c:	4b3f      	ldr	r3, [pc, #252]	@ (8000c5c <DMA1_Stream7_IRQHandler+0x170>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	70da      	strb	r2, [r3, #3]
		DMA1_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8000b62:	4b3f      	ldr	r3, [pc, #252]	@ (8000c60 <DMA1_Stream7_IRQHandler+0x174>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8000b68:	4b36      	ldr	r3, [pc, #216]	@ (8000c44 <DMA1_Stream7_IRQHandler+0x158>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	4a35      	ldr	r2, [pc, #212]	@ (8000c44 <DMA1_Stream7_IRQHandler+0x158>)
 8000b6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b72:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF7)
 8000b74:	4b33      	ldr	r3, [pc, #204]	@ (8000c44 <DMA1_Stream7_IRQHandler+0x158>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d01a      	beq.n	8000bb6 <DMA1_Stream7_IRQHandler+0xca>
	{
		I2S3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000b80:	4b31      	ldr	r3, [pc, #196]	@ (8000c48 <DMA1_Stream7_IRQHandler+0x15c>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	709a      	strb	r2, [r3, #2]
		I2C2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000b86:	4b31      	ldr	r3, [pc, #196]	@ (8000c4c <DMA1_Stream7_IRQHandler+0x160>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	709a      	strb	r2, [r3, #2]
		USART5_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000b8c:	4b30      	ldr	r3, [pc, #192]	@ (8000c50 <DMA1_Stream7_IRQHandler+0x164>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	709a      	strb	r2, [r3, #2]
		TIM4_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8000b92:	4b30      	ldr	r3, [pc, #192]	@ (8000c54 <DMA1_Stream7_IRQHandler+0x168>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	709a      	strb	r2, [r3, #2]
		TIM2_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8000b98:	4b2f      	ldr	r3, [pc, #188]	@ (8000c58 <DMA1_Stream7_IRQHandler+0x16c>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	709a      	strb	r2, [r3, #2]
		TIM2_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8000b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c5c <DMA1_Stream7_IRQHandler+0x170>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	709a      	strb	r2, [r3, #2]
		DMA1_Stream7_Flag.Transfer_Error_Flag = true;
 8000ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8000c60 <DMA1_Stream7_IRQHandler+0x174>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8000baa:	4b26      	ldr	r3, [pc, #152]	@ (8000c44 <DMA1_Stream7_IRQHandler+0x158>)
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	4a25      	ldr	r2, [pc, #148]	@ (8000c44 <DMA1_Stream7_IRQHandler+0x158>)
 8000bb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bb4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF7)
 8000bb6:	4b23      	ldr	r3, [pc, #140]	@ (8000c44 <DMA1_Stream7_IRQHandler+0x158>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d01a      	beq.n	8000bf8 <DMA1_Stream7_IRQHandler+0x10c>
	{
		I2S3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <DMA1_Stream7_IRQHandler+0x15c>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	705a      	strb	r2, [r3, #1]
		I2C2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000bc8:	4b20      	ldr	r3, [pc, #128]	@ (8000c4c <DMA1_Stream7_IRQHandler+0x160>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	705a      	strb	r2, [r3, #1]
		USART5_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000bce:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <DMA1_Stream7_IRQHandler+0x164>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	705a      	strb	r2, [r3, #1]
		TIM4_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c54 <DMA1_Stream7_IRQHandler+0x168>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	705a      	strb	r2, [r3, #1]
		TIM2_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000bda:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <DMA1_Stream7_IRQHandler+0x16c>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	705a      	strb	r2, [r3, #1]
		TIM2_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000be0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <DMA1_Stream7_IRQHandler+0x170>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	705a      	strb	r2, [r3, #1]
		DMA1_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8000be6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <DMA1_Stream7_IRQHandler+0x174>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8000bec:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <DMA1_Stream7_IRQHandler+0x158>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	4a14      	ldr	r2, [pc, #80]	@ (8000c44 <DMA1_Stream7_IRQHandler+0x158>)
 8000bf2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bf6:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF7)
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <DMA1_Stream7_IRQHandler+0x158>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01a      	beq.n	8000c3a <DMA1_Stream7_IRQHandler+0x14e>
	{
		I2S3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000c04:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <DMA1_Stream7_IRQHandler+0x15c>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
		I2C2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <DMA1_Stream7_IRQHandler+0x160>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]
		USART5_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <DMA1_Stream7_IRQHandler+0x164>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
		TIM4_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <DMA1_Stream7_IRQHandler+0x168>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
		TIM2_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <DMA1_Stream7_IRQHandler+0x16c>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		TIM2_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <DMA1_Stream7_IRQHandler+0x170>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
 8000c28:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <DMA1_Stream7_IRQHandler+0x174>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8000c2e:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <DMA1_Stream7_IRQHandler+0x158>)
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	4a04      	ldr	r2, [pc, #16]	@ (8000c44 <DMA1_Stream7_IRQHandler+0x158>)
 8000c34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c38:	60d3      	str	r3, [r2, #12]
	}
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	40026000 	.word	0x40026000
 8000c48:	20000030 	.word	0x20000030
 8000c4c:	20000048 	.word	0x20000048
 8000c50:	200000c8 	.word	0x200000c8
 8000c54:	200001b8 	.word	0x200001b8
 8000c58:	20000170 	.word	0x20000170
 8000c5c:	20000180 	.word	0x20000180
 8000c60:	20000248 	.word	0x20000248

08000c64 <DMA2_Stream0_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream0_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream0_IRQHandler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF0)
 8000c68:	4b45      	ldr	r3, [pc, #276]	@ (8000d80 <DMA2_Stream0_IRQHandler+0x11c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d014      	beq.n	8000c9e <DMA2_Stream0_IRQHandler+0x3a>
	{
		SPI1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000c74:	4b43      	ldr	r3, [pc, #268]	@ (8000d84 <DMA2_Stream0_IRQHandler+0x120>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	711a      	strb	r2, [r3, #4]
		ADC1_DMA_Flag.Fifo_Error_Flag = true;
 8000c7a:	4b43      	ldr	r3, [pc, #268]	@ (8000d88 <DMA2_Stream0_IRQHandler+0x124>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	711a      	strb	r2, [r3, #4]
		TIM1_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000c80:	4b42      	ldr	r3, [pc, #264]	@ (8000d8c <DMA2_Stream0_IRQHandler+0x128>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	711a      	strb	r2, [r3, #4]
		TIM1_COM_DMA_Flag.Fifo_Error_Flag = true;
 8000c86:	4b42      	ldr	r3, [pc, #264]	@ (8000d90 <DMA2_Stream0_IRQHandler+0x12c>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	711a      	strb	r2, [r3, #4]
		DMA2_Stream0_Flag.Fifo_Error_Flag = true;
 8000c8c:	4b41      	ldr	r3, [pc, #260]	@ (8000d94 <DMA2_Stream0_IRQHandler+0x130>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000c92:	4b3b      	ldr	r3, [pc, #236]	@ (8000d80 <DMA2_Stream0_IRQHandler+0x11c>)
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	4a3a      	ldr	r2, [pc, #232]	@ (8000d80 <DMA2_Stream0_IRQHandler+0x11c>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF0)
 8000c9e:	4b38      	ldr	r3, [pc, #224]	@ (8000d80 <DMA2_Stream0_IRQHandler+0x11c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d014      	beq.n	8000cd4 <DMA2_Stream0_IRQHandler+0x70>
	{
		SPI1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000caa:	4b36      	ldr	r3, [pc, #216]	@ (8000d84 <DMA2_Stream0_IRQHandler+0x120>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	70da      	strb	r2, [r3, #3]
		ADC1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000cb0:	4b35      	ldr	r3, [pc, #212]	@ (8000d88 <DMA2_Stream0_IRQHandler+0x124>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	70da      	strb	r2, [r3, #3]
		TIM1_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000cb6:	4b35      	ldr	r3, [pc, #212]	@ (8000d8c <DMA2_Stream0_IRQHandler+0x128>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	70da      	strb	r2, [r3, #3]
		TIM1_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000cbc:	4b34      	ldr	r3, [pc, #208]	@ (8000d90 <DMA2_Stream0_IRQHandler+0x12c>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	70da      	strb	r2, [r3, #3]
		DMA2_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8000cc2:	4b34      	ldr	r3, [pc, #208]	@ (8000d94 <DMA2_Stream0_IRQHandler+0x130>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d80 <DMA2_Stream0_IRQHandler+0x11c>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	4a2c      	ldr	r2, [pc, #176]	@ (8000d80 <DMA2_Stream0_IRQHandler+0x11c>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF0)
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d80 <DMA2_Stream0_IRQHandler+0x11c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0308 	and.w	r3, r3, #8
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d014      	beq.n	8000d0a <DMA2_Stream0_IRQHandler+0xa6>
	{
		SPI1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000ce0:	4b28      	ldr	r3, [pc, #160]	@ (8000d84 <DMA2_Stream0_IRQHandler+0x120>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	709a      	strb	r2, [r3, #2]
		ADC1_DMA_Flag.Transfer_Error_Flag = true;
 8000ce6:	4b28      	ldr	r3, [pc, #160]	@ (8000d88 <DMA2_Stream0_IRQHandler+0x124>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	709a      	strb	r2, [r3, #2]
		TIM1_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000cec:	4b27      	ldr	r3, [pc, #156]	@ (8000d8c <DMA2_Stream0_IRQHandler+0x128>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	709a      	strb	r2, [r3, #2]
		TIM1_COM_DMA_Flag.Transfer_Error_Flag = true;
 8000cf2:	4b27      	ldr	r3, [pc, #156]	@ (8000d90 <DMA2_Stream0_IRQHandler+0x12c>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	709a      	strb	r2, [r3, #2]
		DMA2_Stream0_Flag.Transfer_Error_Flag = true;
 8000cf8:	4b26      	ldr	r3, [pc, #152]	@ (8000d94 <DMA2_Stream0_IRQHandler+0x130>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000cfe:	4b20      	ldr	r3, [pc, #128]	@ (8000d80 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	4a1f      	ldr	r2, [pc, #124]	@ (8000d80 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF0)
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d80 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0310 	and.w	r3, r3, #16
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d014      	beq.n	8000d40 <DMA2_Stream0_IRQHandler+0xdc>
	{
		SPI1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d16:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <DMA2_Stream0_IRQHandler+0x120>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	705a      	strb	r2, [r3, #1]
		ADC1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <DMA2_Stream0_IRQHandler+0x124>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	705a      	strb	r2, [r3, #1]
		TIM1_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <DMA2_Stream0_IRQHandler+0x128>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	705a      	strb	r2, [r3, #1]
		TIM1_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d28:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <DMA2_Stream0_IRQHandler+0x12c>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	705a      	strb	r2, [r3, #1]
		DMA2_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <DMA2_Stream0_IRQHandler+0x130>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000d34:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	4a11      	ldr	r2, [pc, #68]	@ (8000d80 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF0)
 8000d40:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 0320 	and.w	r3, r3, #32
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d014      	beq.n	8000d76 <DMA2_Stream0_IRQHandler+0x112>
	{
		SPI1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <DMA2_Stream0_IRQHandler+0x120>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
		ADC1_DMA_Flag.Transfer_Complete_Flag = true;
 8000d52:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <DMA2_Stream0_IRQHandler+0x124>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
		TIM1_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <DMA2_Stream0_IRQHandler+0x128>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
		TIM1_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <DMA2_Stream0_IRQHandler+0x12c>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
 8000d64:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <DMA2_Stream0_IRQHandler+0x130>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000d6a:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	4a04      	ldr	r2, [pc, #16]	@ (8000d80 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d70:	f043 0320 	orr.w	r3, r3, #32
 8000d74:	6093      	str	r3, [r2, #8]
	}
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	40026400 	.word	0x40026400
 8000d84:	20000058 	.word	0x20000058
 8000d88:	200001f8 	.word	0x200001f8
 8000d8c:	20000118 	.word	0x20000118
 8000d90:	20000120 	.word	0x20000120
 8000d94:	20000250 	.word	0x20000250

08000d98 <DMA2_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream1_IRQHandler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF1)
 8000d9c:	4b5c      	ldr	r3, [pc, #368]	@ (8000f10 <DMA2_Stream1_IRQHandler+0x178>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d01d      	beq.n	8000de4 <DMA2_Stream1_IRQHandler+0x4c>
	{
		ADC3_DMA_Flag.Fifo_Error_Flag = true;
 8000da8:	4b5a      	ldr	r3, [pc, #360]	@ (8000f14 <DMA2_Stream1_IRQHandler+0x17c>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	711a      	strb	r2, [r3, #4]
		TIM1_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000dae:	4b5a      	ldr	r3, [pc, #360]	@ (8000f18 <DMA2_Stream1_IRQHandler+0x180>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	711a      	strb	r2, [r3, #4]
		TIM8_UP_DMA_Flag.Fifo_Error_Flag = true;
 8000db4:	4b59      	ldr	r3, [pc, #356]	@ (8000f1c <DMA2_Stream1_IRQHandler+0x184>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	711a      	strb	r2, [r3, #4]
		TIM8_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000dba:	4b59      	ldr	r3, [pc, #356]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x188>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	711a      	strb	r2, [r3, #4]
		TIM8_COM_DMA_Flag.Fifo_Error_Flag = true;
 8000dc0:	4b58      	ldr	r3, [pc, #352]	@ (8000f24 <DMA2_Stream1_IRQHandler+0x18c>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	711a      	strb	r2, [r3, #4]
		DCMI_DMA_Flag.Fifo_Error_Flag = true;
 8000dc6:	4b58      	ldr	r3, [pc, #352]	@ (8000f28 <DMA2_Stream1_IRQHandler+0x190>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	711a      	strb	r2, [r3, #4]
		USART6_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000dcc:	4b57      	ldr	r3, [pc, #348]	@ (8000f2c <DMA2_Stream1_IRQHandler+0x194>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	711a      	strb	r2, [r3, #4]
		DMA2_Stream1_Flag.Fifo_Error_Flag = true;
 8000dd2:	4b57      	ldr	r3, [pc, #348]	@ (8000f30 <DMA2_Stream1_IRQHandler+0x198>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8000f10 <DMA2_Stream1_IRQHandler+0x178>)
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	4a4c      	ldr	r2, [pc, #304]	@ (8000f10 <DMA2_Stream1_IRQHandler+0x178>)
 8000dde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000de2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF1)
 8000de4:	4b4a      	ldr	r3, [pc, #296]	@ (8000f10 <DMA2_Stream1_IRQHandler+0x178>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d01d      	beq.n	8000e2c <DMA2_Stream1_IRQHandler+0x94>
	{
		ADC3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000df0:	4b48      	ldr	r3, [pc, #288]	@ (8000f14 <DMA2_Stream1_IRQHandler+0x17c>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	70da      	strb	r2, [r3, #3]
		TIM1_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000df6:	4b48      	ldr	r3, [pc, #288]	@ (8000f18 <DMA2_Stream1_IRQHandler+0x180>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	70da      	strb	r2, [r3, #3]
		TIM8_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000dfc:	4b47      	ldr	r3, [pc, #284]	@ (8000f1c <DMA2_Stream1_IRQHandler+0x184>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	70da      	strb	r2, [r3, #3]
		TIM8_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e02:	4b47      	ldr	r3, [pc, #284]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x188>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	70da      	strb	r2, [r3, #3]
		TIM8_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e08:	4b46      	ldr	r3, [pc, #280]	@ (8000f24 <DMA2_Stream1_IRQHandler+0x18c>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	70da      	strb	r2, [r3, #3]
		DCMI_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e0e:	4b46      	ldr	r3, [pc, #280]	@ (8000f28 <DMA2_Stream1_IRQHandler+0x190>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	70da      	strb	r2, [r3, #3]
		USART6_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e14:	4b45      	ldr	r3, [pc, #276]	@ (8000f2c <DMA2_Stream1_IRQHandler+0x194>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	70da      	strb	r2, [r3, #3]
		DMA2_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8000e1a:	4b45      	ldr	r3, [pc, #276]	@ (8000f30 <DMA2_Stream1_IRQHandler+0x198>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000e20:	4b3b      	ldr	r3, [pc, #236]	@ (8000f10 <DMA2_Stream1_IRQHandler+0x178>)
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	4a3a      	ldr	r2, [pc, #232]	@ (8000f10 <DMA2_Stream1_IRQHandler+0x178>)
 8000e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e2a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF1)
 8000e2c:	4b38      	ldr	r3, [pc, #224]	@ (8000f10 <DMA2_Stream1_IRQHandler+0x178>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d01d      	beq.n	8000e74 <DMA2_Stream1_IRQHandler+0xdc>
	{
		ADC3_DMA_Flag.Transfer_Error_Flag = true;
 8000e38:	4b36      	ldr	r3, [pc, #216]	@ (8000f14 <DMA2_Stream1_IRQHandler+0x17c>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	709a      	strb	r2, [r3, #2]
		TIM1_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000e3e:	4b36      	ldr	r3, [pc, #216]	@ (8000f18 <DMA2_Stream1_IRQHandler+0x180>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	709a      	strb	r2, [r3, #2]
		TIM8_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000e44:	4b35      	ldr	r3, [pc, #212]	@ (8000f1c <DMA2_Stream1_IRQHandler+0x184>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	709a      	strb	r2, [r3, #2]
		TIM8_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000e4a:	4b35      	ldr	r3, [pc, #212]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x188>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	709a      	strb	r2, [r3, #2]
		TIM8_COM_DMA_Flag.Transfer_Error_Flag = true;
 8000e50:	4b34      	ldr	r3, [pc, #208]	@ (8000f24 <DMA2_Stream1_IRQHandler+0x18c>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	709a      	strb	r2, [r3, #2]
		DCMI_DMA_Flag.Transfer_Error_Flag = true;
 8000e56:	4b34      	ldr	r3, [pc, #208]	@ (8000f28 <DMA2_Stream1_IRQHandler+0x190>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	709a      	strb	r2, [r3, #2]
		USART6_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000e5c:	4b33      	ldr	r3, [pc, #204]	@ (8000f2c <DMA2_Stream1_IRQHandler+0x194>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	709a      	strb	r2, [r3, #2]
		DMA2_Stream1_Flag.Transfer_Error_Flag = true;
 8000e62:	4b33      	ldr	r3, [pc, #204]	@ (8000f30 <DMA2_Stream1_IRQHandler+0x198>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000e68:	4b29      	ldr	r3, [pc, #164]	@ (8000f10 <DMA2_Stream1_IRQHandler+0x178>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	4a28      	ldr	r2, [pc, #160]	@ (8000f10 <DMA2_Stream1_IRQHandler+0x178>)
 8000e6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e72:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF1)
 8000e74:	4b26      	ldr	r3, [pc, #152]	@ (8000f10 <DMA2_Stream1_IRQHandler+0x178>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d01d      	beq.n	8000ebc <DMA2_Stream1_IRQHandler+0x124>
	{
		ADC3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000e80:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <DMA2_Stream1_IRQHandler+0x17c>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	705a      	strb	r2, [r3, #1]
		TIM1_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000e86:	4b24      	ldr	r3, [pc, #144]	@ (8000f18 <DMA2_Stream1_IRQHandler+0x180>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	705a      	strb	r2, [r3, #1]
		TIM8_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000e8c:	4b23      	ldr	r3, [pc, #140]	@ (8000f1c <DMA2_Stream1_IRQHandler+0x184>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	705a      	strb	r2, [r3, #1]
		TIM8_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000e92:	4b23      	ldr	r3, [pc, #140]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x188>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	705a      	strb	r2, [r3, #1]
		TIM8_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000e98:	4b22      	ldr	r3, [pc, #136]	@ (8000f24 <DMA2_Stream1_IRQHandler+0x18c>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	705a      	strb	r2, [r3, #1]
		DCMI_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000e9e:	4b22      	ldr	r3, [pc, #136]	@ (8000f28 <DMA2_Stream1_IRQHandler+0x190>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	705a      	strb	r2, [r3, #1]
		USART6_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ea4:	4b21      	ldr	r3, [pc, #132]	@ (8000f2c <DMA2_Stream1_IRQHandler+0x194>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	705a      	strb	r2, [r3, #1]
		DMA2_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <DMA2_Stream1_IRQHandler+0x198>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <DMA2_Stream1_IRQHandler+0x178>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	4a16      	ldr	r2, [pc, #88]	@ (8000f10 <DMA2_Stream1_IRQHandler+0x178>)
 8000eb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eba:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF1)
 8000ebc:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <DMA2_Stream1_IRQHandler+0x178>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d01d      	beq.n	8000f04 <DMA2_Stream1_IRQHandler+0x16c>
	{
		ADC3_DMA_Flag.Transfer_Complete_Flag = true;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <DMA2_Stream1_IRQHandler+0x17c>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
		TIM1_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8000ece:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <DMA2_Stream1_IRQHandler+0x180>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
		TIM8_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <DMA2_Stream1_IRQHandler+0x184>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
		TIM8_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x188>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
		TIM8_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8000ee0:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <DMA2_Stream1_IRQHandler+0x18c>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
		DCMI_DMA_Flag.Transfer_Complete_Flag = true;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <DMA2_Stream1_IRQHandler+0x190>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
		USART6_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <DMA2_Stream1_IRQHandler+0x194>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <DMA2_Stream1_IRQHandler+0x198>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <DMA2_Stream1_IRQHandler+0x178>)
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <DMA2_Stream1_IRQHandler+0x178>)
 8000efe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f02:	6093      	str	r3, [r2, #8]
	}
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40026400 	.word	0x40026400
 8000f14:	20000208 	.word	0x20000208
 8000f18:	200000f8 	.word	0x200000f8
 8000f1c:	20000128 	.word	0x20000128
 8000f20:	20000150 	.word	0x20000150
 8000f24:	20000158 	.word	0x20000158
 8000f28:	200001f0 	.word	0x200001f0
 8000f2c:	200000d0 	.word	0x200000d0
 8000f30:	20000258 	.word	0x20000258

08000f34 <DMA2_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream2_IRQHandler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF2)
 8000f38:	4b3e      	ldr	r3, [pc, #248]	@ (8001034 <DMA2_Stream2_IRQHandler+0x100>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d011      	beq.n	8000f68 <DMA2_Stream2_IRQHandler+0x34>
	{
		TIM8_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000f44:	4b3c      	ldr	r3, [pc, #240]	@ (8001038 <DMA2_Stream2_IRQHandler+0x104>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	711a      	strb	r2, [r3, #4]
		USART1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000f4a:	4b3c      	ldr	r3, [pc, #240]	@ (800103c <DMA2_Stream2_IRQHandler+0x108>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	711a      	strb	r2, [r3, #4]
		ADC2_DMA_Flag.Fifo_Error_Flag = true;
 8000f50:	4b3b      	ldr	r3, [pc, #236]	@ (8001040 <DMA2_Stream2_IRQHandler+0x10c>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	711a      	strb	r2, [r3, #4]
		DMA2_Stream2_Flag.Fifo_Error_Flag = true;
 8000f56:	4b3b      	ldr	r3, [pc, #236]	@ (8001044 <DMA2_Stream2_IRQHandler+0x110>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000f5c:	4b35      	ldr	r3, [pc, #212]	@ (8001034 <DMA2_Stream2_IRQHandler+0x100>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	4a34      	ldr	r2, [pc, #208]	@ (8001034 <DMA2_Stream2_IRQHandler+0x100>)
 8000f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f66:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF2)
 8000f68:	4b32      	ldr	r3, [pc, #200]	@ (8001034 <DMA2_Stream2_IRQHandler+0x100>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d011      	beq.n	8000f98 <DMA2_Stream2_IRQHandler+0x64>
	{
		TIM8_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f74:	4b30      	ldr	r3, [pc, #192]	@ (8001038 <DMA2_Stream2_IRQHandler+0x104>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	70da      	strb	r2, [r3, #3]
		USART1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f7a:	4b30      	ldr	r3, [pc, #192]	@ (800103c <DMA2_Stream2_IRQHandler+0x108>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	70da      	strb	r2, [r3, #3]
		ADC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f80:	4b2f      	ldr	r3, [pc, #188]	@ (8001040 <DMA2_Stream2_IRQHandler+0x10c>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	70da      	strb	r2, [r3, #3]
		DMA2_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8000f86:	4b2f      	ldr	r3, [pc, #188]	@ (8001044 <DMA2_Stream2_IRQHandler+0x110>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8000f8c:	4b29      	ldr	r3, [pc, #164]	@ (8001034 <DMA2_Stream2_IRQHandler+0x100>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	4a28      	ldr	r2, [pc, #160]	@ (8001034 <DMA2_Stream2_IRQHandler+0x100>)
 8000f92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f96:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF2)
 8000f98:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <DMA2_Stream2_IRQHandler+0x100>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d011      	beq.n	8000fc8 <DMA2_Stream2_IRQHandler+0x94>
	{
		TIM8_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000fa4:	4b24      	ldr	r3, [pc, #144]	@ (8001038 <DMA2_Stream2_IRQHandler+0x104>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	709a      	strb	r2, [r3, #2]
		USART1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000faa:	4b24      	ldr	r3, [pc, #144]	@ (800103c <DMA2_Stream2_IRQHandler+0x108>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	709a      	strb	r2, [r3, #2]
		ADC2_DMA_Flag.Transfer_Error_Flag = true;
 8000fb0:	4b23      	ldr	r3, [pc, #140]	@ (8001040 <DMA2_Stream2_IRQHandler+0x10c>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	709a      	strb	r2, [r3, #2]
		DMA2_Stream2_Flag.Transfer_Error_Flag = true;
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <DMA2_Stream2_IRQHandler+0x110>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <DMA2_Stream2_IRQHandler+0x100>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8001034 <DMA2_Stream2_IRQHandler+0x100>)
 8000fc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fc6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF2)
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <DMA2_Stream2_IRQHandler+0x100>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d011      	beq.n	8000ff8 <DMA2_Stream2_IRQHandler+0xc4>
	{
		TIM8_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <DMA2_Stream2_IRQHandler+0x104>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	705a      	strb	r2, [r3, #1]
		USART1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000fda:	4b18      	ldr	r3, [pc, #96]	@ (800103c <DMA2_Stream2_IRQHandler+0x108>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	705a      	strb	r2, [r3, #1]
		ADC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <DMA2_Stream2_IRQHandler+0x10c>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	705a      	strb	r2, [r3, #1]
		DMA2_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8000fe6:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <DMA2_Stream2_IRQHandler+0x110>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <DMA2_Stream2_IRQHandler+0x100>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	4a10      	ldr	r2, [pc, #64]	@ (8001034 <DMA2_Stream2_IRQHandler+0x100>)
 8000ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ff6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF2)
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <DMA2_Stream2_IRQHandler+0x100>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d011      	beq.n	8001028 <DMA2_Stream2_IRQHandler+0xf4>
	{
		TIM8_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <DMA2_Stream2_IRQHandler+0x104>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
		USART1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <DMA2_Stream2_IRQHandler+0x108>)
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
		ADC2_DMA_Flag.Transfer_Complete_Flag = true;
 8001010:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <DMA2_Stream2_IRQHandler+0x10c>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
 8001016:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <DMA2_Stream2_IRQHandler+0x110>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <DMA2_Stream2_IRQHandler+0x100>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4a04      	ldr	r2, [pc, #16]	@ (8001034 <DMA2_Stream2_IRQHandler+0x100>)
 8001022:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001026:	6093      	str	r3, [r2, #8]
	}
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40026400 	.word	0x40026400
 8001038:	20000130 	.word	0x20000130
 800103c:	20000088 	.word	0x20000088
 8001040:	20000200 	.word	0x20000200
 8001044:	20000260 	.word	0x20000260

08001048 <DMA2_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream3_IRQHandler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF3)
 800104c:	4b36      	ldr	r3, [pc, #216]	@ (8001128 <DMA2_Stream3_IRQHandler+0xe0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00e      	beq.n	8001076 <DMA2_Stream3_IRQHandler+0x2e>
	{
		SDIO_RXTX_DMA_Flag.Fifo_Error_Flag = true;
 8001058:	4b34      	ldr	r3, [pc, #208]	@ (800112c <DMA2_Stream3_IRQHandler+0xe4>)
 800105a:	2201      	movs	r2, #1
 800105c:	711a      	strb	r2, [r3, #4]
		SPI1_TX_DMA_Flag.Fifo_Error_Flag = true;
 800105e:	4b34      	ldr	r3, [pc, #208]	@ (8001130 <DMA2_Stream3_IRQHandler+0xe8>)
 8001060:	2201      	movs	r2, #1
 8001062:	711a      	strb	r2, [r3, #4]
		DMA2_Stream3_Flag.Fifo_Error_Flag = true;
 8001064:	4b33      	ldr	r3, [pc, #204]	@ (8001134 <DMA2_Stream3_IRQHandler+0xec>)
 8001066:	2201      	movs	r2, #1
 8001068:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 800106a:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <DMA2_Stream3_IRQHandler+0xe0>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	4a2e      	ldr	r2, [pc, #184]	@ (8001128 <DMA2_Stream3_IRQHandler+0xe0>)
 8001070:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001074:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF3)
 8001076:	4b2c      	ldr	r3, [pc, #176]	@ (8001128 <DMA2_Stream3_IRQHandler+0xe0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00e      	beq.n	80010a0 <DMA2_Stream3_IRQHandler+0x58>
	{
		SDIO_RXTX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001082:	4b2a      	ldr	r3, [pc, #168]	@ (800112c <DMA2_Stream3_IRQHandler+0xe4>)
 8001084:	2201      	movs	r2, #1
 8001086:	70da      	strb	r2, [r3, #3]
		SPI1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001088:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <DMA2_Stream3_IRQHandler+0xe8>)
 800108a:	2201      	movs	r2, #1
 800108c:	70da      	strb	r2, [r3, #3]
		DMA2_Stream3_Flag.Direct_Mode_Error_Flag = true;
 800108e:	4b29      	ldr	r3, [pc, #164]	@ (8001134 <DMA2_Stream3_IRQHandler+0xec>)
 8001090:	2201      	movs	r2, #1
 8001092:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001094:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <DMA2_Stream3_IRQHandler+0xe0>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	4a23      	ldr	r2, [pc, #140]	@ (8001128 <DMA2_Stream3_IRQHandler+0xe0>)
 800109a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800109e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF3)
 80010a0:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <DMA2_Stream3_IRQHandler+0xe0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00e      	beq.n	80010ca <DMA2_Stream3_IRQHandler+0x82>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Error_Flag = true;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <DMA2_Stream3_IRQHandler+0xe4>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	709a      	strb	r2, [r3, #2]
		SPI1_TX_DMA_Flag.Transfer_Error_Flag = true;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <DMA2_Stream3_IRQHandler+0xe8>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	709a      	strb	r2, [r3, #2]
		DMA2_Stream3_Flag.Transfer_Error_Flag = true;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <DMA2_Stream3_IRQHandler+0xec>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80010be:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <DMA2_Stream3_IRQHandler+0xe0>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	4a19      	ldr	r2, [pc, #100]	@ (8001128 <DMA2_Stream3_IRQHandler+0xe0>)
 80010c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010c8:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF3)
 80010ca:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <DMA2_Stream3_IRQHandler+0xe0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00e      	beq.n	80010f4 <DMA2_Stream3_IRQHandler+0xac>
	{
		SDIO_RXTX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <DMA2_Stream3_IRQHandler+0xe4>)
 80010d8:	2201      	movs	r2, #1
 80010da:	705a      	strb	r2, [r3, #1]
		SPI1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80010dc:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <DMA2_Stream3_IRQHandler+0xe8>)
 80010de:	2201      	movs	r2, #1
 80010e0:	705a      	strb	r2, [r3, #1]
		DMA2_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 80010e2:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <DMA2_Stream3_IRQHandler+0xec>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <DMA2_Stream3_IRQHandler+0xe0>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001128 <DMA2_Stream3_IRQHandler+0xe0>)
 80010ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010f2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF3)
 80010f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <DMA2_Stream3_IRQHandler+0xe0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00e      	beq.n	800111e <DMA2_Stream3_IRQHandler+0xd6>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Complete_Flag = true;
 8001100:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <DMA2_Stream3_IRQHandler+0xe4>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
		SPI1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <DMA2_Stream3_IRQHandler+0xe8>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <DMA2_Stream3_IRQHandler+0xec>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001112:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <DMA2_Stream3_IRQHandler+0xe0>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	4a04      	ldr	r2, [pc, #16]	@ (8001128 <DMA2_Stream3_IRQHandler+0xe0>)
 8001118:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800111c:	6093      	str	r3, [r2, #8]
	}
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	40026400 	.word	0x40026400
 800112c:	200001e8 	.word	0x200001e8
 8001130:	20000070 	.word	0x20000070
 8001134:	20000268 	.word	0x20000268

08001138 <DMA2_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream4_IRQHandler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF4)
 800113c:	4b36      	ldr	r3, [pc, #216]	@ (8001218 <DMA2_Stream4_IRQHandler+0xe0>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00e      	beq.n	8001166 <DMA2_Stream4_IRQHandler+0x2e>
	{
		TIM1_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8001148:	4b34      	ldr	r3, [pc, #208]	@ (800121c <DMA2_Stream4_IRQHandler+0xe4>)
 800114a:	2201      	movs	r2, #1
 800114c:	711a      	strb	r2, [r3, #4]
		TIM8_CH2_DMA_Flag.Fifo_Error_Flag = true;
 800114e:	4b34      	ldr	r3, [pc, #208]	@ (8001220 <DMA2_Stream4_IRQHandler+0xe8>)
 8001150:	2201      	movs	r2, #1
 8001152:	711a      	strb	r2, [r3, #4]
		DMA2_Stream4_Flag.Fifo_Error_Flag = true;
 8001154:	4b33      	ldr	r3, [pc, #204]	@ (8001224 <DMA2_Stream4_IRQHandler+0xec>)
 8001156:	2201      	movs	r2, #1
 8001158:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF4;
 800115a:	4b2f      	ldr	r3, [pc, #188]	@ (8001218 <DMA2_Stream4_IRQHandler+0xe0>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	4a2e      	ldr	r2, [pc, #184]	@ (8001218 <DMA2_Stream4_IRQHandler+0xe0>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF4)
 8001166:	4b2c      	ldr	r3, [pc, #176]	@ (8001218 <DMA2_Stream4_IRQHandler+0xe0>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00e      	beq.n	8001190 <DMA2_Stream4_IRQHandler+0x58>
	{
		TIM1_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001172:	4b2a      	ldr	r3, [pc, #168]	@ (800121c <DMA2_Stream4_IRQHandler+0xe4>)
 8001174:	2201      	movs	r2, #1
 8001176:	70da      	strb	r2, [r3, #3]
		TIM8_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001178:	4b29      	ldr	r3, [pc, #164]	@ (8001220 <DMA2_Stream4_IRQHandler+0xe8>)
 800117a:	2201      	movs	r2, #1
 800117c:	70da      	strb	r2, [r3, #3]
		DMA2_Stream4_Flag.Direct_Mode_Error_Flag = true;
 800117e:	4b29      	ldr	r3, [pc, #164]	@ (8001224 <DMA2_Stream4_IRQHandler+0xec>)
 8001180:	2201      	movs	r2, #1
 8001182:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001184:	4b24      	ldr	r3, [pc, #144]	@ (8001218 <DMA2_Stream4_IRQHandler+0xe0>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	4a23      	ldr	r2, [pc, #140]	@ (8001218 <DMA2_Stream4_IRQHandler+0xe0>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF4)
 8001190:	4b21      	ldr	r3, [pc, #132]	@ (8001218 <DMA2_Stream4_IRQHandler+0xe0>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00e      	beq.n	80011ba <DMA2_Stream4_IRQHandler+0x82>
	{
		TIM1_CH4_DMA_Flag.Transfer_Error_Flag = true;
 800119c:	4b1f      	ldr	r3, [pc, #124]	@ (800121c <DMA2_Stream4_IRQHandler+0xe4>)
 800119e:	2201      	movs	r2, #1
 80011a0:	709a      	strb	r2, [r3, #2]
		TIM8_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80011a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <DMA2_Stream4_IRQHandler+0xe8>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	709a      	strb	r2, [r3, #2]
		DMA2_Stream4_Flag.Transfer_Error_Flag = true;
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <DMA2_Stream4_IRQHandler+0xec>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <DMA2_Stream4_IRQHandler+0xe0>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	4a19      	ldr	r2, [pc, #100]	@ (8001218 <DMA2_Stream4_IRQHandler+0xe0>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF4)
 80011ba:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <DMA2_Stream4_IRQHandler+0xe0>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00e      	beq.n	80011e4 <DMA2_Stream4_IRQHandler+0xac>
	{
		TIM1_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <DMA2_Stream4_IRQHandler+0xe4>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	705a      	strb	r2, [r3, #1]
		TIM8_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80011cc:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <DMA2_Stream4_IRQHandler+0xe8>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	705a      	strb	r2, [r3, #1]
		DMA2_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 80011d2:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <DMA2_Stream4_IRQHandler+0xec>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <DMA2_Stream4_IRQHandler+0xe0>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001218 <DMA2_Stream4_IRQHandler+0xe0>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF4)
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <DMA2_Stream4_IRQHandler+0xe0>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0320 	and.w	r3, r3, #32
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00e      	beq.n	800120e <DMA2_Stream4_IRQHandler+0xd6>
	{
		TIM1_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <DMA2_Stream4_IRQHandler+0xe4>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
		TIM8_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <DMA2_Stream4_IRQHandler+0xe8>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
 80011fc:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <DMA2_Stream4_IRQHandler+0xec>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8001202:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <DMA2_Stream4_IRQHandler+0xe0>)
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <DMA2_Stream4_IRQHandler+0xe0>)
 8001208:	f043 0320 	orr.w	r3, r3, #32
 800120c:	60d3      	str	r3, [r2, #12]
	}
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	40026400 	.word	0x40026400
 800121c:	20000110 	.word	0x20000110
 8001220:	20000138 	.word	0x20000138
 8001224:	20000270 	.word	0x20000270

08001228 <DMA2_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream5_IRQHandler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF5)
 800122c:	4b2f      	ldr	r3, [pc, #188]	@ (80012ec <DMA2_Stream5_IRQHandler+0xc4>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00b      	beq.n	8001250 <DMA2_Stream5_IRQHandler+0x28>
	{
		TIM1_UP_DMA_Flag.Fifo_Error_Flag = true;
 8001238:	4b2d      	ldr	r3, [pc, #180]	@ (80012f0 <DMA2_Stream5_IRQHandler+0xc8>)
 800123a:	2201      	movs	r2, #1
 800123c:	711a      	strb	r2, [r3, #4]
		DMA2_Stream5_Flag.Fifo_Error_Flag = true;
 800123e:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <DMA2_Stream5_IRQHandler+0xcc>)
 8001240:	2201      	movs	r2, #1
 8001242:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001244:	4b29      	ldr	r3, [pc, #164]	@ (80012ec <DMA2_Stream5_IRQHandler+0xc4>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4a28      	ldr	r2, [pc, #160]	@ (80012ec <DMA2_Stream5_IRQHandler+0xc4>)
 800124a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800124e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF5)
 8001250:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <DMA2_Stream5_IRQHandler+0xc4>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00b      	beq.n	8001274 <DMA2_Stream5_IRQHandler+0x4c>
	{
		TIM1_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 800125c:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <DMA2_Stream5_IRQHandler+0xc8>)
 800125e:	2201      	movs	r2, #1
 8001260:	70da      	strb	r2, [r3, #3]
		DMA2_Stream5_Flag.Direct_Mode_Error_Flag = true;
 8001262:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <DMA2_Stream5_IRQHandler+0xcc>)
 8001264:	2201      	movs	r2, #1
 8001266:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001268:	4b20      	ldr	r3, [pc, #128]	@ (80012ec <DMA2_Stream5_IRQHandler+0xc4>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4a1f      	ldr	r2, [pc, #124]	@ (80012ec <DMA2_Stream5_IRQHandler+0xc4>)
 800126e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001272:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF5)
 8001274:	4b1d      	ldr	r3, [pc, #116]	@ (80012ec <DMA2_Stream5_IRQHandler+0xc4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00b      	beq.n	8001298 <DMA2_Stream5_IRQHandler+0x70>
	{
		TIM1_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001280:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <DMA2_Stream5_IRQHandler+0xc8>)
 8001282:	2201      	movs	r2, #1
 8001284:	709a      	strb	r2, [r3, #2]
		DMA2_Stream5_Flag.Transfer_Error_Flag = true;
 8001286:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <DMA2_Stream5_IRQHandler+0xcc>)
 8001288:	2201      	movs	r2, #1
 800128a:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 800128c:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <DMA2_Stream5_IRQHandler+0xc4>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4a16      	ldr	r2, [pc, #88]	@ (80012ec <DMA2_Stream5_IRQHandler+0xc4>)
 8001292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001296:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF5)
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <DMA2_Stream5_IRQHandler+0xc4>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00b      	beq.n	80012bc <DMA2_Stream5_IRQHandler+0x94>
	{
		TIM1_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <DMA2_Stream5_IRQHandler+0xc8>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	705a      	strb	r2, [r3, #1]
		DMA2_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <DMA2_Stream5_IRQHandler+0xcc>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80012b0:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <DMA2_Stream5_IRQHandler+0xc4>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	@ (80012ec <DMA2_Stream5_IRQHandler+0xc4>)
 80012b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ba:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF5)
 80012bc:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <DMA2_Stream5_IRQHandler+0xc4>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00b      	beq.n	80012e0 <DMA2_Stream5_IRQHandler+0xb8>
	{
		TIM1_UP_DMA_Flag.Transfer_Complete_Flag = true;
 80012c8:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <DMA2_Stream5_IRQHandler+0xc8>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <DMA2_Stream5_IRQHandler+0xcc>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <DMA2_Stream5_IRQHandler+0xc4>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <DMA2_Stream5_IRQHandler+0xc4>)
 80012da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012de:	60d3      	str	r3, [r2, #12]
	}
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40026400 	.word	0x40026400
 80012f0:	200000f0 	.word	0x200000f0
 80012f4:	20000278 	.word	0x20000278

080012f8 <DMA2_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream6_IRQHandler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF6)
 80012fc:	4b45      	ldr	r3, [pc, #276]	@ (8001414 <DMA2_Stream6_IRQHandler+0x11c>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d014      	beq.n	8001332 <DMA2_Stream6_IRQHandler+0x3a>
	{
		TIM1_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001308:	4b43      	ldr	r3, [pc, #268]	@ (8001418 <DMA2_Stream6_IRQHandler+0x120>)
 800130a:	2201      	movs	r2, #1
 800130c:	711a      	strb	r2, [r3, #4]
		TIM1_CH3_DMA_Flag.Fifo_Error_Flag = true;
 800130e:	4b43      	ldr	r3, [pc, #268]	@ (800141c <DMA2_Stream6_IRQHandler+0x124>)
 8001310:	2201      	movs	r2, #1
 8001312:	711a      	strb	r2, [r3, #4]
		TIM8_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001314:	4b42      	ldr	r3, [pc, #264]	@ (8001420 <DMA2_Stream6_IRQHandler+0x128>)
 8001316:	2201      	movs	r2, #1
 8001318:	711a      	strb	r2, [r3, #4]
		USART6_TX_DMA_Flag.Fifo_Error_Flag = true;
 800131a:	4b42      	ldr	r3, [pc, #264]	@ (8001424 <DMA2_Stream6_IRQHandler+0x12c>)
 800131c:	2201      	movs	r2, #1
 800131e:	711a      	strb	r2, [r3, #4]
		DMA2_Stream6_Flag.Fifo_Error_Flag = true;
 8001320:	4b41      	ldr	r3, [pc, #260]	@ (8001428 <DMA2_Stream6_IRQHandler+0x130>)
 8001322:	2201      	movs	r2, #1
 8001324:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001326:	4b3b      	ldr	r3, [pc, #236]	@ (8001414 <DMA2_Stream6_IRQHandler+0x11c>)
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	4a3a      	ldr	r2, [pc, #232]	@ (8001414 <DMA2_Stream6_IRQHandler+0x11c>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001330:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF6)
 8001332:	4b38      	ldr	r3, [pc, #224]	@ (8001414 <DMA2_Stream6_IRQHandler+0x11c>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d014      	beq.n	8001368 <DMA2_Stream6_IRQHandler+0x70>
	{
		TIM1_CH2_DMA_Flag.Direct_Mode_Error_Flag= true;
 800133e:	4b36      	ldr	r3, [pc, #216]	@ (8001418 <DMA2_Stream6_IRQHandler+0x120>)
 8001340:	2201      	movs	r2, #1
 8001342:	70da      	strb	r2, [r3, #3]
		TIM1_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001344:	4b35      	ldr	r3, [pc, #212]	@ (800141c <DMA2_Stream6_IRQHandler+0x124>)
 8001346:	2201      	movs	r2, #1
 8001348:	70da      	strb	r2, [r3, #3]
		TIM8_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 800134a:	4b35      	ldr	r3, [pc, #212]	@ (8001420 <DMA2_Stream6_IRQHandler+0x128>)
 800134c:	2201      	movs	r2, #1
 800134e:	70da      	strb	r2, [r3, #3]
		USART6_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001350:	4b34      	ldr	r3, [pc, #208]	@ (8001424 <DMA2_Stream6_IRQHandler+0x12c>)
 8001352:	2201      	movs	r2, #1
 8001354:	70da      	strb	r2, [r3, #3]
		DMA2_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8001356:	4b34      	ldr	r3, [pc, #208]	@ (8001428 <DMA2_Stream6_IRQHandler+0x130>)
 8001358:	2201      	movs	r2, #1
 800135a:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 800135c:	4b2d      	ldr	r3, [pc, #180]	@ (8001414 <DMA2_Stream6_IRQHandler+0x11c>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	4a2c      	ldr	r2, [pc, #176]	@ (8001414 <DMA2_Stream6_IRQHandler+0x11c>)
 8001362:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001366:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF6)
 8001368:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <DMA2_Stream6_IRQHandler+0x11c>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d014      	beq.n	800139e <DMA2_Stream6_IRQHandler+0xa6>
	{
		TIM1_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001374:	4b28      	ldr	r3, [pc, #160]	@ (8001418 <DMA2_Stream6_IRQHandler+0x120>)
 8001376:	2201      	movs	r2, #1
 8001378:	709a      	strb	r2, [r3, #2]
		TIM1_CH3_DMA_Flag.Transfer_Error_Flag = true;
 800137a:	4b28      	ldr	r3, [pc, #160]	@ (800141c <DMA2_Stream6_IRQHandler+0x124>)
 800137c:	2201      	movs	r2, #1
 800137e:	709a      	strb	r2, [r3, #2]
		TIM8_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8001380:	4b27      	ldr	r3, [pc, #156]	@ (8001420 <DMA2_Stream6_IRQHandler+0x128>)
 8001382:	2201      	movs	r2, #1
 8001384:	709a      	strb	r2, [r3, #2]
		USART6_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001386:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <DMA2_Stream6_IRQHandler+0x12c>)
 8001388:	2201      	movs	r2, #1
 800138a:	709a      	strb	r2, [r3, #2]
		DMA2_Stream6_Flag.Transfer_Error_Flag = true;
 800138c:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <DMA2_Stream6_IRQHandler+0x130>)
 800138e:	2201      	movs	r2, #1
 8001390:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001392:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <DMA2_Stream6_IRQHandler+0x11c>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	4a1f      	ldr	r2, [pc, #124]	@ (8001414 <DMA2_Stream6_IRQHandler+0x11c>)
 8001398:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800139c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF6)
 800139e:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <DMA2_Stream6_IRQHandler+0x11c>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d014      	beq.n	80013d4 <DMA2_Stream6_IRQHandler+0xdc>
	{
		TIM1_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <DMA2_Stream6_IRQHandler+0x120>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	705a      	strb	r2, [r3, #1]
		TIM1_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <DMA2_Stream6_IRQHandler+0x124>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	705a      	strb	r2, [r3, #1]
		TIM8_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <DMA2_Stream6_IRQHandler+0x128>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	705a      	strb	r2, [r3, #1]
		USART6_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013bc:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <DMA2_Stream6_IRQHandler+0x12c>)
 80013be:	2201      	movs	r2, #1
 80013c0:	705a      	strb	r2, [r3, #1]
		DMA2_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <DMA2_Stream6_IRQHandler+0x130>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <DMA2_Stream6_IRQHandler+0x11c>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	4a11      	ldr	r2, [pc, #68]	@ (8001414 <DMA2_Stream6_IRQHandler+0x11c>)
 80013ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013d2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF6)
 80013d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <DMA2_Stream6_IRQHandler+0x11c>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d014      	beq.n	800140a <DMA2_Stream6_IRQHandler+0x112>
	{
		TIM1_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80013e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <DMA2_Stream6_IRQHandler+0x120>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
		TIM1_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <DMA2_Stream6_IRQHandler+0x124>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
		TIM8_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <DMA2_Stream6_IRQHandler+0x128>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
		USART6_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80013f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <DMA2_Stream6_IRQHandler+0x12c>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
 80013f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <DMA2_Stream6_IRQHandler+0x130>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 80013fe:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <DMA2_Stream6_IRQHandler+0x11c>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	4a04      	ldr	r2, [pc, #16]	@ (8001414 <DMA2_Stream6_IRQHandler+0x11c>)
 8001404:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001408:	60d3      	str	r3, [r2, #12]
	}
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40026400 	.word	0x40026400
 8001418:	20000100 	.word	0x20000100
 800141c:	20000108 	.word	0x20000108
 8001420:	20000140 	.word	0x20000140
 8001424:	200000d8 	.word	0x200000d8
 8001428:	20000280 	.word	0x20000280

0800142c <DMA2_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream7_IRQHandler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF7)
 8001430:	4b36      	ldr	r3, [pc, #216]	@ (800150c <DMA2_Stream7_IRQHandler+0xe0>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00e      	beq.n	800145a <DMA2_Stream7_IRQHandler+0x2e>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 800143c:	4b33      	ldr	r3, [pc, #204]	@ (800150c <DMA2_Stream7_IRQHandler+0xe0>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	4a32      	ldr	r2, [pc, #200]	@ (800150c <DMA2_Stream7_IRQHandler+0xe0>)
 8001442:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001446:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8001448:	4b31      	ldr	r3, [pc, #196]	@ (8001510 <DMA2_Stream7_IRQHandler+0xe4>)
 800144a:	2201      	movs	r2, #1
 800144c:	711a      	strb	r2, [r3, #4]
		USART1_TX_DMA_Flag.Fifo_Error_Flag = true;
 800144e:	4b31      	ldr	r3, [pc, #196]	@ (8001514 <DMA2_Stream7_IRQHandler+0xe8>)
 8001450:	2201      	movs	r2, #1
 8001452:	711a      	strb	r2, [r3, #4]
		DMA2_Stream7_Flag.Fifo_Error_Flag = true;
 8001454:	4b30      	ldr	r3, [pc, #192]	@ (8001518 <DMA2_Stream7_IRQHandler+0xec>)
 8001456:	2201      	movs	r2, #1
 8001458:	711a      	strb	r2, [r3, #4]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF7)
 800145a:	4b2c      	ldr	r3, [pc, #176]	@ (800150c <DMA2_Stream7_IRQHandler+0xe0>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00e      	beq.n	8001484 <DMA2_Stream7_IRQHandler+0x58>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8001466:	4b29      	ldr	r3, [pc, #164]	@ (800150c <DMA2_Stream7_IRQHandler+0xe0>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	4a28      	ldr	r2, [pc, #160]	@ (800150c <DMA2_Stream7_IRQHandler+0xe0>)
 800146c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001470:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001472:	4b27      	ldr	r3, [pc, #156]	@ (8001510 <DMA2_Stream7_IRQHandler+0xe4>)
 8001474:	2201      	movs	r2, #1
 8001476:	70da      	strb	r2, [r3, #3]
		USART1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001478:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <DMA2_Stream7_IRQHandler+0xe8>)
 800147a:	2201      	movs	r2, #1
 800147c:	70da      	strb	r2, [r3, #3]
		DMA2_Stream7_Flag.Direct_Mode_Error_Flag = true;
 800147e:	4b26      	ldr	r3, [pc, #152]	@ (8001518 <DMA2_Stream7_IRQHandler+0xec>)
 8001480:	2201      	movs	r2, #1
 8001482:	70da      	strb	r2, [r3, #3]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF7)
 8001484:	4b21      	ldr	r3, [pc, #132]	@ (800150c <DMA2_Stream7_IRQHandler+0xe0>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00e      	beq.n	80014ae <DMA2_Stream7_IRQHandler+0x82>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8001490:	4b1e      	ldr	r3, [pc, #120]	@ (800150c <DMA2_Stream7_IRQHandler+0xe0>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	4a1d      	ldr	r2, [pc, #116]	@ (800150c <DMA2_Stream7_IRQHandler+0xe0>)
 8001496:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800149a:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Error_Flag = true;
 800149c:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <DMA2_Stream7_IRQHandler+0xe4>)
 800149e:	2201      	movs	r2, #1
 80014a0:	709a      	strb	r2, [r3, #2]
		USART1_TX_DMA_Flag.Transfer_Error_Flag = true;
 80014a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <DMA2_Stream7_IRQHandler+0xe8>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	709a      	strb	r2, [r3, #2]
		DMA2_Stream7_Flag.Transfer_Error_Flag = true;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <DMA2_Stream7_IRQHandler+0xec>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	709a      	strb	r2, [r3, #2]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF7)
 80014ae:	4b17      	ldr	r3, [pc, #92]	@ (800150c <DMA2_Stream7_IRQHandler+0xe0>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00e      	beq.n	80014d8 <DMA2_Stream7_IRQHandler+0xac>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 80014ba:	4b14      	ldr	r3, [pc, #80]	@ (800150c <DMA2_Stream7_IRQHandler+0xe0>)
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	4a13      	ldr	r2, [pc, #76]	@ (800150c <DMA2_Stream7_IRQHandler+0xe0>)
 80014c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80014c4:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80014c6:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <DMA2_Stream7_IRQHandler+0xe4>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	705a      	strb	r2, [r3, #1]
		USART1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <DMA2_Stream7_IRQHandler+0xe8>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	705a      	strb	r2, [r3, #1]
		DMA2_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <DMA2_Stream7_IRQHandler+0xec>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	705a      	strb	r2, [r3, #1]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF7)
 80014d8:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <DMA2_Stream7_IRQHandler+0xe0>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00e      	beq.n	8001502 <DMA2_Stream7_IRQHandler+0xd6>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80014e4:	4b09      	ldr	r3, [pc, #36]	@ (800150c <DMA2_Stream7_IRQHandler+0xe0>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4a08      	ldr	r2, [pc, #32]	@ (800150c <DMA2_Stream7_IRQHandler+0xe0>)
 80014ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014ee:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 80014f0:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <DMA2_Stream7_IRQHandler+0xe4>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
		USART1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80014f6:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <DMA2_Stream7_IRQHandler+0xe8>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <DMA2_Stream7_IRQHandler+0xec>)
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]

	}
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40026400 	.word	0x40026400
 8001510:	20000148 	.word	0x20000148
 8001514:	20000090 	.word	0x20000090
 8001518:	20000288 	.word	0x20000288

0800151c <GPIO_Clock_Enable>:
 * @brief  Enables the clock for a specific GPIO port.
 * @param  PORT: Pointer to GPIO port base address.
 * @retval 0 on success, -1 on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a25      	ldr	r2, [pc, #148]	@ (80015bc <GPIO_Clock_Enable+0xa0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d106      	bne.n	800153a <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 800152c:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <GPIO_Clock_Enable+0xa4>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001530:	4a23      	ldr	r2, [pc, #140]	@ (80015c0 <GPIO_Clock_Enable+0xa4>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6313      	str	r3, [r2, #48]	@ 0x30
 8001538:	e039      	b.n	80015ae <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a21      	ldr	r2, [pc, #132]	@ (80015c4 <GPIO_Clock_Enable+0xa8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d106      	bne.n	8001550 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 8001542:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <GPIO_Clock_Enable+0xa4>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a1e      	ldr	r2, [pc, #120]	@ (80015c0 <GPIO_Clock_Enable+0xa4>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	e02e      	b.n	80015ae <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a1d      	ldr	r2, [pc, #116]	@ (80015c8 <GPIO_Clock_Enable+0xac>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d106      	bne.n	8001566 <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 8001558:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <GPIO_Clock_Enable+0xa4>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	4a18      	ldr	r2, [pc, #96]	@ (80015c0 <GPIO_Clock_Enable+0xa4>)
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	6313      	str	r3, [r2, #48]	@ 0x30
 8001564:	e023      	b.n	80015ae <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a18      	ldr	r2, [pc, #96]	@ (80015cc <GPIO_Clock_Enable+0xb0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d106      	bne.n	800157c <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 800156e:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <GPIO_Clock_Enable+0xa4>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a13      	ldr	r2, [pc, #76]	@ (80015c0 <GPIO_Clock_Enable+0xa4>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	e018      	b.n	80015ae <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <GPIO_Clock_Enable+0xb4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d106      	bne.n	8001592 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8001584:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <GPIO_Clock_Enable+0xa4>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <GPIO_Clock_Enable+0xa4>)
 800158a:	f043 0310 	orr.w	r3, r3, #16
 800158e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001590:	e00d      	b.n	80015ae <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <GPIO_Clock_Enable+0xb8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d106      	bne.n	80015a8 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 800159a:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <GPIO_Clock_Enable+0xa4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a08      	ldr	r2, [pc, #32]	@ (80015c0 <GPIO_Clock_Enable+0xa4>)
 80015a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	e002      	b.n	80015ae <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ac:	e000      	b.n	80015b0 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40021c00 	.word	0x40021c00

080015d8 <GPIO_Pin_Init>:
 * @param  speed: Speed level (low, medium, high, very high).
 * @param  pull: Pull-up/pull-down configuration (none, pull-up, pull-down).
 * @param  alternate_function: Alternate function selection (0-15).
 */
void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	4608      	mov	r0, r1
 80015e2:	4611      	mov	r1, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	70fb      	strb	r3, [r7, #3]
 80015ea:	460b      	mov	r3, r1
 80015ec:	70bb      	strb	r3, [r7, #2]
 80015ee:	4613      	mov	r3, r2
 80015f0:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ff92 	bl	800151c <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	78b9      	ldrb	r1, [r7, #2]
 80015fe:	78fa      	ldrb	r2, [r7, #3]
 8001600:	0052      	lsls	r2, r2, #1
 8001602:	fa01 f202 	lsl.w	r2, r1, r2
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	601a      	str	r2, [r3, #0]

	if(output_type != GPIO_Configuration.Output_Type.None) Port -> OTYPER |= output_type << pin;
 800160c:	2202      	movs	r2, #2
 800160e:	787b      	ldrb	r3, [r7, #1]
 8001610:	4293      	cmp	r3, r2
 8001612:	d008      	beq.n	8001626 <GPIO_Pin_Init+0x4e>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	7879      	ldrb	r1, [r7, #1]
 800161a:	78fa      	ldrb	r2, [r7, #3]
 800161c:	fa01 f202 	lsl.w	r2, r1, r2
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	605a      	str	r2, [r3, #4]
	if(speed != GPIO_Configuration.Speed.None) Port -> OSPEEDR |= speed << (pin*2);
 8001626:	2204      	movs	r2, #4
 8001628:	7c3b      	ldrb	r3, [r7, #16]
 800162a:	4293      	cmp	r3, r2
 800162c:	d009      	beq.n	8001642 <GPIO_Pin_Init+0x6a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	7c39      	ldrb	r1, [r7, #16]
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	0052      	lsls	r2, r2, #1
 8001638:	fa01 f202 	lsl.w	r2, r1, r2
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	609a      	str	r2, [r3, #8]
	if(pull != GPIO_Configuration.Pull.None) Port -> PUPDR |= pull << (pin*2);
 8001642:	2204      	movs	r2, #4
 8001644:	7d3b      	ldrb	r3, [r7, #20]
 8001646:	4293      	cmp	r3, r2
 8001648:	d009      	beq.n	800165e <GPIO_Pin_Init+0x86>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	7d39      	ldrb	r1, [r7, #20]
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	0052      	lsls	r2, r2, #1
 8001654:	fa01 f202 	lsl.w	r2, r1, r2
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	2b07      	cmp	r3, #7
 8001662:	d80a      	bhi.n	800167a <GPIO_Pin_Init+0xa2>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	7e39      	ldrb	r1, [r7, #24]
 800166a:	78fa      	ldrb	r2, [r7, #3]
 800166c:	0092      	lsls	r2, r2, #2
 800166e:	fa01 f202 	lsl.w	r2, r1, r2
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8001678:	e00a      	b.n	8001690 <GPIO_Pin_Init+0xb8>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	7e39      	ldrb	r1, [r7, #24]
 8001680:	78fa      	ldrb	r2, [r7, #3]
 8001682:	3a08      	subs	r2, #8
 8001684:	0092      	lsls	r2, r2, #2
 8001686:	fa01 f202 	lsl.w	r2, r1, r2
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db0a      	blt.n	80016c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	490c      	ldr	r1, [pc, #48]	@ (80016e4 <__NVIC_SetPriority+0x4c>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	0112      	lsls	r2, r2, #4
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c0:	e00a      	b.n	80016d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4908      	ldr	r1, [pc, #32]	@ (80016e8 <__NVIC_SetPriority+0x50>)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	3b04      	subs	r3, #4
 80016d0:	0112      	lsls	r2, r2, #4
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	440b      	add	r3, r1
 80016d6:	761a      	strb	r2, [r3, #24]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f7ff ffc2 	bl	8001698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	@ (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
//	uint8_t pll_m = 4;
//	uint8_t pll_n = 168; //192
//	uint8_t pll_p = 0;
//	uint8_t pll_q = 7;

	SystemInit();
 8001736:	f000 f9d3 	bl	8001ae0 <SystemInit>

	uint8_t pll_m = 8;
 800173a:	2308      	movs	r3, #8
 800173c:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 800173e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001742:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8001748:	2307      	movs	r3, #7
 800174a:	70bb      	strb	r3, [r7, #2]

	RCC->PLLCFGR = 0x00000000;
 800174c:	4b3c      	ldr	r3, [pc, #240]	@ (8001840 <MCU_Clock_Setup+0x110>)
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8001752:	4b3b      	ldr	r3, [pc, #236]	@ (8001840 <MCU_Clock_Setup+0x110>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a3a      	ldr	r2, [pc, #232]	@ (8001840 <MCU_Clock_Setup+0x110>)
 8001758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800175c:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 800175e:	bf00      	nop
 8001760:	4b37      	ldr	r3, [pc, #220]	@ (8001840 <MCU_Clock_Setup+0x110>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f9      	beq.n	8001760 <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 800176c:	4b34      	ldr	r3, [pc, #208]	@ (8001840 <MCU_Clock_Setup+0x110>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001770:	4a33      	ldr	r2, [pc, #204]	@ (8001840 <MCU_Clock_Setup+0x110>)
 8001772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001776:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8001778:	4b32      	ldr	r3, [pc, #200]	@ (8001844 <MCU_Clock_Setup+0x114>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a31      	ldr	r2, [pc, #196]	@ (8001844 <MCU_Clock_Setup+0x114>)
 800177e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001782:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8001784:	4b30      	ldr	r3, [pc, #192]	@ (8001848 <MCU_Clock_Setup+0x118>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a2f      	ldr	r2, [pc, #188]	@ (8001848 <MCU_Clock_Setup+0x118>)
 800178a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800178e:	f043 0305 	orr.w	r3, r3, #5
 8001792:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8001794:	4b2a      	ldr	r3, [pc, #168]	@ (8001840 <MCU_Clock_Setup+0x110>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	78ba      	ldrb	r2, [r7, #2]
 800179a:	0611      	lsls	r1, r2, #24
 800179c:	78fa      	ldrb	r2, [r7, #3]
 800179e:	0412      	lsls	r2, r2, #16
 80017a0:	4311      	orrs	r1, r2
 80017a2:	88ba      	ldrh	r2, [r7, #4]
 80017a4:	0192      	lsls	r2, r2, #6
 80017a6:	4311      	orrs	r1, r2
 80017a8:	79fa      	ldrb	r2, [r7, #7]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	4611      	mov	r1, r2
 80017ae:	4a24      	ldr	r2, [pc, #144]	@ (8001840 <MCU_Clock_Setup+0x110>)
 80017b0:	430b      	orrs	r3, r1
 80017b2:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 80017b4:	4b22      	ldr	r3, [pc, #136]	@ (8001840 <MCU_Clock_Setup+0x110>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a21      	ldr	r2, [pc, #132]	@ (8001840 <MCU_Clock_Setup+0x110>)
 80017ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017be:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 80017c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001840 <MCU_Clock_Setup+0x110>)
 80017c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001840 <MCU_Clock_Setup+0x110>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 80017c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <MCU_Clock_Setup+0x110>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001840 <MCU_Clock_Setup+0x110>)
 80017ce:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80017d2:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 80017d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <MCU_Clock_Setup+0x110>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a19      	ldr	r2, [pc, #100]	@ (8001840 <MCU_Clock_Setup+0x110>)
 80017da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017de:	6093      	str	r3, [r2, #8]




	RCC -> CR |= RCC_CR_PLLON;
 80017e0:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <MCU_Clock_Setup+0x110>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a16      	ldr	r2, [pc, #88]	@ (8001840 <MCU_Clock_Setup+0x110>)
 80017e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ea:	6013      	str	r3, [r2, #0]



	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 80017ec:	bf00      	nop
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <MCU_Clock_Setup+0x110>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f9      	beq.n	80017ee <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <MCU_Clock_Setup+0x110>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	4a10      	ldr	r2, [pc, #64]	@ (8001840 <MCU_Clock_Setup+0x110>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8001806:	bf00      	nop
 8001808:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <MCU_Clock_Setup+0x110>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b08      	cmp	r3, #8
 8001812:	d1f9      	bne.n	8001808 <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 8001814:	f000 f976 	bl	8001b04 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <MCU_Clock_Setup+0x11c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	08db      	lsrs	r3, r3, #3
 800181e:	4a0c      	ldr	r2, [pc, #48]	@ (8001850 <MCU_Clock_Setup+0x120>)
 8001820:	fba2 2303 	umull	r2, r3, r2, r3
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff60 	bl	80016ec <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800182c:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <MCU_Clock_Setup+0x110>)
 800182e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001830:	4a03      	ldr	r2, [pc, #12]	@ (8001840 <MCU_Clock_Setup+0x110>)
 8001832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001836:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	40007000 	.word	0x40007000
 8001848:	40023c00 	.word	0x40023c00
 800184c:	20000000 	.word	0x20000000
 8001850:	18618619 	.word	0x18618619

08001854 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8001858:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <Delay_Config+0x2c>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <Delay_Config+0x2c>)
 8001860:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001864:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <Delay_Config+0x2c>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 800186c:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <Delay_Config+0x2c>)
 800186e:	2205      	movs	r2, #5
 8001870:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 800188e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001892:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80018d8 <Delay_ms+0x54>
 8001896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800189e:	ee17 3a90 	vmov	r3, s15
 80018a2:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 80018a4:	4a0d      	ldr	r2, [pc, #52]	@ (80018dc <Delay_ms+0x58>)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 80018aa:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <Delay_ms+0x58>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 80018b0:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <Delay_ms+0x58>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a09      	ldr	r2, [pc, #36]	@ (80018dc <Delay_ms+0x58>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 80018bc:	bf00      	nop
 80018be:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <Delay_ms+0x58>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f9      	beq.n	80018be <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	48241000 	.word	0x48241000
 80018dc:	e000e010 	.word	0xe000e010

080018e0 <Delay_s>:
	return ms;
}


__STATIC_INLINE uint32_t Delay_s(unsigned long s)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	s = s * 1000;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018ee:	fb02 f303 	mul.w	r3, r2, r3
 80018f2:	607b      	str	r3, [r7, #4]
	for (; s>0; s--)
 80018f4:	e006      	b.n	8001904 <Delay_s+0x24>
	{
		Delay_ms(1);
 80018f6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80018fa:	f7ff ffc3 	bl	8001884 <Delay_ms>
	for (; s>0; s--)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3b01      	subs	r3, #1
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f5      	bne.n	80018f6 <Delay_s+0x16>
	}
	return (0UL);
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <GPIO_Pin_Low>:
 * @brief  Sets a specific pin low.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set low (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	2101      	movs	r1, #1
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	fa01 f202 	lsl.w	r2, r1, r2
 800192a:	43d2      	mvns	r2, r2
 800192c:	401a      	ands	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	615a      	str	r2, [r3, #20]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <GPIO_Pin_High>:
 * @brief  Sets a specific pin high.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set high (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
	Port -> ODR |= 1 << pin;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	2101      	movs	r1, #1
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	fa01 f202 	lsl.w	r2, r1, r2
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	615a      	str	r2, [r3, #20]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <USART1_IRQHandler>:

#define RX_DMA_STREAM DMA2_Stream2
#define RX_DMA_CHANNEL 4

void USART1_IRQHandler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0

	if((USART1 -> SR & USART_SR_RXNE) == USART_SR_RXNE)
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <USART1_IRQHandler+0x40>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0320 	and.w	r3, r3, #32
 8001976:	2b20      	cmp	r3, #32
 8001978:	d105      	bne.n	8001986 <USART1_IRQHandler+0x1e>
	{
//		buffer[temp] = test.Port ->DR;
//		temp += 1;
		USART1 -> SR &= ~USART_SR_RXNE;
 800197a:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <USART1_IRQHandler+0x40>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <USART1_IRQHandler+0x40>)
 8001980:	f023 0320 	bic.w	r3, r3, #32
 8001984:	6013      	str	r3, [r2, #0]
	}

	if((USART1 -> SR & USART_SR_IDLE) == USART_SR_IDLE)
 8001986:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <USART1_IRQHandler+0x40>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0310 	and.w	r3, r3, #16
 800198e:	2b10      	cmp	r3, #16
 8001990:	d103      	bne.n	800199a <USART1_IRQHandler+0x32>
	{



		int temp = test.Port -> SR;
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <USART1_IRQHandler+0x44>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	607b      	str	r3, [r7, #4]
	}
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40011000 	.word	0x40011000
 80019ac:	20000290 	.word	0x20000290

080019b0 <main>:



int main(void)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af04      	add	r7, sp, #16
	MCU_Clock_Setup();
 80019b6:	f7ff febb 	bl	8001730 <MCU_Clock_Setup>
	Delay_Config();
 80019ba:	f7ff ff4b 	bl	8001854 <Delay_Config>
//	USART_Init(&test);
//
//	USART_RX_Buffer(&test, &buffer[0], 300, 0);


	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80019be:	4b40      	ldr	r3, [pc, #256]	@ (8001ac0 <main+0x110>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ac0 <main+0x110>)
 80019c4:	f043 0310 	orr.w	r3, r3, #16
 80019c8:	6453      	str	r3, [r2, #68]	@ 0x44
	    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80019ca:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac0 <main+0x110>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a3c      	ldr	r2, [pc, #240]	@ (8001ac0 <main+0x110>)
 80019d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIO_Pin_Init(GPIOD, 12, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull,
 80019d6:	2001      	movs	r0, #1
 80019d8:	2400      	movs	r4, #0
			                 GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);
 80019da:	2303      	movs	r3, #3
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
	GPIO_Pin_Init(GPIOD, 12, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull,
 80019e0:	9102      	str	r1, [sp, #8]
 80019e2:	9201      	str	r2, [sp, #4]
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	4623      	mov	r3, r4
 80019e8:	4602      	mov	r2, r0
 80019ea:	210c      	movs	r1, #12
 80019ec:	4835      	ldr	r0, [pc, #212]	@ (8001ac4 <main+0x114>)
 80019ee:	f7ff fdf3 	bl	80015d8 <GPIO_Pin_Init>

	GPIO_Pin_Init(GPIOB, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull,
 80019f2:	2002      	movs	r0, #2
 80019f4:	2400      	movs	r4, #0
			                 GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80019f6:	2303      	movs	r3, #3
 80019f8:	2200      	movs	r2, #0
 80019fa:	2107      	movs	r1, #7
	GPIO_Pin_Init(GPIOB, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull,
 80019fc:	9102      	str	r1, [sp, #8]
 80019fe:	9201      	str	r2, [sp, #4]
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	4623      	mov	r3, r4
 8001a04:	4602      	mov	r2, r0
 8001a06:	2107      	movs	r1, #7
 8001a08:	482f      	ldr	r0, [pc, #188]	@ (8001ac8 <main+0x118>)
 8001a0a:	f7ff fde5 	bl	80015d8 <GPIO_Pin_Init>

	GPIO_Pin_Init(GPIOB, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull,
 8001a0e:	2002      	movs	r0, #2
 8001a10:	2400      	movs	r4, #0
			                 GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8001a12:	2303      	movs	r3, #3
 8001a14:	2200      	movs	r2, #0
 8001a16:	2107      	movs	r1, #7
	GPIO_Pin_Init(GPIOB, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull,
 8001a18:	9102      	str	r1, [sp, #8]
 8001a1a:	9201      	str	r2, [sp, #4]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	4623      	mov	r3, r4
 8001a20:	4602      	mov	r2, r0
 8001a22:	2106      	movs	r1, #6
 8001a24:	4828      	ldr	r0, [pc, #160]	@ (8001ac8 <main+0x118>)
 8001a26:	f7ff fdd7 	bl	80015d8 <GPIO_Pin_Init>


    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE; // Enable transmitter and receiver
 8001a2a:	4b28      	ldr	r3, [pc, #160]	@ (8001acc <main+0x11c>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	4a27      	ldr	r2, [pc, #156]	@ (8001acc <main+0x11c>)
 8001a30:	f043 030c 	orr.w	r3, r3, #12
 8001a34:	60d3      	str	r3, [r2, #12]
    USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR; // Enable DMA mode for both TX and RX
 8001a36:	4b25      	ldr	r3, [pc, #148]	@ (8001acc <main+0x11c>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	4a24      	ldr	r2, [pc, #144]	@ (8001acc <main+0x11c>)
 8001a3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001a40:	6153      	str	r3, [r2, #20]
    USART1->CR1 |= USART_CR1_UE; // Enable USART
 8001a42:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <main+0x11c>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	4a21      	ldr	r2, [pc, #132]	@ (8001acc <main+0x11c>)
 8001a48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a4c:	60d3      	str	r3, [r2, #12]

    // 5. Configure DMA for RX
        RX_DMA_STREAM->CR &= ~DMA_SxCR_EN; // Disable DMA stream
 8001a4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <main+0x120>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad0 <main+0x120>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	6013      	str	r3, [r2, #0]
        while (RX_DMA_STREAM->CR & DMA_SxCR_EN); // Wait until DMA is disabled
 8001a5a:	bf00      	nop
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <main+0x120>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f9      	bne.n	8001a5c <main+0xac>
        RX_DMA_STREAM->PAR = (uint32_t)&USART1->DR; // Set peripheral address (USART1 data register)
 8001a68:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <main+0x120>)
 8001a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad4 <main+0x124>)
 8001a6c:	609a      	str	r2, [r3, #8]
        RX_DMA_STREAM->M0AR = (uint32_t)&buffer; // Set memory address
 8001a6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <main+0x120>)
 8001a70:	4a19      	ldr	r2, [pc, #100]	@ (8001ad8 <main+0x128>)
 8001a72:	60da      	str	r2, [r3, #12]
        RX_DMA_STREAM->NDTR = 300; // Set number of data items to transfer
 8001a74:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <main+0x120>)
 8001a76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a7a:	605a      	str	r2, [r3, #4]
        RX_DMA_STREAM->CR = (RX_DMA_CHANNEL << 25) | DMA_SxCR_MINC | DMA_SxCR_TCIE; // Configure stream
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <main+0x120>)
 8001a7e:	4a17      	ldr	r2, [pc, #92]	@ (8001adc <main+0x12c>)
 8001a80:	601a      	str	r2, [r3, #0]
        RX_DMA_STREAM->FCR = DMA_SxFCR_DMDIS | DMA_SxFCR_FTH_0; // FIFO mode
 8001a82:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <main+0x120>)
 8001a84:	2205      	movs	r2, #5
 8001a86:	615a      	str	r2, [r3, #20]
        RX_DMA_STREAM->CR |= DMA_SxCR_EN;
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <main+0x120>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a10      	ldr	r2, [pc, #64]	@ (8001ad0 <main+0x120>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6013      	str	r3, [r2, #0]
        USART1->CR1 |= USART_CR1_UE; // Enable USART
 8001a94:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <main+0x11c>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4a0c      	ldr	r2, [pc, #48]	@ (8001acc <main+0x11c>)
 8001a9a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a9e:	60d3      	str	r3, [r2, #12]

	for(;;)
	{

//		printConsole("hello");
		GPIO_Pin_High(GPIOD, 12);
 8001aa0:	210c      	movs	r1, #12
 8001aa2:	4808      	ldr	r0, [pc, #32]	@ (8001ac4 <main+0x114>)
 8001aa4:	f7ff ff4b 	bl	800193e <GPIO_Pin_High>
		Delay_s(1);
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f7ff ff19 	bl	80018e0 <Delay_s>
		GPIO_Pin_Low(GPIOD, 12);
 8001aae:	210c      	movs	r1, #12
 8001ab0:	4804      	ldr	r0, [pc, #16]	@ (8001ac4 <main+0x114>)
 8001ab2:	f7ff ff2f 	bl	8001914 <GPIO_Pin_Low>
		Delay_s(1);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f7ff ff12 	bl	80018e0 <Delay_s>
		GPIO_Pin_High(GPIOD, 12);
 8001abc:	bf00      	nop
 8001abe:	e7ef      	b.n	8001aa0 <main+0xf0>
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40011000 	.word	0x40011000
 8001ad0:	40026440 	.word	0x40026440
 8001ad4:	40011004 	.word	0x40011004
 8001ad8:	20000314 	.word	0x20000314
 8001adc:	08000410 	.word	0x08000410

08001ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <SystemInit+0x20>)
 8001ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aea:	4a05      	ldr	r2, [pc, #20]	@ (8001b00 <SystemInit+0x20>)
 8001aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	2302      	movs	r3, #2
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001b1e:	4b34      	ldr	r3, [pc, #208]	@ (8001bf0 <SystemCoreClockUpdate+0xec>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d011      	beq.n	8001b52 <SystemCoreClockUpdate+0x4e>
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d844      	bhi.n	8001bbe <SystemCoreClockUpdate+0xba>
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <SystemCoreClockUpdate+0x3e>
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d004      	beq.n	8001b4a <SystemCoreClockUpdate+0x46>
 8001b40:	e03d      	b.n	8001bbe <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001b42:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <SystemCoreClockUpdate+0xf0>)
 8001b44:	4a2c      	ldr	r2, [pc, #176]	@ (8001bf8 <SystemCoreClockUpdate+0xf4>)
 8001b46:	601a      	str	r2, [r3, #0]
      break;
 8001b48:	e03d      	b.n	8001bc6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf4 <SystemCoreClockUpdate+0xf0>)
 8001b4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001bfc <SystemCoreClockUpdate+0xf8>)
 8001b4e:	601a      	str	r2, [r3, #0]
      break;
 8001b50:	e039      	b.n	8001bc6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001b52:	4b27      	ldr	r3, [pc, #156]	@ (8001bf0 <SystemCoreClockUpdate+0xec>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	0d9b      	lsrs	r3, r3, #22
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b5e:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <SystemCoreClockUpdate+0xec>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b66:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00c      	beq.n	8001b88 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001b6e:	4a23      	ldr	r2, [pc, #140]	@ (8001bfc <SystemCoreClockUpdate+0xf8>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf0 <SystemCoreClockUpdate+0xec>)
 8001b78:	6852      	ldr	r2, [r2, #4]
 8001b7a:	0992      	lsrs	r2, r2, #6
 8001b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	e00b      	b.n	8001ba0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001b88:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf8 <SystemCoreClockUpdate+0xf4>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b90:	4a17      	ldr	r2, [pc, #92]	@ (8001bf0 <SystemCoreClockUpdate+0xec>)
 8001b92:	6852      	ldr	r2, [r2, #4]
 8001b94:	0992      	lsrs	r2, r2, #6
 8001b96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001ba0:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <SystemCoreClockUpdate+0xec>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	0c1b      	lsrs	r3, r3, #16
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	3301      	adds	r3, #1
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf4 <SystemCoreClockUpdate+0xf0>)
 8001bba:	6013      	str	r3, [r2, #0]
      break;
 8001bbc:	e003      	b.n	8001bc6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <SystemCoreClockUpdate+0xf0>)
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <SystemCoreClockUpdate+0xf4>)
 8001bc2:	601a      	str	r2, [r3, #0]
      break;
 8001bc4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <SystemCoreClockUpdate+0xec>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001c00 <SystemCoreClockUpdate+0xfc>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <SystemCoreClockUpdate+0xf0>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001be0:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <SystemCoreClockUpdate+0xf0>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	00f42400 	.word	0x00f42400
 8001bfc:	017d7840 	.word	0x017d7840
 8001c00:	08001cb8 	.word	0x08001cb8

08001c04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c04:	480d      	ldr	r0, [pc, #52]	@ (8001c3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c08:	f7ff ff6a 	bl	8001ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c0c:	480c      	ldr	r0, [pc, #48]	@ (8001c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c0e:	490d      	ldr	r1, [pc, #52]	@ (8001c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c10:	4a0d      	ldr	r2, [pc, #52]	@ (8001c48 <LoopForever+0xe>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c14:	e002      	b.n	8001c1c <LoopCopyDataInit>

08001c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1a:	3304      	adds	r3, #4

08001c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c20:	d3f9      	bcc.n	8001c16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c22:	4a0a      	ldr	r2, [pc, #40]	@ (8001c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c24:	4c0a      	ldr	r4, [pc, #40]	@ (8001c50 <LoopForever+0x16>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c28:	e001      	b.n	8001c2e <LoopFillZerobss>

08001c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c2c:	3204      	adds	r2, #4

08001c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c30:	d3fb      	bcc.n	8001c2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c32:	f000 f811 	bl	8001c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c36:	f7ff febb 	bl	80019b0 <main>

08001c3a <LoopForever>:

LoopForever:
  b LoopForever
 8001c3a:	e7fe      	b.n	8001c3a <LoopForever>
  ldr   r0, =_estack
 8001c3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c44:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001c48:	08001cd0 	.word	0x08001cd0
  ldr r2, =_sbss
 8001c4c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001c50:	20000440 	.word	0x20000440

08001c54 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c54:	e7fe      	b.n	8001c54 <ADC_IRQHandler>
	...

08001c58 <__libc_init_array>:
 8001c58:	b570      	push	{r4, r5, r6, lr}
 8001c5a:	4d0d      	ldr	r5, [pc, #52]	@ (8001c90 <__libc_init_array+0x38>)
 8001c5c:	4c0d      	ldr	r4, [pc, #52]	@ (8001c94 <__libc_init_array+0x3c>)
 8001c5e:	1b64      	subs	r4, r4, r5
 8001c60:	10a4      	asrs	r4, r4, #2
 8001c62:	2600      	movs	r6, #0
 8001c64:	42a6      	cmp	r6, r4
 8001c66:	d109      	bne.n	8001c7c <__libc_init_array+0x24>
 8001c68:	4d0b      	ldr	r5, [pc, #44]	@ (8001c98 <__libc_init_array+0x40>)
 8001c6a:	4c0c      	ldr	r4, [pc, #48]	@ (8001c9c <__libc_init_array+0x44>)
 8001c6c:	f000 f818 	bl	8001ca0 <_init>
 8001c70:	1b64      	subs	r4, r4, r5
 8001c72:	10a4      	asrs	r4, r4, #2
 8001c74:	2600      	movs	r6, #0
 8001c76:	42a6      	cmp	r6, r4
 8001c78:	d105      	bne.n	8001c86 <__libc_init_array+0x2e>
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}
 8001c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c80:	4798      	blx	r3
 8001c82:	3601      	adds	r6, #1
 8001c84:	e7ee      	b.n	8001c64 <__libc_init_array+0xc>
 8001c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c8a:	4798      	blx	r3
 8001c8c:	3601      	adds	r6, #1
 8001c8e:	e7f2      	b.n	8001c76 <__libc_init_array+0x1e>
 8001c90:	08001cc8 	.word	0x08001cc8
 8001c94:	08001cc8 	.word	0x08001cc8
 8001c98:	08001cc8 	.word	0x08001cc8
 8001c9c:	08001ccc 	.word	0x08001ccc

08001ca0 <_init>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	bf00      	nop
 8001ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ca6:	bc08      	pop	{r3}
 8001ca8:	469e      	mov	lr, r3
 8001caa:	4770      	bx	lr

08001cac <_fini>:
 8001cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cae:	bf00      	nop
 8001cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cb2:	bc08      	pop	{r3}
 8001cb4:	469e      	mov	lr, r3
 8001cb6:	4770      	bx	lr
