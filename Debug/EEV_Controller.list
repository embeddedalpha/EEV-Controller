
EEV_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  08005a78  08005a78  00006a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006080  08006080  00008054  2**0
                  CONTENTS
  4 .ARM          00000008  08006080  08006080  00007080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006088  08006088  00008054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006088  08006088  00007088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800608c  0800608c  0000708c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08006090  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008054  2**0
                  CONTENTS
 10 .bss          000007dc  20000054  20000054  00008054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000830  20000830  00008054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008b34  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ea0  00000000  00000000  00010bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000290  00000000  00000000  00011a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001e8  00000000  00000000  00011ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000114a  00000000  00000000  00011ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000058c3  00000000  00000000  0001301a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fccd  00000000  00000000  000188dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a85aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001370  00000000  00000000  000a85f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000a9960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a60 	.word	0x08005a60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08005a60 	.word	0x08005a60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2lz>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	4604      	mov	r4, r0
 8000b84:	460d      	mov	r5, r1
 8000b86:	f7ff ffa9 	bl	8000adc <__aeabi_dcmplt>
 8000b8a:	b928      	cbnz	r0, 8000b98 <__aeabi_d2lz+0x1c>
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	4629      	mov	r1, r5
 8000b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b94:	f000 b80a 	b.w	8000bac <__aeabi_d2ulz>
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b9e:	f000 f805 	bl	8000bac <__aeabi_d2ulz>
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba8:	bd38      	pop	{r3, r4, r5, pc}
 8000baa:	bf00      	nop

08000bac <__aeabi_d2ulz>:
 8000bac:	b5d0      	push	{r4, r6, r7, lr}
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <__aeabi_d2ulz+0x34>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4606      	mov	r6, r0
 8000bb4:	460f      	mov	r7, r1
 8000bb6:	f7ff fd1f 	bl	80005f8 <__aeabi_dmul>
 8000bba:	f000 f815 	bl	8000be8 <__aeabi_d2uiz>
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	f7ff fca0 	bl	8000504 <__aeabi_ui2d>
 8000bc4:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <__aeabi_d2ulz+0x38>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f7ff fd16 	bl	80005f8 <__aeabi_dmul>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4630      	mov	r0, r6
 8000bd2:	4639      	mov	r1, r7
 8000bd4:	f7ff fb58 	bl	8000288 <__aeabi_dsub>
 8000bd8:	f000 f806 	bl	8000be8 <__aeabi_d2uiz>
 8000bdc:	4621      	mov	r1, r4
 8000bde:	bdd0      	pop	{r4, r6, r7, pc}
 8000be0:	3df00000 	.word	0x3df00000
 8000be4:	41f00000 	.word	0x41f00000

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <UART4_IRQHandler>:
char TX_Buffer[RX_Buffer_Length];

USART_Config serial;

void UART4_IRQHandler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
	if(rx_get_flag == 1)
 8000c2e:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <UART4_IRQHandler+0x6c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d128      	bne.n	8000c88 <UART4_IRQHandler+0x60>
	{
		volatile uint32_t temp;

		temp = UART4 -> SR;
 8000c36:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <UART4_IRQHandler+0x70>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	607b      	str	r3, [r7, #4]
		temp = UART4 -> DR;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <UART4_IRQHandler+0x70>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	607b      	str	r3, [r7, #4]

		serial.USART_DMA_Instance_RX.Request.Stream->CR &= ~DMA_SxCR_EN;
 8000c42:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <UART4_IRQHandler+0x74>)
 8000c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <UART4_IRQHandler+0x74>)
 8000c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c4c:	f022 0201 	bic.w	r2, r2, #1
 8000c50:	601a      	str	r2, [r3, #0]

		RX_Length = RX_Buffer_Length - serial.USART_DMA_Instance_RX.Request.Stream->NDTR;
 8000c52:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <UART4_IRQHandler+0x74>)
 8000c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <UART4_IRQHandler+0x78>)
 8000c60:	601a      	str	r2, [r3, #0]

		serial.USART_DMA_Instance_RX.Request.Stream -> NDTR &= RX_Buffer_Length;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <UART4_IRQHandler+0x74>)
 8000c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <UART4_IRQHandler+0x74>)
 8000c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c6c:	f002 0264 	and.w	r2, r2, #100	@ 0x64
 8000c70:	605a      	str	r2, [r3, #4]
		serial.USART_DMA_Instance_RX.Request.Stream -> CR |= DMA_SxCR_EN;
 8000c72:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <UART4_IRQHandler+0x74>)
 8000c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <UART4_IRQHandler+0x74>)
 8000c7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c7c:	f042 0201 	orr.w	r2, r2, #1
 8000c80:	601a      	str	r2, [r3, #0]

		rx_flag = 1;
 8000c82:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <UART4_IRQHandler+0x7c>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
	}

}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	20000070 	.word	0x20000070
 8000c98:	40004c00 	.word	0x40004c00
 8000c9c:	20000144 	.word	0x20000144
 8000ca0:	20000078 	.word	0x20000078
 8000ca4:	20000074 	.word	0x20000074

08000ca8 <Console_Init>:


 void Console_Init(int32_t baudrate)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	 USART_Config_Reset(&serial);
 8000cb0:	4813      	ldr	r0, [pc, #76]	@ (8000d00 <Console_Init+0x58>)
 8000cb2:	f001 fec3 	bl	8002a3c <USART_Config_Reset>
	 serial.Port = UART4;
 8000cb6:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <Console_Init+0x58>)
 8000cb8:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <Console_Init+0x5c>)
 8000cba:	601a      	str	r2, [r3, #0]
	 serial.baudrate = baudrate;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a10      	ldr	r2, [pc, #64]	@ (8000d00 <Console_Init+0x58>)
 8000cc0:	6053      	str	r3, [r2, #4]
	 serial.mode = USART_Configuration.Mode.Asynchronous;
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <Console_Init+0x58>)
 8000cc6:	721a      	strb	r2, [r3, #8]
	 serial.stop_bits = USART_Configuration.Stop_Bits.Bit_1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <Console_Init+0x58>)
 8000cce:	741a      	strb	r2, [r3, #16]
	 serial.TX_Pin = UART4_TX_Pin.PC10;
 8000cd0:	220a      	movs	r2, #10
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <Console_Init+0x58>)
 8000cd4:	725a      	strb	r2, [r3, #9]
	 serial.RX_Pin = UART4_RX_Pin.PC11;
 8000cd6:	220b      	movs	r2, #11
 8000cd8:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <Console_Init+0x58>)
 8000cda:	729a      	strb	r2, [r3, #10]
	 serial.interrupt = USART_Configuration.Interrupt_Type.IDLE_Enable;
 8000cdc:	2310      	movs	r3, #16
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <Console_Init+0x58>)
 8000ce2:	739a      	strb	r2, [r3, #14]
	 serial.dma_enable = USART_Configuration.DMA_Enable.TX_Enable | USART_Configuration.DMA_Enable.RX_Enable;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <Console_Init+0x58>)
 8000cee:	745a      	strb	r2, [r3, #17]
	 USART_Init(&serial);
 8000cf0:	4803      	ldr	r0, [pc, #12]	@ (8000d00 <Console_Init+0x58>)
 8000cf2:	f002 fbed 	bl	80034d0 <USART_Init>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000144 	.word	0x20000144
 8000d04:	40004c00 	.word	0x40004c00

08000d08 <printConsole>:

 void printConsole(char *msg, ...)
{
 8000d08:	b40f      	push	{r0, r1, r2, r3}
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, msg);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	603b      	str	r3, [r7, #0]
	vsprintf(TX_Buffer, msg, args);
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	6939      	ldr	r1, [r7, #16]
 8000d1a:	480a      	ldr	r0, [pc, #40]	@ (8000d44 <printConsole+0x3c>)
 8000d1c:	f003 fcf8 	bl	8004710 <vsiprintf>
	uint16_t len = strlen(TX_Buffer);
 8000d20:	4808      	ldr	r0, [pc, #32]	@ (8000d44 <printConsole+0x3c>)
 8000d22:	f7ff fa55 	bl	80001d0 <strlen>
 8000d26:	4603      	mov	r3, r0
 8000d28:	80fb      	strh	r3, [r7, #6]
	USART_TX_Buffer(&serial, &TX_Buffer[0], len);
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4905      	ldr	r1, [pc, #20]	@ (8000d44 <printConsole+0x3c>)
 8000d30:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <printConsole+0x40>)
 8000d32:	f002 ffe7 	bl	8003d04 <USART_TX_Buffer>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d40:	b004      	add	sp, #16
 8000d42:	4770      	bx	lr
 8000d44:	200000e0 	.word	0x200000e0
 8000d48:	20000144 	.word	0x20000144

08000d4c <readConsole>:

int readConsole(const char *msg, ...)
{
 8000d4c:	b40f      	push	{r0, r1, r2, r3}
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
	va_list args;
	int result;
	rx_get_flag = 1;
 8000d54:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <readConsole+0x6c>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	601a      	str	r2, [r3, #0]
	USART_RX_Buffer(&serial, &RX_Buffer[0], RX_Buffer_Length, 0);
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2264      	movs	r2, #100	@ 0x64
 8000d5e:	4917      	ldr	r1, [pc, #92]	@ (8000dbc <readConsole+0x70>)
 8000d60:	4817      	ldr	r0, [pc, #92]	@ (8000dc0 <readConsole+0x74>)
 8000d62:	f003 f93d 	bl	8003fe0 <USART_RX_Buffer>
	while(rx_flag == 0){}
 8000d66:	bf00      	nop
 8000d68:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <readConsole+0x78>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0fb      	beq.n	8000d68 <readConsole+0x1c>
	RX_Buffer[RX_Length - 1] = 0;
 8000d70:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <readConsole+0x7c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	4a11      	ldr	r2, [pc, #68]	@ (8000dbc <readConsole+0x70>)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	54d1      	strb	r1, [r2, r3]
	RX_Buffer[RX_Length - 2] = 0;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <readConsole+0x7c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3b02      	subs	r3, #2
 8000d82:	4a0e      	ldr	r2, [pc, #56]	@ (8000dbc <readConsole+0x70>)
 8000d84:	2100      	movs	r1, #0
 8000d86:	54d1      	strb	r1, [r2, r3]
	va_start(args, msg);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	603b      	str	r3, [r7, #0]
	result = vsscanf(RX_Buffer,msg,args);
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	6939      	ldr	r1, [r7, #16]
 8000d92:	480a      	ldr	r0, [pc, #40]	@ (8000dbc <readConsole+0x70>)
 8000d94:	f003 fcea 	bl	800476c <vsiscanf>
 8000d98:	6078      	str	r0, [r7, #4]
	va_end(args);
	rx_get_flag = 0;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <readConsole+0x6c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
	rx_flag = 0;
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <readConsole+0x78>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
	return result;
 8000da6:	687b      	ldr	r3, [r7, #4]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000db2:	b004      	add	sp, #16
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000070 	.word	0x20000070
 8000dbc:	2000007c 	.word	0x2000007c
 8000dc0:	20000144 	.word	0x20000144
 8000dc4:	20000074 	.word	0x20000074
 8000dc8:	20000078 	.word	0x20000078

08000dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	db0b      	blt.n	8000df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f003 021f 	and.w	r2, r3, #31
 8000de4:	4907      	ldr	r1, [pc, #28]	@ (8000e04 <__NVIC_EnableIRQ+0x38>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	095b      	lsrs	r3, r3, #5
 8000dec:	2001      	movs	r0, #1
 8000dee:	fa00 f202 	lsl.w	r2, r0, r2
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000e100 	.word	0xe000e100

08000e08 <DMA1_Stream0_IRQHandler>:
 * status flags for FIFO error, direct mode error, transfer error, half
 * transfer complete, and transfer complete, and clears the respective
 * interrupt flag after handling it.
 */
void DMA1_Stream0_IRQHandler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF0)
 8000e0c:	4b54      	ldr	r3, [pc, #336]	@ (8000f60 <DMA1_Stream0_IRQHandler+0x158>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d01a      	beq.n	8000e4e <DMA1_Stream0_IRQHandler+0x46>
	{
		TIM5_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000e18:	4b52      	ldr	r3, [pc, #328]	@ (8000f64 <DMA1_Stream0_IRQHandler+0x15c>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	715a      	strb	r2, [r3, #5]
		TIM4_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000e1e:	4b52      	ldr	r3, [pc, #328]	@ (8000f68 <DMA1_Stream0_IRQHandler+0x160>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	715a      	strb	r2, [r3, #5]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000e24:	4b51      	ldr	r3, [pc, #324]	@ (8000f6c <DMA1_Stream0_IRQHandler+0x164>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	715a      	strb	r2, [r3, #5]
		USART5_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000e2a:	4b51      	ldr	r3, [pc, #324]	@ (8000f70 <DMA1_Stream0_IRQHandler+0x168>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	715a      	strb	r2, [r3, #5]
		I2C1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000e30:	4b50      	ldr	r3, [pc, #320]	@ (8000f74 <DMA1_Stream0_IRQHandler+0x16c>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	715a      	strb	r2, [r3, #5]
		SPI3_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000e36:	4b50      	ldr	r3, [pc, #320]	@ (8000f78 <DMA1_Stream0_IRQHandler+0x170>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	715a      	strb	r2, [r3, #5]
		DMA1_Stream0_Flag.Fifo_Error_Flag = true;
 8000e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8000f7c <DMA1_Stream0_IRQHandler+0x174>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	715a      	strb	r2, [r3, #5]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000e42:	4b47      	ldr	r3, [pc, #284]	@ (8000f60 <DMA1_Stream0_IRQHandler+0x158>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	4a46      	ldr	r2, [pc, #280]	@ (8000f60 <DMA1_Stream0_IRQHandler+0x158>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF0)
 8000e4e:	4b44      	ldr	r3, [pc, #272]	@ (8000f60 <DMA1_Stream0_IRQHandler+0x158>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d01a      	beq.n	8000e90 <DMA1_Stream0_IRQHandler+0x88>
	{
		TIM5_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e5a:	4b42      	ldr	r3, [pc, #264]	@ (8000f64 <DMA1_Stream0_IRQHandler+0x15c>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	711a      	strb	r2, [r3, #4]
		TIM4_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e60:	4b41      	ldr	r3, [pc, #260]	@ (8000f68 <DMA1_Stream0_IRQHandler+0x160>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e66:	4b41      	ldr	r3, [pc, #260]	@ (8000f6c <DMA1_Stream0_IRQHandler+0x164>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	711a      	strb	r2, [r3, #4]
		USART5_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e6c:	4b40      	ldr	r3, [pc, #256]	@ (8000f70 <DMA1_Stream0_IRQHandler+0x168>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	711a      	strb	r2, [r3, #4]
		I2C1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e72:	4b40      	ldr	r3, [pc, #256]	@ (8000f74 <DMA1_Stream0_IRQHandler+0x16c>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	711a      	strb	r2, [r3, #4]
		SPI3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e78:	4b3f      	ldr	r3, [pc, #252]	@ (8000f78 <DMA1_Stream0_IRQHandler+0x170>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	711a      	strb	r2, [r3, #4]
		DMA1_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8000e7e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f7c <DMA1_Stream0_IRQHandler+0x174>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000e84:	4b36      	ldr	r3, [pc, #216]	@ (8000f60 <DMA1_Stream0_IRQHandler+0x158>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	4a35      	ldr	r2, [pc, #212]	@ (8000f60 <DMA1_Stream0_IRQHandler+0x158>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF0)
 8000e90:	4b33      	ldr	r3, [pc, #204]	@ (8000f60 <DMA1_Stream0_IRQHandler+0x158>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d01a      	beq.n	8000ed2 <DMA1_Stream0_IRQHandler+0xca>
	{
		TIM5_CH3_DMA_Flag.Transfer_Error_Flag= true;
 8000e9c:	4b31      	ldr	r3, [pc, #196]	@ (8000f64 <DMA1_Stream0_IRQHandler+0x15c>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	70da      	strb	r2, [r3, #3]
		TIM4_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000ea2:	4b31      	ldr	r3, [pc, #196]	@ (8000f68 <DMA1_Stream0_IRQHandler+0x160>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000ea8:	4b30      	ldr	r3, [pc, #192]	@ (8000f6c <DMA1_Stream0_IRQHandler+0x164>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	70da      	strb	r2, [r3, #3]
		USART5_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000eae:	4b30      	ldr	r3, [pc, #192]	@ (8000f70 <DMA1_Stream0_IRQHandler+0x168>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	70da      	strb	r2, [r3, #3]
		I2C1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f74 <DMA1_Stream0_IRQHandler+0x16c>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	70da      	strb	r2, [r3, #3]
		SPI3_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000eba:	4b2f      	ldr	r3, [pc, #188]	@ (8000f78 <DMA1_Stream0_IRQHandler+0x170>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	70da      	strb	r2, [r3, #3]
		DMA1_Stream0_Flag.Transfer_Error_Flag = true;
 8000ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f7c <DMA1_Stream0_IRQHandler+0x174>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000ec6:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <DMA1_Stream0_IRQHandler+0x158>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	4a25      	ldr	r2, [pc, #148]	@ (8000f60 <DMA1_Stream0_IRQHandler+0x158>)
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF0)
 8000ed2:	4b23      	ldr	r3, [pc, #140]	@ (8000f60 <DMA1_Stream0_IRQHandler+0x158>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d01a      	beq.n	8000f14 <DMA1_Stream0_IRQHandler+0x10c>
	{
		TIM5_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ede:	4b21      	ldr	r3, [pc, #132]	@ (8000f64 <DMA1_Stream0_IRQHandler+0x15c>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	709a      	strb	r2, [r3, #2]
		TIM4_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ee4:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <DMA1_Stream0_IRQHandler+0x160>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000eea:	4b20      	ldr	r3, [pc, #128]	@ (8000f6c <DMA1_Stream0_IRQHandler+0x164>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	709a      	strb	r2, [r3, #2]
		USART5_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f70 <DMA1_Stream0_IRQHandler+0x168>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	709a      	strb	r2, [r3, #2]
		I2C1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <DMA1_Stream0_IRQHandler+0x16c>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	709a      	strb	r2, [r3, #2]
		SPI3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000efc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f78 <DMA1_Stream0_IRQHandler+0x170>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	709a      	strb	r2, [r3, #2]
		DMA1_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <DMA1_Stream0_IRQHandler+0x174>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000f08:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <DMA1_Stream0_IRQHandler+0x158>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	4a14      	ldr	r2, [pc, #80]	@ (8000f60 <DMA1_Stream0_IRQHandler+0x158>)
 8000f0e:	f043 0310 	orr.w	r3, r3, #16
 8000f12:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF0)
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <DMA1_Stream0_IRQHandler+0x158>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0320 	and.w	r3, r3, #32
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d01a      	beq.n	8000f56 <DMA1_Stream0_IRQHandler+0x14e>
	{
		TIM5_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000f20:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <DMA1_Stream0_IRQHandler+0x15c>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	705a      	strb	r2, [r3, #1]
		TIM4_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <DMA1_Stream0_IRQHandler+0x160>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <DMA1_Stream0_IRQHandler+0x164>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	705a      	strb	r2, [r3, #1]
		USART5_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <DMA1_Stream0_IRQHandler+0x168>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	705a      	strb	r2, [r3, #1]
		I2C1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000f38:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <DMA1_Stream0_IRQHandler+0x16c>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	705a      	strb	r2, [r3, #1]
		SPI3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <DMA1_Stream0_IRQHandler+0x170>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	705a      	strb	r2, [r3, #1]
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <DMA1_Stream0_IRQHandler+0x174>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000f4a:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <DMA1_Stream0_IRQHandler+0x158>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <DMA1_Stream0_IRQHandler+0x158>)
 8000f50:	f043 0320 	orr.w	r3, r3, #32
 8000f54:	6093      	str	r3, [r2, #8]
	}
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	40026000 	.word	0x40026000
 8000f64:	20000378 	.word	0x20000378
 8000f68:	20000358 	.word	0x20000358
 8000f6c:	20000298 	.word	0x20000298
 8000f70:	20000270 	.word	0x20000270
 8000f74:	200001e0 	.word	0x200001e0
 8000f78:	20000210 	.word	0x20000210
 8000f7c:	200003c0 	.word	0x200003c0

08000f80 <DMA1_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream1_IRQHandler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF1)
 8000f84:	4b45      	ldr	r3, [pc, #276]	@ (800109c <DMA1_Stream1_IRQHandler+0x11c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d014      	beq.n	8000fba <DMA1_Stream1_IRQHandler+0x3a>
	{
		TIM2_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000f90:	4b43      	ldr	r3, [pc, #268]	@ (80010a0 <DMA1_Stream1_IRQHandler+0x120>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	715a      	strb	r2, [r3, #5]
		TIM6_UP_DMA_Flag.Fifo_Error_Flag = true;
 8000f96:	4b43      	ldr	r3, [pc, #268]	@ (80010a4 <DMA1_Stream1_IRQHandler+0x124>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	715a      	strb	r2, [r3, #5]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000f9c:	4b42      	ldr	r3, [pc, #264]	@ (80010a8 <DMA1_Stream1_IRQHandler+0x128>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	715a      	strb	r2, [r3, #5]
		USART3_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000fa2:	4b42      	ldr	r3, [pc, #264]	@ (80010ac <DMA1_Stream1_IRQHandler+0x12c>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	715a      	strb	r2, [r3, #5]
		DMA1_Stream1_Flag.Fifo_Error_Flag = true;
 8000fa8:	4b41      	ldr	r3, [pc, #260]	@ (80010b0 <DMA1_Stream1_IRQHandler+0x130>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	715a      	strb	r2, [r3, #5]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000fae:	4b3b      	ldr	r3, [pc, #236]	@ (800109c <DMA1_Stream1_IRQHandler+0x11c>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	4a3a      	ldr	r2, [pc, #232]	@ (800109c <DMA1_Stream1_IRQHandler+0x11c>)
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fb8:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF1)
 8000fba:	4b38      	ldr	r3, [pc, #224]	@ (800109c <DMA1_Stream1_IRQHandler+0x11c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d014      	beq.n	8000ff0 <DMA1_Stream1_IRQHandler+0x70>
	{
		TIM2_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000fc6:	4b36      	ldr	r3, [pc, #216]	@ (80010a0 <DMA1_Stream1_IRQHandler+0x120>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	711a      	strb	r2, [r3, #4]
		TIM6_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000fcc:	4b35      	ldr	r3, [pc, #212]	@ (80010a4 <DMA1_Stream1_IRQHandler+0x124>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000fd2:	4b35      	ldr	r3, [pc, #212]	@ (80010a8 <DMA1_Stream1_IRQHandler+0x128>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	711a      	strb	r2, [r3, #4]
		USART3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000fd8:	4b34      	ldr	r3, [pc, #208]	@ (80010ac <DMA1_Stream1_IRQHandler+0x12c>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	711a      	strb	r2, [r3, #4]
		DMA1_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8000fde:	4b34      	ldr	r3, [pc, #208]	@ (80010b0 <DMA1_Stream1_IRQHandler+0x130>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800109c <DMA1_Stream1_IRQHandler+0x11c>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	4a2c      	ldr	r2, [pc, #176]	@ (800109c <DMA1_Stream1_IRQHandler+0x11c>)
 8000fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fee:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF1)
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800109c <DMA1_Stream1_IRQHandler+0x11c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d014      	beq.n	8001026 <DMA1_Stream1_IRQHandler+0xa6>
	{
		TIM2_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8000ffc:	4b28      	ldr	r3, [pc, #160]	@ (80010a0 <DMA1_Stream1_IRQHandler+0x120>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	70da      	strb	r2, [r3, #3]
		TIM6_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001002:	4b28      	ldr	r3, [pc, #160]	@ (80010a4 <DMA1_Stream1_IRQHandler+0x124>)
 8001004:	2201      	movs	r2, #1
 8001006:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001008:	4b27      	ldr	r3, [pc, #156]	@ (80010a8 <DMA1_Stream1_IRQHandler+0x128>)
 800100a:	2201      	movs	r2, #1
 800100c:	70da      	strb	r2, [r3, #3]
		USART3_RX_DMA_Flag.Transfer_Error_Flag = true;
 800100e:	4b27      	ldr	r3, [pc, #156]	@ (80010ac <DMA1_Stream1_IRQHandler+0x12c>)
 8001010:	2201      	movs	r2, #1
 8001012:	70da      	strb	r2, [r3, #3]
		DMA1_Stream1_Flag.Transfer_Error_Flag = true;
 8001014:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <DMA1_Stream1_IRQHandler+0x130>)
 8001016:	2201      	movs	r2, #1
 8001018:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 800101a:	4b20      	ldr	r3, [pc, #128]	@ (800109c <DMA1_Stream1_IRQHandler+0x11c>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	4a1f      	ldr	r2, [pc, #124]	@ (800109c <DMA1_Stream1_IRQHandler+0x11c>)
 8001020:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001024:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF1)
 8001026:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <DMA1_Stream1_IRQHandler+0x11c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800102e:	2b00      	cmp	r3, #0
 8001030:	d014      	beq.n	800105c <DMA1_Stream1_IRQHandler+0xdc>
	{
		TIM2_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001032:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <DMA1_Stream1_IRQHandler+0x120>)
 8001034:	2201      	movs	r2, #1
 8001036:	709a      	strb	r2, [r3, #2]
		TIM6_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001038:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <DMA1_Stream1_IRQHandler+0x124>)
 800103a:	2201      	movs	r2, #1
 800103c:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800103e:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <DMA1_Stream1_IRQHandler+0x128>)
 8001040:	2201      	movs	r2, #1
 8001042:	709a      	strb	r2, [r3, #2]
		USART3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001044:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <DMA1_Stream1_IRQHandler+0x12c>)
 8001046:	2201      	movs	r2, #1
 8001048:	709a      	strb	r2, [r3, #2]
		DMA1_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 800104a:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <DMA1_Stream1_IRQHandler+0x130>)
 800104c:	2201      	movs	r2, #1
 800104e:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <DMA1_Stream1_IRQHandler+0x11c>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	4a11      	ldr	r2, [pc, #68]	@ (800109c <DMA1_Stream1_IRQHandler+0x11c>)
 8001056:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800105a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF1)
 800105c:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <DMA1_Stream1_IRQHandler+0x11c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001064:	2b00      	cmp	r3, #0
 8001066:	d014      	beq.n	8001092 <DMA1_Stream1_IRQHandler+0x112>
	{
		TIM2_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001068:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <DMA1_Stream1_IRQHandler+0x120>)
 800106a:	2201      	movs	r2, #1
 800106c:	705a      	strb	r2, [r3, #1]
		TIM6_UP_DMA_Flag.Transfer_Complete_Flag = true;
 800106e:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <DMA1_Stream1_IRQHandler+0x124>)
 8001070:	2201      	movs	r2, #1
 8001072:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <DMA1_Stream1_IRQHandler+0x128>)
 8001076:	2201      	movs	r2, #1
 8001078:	705a      	strb	r2, [r3, #1]
		USART3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800107a:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <DMA1_Stream1_IRQHandler+0x12c>)
 800107c:	2201      	movs	r2, #1
 800107e:	705a      	strb	r2, [r3, #1]
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
 8001080:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <DMA1_Stream1_IRQHandler+0x130>)
 8001082:	2201      	movs	r2, #1
 8001084:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001086:	4b05      	ldr	r3, [pc, #20]	@ (800109c <DMA1_Stream1_IRQHandler+0x11c>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	4a04      	ldr	r2, [pc, #16]	@ (800109c <DMA1_Stream1_IRQHandler+0x11c>)
 800108c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001090:	6093      	str	r3, [r2, #8]
	}
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	40026000 	.word	0x40026000
 80010a0:	20000328 	.word	0x20000328
 80010a4:	20000388 	.word	0x20000388
 80010a8:	20000290 	.word	0x20000290
 80010ac:	20000250 	.word	0x20000250
 80010b0:	200003c8 	.word	0x200003c8

080010b4 <DMA1_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream2_IRQHandler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF2)
 80010b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001178 <DMA1_Stream2_IRQHandler+0xc4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00b      	beq.n	80010dc <DMA1_Stream2_IRQHandler+0x28>
	{
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80010c4:	4b2d      	ldr	r3, [pc, #180]	@ (800117c <DMA1_Stream2_IRQHandler+0xc8>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	715a      	strb	r2, [r3, #5]
		DMA1_Stream2_Flag.Fifo_Error_Flag = true;
 80010ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001180 <DMA1_Stream2_IRQHandler+0xcc>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	715a      	strb	r2, [r3, #5]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80010d0:	4b29      	ldr	r3, [pc, #164]	@ (8001178 <DMA1_Stream2_IRQHandler+0xc4>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	4a28      	ldr	r2, [pc, #160]	@ (8001178 <DMA1_Stream2_IRQHandler+0xc4>)
 80010d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010da:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF2)
 80010dc:	4b26      	ldr	r3, [pc, #152]	@ (8001178 <DMA1_Stream2_IRQHandler+0xc4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00b      	beq.n	8001100 <DMA1_Stream2_IRQHandler+0x4c>
	{
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010e8:	4b24      	ldr	r3, [pc, #144]	@ (800117c <DMA1_Stream2_IRQHandler+0xc8>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	711a      	strb	r2, [r3, #4]
		DMA1_Stream2_Flag.Direct_Mode_Error_Flag = true;
 80010ee:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <DMA1_Stream2_IRQHandler+0xcc>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 80010f4:	4b20      	ldr	r3, [pc, #128]	@ (8001178 <DMA1_Stream2_IRQHandler+0xc4>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001178 <DMA1_Stream2_IRQHandler+0xc4>)
 80010fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010fe:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF2)
 8001100:	4b1d      	ldr	r3, [pc, #116]	@ (8001178 <DMA1_Stream2_IRQHandler+0xc4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00b      	beq.n	8001124 <DMA1_Stream2_IRQHandler+0x70>
	{
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 800110c:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <DMA1_Stream2_IRQHandler+0xc8>)
 800110e:	2201      	movs	r2, #1
 8001110:	70da      	strb	r2, [r3, #3]
		DMA1_Stream2_Flag.Transfer_Error_Flag = true;
 8001112:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <DMA1_Stream2_IRQHandler+0xcc>)
 8001114:	2201      	movs	r2, #1
 8001116:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001118:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <DMA1_Stream2_IRQHandler+0xc4>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	4a16      	ldr	r2, [pc, #88]	@ (8001178 <DMA1_Stream2_IRQHandler+0xc4>)
 800111e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001122:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF2)
 8001124:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <DMA1_Stream2_IRQHandler+0xc4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00b      	beq.n	8001148 <DMA1_Stream2_IRQHandler+0x94>
	{
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <DMA1_Stream2_IRQHandler+0xc8>)
 8001132:	2201      	movs	r2, #1
 8001134:	709a      	strb	r2, [r3, #2]
		DMA1_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <DMA1_Stream2_IRQHandler+0xcc>)
 8001138:	2201      	movs	r2, #1
 800113a:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 800113c:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <DMA1_Stream2_IRQHandler+0xc4>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a0d      	ldr	r2, [pc, #52]	@ (8001178 <DMA1_Stream2_IRQHandler+0xc4>)
 8001142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001146:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF2)
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <DMA1_Stream2_IRQHandler+0xc4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00b      	beq.n	800116c <DMA1_Stream2_IRQHandler+0xb8>
	{
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <DMA1_Stream2_IRQHandler+0xc8>)
 8001156:	2201      	movs	r2, #1
 8001158:	705a      	strb	r2, [r3, #1]
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <DMA1_Stream2_IRQHandler+0xcc>)
 800115c:	2201      	movs	r2, #1
 800115e:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <DMA1_Stream2_IRQHandler+0xc4>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	4a04      	ldr	r2, [pc, #16]	@ (8001178 <DMA1_Stream2_IRQHandler+0xc4>)
 8001166:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800116a:	6093      	str	r3, [r2, #8]
	}
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40026000 	.word	0x40026000
 800117c:	20000258 	.word	0x20000258
 8001180:	200003d0 	.word	0x200003d0

08001184 <DMA1_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream3_IRQHandler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF3)
 8001188:	4b54      	ldr	r3, [pc, #336]	@ (80012dc <DMA1_Stream3_IRQHandler+0x158>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d01a      	beq.n	80011ca <DMA1_Stream3_IRQHandler+0x46>
	{
		TIM5_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8001194:	4b52      	ldr	r3, [pc, #328]	@ (80012e0 <DMA1_Stream3_IRQHandler+0x15c>)
 8001196:	2201      	movs	r2, #1
 8001198:	715a      	strb	r2, [r3, #5]
		TIM4_CH2_DMA_Flag.Fifo_Error_Flag = true;
 800119a:	4b52      	ldr	r3, [pc, #328]	@ (80012e4 <DMA1_Stream3_IRQHandler+0x160>)
 800119c:	2201      	movs	r2, #1
 800119e:	715a      	strb	r2, [r3, #5]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 80011a0:	4b51      	ldr	r3, [pc, #324]	@ (80012e8 <DMA1_Stream3_IRQHandler+0x164>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	715a      	strb	r2, [r3, #5]
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80011a6:	4b51      	ldr	r3, [pc, #324]	@ (80012ec <DMA1_Stream3_IRQHandler+0x168>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	715a      	strb	r2, [r3, #5]
		I2S2_RX_DMA_Flag.Fifo_Error_Flag = true;
 80011ac:	4b50      	ldr	r3, [pc, #320]	@ (80012f0 <DMA1_Stream3_IRQHandler+0x16c>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	715a      	strb	r2, [r3, #5]
		SPI2_RX_DMA_Flag.Fifo_Error_Flag = true;
 80011b2:	4b50      	ldr	r3, [pc, #320]	@ (80012f4 <DMA1_Stream3_IRQHandler+0x170>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	715a      	strb	r2, [r3, #5]
		DMA1_Stream3_Flag.Fifo_Error_Flag = true;
 80011b8:	4b4f      	ldr	r3, [pc, #316]	@ (80012f8 <DMA1_Stream3_IRQHandler+0x174>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	715a      	strb	r2, [r3, #5]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80011be:	4b47      	ldr	r3, [pc, #284]	@ (80012dc <DMA1_Stream3_IRQHandler+0x158>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	4a46      	ldr	r2, [pc, #280]	@ (80012dc <DMA1_Stream3_IRQHandler+0x158>)
 80011c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011c8:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF3)
 80011ca:	4b44      	ldr	r3, [pc, #272]	@ (80012dc <DMA1_Stream3_IRQHandler+0x158>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d01a      	beq.n	800120c <DMA1_Stream3_IRQHandler+0x88>
	{
		TIM5_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011d6:	4b42      	ldr	r3, [pc, #264]	@ (80012e0 <DMA1_Stream3_IRQHandler+0x15c>)
 80011d8:	2201      	movs	r2, #1
 80011da:	711a      	strb	r2, [r3, #4]
		TIM4_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011dc:	4b41      	ldr	r3, [pc, #260]	@ (80012e4 <DMA1_Stream3_IRQHandler+0x160>)
 80011de:	2201      	movs	r2, #1
 80011e0:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011e2:	4b41      	ldr	r3, [pc, #260]	@ (80012e8 <DMA1_Stream3_IRQHandler+0x164>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	711a      	strb	r2, [r3, #4]
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011e8:	4b40      	ldr	r3, [pc, #256]	@ (80012ec <DMA1_Stream3_IRQHandler+0x168>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	711a      	strb	r2, [r3, #4]
		I2S2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011ee:	4b40      	ldr	r3, [pc, #256]	@ (80012f0 <DMA1_Stream3_IRQHandler+0x16c>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	711a      	strb	r2, [r3, #4]
		SPI2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011f4:	4b3f      	ldr	r3, [pc, #252]	@ (80012f4 <DMA1_Stream3_IRQHandler+0x170>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	711a      	strb	r2, [r3, #4]
		DMA1_Stream3_Flag.Direct_Mode_Error_Flag = true;
 80011fa:	4b3f      	ldr	r3, [pc, #252]	@ (80012f8 <DMA1_Stream3_IRQHandler+0x174>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001200:	4b36      	ldr	r3, [pc, #216]	@ (80012dc <DMA1_Stream3_IRQHandler+0x158>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	4a35      	ldr	r2, [pc, #212]	@ (80012dc <DMA1_Stream3_IRQHandler+0x158>)
 8001206:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800120a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF3)
 800120c:	4b33      	ldr	r3, [pc, #204]	@ (80012dc <DMA1_Stream3_IRQHandler+0x158>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d01a      	beq.n	800124e <DMA1_Stream3_IRQHandler+0xca>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8001218:	4b31      	ldr	r3, [pc, #196]	@ (80012e0 <DMA1_Stream3_IRQHandler+0x15c>)
 800121a:	2201      	movs	r2, #1
 800121c:	70da      	strb	r2, [r3, #3]
		TIM4_CH2_DMA_Flag.Transfer_Error_Flag = true;
 800121e:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <DMA1_Stream3_IRQHandler+0x160>)
 8001220:	2201      	movs	r2, #1
 8001222:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001224:	4b30      	ldr	r3, [pc, #192]	@ (80012e8 <DMA1_Stream3_IRQHandler+0x164>)
 8001226:	2201      	movs	r2, #1
 8001228:	70da      	strb	r2, [r3, #3]
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 800122a:	4b30      	ldr	r3, [pc, #192]	@ (80012ec <DMA1_Stream3_IRQHandler+0x168>)
 800122c:	2201      	movs	r2, #1
 800122e:	70da      	strb	r2, [r3, #3]
		I2S2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001230:	4b2f      	ldr	r3, [pc, #188]	@ (80012f0 <DMA1_Stream3_IRQHandler+0x16c>)
 8001232:	2201      	movs	r2, #1
 8001234:	70da      	strb	r2, [r3, #3]
		SPI2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001236:	4b2f      	ldr	r3, [pc, #188]	@ (80012f4 <DMA1_Stream3_IRQHandler+0x170>)
 8001238:	2201      	movs	r2, #1
 800123a:	70da      	strb	r2, [r3, #3]
		DMA1_Stream3_Flag.Transfer_Error_Flag = true;
 800123c:	4b2e      	ldr	r3, [pc, #184]	@ (80012f8 <DMA1_Stream3_IRQHandler+0x174>)
 800123e:	2201      	movs	r2, #1
 8001240:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001242:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <DMA1_Stream3_IRQHandler+0x158>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	4a25      	ldr	r2, [pc, #148]	@ (80012dc <DMA1_Stream3_IRQHandler+0x158>)
 8001248:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800124c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF3)
 800124e:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <DMA1_Stream3_IRQHandler+0x158>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d01a      	beq.n	8001290 <DMA1_Stream3_IRQHandler+0x10c>
	{
		TIM5_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800125a:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <DMA1_Stream3_IRQHandler+0x15c>)
 800125c:	2201      	movs	r2, #1
 800125e:	709a      	strb	r2, [r3, #2]
		TIM4_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001260:	4b20      	ldr	r3, [pc, #128]	@ (80012e4 <DMA1_Stream3_IRQHandler+0x160>)
 8001262:	2201      	movs	r2, #1
 8001264:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001266:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <DMA1_Stream3_IRQHandler+0x164>)
 8001268:	2201      	movs	r2, #1
 800126a:	709a      	strb	r2, [r3, #2]
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <DMA1_Stream3_IRQHandler+0x168>)
 800126e:	2201      	movs	r2, #1
 8001270:	709a      	strb	r2, [r3, #2]
		I2S2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001272:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <DMA1_Stream3_IRQHandler+0x16c>)
 8001274:	2201      	movs	r2, #1
 8001276:	709a      	strb	r2, [r3, #2]
		SPI2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001278:	4b1e      	ldr	r3, [pc, #120]	@ (80012f4 <DMA1_Stream3_IRQHandler+0x170>)
 800127a:	2201      	movs	r2, #1
 800127c:	709a      	strb	r2, [r3, #2]
		DMA1_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 800127e:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <DMA1_Stream3_IRQHandler+0x174>)
 8001280:	2201      	movs	r2, #1
 8001282:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001284:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <DMA1_Stream3_IRQHandler+0x158>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4a14      	ldr	r2, [pc, #80]	@ (80012dc <DMA1_Stream3_IRQHandler+0x158>)
 800128a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800128e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF3)
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <DMA1_Stream3_IRQHandler+0x158>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d01a      	beq.n	80012d2 <DMA1_Stream3_IRQHandler+0x14e>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 800129c:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <DMA1_Stream3_IRQHandler+0x15c>)
 800129e:	2201      	movs	r2, #1
 80012a0:	705a      	strb	r2, [r3, #1]
		TIM4_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <DMA1_Stream3_IRQHandler+0x160>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <DMA1_Stream3_IRQHandler+0x164>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	705a      	strb	r2, [r3, #1]
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80012ae:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <DMA1_Stream3_IRQHandler+0x168>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	705a      	strb	r2, [r3, #1]
		I2S2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <DMA1_Stream3_IRQHandler+0x16c>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	705a      	strb	r2, [r3, #1]
		SPI2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <DMA1_Stream3_IRQHandler+0x170>)
 80012bc:	2201      	movs	r2, #1
 80012be:	705a      	strb	r2, [r3, #1]
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
 80012c0:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <DMA1_Stream3_IRQHandler+0x174>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 80012c6:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <DMA1_Stream3_IRQHandler+0x158>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	4a04      	ldr	r2, [pc, #16]	@ (80012dc <DMA1_Stream3_IRQHandler+0x158>)
 80012cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80012d0:	6093      	str	r3, [r2, #8]
	}
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40026000 	.word	0x40026000
 80012e0:	20000380 	.word	0x20000380
 80012e4:	20000360 	.word	0x20000360
 80012e8:	20000290 	.word	0x20000290
 80012ec:	20000258 	.word	0x20000258
 80012f0:	200001c8 	.word	0x200001c8
 80012f4:	20000208 	.word	0x20000208
 80012f8:	200003d8 	.word	0x200003d8

080012fc <DMA1_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream4_IRQHandler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF4)
 8001300:	4b54      	ldr	r3, [pc, #336]	@ (8001454 <DMA1_Stream4_IRQHandler+0x158>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d01a      	beq.n	8001342 <DMA1_Stream4_IRQHandler+0x46>
	{
		TIM5_CH2_DMA_Flag.Fifo_Error_Flag = true;
 800130c:	4b52      	ldr	r3, [pc, #328]	@ (8001458 <DMA1_Stream4_IRQHandler+0x15c>)
 800130e:	2201      	movs	r2, #1
 8001310:	715a      	strb	r2, [r3, #5]
		TIM3_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8001312:	4b52      	ldr	r3, [pc, #328]	@ (800145c <DMA1_Stream4_IRQHandler+0x160>)
 8001314:	2201      	movs	r2, #1
 8001316:	715a      	strb	r2, [r3, #5]
		USART4_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001318:	4b51      	ldr	r3, [pc, #324]	@ (8001460 <DMA1_Stream4_IRQHandler+0x164>)
 800131a:	2201      	movs	r2, #1
 800131c:	715a      	strb	r2, [r3, #5]
		I2C3_TX_DMA_Flag.Fifo_Error_Flag = true;
 800131e:	4b51      	ldr	r3, [pc, #324]	@ (8001464 <DMA1_Stream4_IRQHandler+0x168>)
 8001320:	2201      	movs	r2, #1
 8001322:	715a      	strb	r2, [r3, #5]
		I2S2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001324:	4b50      	ldr	r3, [pc, #320]	@ (8001468 <DMA1_Stream4_IRQHandler+0x16c>)
 8001326:	2201      	movs	r2, #1
 8001328:	715a      	strb	r2, [r3, #5]
		SPI2_TX_DMA_Flag.Fifo_Error_Flag = true;
 800132a:	4b50      	ldr	r3, [pc, #320]	@ (800146c <DMA1_Stream4_IRQHandler+0x170>)
 800132c:	2201      	movs	r2, #1
 800132e:	715a      	strb	r2, [r3, #5]
		DMA1_Stream4_Flag.Fifo_Error_Flag = true;
 8001330:	4b4f      	ldr	r3, [pc, #316]	@ (8001470 <DMA1_Stream4_IRQHandler+0x174>)
 8001332:	2201      	movs	r2, #1
 8001334:	715a      	strb	r2, [r3, #5]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF4;
 8001336:	4b47      	ldr	r3, [pc, #284]	@ (8001454 <DMA1_Stream4_IRQHandler+0x158>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	4a46      	ldr	r2, [pc, #280]	@ (8001454 <DMA1_Stream4_IRQHandler+0x158>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF4)
 8001342:	4b44      	ldr	r3, [pc, #272]	@ (8001454 <DMA1_Stream4_IRQHandler+0x158>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	d01a      	beq.n	8001384 <DMA1_Stream4_IRQHandler+0x88>
	{
		TIM5_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800134e:	4b42      	ldr	r3, [pc, #264]	@ (8001458 <DMA1_Stream4_IRQHandler+0x15c>)
 8001350:	2201      	movs	r2, #1
 8001352:	711a      	strb	r2, [r3, #4]
		TIM3_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001354:	4b41      	ldr	r3, [pc, #260]	@ (800145c <DMA1_Stream4_IRQHandler+0x160>)
 8001356:	2201      	movs	r2, #1
 8001358:	711a      	strb	r2, [r3, #4]
		USART4_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800135a:	4b41      	ldr	r3, [pc, #260]	@ (8001460 <DMA1_Stream4_IRQHandler+0x164>)
 800135c:	2201      	movs	r2, #1
 800135e:	711a      	strb	r2, [r3, #4]
		I2C3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001360:	4b40      	ldr	r3, [pc, #256]	@ (8001464 <DMA1_Stream4_IRQHandler+0x168>)
 8001362:	2201      	movs	r2, #1
 8001364:	711a      	strb	r2, [r3, #4]
		I2S2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001366:	4b40      	ldr	r3, [pc, #256]	@ (8001468 <DMA1_Stream4_IRQHandler+0x16c>)
 8001368:	2201      	movs	r2, #1
 800136a:	711a      	strb	r2, [r3, #4]
		SPI2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800136c:	4b3f      	ldr	r3, [pc, #252]	@ (800146c <DMA1_Stream4_IRQHandler+0x170>)
 800136e:	2201      	movs	r2, #1
 8001370:	711a      	strb	r2, [r3, #4]
		DMA1_Stream4_Flag.Direct_Mode_Error_Flag = true;
 8001372:	4b3f      	ldr	r3, [pc, #252]	@ (8001470 <DMA1_Stream4_IRQHandler+0x174>)
 8001374:	2201      	movs	r2, #1
 8001376:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001378:	4b36      	ldr	r3, [pc, #216]	@ (8001454 <DMA1_Stream4_IRQHandler+0x158>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	4a35      	ldr	r2, [pc, #212]	@ (8001454 <DMA1_Stream4_IRQHandler+0x158>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF4)
 8001384:	4b33      	ldr	r3, [pc, #204]	@ (8001454 <DMA1_Stream4_IRQHandler+0x158>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	2b00      	cmp	r3, #0
 800138e:	d01a      	beq.n	80013c6 <DMA1_Stream4_IRQHandler+0xca>
	{
		TIM5_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001390:	4b31      	ldr	r3, [pc, #196]	@ (8001458 <DMA1_Stream4_IRQHandler+0x15c>)
 8001392:	2201      	movs	r2, #1
 8001394:	70da      	strb	r2, [r3, #3]
		TIM3_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8001396:	4b31      	ldr	r3, [pc, #196]	@ (800145c <DMA1_Stream4_IRQHandler+0x160>)
 8001398:	2201      	movs	r2, #1
 800139a:	70da      	strb	r2, [r3, #3]
		USART4_TX_DMA_Flag.Transfer_Error_Flag = true;
 800139c:	4b30      	ldr	r3, [pc, #192]	@ (8001460 <DMA1_Stream4_IRQHandler+0x164>)
 800139e:	2201      	movs	r2, #1
 80013a0:	70da      	strb	r2, [r3, #3]
		I2C3_TX_DMA_Flag.Transfer_Error_Flag = true;
 80013a2:	4b30      	ldr	r3, [pc, #192]	@ (8001464 <DMA1_Stream4_IRQHandler+0x168>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	70da      	strb	r2, [r3, #3]
		I2S2_TX_DMA_Flag.Transfer_Error_Flag = true;
 80013a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001468 <DMA1_Stream4_IRQHandler+0x16c>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	70da      	strb	r2, [r3, #3]
		SPI2_TX_DMA_Flag.Transfer_Error_Flag = true;
 80013ae:	4b2f      	ldr	r3, [pc, #188]	@ (800146c <DMA1_Stream4_IRQHandler+0x170>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	70da      	strb	r2, [r3, #3]
		DMA1_Stream4_Flag.Transfer_Error_Flag = true;
 80013b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001470 <DMA1_Stream4_IRQHandler+0x174>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80013ba:	4b26      	ldr	r3, [pc, #152]	@ (8001454 <DMA1_Stream4_IRQHandler+0x158>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	4a25      	ldr	r2, [pc, #148]	@ (8001454 <DMA1_Stream4_IRQHandler+0x158>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF4)
 80013c6:	4b23      	ldr	r3, [pc, #140]	@ (8001454 <DMA1_Stream4_IRQHandler+0x158>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d01a      	beq.n	8001408 <DMA1_Stream4_IRQHandler+0x10c>
	{
		TIM5_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013d2:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <DMA1_Stream4_IRQHandler+0x15c>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	709a      	strb	r2, [r3, #2]
		TIM3_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013d8:	4b20      	ldr	r3, [pc, #128]	@ (800145c <DMA1_Stream4_IRQHandler+0x160>)
 80013da:	2201      	movs	r2, #1
 80013dc:	709a      	strb	r2, [r3, #2]
		USART4_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013de:	4b20      	ldr	r3, [pc, #128]	@ (8001460 <DMA1_Stream4_IRQHandler+0x164>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	709a      	strb	r2, [r3, #2]
		I2C3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <DMA1_Stream4_IRQHandler+0x168>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	709a      	strb	r2, [r3, #2]
		I2S2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <DMA1_Stream4_IRQHandler+0x16c>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	709a      	strb	r2, [r3, #2]
		SPI2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013f0:	4b1e      	ldr	r3, [pc, #120]	@ (800146c <DMA1_Stream4_IRQHandler+0x170>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	709a      	strb	r2, [r3, #2]
		DMA1_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 80013f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001470 <DMA1_Stream4_IRQHandler+0x174>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80013fc:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <DMA1_Stream4_IRQHandler+0x158>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4a14      	ldr	r2, [pc, #80]	@ (8001454 <DMA1_Stream4_IRQHandler+0x158>)
 8001402:	f043 0310 	orr.w	r3, r3, #16
 8001406:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF4)
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <DMA1_Stream4_IRQHandler+0x158>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0320 	and.w	r3, r3, #32
 8001410:	2b00      	cmp	r3, #0
 8001412:	d01a      	beq.n	800144a <DMA1_Stream4_IRQHandler+0x14e>
	{
		TIM5_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001414:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <DMA1_Stream4_IRQHandler+0x15c>)
 8001416:	2201      	movs	r2, #1
 8001418:	705a      	strb	r2, [r3, #1]
		TIM3_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <DMA1_Stream4_IRQHandler+0x160>)
 800141c:	2201      	movs	r2, #1
 800141e:	705a      	strb	r2, [r3, #1]
		USART4_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001420:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <DMA1_Stream4_IRQHandler+0x164>)
 8001422:	2201      	movs	r2, #1
 8001424:	705a      	strb	r2, [r3, #1]
		I2C3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001426:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <DMA1_Stream4_IRQHandler+0x168>)
 8001428:	2201      	movs	r2, #1
 800142a:	705a      	strb	r2, [r3, #1]
		I2S2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800142c:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <DMA1_Stream4_IRQHandler+0x16c>)
 800142e:	2201      	movs	r2, #1
 8001430:	705a      	strb	r2, [r3, #1]
		SPI2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <DMA1_Stream4_IRQHandler+0x170>)
 8001434:	2201      	movs	r2, #1
 8001436:	705a      	strb	r2, [r3, #1]
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
 8001438:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <DMA1_Stream4_IRQHandler+0x174>)
 800143a:	2201      	movs	r2, #1
 800143c:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800143e:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <DMA1_Stream4_IRQHandler+0x158>)
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <DMA1_Stream4_IRQHandler+0x158>)
 8001444:	f043 0320 	orr.w	r3, r3, #32
 8001448:	60d3      	str	r3, [r2, #12]
	}
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	40026000 	.word	0x40026000
 8001458:	20000370 	.word	0x20000370
 800145c:	20000338 	.word	0x20000338
 8001460:	20000268 	.word	0x20000268
 8001464:	200001f8 	.word	0x200001f8
 8001468:	200001d0 	.word	0x200001d0
 800146c:	20000220 	.word	0x20000220
 8001470:	200003e0 	.word	0x200003e0

08001474 <DMA1_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream5_IRQHandler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF5)
 8001478:	4b54      	ldr	r3, [pc, #336]	@ (80015cc <DMA1_Stream5_IRQHandler+0x158>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001480:	2b00      	cmp	r3, #0
 8001482:	d01a      	beq.n	80014ba <DMA1_Stream5_IRQHandler+0x46>
	{
		SPI3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001484:	4b52      	ldr	r3, [pc, #328]	@ (80015d0 <DMA1_Stream5_IRQHandler+0x15c>)
 8001486:	2201      	movs	r2, #1
 8001488:	715a      	strb	r2, [r3, #5]
		TIM3_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 800148a:	4b52      	ldr	r3, [pc, #328]	@ (80015d4 <DMA1_Stream5_IRQHandler+0x160>)
 800148c:	2201      	movs	r2, #1
 800148e:	715a      	strb	r2, [r3, #5]
		TIM2_CH1_DMA_Flag.Fifo_Error_Flag =  true;
 8001490:	4b51      	ldr	r3, [pc, #324]	@ (80015d8 <DMA1_Stream5_IRQHandler+0x164>)
 8001492:	2201      	movs	r2, #1
 8001494:	715a      	strb	r2, [r3, #5]
		DAC2_DMA_Flag.Fifo_Error_Flag = true;
 8001496:	4b51      	ldr	r3, [pc, #324]	@ (80015dc <DMA1_Stream5_IRQHandler+0x168>)
 8001498:	2201      	movs	r2, #1
 800149a:	715a      	strb	r2, [r3, #5]
		TIM3_CH2_DMA_Flag.Fifo_Error_Flag = true;
 800149c:	4b50      	ldr	r3, [pc, #320]	@ (80015e0 <DMA1_Stream5_IRQHandler+0x16c>)
 800149e:	2201      	movs	r2, #1
 80014a0:	715a      	strb	r2, [r3, #5]
		USART2_RX_DMA_Flag.Fifo_Error_Flag = true;
 80014a2:	4b50      	ldr	r3, [pc, #320]	@ (80015e4 <DMA1_Stream5_IRQHandler+0x170>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	715a      	strb	r2, [r3, #5]
		DMA1_Stream5_Flag.Fifo_Error_Flag = true;
 80014a8:	4b4f      	ldr	r3, [pc, #316]	@ (80015e8 <DMA1_Stream5_IRQHandler+0x174>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	715a      	strb	r2, [r3, #5]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 80014ae:	4b47      	ldr	r3, [pc, #284]	@ (80015cc <DMA1_Stream5_IRQHandler+0x158>)
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	4a46      	ldr	r2, [pc, #280]	@ (80015cc <DMA1_Stream5_IRQHandler+0x158>)
 80014b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014b8:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF5)
 80014ba:	4b44      	ldr	r3, [pc, #272]	@ (80015cc <DMA1_Stream5_IRQHandler+0x158>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d01a      	beq.n	80014fc <DMA1_Stream5_IRQHandler+0x88>
	{
		SPI3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80014c6:	4b42      	ldr	r3, [pc, #264]	@ (80015d0 <DMA1_Stream5_IRQHandler+0x15c>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	711a      	strb	r2, [r3, #4]
		TIM3_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 80014cc:	4b41      	ldr	r3, [pc, #260]	@ (80015d4 <DMA1_Stream5_IRQHandler+0x160>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	711a      	strb	r2, [r3, #4]
		TIM2_CH1_DMA_Flag.Direct_Mode_Error_Flag =  true;
 80014d2:	4b41      	ldr	r3, [pc, #260]	@ (80015d8 <DMA1_Stream5_IRQHandler+0x164>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	711a      	strb	r2, [r3, #4]
		DAC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80014d8:	4b40      	ldr	r3, [pc, #256]	@ (80015dc <DMA1_Stream5_IRQHandler+0x168>)
 80014da:	2201      	movs	r2, #1
 80014dc:	711a      	strb	r2, [r3, #4]
		TIM3_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80014de:	4b40      	ldr	r3, [pc, #256]	@ (80015e0 <DMA1_Stream5_IRQHandler+0x16c>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	711a      	strb	r2, [r3, #4]
		USART2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80014e4:	4b3f      	ldr	r3, [pc, #252]	@ (80015e4 <DMA1_Stream5_IRQHandler+0x170>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	711a      	strb	r2, [r3, #4]
		DMA1_Stream5_Flag.Direct_Mode_Error_Flag = true;
 80014ea:	4b3f      	ldr	r3, [pc, #252]	@ (80015e8 <DMA1_Stream5_IRQHandler+0x174>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80014f0:	4b36      	ldr	r3, [pc, #216]	@ (80015cc <DMA1_Stream5_IRQHandler+0x158>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	4a35      	ldr	r2, [pc, #212]	@ (80015cc <DMA1_Stream5_IRQHandler+0x158>)
 80014f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014fa:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF5)
 80014fc:	4b33      	ldr	r3, [pc, #204]	@ (80015cc <DMA1_Stream5_IRQHandler+0x158>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001504:	2b00      	cmp	r3, #0
 8001506:	d01a      	beq.n	800153e <DMA1_Stream5_IRQHandler+0xca>
	{
		SPI3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001508:	4b31      	ldr	r3, [pc, #196]	@ (80015d0 <DMA1_Stream5_IRQHandler+0x15c>)
 800150a:	2201      	movs	r2, #1
 800150c:	70da      	strb	r2, [r3, #3]
		TIM3_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 800150e:	4b31      	ldr	r3, [pc, #196]	@ (80015d4 <DMA1_Stream5_IRQHandler+0x160>)
 8001510:	2201      	movs	r2, #1
 8001512:	70da      	strb	r2, [r3, #3]
		TIM2_CH1_DMA_Flag.Transfer_Error_Flag =  true;
 8001514:	4b30      	ldr	r3, [pc, #192]	@ (80015d8 <DMA1_Stream5_IRQHandler+0x164>)
 8001516:	2201      	movs	r2, #1
 8001518:	70da      	strb	r2, [r3, #3]
		DAC2_DMA_Flag.Transfer_Error_Flag = true;
 800151a:	4b30      	ldr	r3, [pc, #192]	@ (80015dc <DMA1_Stream5_IRQHandler+0x168>)
 800151c:	2201      	movs	r2, #1
 800151e:	70da      	strb	r2, [r3, #3]
		TIM3_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001520:	4b2f      	ldr	r3, [pc, #188]	@ (80015e0 <DMA1_Stream5_IRQHandler+0x16c>)
 8001522:	2201      	movs	r2, #1
 8001524:	70da      	strb	r2, [r3, #3]
		USART2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001526:	4b2f      	ldr	r3, [pc, #188]	@ (80015e4 <DMA1_Stream5_IRQHandler+0x170>)
 8001528:	2201      	movs	r2, #1
 800152a:	70da      	strb	r2, [r3, #3]
		DMA1_Stream5_Flag.Transfer_Error_Flag = true;
 800152c:	4b2e      	ldr	r3, [pc, #184]	@ (80015e8 <DMA1_Stream5_IRQHandler+0x174>)
 800152e:	2201      	movs	r2, #1
 8001530:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8001532:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <DMA1_Stream5_IRQHandler+0x158>)
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	4a25      	ldr	r2, [pc, #148]	@ (80015cc <DMA1_Stream5_IRQHandler+0x158>)
 8001538:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800153c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF5)
 800153e:	4b23      	ldr	r3, [pc, #140]	@ (80015cc <DMA1_Stream5_IRQHandler+0x158>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001546:	2b00      	cmp	r3, #0
 8001548:	d01a      	beq.n	8001580 <DMA1_Stream5_IRQHandler+0x10c>
	{
		SPI3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800154a:	4b21      	ldr	r3, [pc, #132]	@ (80015d0 <DMA1_Stream5_IRQHandler+0x15c>)
 800154c:	2201      	movs	r2, #1
 800154e:	709a      	strb	r2, [r3, #2]
		TIM3_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001550:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <DMA1_Stream5_IRQHandler+0x160>)
 8001552:	2201      	movs	r2, #1
 8001554:	709a      	strb	r2, [r3, #2]
		TIM2_CH1_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8001556:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <DMA1_Stream5_IRQHandler+0x164>)
 8001558:	2201      	movs	r2, #1
 800155a:	709a      	strb	r2, [r3, #2]
		DAC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <DMA1_Stream5_IRQHandler+0x168>)
 800155e:	2201      	movs	r2, #1
 8001560:	709a      	strb	r2, [r3, #2]
		TIM3_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <DMA1_Stream5_IRQHandler+0x16c>)
 8001564:	2201      	movs	r2, #1
 8001566:	709a      	strb	r2, [r3, #2]
		USART2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001568:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <DMA1_Stream5_IRQHandler+0x170>)
 800156a:	2201      	movs	r2, #1
 800156c:	709a      	strb	r2, [r3, #2]
		DMA1_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 800156e:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <DMA1_Stream5_IRQHandler+0x174>)
 8001570:	2201      	movs	r2, #1
 8001572:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001574:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <DMA1_Stream5_IRQHandler+0x158>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <DMA1_Stream5_IRQHandler+0x158>)
 800157a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800157e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF5)
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <DMA1_Stream5_IRQHandler+0x158>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001588:	2b00      	cmp	r3, #0
 800158a:	d01a      	beq.n	80015c2 <DMA1_Stream5_IRQHandler+0x14e>
	{
		SPI3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800158c:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <DMA1_Stream5_IRQHandler+0x15c>)
 800158e:	2201      	movs	r2, #1
 8001590:	705a      	strb	r2, [r3, #1]
		TIM3_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <DMA1_Stream5_IRQHandler+0x160>)
 8001594:	2201      	movs	r2, #1
 8001596:	705a      	strb	r2, [r3, #1]
		TIM2_CH1_DMA_Flag.Transfer_Complete_Flag =  true;
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <DMA1_Stream5_IRQHandler+0x164>)
 800159a:	2201      	movs	r2, #1
 800159c:	705a      	strb	r2, [r3, #1]
		DAC2_DMA_Flag.Transfer_Complete_Flag = true;
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <DMA1_Stream5_IRQHandler+0x168>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	705a      	strb	r2, [r3, #1]
		TIM3_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <DMA1_Stream5_IRQHandler+0x16c>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	705a      	strb	r2, [r3, #1]
		USART2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <DMA1_Stream5_IRQHandler+0x170>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	705a      	strb	r2, [r3, #1]
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
 80015b0:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <DMA1_Stream5_IRQHandler+0x174>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80015b6:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <DMA1_Stream5_IRQHandler+0x158>)
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <DMA1_Stream5_IRQHandler+0x158>)
 80015bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015c0:	60d3      	str	r3, [r2, #12]
	}
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40026000 	.word	0x40026000
 80015d0:	20000228 	.word	0x20000228
 80015d4:	20000350 	.word	0x20000350
 80015d8:	20000318 	.word	0x20000318
 80015dc:	20000390 	.word	0x20000390
 80015e0:	20000340 	.word	0x20000340
 80015e4:	20000240 	.word	0x20000240
 80015e8:	200003e8 	.word	0x200003e8

080015ec <DMA1_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream6_IRQHandler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF6)
 80015f0:	4b47      	ldr	r3, [pc, #284]	@ (8001710 <DMA1_Stream6_IRQHandler+0x124>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d017      	beq.n	800162c <DMA1_Stream6_IRQHandler+0x40>
	{
		TIM3_CH3_DMA_Flag.Fifo_Error_Flag = true;
 80015fc:	4b45      	ldr	r3, [pc, #276]	@ (8001714 <DMA1_Stream6_IRQHandler+0x128>)
 80015fe:	2201      	movs	r2, #1
 8001600:	715a      	strb	r2, [r3, #5]
		TIM2_UP_DMA_Flag.Fifo_Error_Flag = true;
 8001602:	4b45      	ldr	r3, [pc, #276]	@ (8001718 <DMA1_Stream6_IRQHandler+0x12c>)
 8001604:	2201      	movs	r2, #1
 8001606:	715a      	strb	r2, [r3, #5]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001608:	4b44      	ldr	r3, [pc, #272]	@ (800171c <DMA1_Stream6_IRQHandler+0x130>)
 800160a:	2201      	movs	r2, #1
 800160c:	715a      	strb	r2, [r3, #5]
		USART2_TX_DMA_Flag.Fifo_Error_Flag =  true;
 800160e:	4b44      	ldr	r3, [pc, #272]	@ (8001720 <DMA1_Stream6_IRQHandler+0x134>)
 8001610:	2201      	movs	r2, #1
 8001612:	715a      	strb	r2, [r3, #5]
		I2C1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001614:	4b43      	ldr	r3, [pc, #268]	@ (8001724 <DMA1_Stream6_IRQHandler+0x138>)
 8001616:	2201      	movs	r2, #1
 8001618:	715a      	strb	r2, [r3, #5]
		DMA1_Stream6_Flag.Fifo_Error_Flag = true;
 800161a:	4b43      	ldr	r3, [pc, #268]	@ (8001728 <DMA1_Stream6_IRQHandler+0x13c>)
 800161c:	2201      	movs	r2, #1
 800161e:	715a      	strb	r2, [r3, #5]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001620:	4b3b      	ldr	r3, [pc, #236]	@ (8001710 <DMA1_Stream6_IRQHandler+0x124>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4a3a      	ldr	r2, [pc, #232]	@ (8001710 <DMA1_Stream6_IRQHandler+0x124>)
 8001626:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800162a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF6)
 800162c:	4b38      	ldr	r3, [pc, #224]	@ (8001710 <DMA1_Stream6_IRQHandler+0x124>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d014      	beq.n	8001662 <DMA1_Stream6_IRQHandler+0x76>
	{
		TIM2_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001638:	4b37      	ldr	r3, [pc, #220]	@ (8001718 <DMA1_Stream6_IRQHandler+0x12c>)
 800163a:	2201      	movs	r2, #1
 800163c:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800163e:	4b37      	ldr	r3, [pc, #220]	@ (800171c <DMA1_Stream6_IRQHandler+0x130>)
 8001640:	2201      	movs	r2, #1
 8001642:	711a      	strb	r2, [r3, #4]
		USART2_TX_DMA_Flag.Direct_Mode_Error_Flag =  true;
 8001644:	4b36      	ldr	r3, [pc, #216]	@ (8001720 <DMA1_Stream6_IRQHandler+0x134>)
 8001646:	2201      	movs	r2, #1
 8001648:	711a      	strb	r2, [r3, #4]
		I2C1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800164a:	4b36      	ldr	r3, [pc, #216]	@ (8001724 <DMA1_Stream6_IRQHandler+0x138>)
 800164c:	2201      	movs	r2, #1
 800164e:	711a      	strb	r2, [r3, #4]
		DMA1_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8001650:	4b35      	ldr	r3, [pc, #212]	@ (8001728 <DMA1_Stream6_IRQHandler+0x13c>)
 8001652:	2201      	movs	r2, #1
 8001654:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001656:	4b2e      	ldr	r3, [pc, #184]	@ (8001710 <DMA1_Stream6_IRQHandler+0x124>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	4a2d      	ldr	r2, [pc, #180]	@ (8001710 <DMA1_Stream6_IRQHandler+0x124>)
 800165c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001660:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF6)
 8001662:	4b2b      	ldr	r3, [pc, #172]	@ (8001710 <DMA1_Stream6_IRQHandler+0x124>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d014      	beq.n	8001698 <DMA1_Stream6_IRQHandler+0xac>
	{
		TIM2_UP_DMA_Flag.Transfer_Error_Flag = true;
 800166e:	4b2a      	ldr	r3, [pc, #168]	@ (8001718 <DMA1_Stream6_IRQHandler+0x12c>)
 8001670:	2201      	movs	r2, #1
 8001672:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001674:	4b29      	ldr	r3, [pc, #164]	@ (800171c <DMA1_Stream6_IRQHandler+0x130>)
 8001676:	2201      	movs	r2, #1
 8001678:	70da      	strb	r2, [r3, #3]
		USART2_TX_DMA_Flag.Transfer_Error_Flag =  true;
 800167a:	4b29      	ldr	r3, [pc, #164]	@ (8001720 <DMA1_Stream6_IRQHandler+0x134>)
 800167c:	2201      	movs	r2, #1
 800167e:	70da      	strb	r2, [r3, #3]
		I2C1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001680:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <DMA1_Stream6_IRQHandler+0x138>)
 8001682:	2201      	movs	r2, #1
 8001684:	70da      	strb	r2, [r3, #3]
		DMA1_Stream6_Flag.Transfer_Error_Flag = true;
 8001686:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <DMA1_Stream6_IRQHandler+0x13c>)
 8001688:	2201      	movs	r2, #1
 800168a:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 800168c:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <DMA1_Stream6_IRQHandler+0x124>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4a1f      	ldr	r2, [pc, #124]	@ (8001710 <DMA1_Stream6_IRQHandler+0x124>)
 8001692:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001696:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF6)
 8001698:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <DMA1_Stream6_IRQHandler+0x124>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d014      	beq.n	80016ce <DMA1_Stream6_IRQHandler+0xe2>
	{
		TIM2_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80016a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <DMA1_Stream6_IRQHandler+0x12c>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	@ (800171c <DMA1_Stream6_IRQHandler+0x130>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	709a      	strb	r2, [r3, #2]
		USART2_TX_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <DMA1_Stream6_IRQHandler+0x134>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	709a      	strb	r2, [r3, #2]
		I2C1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80016b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <DMA1_Stream6_IRQHandler+0x138>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	709a      	strb	r2, [r3, #2]
		DMA1_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <DMA1_Stream6_IRQHandler+0x13c>)
 80016be:	2201      	movs	r2, #1
 80016c0:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 80016c2:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <DMA1_Stream6_IRQHandler+0x124>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <DMA1_Stream6_IRQHandler+0x124>)
 80016c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016cc:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF6)
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <DMA1_Stream6_IRQHandler+0x124>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d014      	beq.n	8001704 <DMA1_Stream6_IRQHandler+0x118>
	{
		TIM2_UP_DMA_Flag.Transfer_Complete_Flag = true;
 80016da:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <DMA1_Stream6_IRQHandler+0x12c>)
 80016dc:	2201      	movs	r2, #1
 80016de:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80016e0:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <DMA1_Stream6_IRQHandler+0x130>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	705a      	strb	r2, [r3, #1]
		USART2_TX_DMA_Flag.Transfer_Complete_Flag =  true;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <DMA1_Stream6_IRQHandler+0x134>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	705a      	strb	r2, [r3, #1]
		I2C1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80016ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001724 <DMA1_Stream6_IRQHandler+0x138>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	705a      	strb	r2, [r3, #1]
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
 80016f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <DMA1_Stream6_IRQHandler+0x13c>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 80016f8:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <DMA1_Stream6_IRQHandler+0x124>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4a04      	ldr	r2, [pc, #16]	@ (8001710 <DMA1_Stream6_IRQHandler+0x124>)
 80016fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001702:	60d3      	str	r3, [r2, #12]
	}
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40026000 	.word	0x40026000
 8001714:	20000348 	.word	0x20000348
 8001718:	20000310 	.word	0x20000310
 800171c:	20000298 	.word	0x20000298
 8001720:	20000248 	.word	0x20000248
 8001724:	200001e8 	.word	0x200001e8
 8001728:	200003f0 	.word	0x200003f0

0800172c <DMA1_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream7_IRQHandler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF7)
 8001730:	4b54      	ldr	r3, [pc, #336]	@ (8001884 <DMA1_Stream7_IRQHandler+0x158>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d01a      	beq.n	8001772 <DMA1_Stream7_IRQHandler+0x46>
	{
		I2S3_TX_DMA_Flag.Fifo_Error_Flag = true;
 800173c:	4b52      	ldr	r3, [pc, #328]	@ (8001888 <DMA1_Stream7_IRQHandler+0x15c>)
 800173e:	2201      	movs	r2, #1
 8001740:	715a      	strb	r2, [r3, #5]
		I2C2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001742:	4b52      	ldr	r3, [pc, #328]	@ (800188c <DMA1_Stream7_IRQHandler+0x160>)
 8001744:	2201      	movs	r2, #1
 8001746:	715a      	strb	r2, [r3, #5]
		USART5_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001748:	4b51      	ldr	r3, [pc, #324]	@ (8001890 <DMA1_Stream7_IRQHandler+0x164>)
 800174a:	2201      	movs	r2, #1
 800174c:	715a      	strb	r2, [r3, #5]
		TIM4_CH3_DMA_Flag.Fifo_Error_Flag = true;
 800174e:	4b51      	ldr	r3, [pc, #324]	@ (8001894 <DMA1_Stream7_IRQHandler+0x168>)
 8001750:	2201      	movs	r2, #1
 8001752:	715a      	strb	r2, [r3, #5]
		TIM2_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001754:	4b50      	ldr	r3, [pc, #320]	@ (8001898 <DMA1_Stream7_IRQHandler+0x16c>)
 8001756:	2201      	movs	r2, #1
 8001758:	715a      	strb	r2, [r3, #5]
		TIM2_CH4_DMA_Flag.Fifo_Error_Flag = true;
 800175a:	4b50      	ldr	r3, [pc, #320]	@ (800189c <DMA1_Stream7_IRQHandler+0x170>)
 800175c:	2201      	movs	r2, #1
 800175e:	715a      	strb	r2, [r3, #5]

		DMA1_Stream7_Flag.Fifo_Error_Flag = true;
 8001760:	4b4f      	ldr	r3, [pc, #316]	@ (80018a0 <DMA1_Stream7_IRQHandler+0x174>)
 8001762:	2201      	movs	r2, #1
 8001764:	715a      	strb	r2, [r3, #5]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8001766:	4b47      	ldr	r3, [pc, #284]	@ (8001884 <DMA1_Stream7_IRQHandler+0x158>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	4a46      	ldr	r2, [pc, #280]	@ (8001884 <DMA1_Stream7_IRQHandler+0x158>)
 800176c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001770:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF7)
 8001772:	4b44      	ldr	r3, [pc, #272]	@ (8001884 <DMA1_Stream7_IRQHandler+0x158>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d01a      	beq.n	80017b4 <DMA1_Stream7_IRQHandler+0x88>
	{
		I2S3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800177e:	4b42      	ldr	r3, [pc, #264]	@ (8001888 <DMA1_Stream7_IRQHandler+0x15c>)
 8001780:	2201      	movs	r2, #1
 8001782:	711a      	strb	r2, [r3, #4]
		I2C2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001784:	4b41      	ldr	r3, [pc, #260]	@ (800188c <DMA1_Stream7_IRQHandler+0x160>)
 8001786:	2201      	movs	r2, #1
 8001788:	711a      	strb	r2, [r3, #4]
		USART5_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800178a:	4b41      	ldr	r3, [pc, #260]	@ (8001890 <DMA1_Stream7_IRQHandler+0x164>)
 800178c:	2201      	movs	r2, #1
 800178e:	711a      	strb	r2, [r3, #4]
		TIM4_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001790:	4b40      	ldr	r3, [pc, #256]	@ (8001894 <DMA1_Stream7_IRQHandler+0x168>)
 8001792:	2201      	movs	r2, #1
 8001794:	711a      	strb	r2, [r3, #4]
		TIM2_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001796:	4b40      	ldr	r3, [pc, #256]	@ (8001898 <DMA1_Stream7_IRQHandler+0x16c>)
 8001798:	2201      	movs	r2, #1
 800179a:	711a      	strb	r2, [r3, #4]
		TIM2_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 800179c:	4b3f      	ldr	r3, [pc, #252]	@ (800189c <DMA1_Stream7_IRQHandler+0x170>)
 800179e:	2201      	movs	r2, #1
 80017a0:	711a      	strb	r2, [r3, #4]
		DMA1_Stream7_Flag.Direct_Mode_Error_Flag = true;
 80017a2:	4b3f      	ldr	r3, [pc, #252]	@ (80018a0 <DMA1_Stream7_IRQHandler+0x174>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80017a8:	4b36      	ldr	r3, [pc, #216]	@ (8001884 <DMA1_Stream7_IRQHandler+0x158>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4a35      	ldr	r2, [pc, #212]	@ (8001884 <DMA1_Stream7_IRQHandler+0x158>)
 80017ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017b2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF7)
 80017b4:	4b33      	ldr	r3, [pc, #204]	@ (8001884 <DMA1_Stream7_IRQHandler+0x158>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d01a      	beq.n	80017f6 <DMA1_Stream7_IRQHandler+0xca>
	{
		I2S3_TX_DMA_Flag.Transfer_Error_Flag = true;
 80017c0:	4b31      	ldr	r3, [pc, #196]	@ (8001888 <DMA1_Stream7_IRQHandler+0x15c>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	70da      	strb	r2, [r3, #3]
		I2C2_TX_DMA_Flag.Transfer_Error_Flag = true;
 80017c6:	4b31      	ldr	r3, [pc, #196]	@ (800188c <DMA1_Stream7_IRQHandler+0x160>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	70da      	strb	r2, [r3, #3]
		USART5_TX_DMA_Flag.Transfer_Error_Flag = true;
 80017cc:	4b30      	ldr	r3, [pc, #192]	@ (8001890 <DMA1_Stream7_IRQHandler+0x164>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	70da      	strb	r2, [r3, #3]
		TIM4_CH3_DMA_Flag.Transfer_Error_Flag = true;
 80017d2:	4b30      	ldr	r3, [pc, #192]	@ (8001894 <DMA1_Stream7_IRQHandler+0x168>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	70da      	strb	r2, [r3, #3]
		TIM2_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80017d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001898 <DMA1_Stream7_IRQHandler+0x16c>)
 80017da:	2201      	movs	r2, #1
 80017dc:	70da      	strb	r2, [r3, #3]
		TIM2_CH4_DMA_Flag.Transfer_Error_Flag = true;
 80017de:	4b2f      	ldr	r3, [pc, #188]	@ (800189c <DMA1_Stream7_IRQHandler+0x170>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	70da      	strb	r2, [r3, #3]
		DMA1_Stream7_Flag.Transfer_Error_Flag = true;
 80017e4:	4b2e      	ldr	r3, [pc, #184]	@ (80018a0 <DMA1_Stream7_IRQHandler+0x174>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 80017ea:	4b26      	ldr	r3, [pc, #152]	@ (8001884 <DMA1_Stream7_IRQHandler+0x158>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	4a25      	ldr	r2, [pc, #148]	@ (8001884 <DMA1_Stream7_IRQHandler+0x158>)
 80017f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017f4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF7)
 80017f6:	4b23      	ldr	r3, [pc, #140]	@ (8001884 <DMA1_Stream7_IRQHandler+0x158>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d01a      	beq.n	8001838 <DMA1_Stream7_IRQHandler+0x10c>
	{
		I2S3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001802:	4b21      	ldr	r3, [pc, #132]	@ (8001888 <DMA1_Stream7_IRQHandler+0x15c>)
 8001804:	2201      	movs	r2, #1
 8001806:	709a      	strb	r2, [r3, #2]
		I2C2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001808:	4b20      	ldr	r3, [pc, #128]	@ (800188c <DMA1_Stream7_IRQHandler+0x160>)
 800180a:	2201      	movs	r2, #1
 800180c:	709a      	strb	r2, [r3, #2]
		USART5_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800180e:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <DMA1_Stream7_IRQHandler+0x164>)
 8001810:	2201      	movs	r2, #1
 8001812:	709a      	strb	r2, [r3, #2]
		TIM4_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001814:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <DMA1_Stream7_IRQHandler+0x168>)
 8001816:	2201      	movs	r2, #1
 8001818:	709a      	strb	r2, [r3, #2]
		TIM2_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800181a:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <DMA1_Stream7_IRQHandler+0x16c>)
 800181c:	2201      	movs	r2, #1
 800181e:	709a      	strb	r2, [r3, #2]
		TIM2_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001820:	4b1e      	ldr	r3, [pc, #120]	@ (800189c <DMA1_Stream7_IRQHandler+0x170>)
 8001822:	2201      	movs	r2, #1
 8001824:	709a      	strb	r2, [r3, #2]
		DMA1_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8001826:	4b1e      	ldr	r3, [pc, #120]	@ (80018a0 <DMA1_Stream7_IRQHandler+0x174>)
 8001828:	2201      	movs	r2, #1
 800182a:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 800182c:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <DMA1_Stream7_IRQHandler+0x158>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4a14      	ldr	r2, [pc, #80]	@ (8001884 <DMA1_Stream7_IRQHandler+0x158>)
 8001832:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001836:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF7)
 8001838:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <DMA1_Stream7_IRQHandler+0x158>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01a      	beq.n	800187a <DMA1_Stream7_IRQHandler+0x14e>
	{
		I2S3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001844:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <DMA1_Stream7_IRQHandler+0x15c>)
 8001846:	2201      	movs	r2, #1
 8001848:	705a      	strb	r2, [r3, #1]
		I2C2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <DMA1_Stream7_IRQHandler+0x160>)
 800184c:	2201      	movs	r2, #1
 800184e:	705a      	strb	r2, [r3, #1]
		USART5_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001850:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <DMA1_Stream7_IRQHandler+0x164>)
 8001852:	2201      	movs	r2, #1
 8001854:	705a      	strb	r2, [r3, #1]
		TIM4_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <DMA1_Stream7_IRQHandler+0x168>)
 8001858:	2201      	movs	r2, #1
 800185a:	705a      	strb	r2, [r3, #1]
		TIM2_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 800185c:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <DMA1_Stream7_IRQHandler+0x16c>)
 800185e:	2201      	movs	r2, #1
 8001860:	705a      	strb	r2, [r3, #1]
		TIM2_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <DMA1_Stream7_IRQHandler+0x170>)
 8001864:	2201      	movs	r2, #1
 8001866:	705a      	strb	r2, [r3, #1]
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <DMA1_Stream7_IRQHandler+0x174>)
 800186a:	2201      	movs	r2, #1
 800186c:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 800186e:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <DMA1_Stream7_IRQHandler+0x158>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	4a04      	ldr	r2, [pc, #16]	@ (8001884 <DMA1_Stream7_IRQHandler+0x158>)
 8001874:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001878:	60d3      	str	r3, [r2, #12]
	}
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40026000 	.word	0x40026000
 8001888:	200001d8 	.word	0x200001d8
 800188c:	200001f0 	.word	0x200001f0
 8001890:	20000278 	.word	0x20000278
 8001894:	20000368 	.word	0x20000368
 8001898:	20000320 	.word	0x20000320
 800189c:	20000330 	.word	0x20000330
 80018a0:	200003f8 	.word	0x200003f8

080018a4 <DMA2_Stream0_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream0_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream0_IRQHandler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF0)
 80018a8:	4b45      	ldr	r3, [pc, #276]	@ (80019c0 <DMA2_Stream0_IRQHandler+0x11c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d014      	beq.n	80018de <DMA2_Stream0_IRQHandler+0x3a>
	{
		SPI1_RX_DMA_Flag.Fifo_Error_Flag = true;
 80018b4:	4b43      	ldr	r3, [pc, #268]	@ (80019c4 <DMA2_Stream0_IRQHandler+0x120>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	715a      	strb	r2, [r3, #5]
		ADC1_DMA_Flag.Fifo_Error_Flag = true;
 80018ba:	4b43      	ldr	r3, [pc, #268]	@ (80019c8 <DMA2_Stream0_IRQHandler+0x124>)
 80018bc:	2201      	movs	r2, #1
 80018be:	715a      	strb	r2, [r3, #5]
		TIM1_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 80018c0:	4b42      	ldr	r3, [pc, #264]	@ (80019cc <DMA2_Stream0_IRQHandler+0x128>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	715a      	strb	r2, [r3, #5]
		TIM1_COM_DMA_Flag.Fifo_Error_Flag = true;
 80018c6:	4b42      	ldr	r3, [pc, #264]	@ (80019d0 <DMA2_Stream0_IRQHandler+0x12c>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	715a      	strb	r2, [r3, #5]
		DMA2_Stream0_Flag.Fifo_Error_Flag = true;
 80018cc:	4b41      	ldr	r3, [pc, #260]	@ (80019d4 <DMA2_Stream0_IRQHandler+0x130>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	715a      	strb	r2, [r3, #5]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 80018d2:	4b3b      	ldr	r3, [pc, #236]	@ (80019c0 <DMA2_Stream0_IRQHandler+0x11c>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	4a3a      	ldr	r2, [pc, #232]	@ (80019c0 <DMA2_Stream0_IRQHandler+0x11c>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF0)
 80018de:	4b38      	ldr	r3, [pc, #224]	@ (80019c0 <DMA2_Stream0_IRQHandler+0x11c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d014      	beq.n	8001914 <DMA2_Stream0_IRQHandler+0x70>
	{
		SPI1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80018ea:	4b36      	ldr	r3, [pc, #216]	@ (80019c4 <DMA2_Stream0_IRQHandler+0x120>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	711a      	strb	r2, [r3, #4]
		ADC1_DMA_Flag.Direct_Mode_Error_Flag = true;
 80018f0:	4b35      	ldr	r3, [pc, #212]	@ (80019c8 <DMA2_Stream0_IRQHandler+0x124>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	711a      	strb	r2, [r3, #4]
		TIM1_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 80018f6:	4b35      	ldr	r3, [pc, #212]	@ (80019cc <DMA2_Stream0_IRQHandler+0x128>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	711a      	strb	r2, [r3, #4]
		TIM1_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 80018fc:	4b34      	ldr	r3, [pc, #208]	@ (80019d0 <DMA2_Stream0_IRQHandler+0x12c>)
 80018fe:	2201      	movs	r2, #1
 8001900:	711a      	strb	r2, [r3, #4]
		DMA2_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8001902:	4b34      	ldr	r3, [pc, #208]	@ (80019d4 <DMA2_Stream0_IRQHandler+0x130>)
 8001904:	2201      	movs	r2, #1
 8001906:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8001908:	4b2d      	ldr	r3, [pc, #180]	@ (80019c0 <DMA2_Stream0_IRQHandler+0x11c>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a2c      	ldr	r2, [pc, #176]	@ (80019c0 <DMA2_Stream0_IRQHandler+0x11c>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF0)
 8001914:	4b2a      	ldr	r3, [pc, #168]	@ (80019c0 <DMA2_Stream0_IRQHandler+0x11c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d014      	beq.n	800194a <DMA2_Stream0_IRQHandler+0xa6>
	{
		SPI1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001920:	4b28      	ldr	r3, [pc, #160]	@ (80019c4 <DMA2_Stream0_IRQHandler+0x120>)
 8001922:	2201      	movs	r2, #1
 8001924:	70da      	strb	r2, [r3, #3]
		ADC1_DMA_Flag.Transfer_Error_Flag = true;
 8001926:	4b28      	ldr	r3, [pc, #160]	@ (80019c8 <DMA2_Stream0_IRQHandler+0x124>)
 8001928:	2201      	movs	r2, #1
 800192a:	70da      	strb	r2, [r3, #3]
		TIM1_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 800192c:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <DMA2_Stream0_IRQHandler+0x128>)
 800192e:	2201      	movs	r2, #1
 8001930:	70da      	strb	r2, [r3, #3]
		TIM1_COM_DMA_Flag.Transfer_Error_Flag = true;
 8001932:	4b27      	ldr	r3, [pc, #156]	@ (80019d0 <DMA2_Stream0_IRQHandler+0x12c>)
 8001934:	2201      	movs	r2, #1
 8001936:	70da      	strb	r2, [r3, #3]
		DMA2_Stream0_Flag.Transfer_Error_Flag = true;
 8001938:	4b26      	ldr	r3, [pc, #152]	@ (80019d4 <DMA2_Stream0_IRQHandler+0x130>)
 800193a:	2201      	movs	r2, #1
 800193c:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 800193e:	4b20      	ldr	r3, [pc, #128]	@ (80019c0 <DMA2_Stream0_IRQHandler+0x11c>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	4a1f      	ldr	r2, [pc, #124]	@ (80019c0 <DMA2_Stream0_IRQHandler+0x11c>)
 8001944:	f043 0308 	orr.w	r3, r3, #8
 8001948:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF0)
 800194a:	4b1d      	ldr	r3, [pc, #116]	@ (80019c0 <DMA2_Stream0_IRQHandler+0x11c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	2b00      	cmp	r3, #0
 8001954:	d014      	beq.n	8001980 <DMA2_Stream0_IRQHandler+0xdc>
	{
		SPI1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001956:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <DMA2_Stream0_IRQHandler+0x120>)
 8001958:	2201      	movs	r2, #1
 800195a:	709a      	strb	r2, [r3, #2]
		ADC1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800195c:	4b1a      	ldr	r3, [pc, #104]	@ (80019c8 <DMA2_Stream0_IRQHandler+0x124>)
 800195e:	2201      	movs	r2, #1
 8001960:	709a      	strb	r2, [r3, #2]
		TIM1_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001962:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <DMA2_Stream0_IRQHandler+0x128>)
 8001964:	2201      	movs	r2, #1
 8001966:	709a      	strb	r2, [r3, #2]
		TIM1_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001968:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <DMA2_Stream0_IRQHandler+0x12c>)
 800196a:	2201      	movs	r2, #1
 800196c:	709a      	strb	r2, [r3, #2]
		DMA2_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 800196e:	4b19      	ldr	r3, [pc, #100]	@ (80019d4 <DMA2_Stream0_IRQHandler+0x130>)
 8001970:	2201      	movs	r2, #1
 8001972:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <DMA2_Stream0_IRQHandler+0x11c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a11      	ldr	r2, [pc, #68]	@ (80019c0 <DMA2_Stream0_IRQHandler+0x11c>)
 800197a:	f043 0310 	orr.w	r3, r3, #16
 800197e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF0)
 8001980:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <DMA2_Stream0_IRQHandler+0x11c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	2b00      	cmp	r3, #0
 800198a:	d014      	beq.n	80019b6 <DMA2_Stream0_IRQHandler+0x112>
	{
		SPI1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800198c:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <DMA2_Stream0_IRQHandler+0x120>)
 800198e:	2201      	movs	r2, #1
 8001990:	705a      	strb	r2, [r3, #1]
		ADC1_DMA_Flag.Transfer_Complete_Flag = true;
 8001992:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <DMA2_Stream0_IRQHandler+0x124>)
 8001994:	2201      	movs	r2, #1
 8001996:	705a      	strb	r2, [r3, #1]
		TIM1_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <DMA2_Stream0_IRQHandler+0x128>)
 800199a:	2201      	movs	r2, #1
 800199c:	705a      	strb	r2, [r3, #1]
		TIM1_COM_DMA_Flag.Transfer_Complete_Flag = true;
 800199e:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <DMA2_Stream0_IRQHandler+0x12c>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	705a      	strb	r2, [r3, #1]
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <DMA2_Stream0_IRQHandler+0x130>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <DMA2_Stream0_IRQHandler+0x11c>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4a04      	ldr	r2, [pc, #16]	@ (80019c0 <DMA2_Stream0_IRQHandler+0x11c>)
 80019b0:	f043 0320 	orr.w	r3, r3, #32
 80019b4:	6093      	str	r3, [r2, #8]
	}
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40026400 	.word	0x40026400
 80019c4:	20000200 	.word	0x20000200
 80019c8:	200003a8 	.word	0x200003a8
 80019cc:	200002c8 	.word	0x200002c8
 80019d0:	200002d0 	.word	0x200002d0
 80019d4:	20000400 	.word	0x20000400

080019d8 <DMA2_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream1_IRQHandler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF1)
 80019dc:	4b5c      	ldr	r3, [pc, #368]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x178>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01d      	beq.n	8001a24 <DMA2_Stream1_IRQHandler+0x4c>
	{
		ADC3_DMA_Flag.Fifo_Error_Flag = true;
 80019e8:	4b5a      	ldr	r3, [pc, #360]	@ (8001b54 <DMA2_Stream1_IRQHandler+0x17c>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	715a      	strb	r2, [r3, #5]
		TIM1_CH1_DMA_Flag.Fifo_Error_Flag = true;
 80019ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001b58 <DMA2_Stream1_IRQHandler+0x180>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	715a      	strb	r2, [r3, #5]
		TIM8_UP_DMA_Flag.Fifo_Error_Flag = true;
 80019f4:	4b59      	ldr	r3, [pc, #356]	@ (8001b5c <DMA2_Stream1_IRQHandler+0x184>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	715a      	strb	r2, [r3, #5]
		TIM8_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 80019fa:	4b59      	ldr	r3, [pc, #356]	@ (8001b60 <DMA2_Stream1_IRQHandler+0x188>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	715a      	strb	r2, [r3, #5]
		TIM8_COM_DMA_Flag.Fifo_Error_Flag = true;
 8001a00:	4b58      	ldr	r3, [pc, #352]	@ (8001b64 <DMA2_Stream1_IRQHandler+0x18c>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	715a      	strb	r2, [r3, #5]
		DCMI_DMA_Flag.Fifo_Error_Flag = true;
 8001a06:	4b58      	ldr	r3, [pc, #352]	@ (8001b68 <DMA2_Stream1_IRQHandler+0x190>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	715a      	strb	r2, [r3, #5]
		USART6_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001a0c:	4b57      	ldr	r3, [pc, #348]	@ (8001b6c <DMA2_Stream1_IRQHandler+0x194>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	715a      	strb	r2, [r3, #5]
		DMA2_Stream1_Flag.Fifo_Error_Flag = true;
 8001a12:	4b57      	ldr	r3, [pc, #348]	@ (8001b70 <DMA2_Stream1_IRQHandler+0x198>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	715a      	strb	r2, [r3, #5]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8001a18:	4b4d      	ldr	r3, [pc, #308]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x178>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x178>)
 8001a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a22:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF1)
 8001a24:	4b4a      	ldr	r3, [pc, #296]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x178>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01d      	beq.n	8001a6c <DMA2_Stream1_IRQHandler+0x94>
	{
		ADC3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001a30:	4b48      	ldr	r3, [pc, #288]	@ (8001b54 <DMA2_Stream1_IRQHandler+0x17c>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	711a      	strb	r2, [r3, #4]
		TIM1_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001a36:	4b48      	ldr	r3, [pc, #288]	@ (8001b58 <DMA2_Stream1_IRQHandler+0x180>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	711a      	strb	r2, [r3, #4]
		TIM8_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001a3c:	4b47      	ldr	r3, [pc, #284]	@ (8001b5c <DMA2_Stream1_IRQHandler+0x184>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	711a      	strb	r2, [r3, #4]
		TIM8_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001a42:	4b47      	ldr	r3, [pc, #284]	@ (8001b60 <DMA2_Stream1_IRQHandler+0x188>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	711a      	strb	r2, [r3, #4]
		TIM8_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001a48:	4b46      	ldr	r3, [pc, #280]	@ (8001b64 <DMA2_Stream1_IRQHandler+0x18c>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	711a      	strb	r2, [r3, #4]
		DCMI_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001a4e:	4b46      	ldr	r3, [pc, #280]	@ (8001b68 <DMA2_Stream1_IRQHandler+0x190>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	711a      	strb	r2, [r3, #4]
		USART6_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001a54:	4b45      	ldr	r3, [pc, #276]	@ (8001b6c <DMA2_Stream1_IRQHandler+0x194>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	711a      	strb	r2, [r3, #4]
		DMA2_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8001a5a:	4b45      	ldr	r3, [pc, #276]	@ (8001b70 <DMA2_Stream1_IRQHandler+0x198>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001a60:	4b3b      	ldr	r3, [pc, #236]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x178>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4a3a      	ldr	r2, [pc, #232]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x178>)
 8001a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a6a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF1)
 8001a6c:	4b38      	ldr	r3, [pc, #224]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x178>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01d      	beq.n	8001ab4 <DMA2_Stream1_IRQHandler+0xdc>
	{
		ADC3_DMA_Flag.Transfer_Error_Flag = true;
 8001a78:	4b36      	ldr	r3, [pc, #216]	@ (8001b54 <DMA2_Stream1_IRQHandler+0x17c>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	70da      	strb	r2, [r3, #3]
		TIM1_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8001a7e:	4b36      	ldr	r3, [pc, #216]	@ (8001b58 <DMA2_Stream1_IRQHandler+0x180>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	70da      	strb	r2, [r3, #3]
		TIM8_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001a84:	4b35      	ldr	r3, [pc, #212]	@ (8001b5c <DMA2_Stream1_IRQHandler+0x184>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	70da      	strb	r2, [r3, #3]
		TIM8_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8001a8a:	4b35      	ldr	r3, [pc, #212]	@ (8001b60 <DMA2_Stream1_IRQHandler+0x188>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	70da      	strb	r2, [r3, #3]
		TIM8_COM_DMA_Flag.Transfer_Error_Flag = true;
 8001a90:	4b34      	ldr	r3, [pc, #208]	@ (8001b64 <DMA2_Stream1_IRQHandler+0x18c>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	70da      	strb	r2, [r3, #3]
		DCMI_DMA_Flag.Transfer_Error_Flag = true;
 8001a96:	4b34      	ldr	r3, [pc, #208]	@ (8001b68 <DMA2_Stream1_IRQHandler+0x190>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	70da      	strb	r2, [r3, #3]
		USART6_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001a9c:	4b33      	ldr	r3, [pc, #204]	@ (8001b6c <DMA2_Stream1_IRQHandler+0x194>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	70da      	strb	r2, [r3, #3]
		DMA2_Stream1_Flag.Transfer_Error_Flag = true;
 8001aa2:	4b33      	ldr	r3, [pc, #204]	@ (8001b70 <DMA2_Stream1_IRQHandler+0x198>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8001aa8:	4b29      	ldr	r3, [pc, #164]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x178>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4a28      	ldr	r2, [pc, #160]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x178>)
 8001aae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ab2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF1)
 8001ab4:	4b26      	ldr	r3, [pc, #152]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x178>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01d      	beq.n	8001afc <DMA2_Stream1_IRQHandler+0x124>
	{
		ADC3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ac0:	4b24      	ldr	r3, [pc, #144]	@ (8001b54 <DMA2_Stream1_IRQHandler+0x17c>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	709a      	strb	r2, [r3, #2]
		TIM1_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ac6:	4b24      	ldr	r3, [pc, #144]	@ (8001b58 <DMA2_Stream1_IRQHandler+0x180>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	709a      	strb	r2, [r3, #2]
		TIM8_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001acc:	4b23      	ldr	r3, [pc, #140]	@ (8001b5c <DMA2_Stream1_IRQHandler+0x184>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	709a      	strb	r2, [r3, #2]
		TIM8_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ad2:	4b23      	ldr	r3, [pc, #140]	@ (8001b60 <DMA2_Stream1_IRQHandler+0x188>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	709a      	strb	r2, [r3, #2]
		TIM8_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ad8:	4b22      	ldr	r3, [pc, #136]	@ (8001b64 <DMA2_Stream1_IRQHandler+0x18c>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	709a      	strb	r2, [r3, #2]
		DCMI_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ade:	4b22      	ldr	r3, [pc, #136]	@ (8001b68 <DMA2_Stream1_IRQHandler+0x190>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	709a      	strb	r2, [r3, #2]
		USART6_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ae4:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <DMA2_Stream1_IRQHandler+0x194>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	709a      	strb	r2, [r3, #2]
		DMA2_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8001aea:	4b21      	ldr	r3, [pc, #132]	@ (8001b70 <DMA2_Stream1_IRQHandler+0x198>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001af0:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x178>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4a16      	ldr	r2, [pc, #88]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x178>)
 8001af6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001afa:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF1)
 8001afc:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x178>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01d      	beq.n	8001b44 <DMA2_Stream1_IRQHandler+0x16c>
	{
		ADC3_DMA_Flag.Transfer_Complete_Flag = true;
 8001b08:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <DMA2_Stream1_IRQHandler+0x17c>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	705a      	strb	r2, [r3, #1]
		TIM1_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <DMA2_Stream1_IRQHandler+0x180>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	705a      	strb	r2, [r3, #1]
		TIM8_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8001b14:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <DMA2_Stream1_IRQHandler+0x184>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	705a      	strb	r2, [r3, #1]
		TIM8_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <DMA2_Stream1_IRQHandler+0x188>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	705a      	strb	r2, [r3, #1]
		TIM8_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8001b20:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <DMA2_Stream1_IRQHandler+0x18c>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	705a      	strb	r2, [r3, #1]
		DCMI_DMA_Flag.Transfer_Complete_Flag = true;
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <DMA2_Stream1_IRQHandler+0x190>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	705a      	strb	r2, [r3, #1]
		USART6_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <DMA2_Stream1_IRQHandler+0x194>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	705a      	strb	r2, [r3, #1]
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
 8001b32:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <DMA2_Stream1_IRQHandler+0x198>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001b38:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x178>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a04      	ldr	r2, [pc, #16]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x178>)
 8001b3e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b42:	6093      	str	r3, [r2, #8]
	}
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40026400 	.word	0x40026400
 8001b54:	200003b8 	.word	0x200003b8
 8001b58:	200002a8 	.word	0x200002a8
 8001b5c:	200002d8 	.word	0x200002d8
 8001b60:	20000300 	.word	0x20000300
 8001b64:	20000308 	.word	0x20000308
 8001b68:	200003a0 	.word	0x200003a0
 8001b6c:	20000280 	.word	0x20000280
 8001b70:	20000408 	.word	0x20000408

08001b74 <DMA2_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream2_IRQHandler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF2)
 8001b78:	4b3e      	ldr	r3, [pc, #248]	@ (8001c74 <DMA2_Stream2_IRQHandler+0x100>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d011      	beq.n	8001ba8 <DMA2_Stream2_IRQHandler+0x34>
	{
		TIM8_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8001b84:	4b3c      	ldr	r3, [pc, #240]	@ (8001c78 <DMA2_Stream2_IRQHandler+0x104>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	715a      	strb	r2, [r3, #5]
		USART1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c7c <DMA2_Stream2_IRQHandler+0x108>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	715a      	strb	r2, [r3, #5]
		ADC2_DMA_Flag.Fifo_Error_Flag = true;
 8001b90:	4b3b      	ldr	r3, [pc, #236]	@ (8001c80 <DMA2_Stream2_IRQHandler+0x10c>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	715a      	strb	r2, [r3, #5]
		DMA2_Stream2_Flag.Fifo_Error_Flag = true;
 8001b96:	4b3b      	ldr	r3, [pc, #236]	@ (8001c84 <DMA2_Stream2_IRQHandler+0x110>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	715a      	strb	r2, [r3, #5]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001b9c:	4b35      	ldr	r3, [pc, #212]	@ (8001c74 <DMA2_Stream2_IRQHandler+0x100>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4a34      	ldr	r2, [pc, #208]	@ (8001c74 <DMA2_Stream2_IRQHandler+0x100>)
 8001ba2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ba6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF2)
 8001ba8:	4b32      	ldr	r3, [pc, #200]	@ (8001c74 <DMA2_Stream2_IRQHandler+0x100>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d011      	beq.n	8001bd8 <DMA2_Stream2_IRQHandler+0x64>
	{
		TIM8_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001bb4:	4b30      	ldr	r3, [pc, #192]	@ (8001c78 <DMA2_Stream2_IRQHandler+0x104>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	711a      	strb	r2, [r3, #4]
		USART1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001bba:	4b30      	ldr	r3, [pc, #192]	@ (8001c7c <DMA2_Stream2_IRQHandler+0x108>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	711a      	strb	r2, [r3, #4]
		ADC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c80 <DMA2_Stream2_IRQHandler+0x10c>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	711a      	strb	r2, [r3, #4]
		DMA2_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8001bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8001c84 <DMA2_Stream2_IRQHandler+0x110>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001bcc:	4b29      	ldr	r3, [pc, #164]	@ (8001c74 <DMA2_Stream2_IRQHandler+0x100>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4a28      	ldr	r2, [pc, #160]	@ (8001c74 <DMA2_Stream2_IRQHandler+0x100>)
 8001bd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bd6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF2)
 8001bd8:	4b26      	ldr	r3, [pc, #152]	@ (8001c74 <DMA2_Stream2_IRQHandler+0x100>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d011      	beq.n	8001c08 <DMA2_Stream2_IRQHandler+0x94>
	{
		TIM8_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8001be4:	4b24      	ldr	r3, [pc, #144]	@ (8001c78 <DMA2_Stream2_IRQHandler+0x104>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	70da      	strb	r2, [r3, #3]
		USART1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001bea:	4b24      	ldr	r3, [pc, #144]	@ (8001c7c <DMA2_Stream2_IRQHandler+0x108>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	70da      	strb	r2, [r3, #3]
		ADC2_DMA_Flag.Transfer_Error_Flag = true;
 8001bf0:	4b23      	ldr	r3, [pc, #140]	@ (8001c80 <DMA2_Stream2_IRQHandler+0x10c>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	70da      	strb	r2, [r3, #3]
		DMA2_Stream2_Flag.Transfer_Error_Flag = true;
 8001bf6:	4b23      	ldr	r3, [pc, #140]	@ (8001c84 <DMA2_Stream2_IRQHandler+0x110>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c74 <DMA2_Stream2_IRQHandler+0x100>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4a1c      	ldr	r2, [pc, #112]	@ (8001c74 <DMA2_Stream2_IRQHandler+0x100>)
 8001c02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c06:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF2)
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <DMA2_Stream2_IRQHandler+0x100>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d011      	beq.n	8001c38 <DMA2_Stream2_IRQHandler+0xc4>
	{
		TIM8_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001c14:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <DMA2_Stream2_IRQHandler+0x104>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	709a      	strb	r2, [r3, #2]
		USART1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001c1a:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <DMA2_Stream2_IRQHandler+0x108>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	709a      	strb	r2, [r3, #2]
		ADC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001c20:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <DMA2_Stream2_IRQHandler+0x10c>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	709a      	strb	r2, [r3, #2]
		DMA2_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8001c26:	4b17      	ldr	r3, [pc, #92]	@ (8001c84 <DMA2_Stream2_IRQHandler+0x110>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <DMA2_Stream2_IRQHandler+0x100>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4a10      	ldr	r2, [pc, #64]	@ (8001c74 <DMA2_Stream2_IRQHandler+0x100>)
 8001c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c36:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF2)
 8001c38:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <DMA2_Stream2_IRQHandler+0x100>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d011      	beq.n	8001c68 <DMA2_Stream2_IRQHandler+0xf4>
	{
		TIM8_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <DMA2_Stream2_IRQHandler+0x104>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	705a      	strb	r2, [r3, #1]
		USART1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c7c <DMA2_Stream2_IRQHandler+0x108>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	705a      	strb	r2, [r3, #1]
		ADC2_DMA_Flag.Transfer_Complete_Flag = true;
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <DMA2_Stream2_IRQHandler+0x10c>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	705a      	strb	r2, [r3, #1]
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <DMA2_Stream2_IRQHandler+0x110>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <DMA2_Stream2_IRQHandler+0x100>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <DMA2_Stream2_IRQHandler+0x100>)
 8001c62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c66:	6093      	str	r3, [r2, #8]
	}
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40026400 	.word	0x40026400
 8001c78:	200002e0 	.word	0x200002e0
 8001c7c:	20000230 	.word	0x20000230
 8001c80:	200003b0 	.word	0x200003b0
 8001c84:	20000410 	.word	0x20000410

08001c88 <DMA2_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream3_IRQHandler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF3)
 8001c8c:	4b36      	ldr	r3, [pc, #216]	@ (8001d68 <DMA2_Stream3_IRQHandler+0xe0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00e      	beq.n	8001cb6 <DMA2_Stream3_IRQHandler+0x2e>
	{
		SDIO_RXTX_DMA_Flag.Fifo_Error_Flag = true;
 8001c98:	4b34      	ldr	r3, [pc, #208]	@ (8001d6c <DMA2_Stream3_IRQHandler+0xe4>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	715a      	strb	r2, [r3, #5]
		SPI1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001c9e:	4b34      	ldr	r3, [pc, #208]	@ (8001d70 <DMA2_Stream3_IRQHandler+0xe8>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	715a      	strb	r2, [r3, #5]
		DMA2_Stream3_Flag.Fifo_Error_Flag = true;
 8001ca4:	4b33      	ldr	r3, [pc, #204]	@ (8001d74 <DMA2_Stream3_IRQHandler+0xec>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	715a      	strb	r2, [r3, #5]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001caa:	4b2f      	ldr	r3, [pc, #188]	@ (8001d68 <DMA2_Stream3_IRQHandler+0xe0>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	4a2e      	ldr	r2, [pc, #184]	@ (8001d68 <DMA2_Stream3_IRQHandler+0xe0>)
 8001cb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cb4:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF3)
 8001cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d68 <DMA2_Stream3_IRQHandler+0xe0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00e      	beq.n	8001ce0 <DMA2_Stream3_IRQHandler+0x58>
	{
		SDIO_RXTX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d6c <DMA2_Stream3_IRQHandler+0xe4>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	711a      	strb	r2, [r3, #4]
		SPI1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cc8:	4b29      	ldr	r3, [pc, #164]	@ (8001d70 <DMA2_Stream3_IRQHandler+0xe8>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	711a      	strb	r2, [r3, #4]
		DMA2_Stream3_Flag.Direct_Mode_Error_Flag = true;
 8001cce:	4b29      	ldr	r3, [pc, #164]	@ (8001d74 <DMA2_Stream3_IRQHandler+0xec>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001cd4:	4b24      	ldr	r3, [pc, #144]	@ (8001d68 <DMA2_Stream3_IRQHandler+0xe0>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	4a23      	ldr	r2, [pc, #140]	@ (8001d68 <DMA2_Stream3_IRQHandler+0xe0>)
 8001cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cde:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF3)
 8001ce0:	4b21      	ldr	r3, [pc, #132]	@ (8001d68 <DMA2_Stream3_IRQHandler+0xe0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00e      	beq.n	8001d0a <DMA2_Stream3_IRQHandler+0x82>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Error_Flag = true;
 8001cec:	4b1f      	ldr	r3, [pc, #124]	@ (8001d6c <DMA2_Stream3_IRQHandler+0xe4>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	70da      	strb	r2, [r3, #3]
		SPI1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d70 <DMA2_Stream3_IRQHandler+0xe8>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	70da      	strb	r2, [r3, #3]
		DMA2_Stream3_Flag.Transfer_Error_Flag = true;
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d74 <DMA2_Stream3_IRQHandler+0xec>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <DMA2_Stream3_IRQHandler+0xe0>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	4a19      	ldr	r2, [pc, #100]	@ (8001d68 <DMA2_Stream3_IRQHandler+0xe0>)
 8001d04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d08:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF3)
 8001d0a:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <DMA2_Stream3_IRQHandler+0xe0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00e      	beq.n	8001d34 <DMA2_Stream3_IRQHandler+0xac>
	{
		SDIO_RXTX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <DMA2_Stream3_IRQHandler+0xe4>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	709a      	strb	r2, [r3, #2]
		SPI1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d1c:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <DMA2_Stream3_IRQHandler+0xe8>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	709a      	strb	r2, [r3, #2]
		DMA2_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8001d22:	4b14      	ldr	r3, [pc, #80]	@ (8001d74 <DMA2_Stream3_IRQHandler+0xec>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <DMA2_Stream3_IRQHandler+0xe0>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d68 <DMA2_Stream3_IRQHandler+0xe0>)
 8001d2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d32:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF3)
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <DMA2_Stream3_IRQHandler+0xe0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00e      	beq.n	8001d5e <DMA2_Stream3_IRQHandler+0xd6>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Complete_Flag = true;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <DMA2_Stream3_IRQHandler+0xe4>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	705a      	strb	r2, [r3, #1]
		SPI1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001d46:	4b0a      	ldr	r3, [pc, #40]	@ (8001d70 <DMA2_Stream3_IRQHandler+0xe8>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	705a      	strb	r2, [r3, #1]
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
 8001d4c:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <DMA2_Stream3_IRQHandler+0xec>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001d52:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <DMA2_Stream3_IRQHandler+0xe0>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	4a04      	ldr	r2, [pc, #16]	@ (8001d68 <DMA2_Stream3_IRQHandler+0xe0>)
 8001d58:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001d5c:	6093      	str	r3, [r2, #8]
	}
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	40026400 	.word	0x40026400
 8001d6c:	20000398 	.word	0x20000398
 8001d70:	20000218 	.word	0x20000218
 8001d74:	20000418 	.word	0x20000418

08001d78 <DMA2_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream4_IRQHandler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF4)
 8001d7c:	4b36      	ldr	r3, [pc, #216]	@ (8001e58 <DMA2_Stream4_IRQHandler+0xe0>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00e      	beq.n	8001da6 <DMA2_Stream4_IRQHandler+0x2e>
	{
		TIM1_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8001d88:	4b34      	ldr	r3, [pc, #208]	@ (8001e5c <DMA2_Stream4_IRQHandler+0xe4>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	715a      	strb	r2, [r3, #5]
		TIM8_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001d8e:	4b34      	ldr	r3, [pc, #208]	@ (8001e60 <DMA2_Stream4_IRQHandler+0xe8>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	715a      	strb	r2, [r3, #5]
		DMA2_Stream4_Flag.Fifo_Error_Flag = true;
 8001d94:	4b33      	ldr	r3, [pc, #204]	@ (8001e64 <DMA2_Stream4_IRQHandler+0xec>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	715a      	strb	r2, [r3, #5]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF4;
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e58 <DMA2_Stream4_IRQHandler+0xe0>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	4a2e      	ldr	r2, [pc, #184]	@ (8001e58 <DMA2_Stream4_IRQHandler+0xe0>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF4)
 8001da6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e58 <DMA2_Stream4_IRQHandler+0xe0>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00e      	beq.n	8001dd0 <DMA2_Stream4_IRQHandler+0x58>
	{
		TIM1_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001db2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e5c <DMA2_Stream4_IRQHandler+0xe4>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	711a      	strb	r2, [r3, #4]
		TIM8_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001db8:	4b29      	ldr	r3, [pc, #164]	@ (8001e60 <DMA2_Stream4_IRQHandler+0xe8>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	711a      	strb	r2, [r3, #4]
		DMA2_Stream4_Flag.Direct_Mode_Error_Flag = true;
 8001dbe:	4b29      	ldr	r3, [pc, #164]	@ (8001e64 <DMA2_Stream4_IRQHandler+0xec>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001dc4:	4b24      	ldr	r3, [pc, #144]	@ (8001e58 <DMA2_Stream4_IRQHandler+0xe0>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	4a23      	ldr	r2, [pc, #140]	@ (8001e58 <DMA2_Stream4_IRQHandler+0xe0>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF4)
 8001dd0:	4b21      	ldr	r3, [pc, #132]	@ (8001e58 <DMA2_Stream4_IRQHandler+0xe0>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00e      	beq.n	8001dfa <DMA2_Stream4_IRQHandler+0x82>
	{
		TIM1_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <DMA2_Stream4_IRQHandler+0xe4>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	70da      	strb	r2, [r3, #3]
		TIM8_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001de2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e60 <DMA2_Stream4_IRQHandler+0xe8>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	70da      	strb	r2, [r3, #3]
		DMA2_Stream4_Flag.Transfer_Error_Flag = true;
 8001de8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <DMA2_Stream4_IRQHandler+0xec>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <DMA2_Stream4_IRQHandler+0xe0>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <DMA2_Stream4_IRQHandler+0xe0>)
 8001df4:	f043 0308 	orr.w	r3, r3, #8
 8001df8:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF4)
 8001dfa:	4b17      	ldr	r3, [pc, #92]	@ (8001e58 <DMA2_Stream4_IRQHandler+0xe0>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00e      	beq.n	8001e24 <DMA2_Stream4_IRQHandler+0xac>
	{
		TIM1_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001e06:	4b15      	ldr	r3, [pc, #84]	@ (8001e5c <DMA2_Stream4_IRQHandler+0xe4>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	709a      	strb	r2, [r3, #2]
		TIM8_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001e0c:	4b14      	ldr	r3, [pc, #80]	@ (8001e60 <DMA2_Stream4_IRQHandler+0xe8>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	709a      	strb	r2, [r3, #2]
		DMA2_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 8001e12:	4b14      	ldr	r3, [pc, #80]	@ (8001e64 <DMA2_Stream4_IRQHandler+0xec>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <DMA2_Stream4_IRQHandler+0xe0>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001e58 <DMA2_Stream4_IRQHandler+0xe0>)
 8001e1e:	f043 0310 	orr.w	r3, r3, #16
 8001e22:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF4)
 8001e24:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <DMA2_Stream4_IRQHandler+0xe0>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00e      	beq.n	8001e4e <DMA2_Stream4_IRQHandler+0xd6>
	{
		TIM1_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8001e30:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <DMA2_Stream4_IRQHandler+0xe4>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	705a      	strb	r2, [r3, #1]
		TIM8_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001e36:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <DMA2_Stream4_IRQHandler+0xe8>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	705a      	strb	r2, [r3, #1]
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
 8001e3c:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <DMA2_Stream4_IRQHandler+0xec>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8001e42:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <DMA2_Stream4_IRQHandler+0xe0>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	4a04      	ldr	r2, [pc, #16]	@ (8001e58 <DMA2_Stream4_IRQHandler+0xe0>)
 8001e48:	f043 0320 	orr.w	r3, r3, #32
 8001e4c:	60d3      	str	r3, [r2, #12]
	}
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40026400 	.word	0x40026400
 8001e5c:	200002c0 	.word	0x200002c0
 8001e60:	200002e8 	.word	0x200002e8
 8001e64:	20000420 	.word	0x20000420

08001e68 <DMA2_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream5_IRQHandler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF5)
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f2c <DMA2_Stream5_IRQHandler+0xc4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00b      	beq.n	8001e90 <DMA2_Stream5_IRQHandler+0x28>
	{
		TIM1_UP_DMA_Flag.Fifo_Error_Flag = true;
 8001e78:	4b2d      	ldr	r3, [pc, #180]	@ (8001f30 <DMA2_Stream5_IRQHandler+0xc8>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	715a      	strb	r2, [r3, #5]
		DMA2_Stream5_Flag.Fifo_Error_Flag = true;
 8001e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f34 <DMA2_Stream5_IRQHandler+0xcc>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	715a      	strb	r2, [r3, #5]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001e84:	4b29      	ldr	r3, [pc, #164]	@ (8001f2c <DMA2_Stream5_IRQHandler+0xc4>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4a28      	ldr	r2, [pc, #160]	@ (8001f2c <DMA2_Stream5_IRQHandler+0xc4>)
 8001e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e8e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF5)
 8001e90:	4b26      	ldr	r3, [pc, #152]	@ (8001f2c <DMA2_Stream5_IRQHandler+0xc4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00b      	beq.n	8001eb4 <DMA2_Stream5_IRQHandler+0x4c>
	{
		TIM1_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e9c:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <DMA2_Stream5_IRQHandler+0xc8>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	711a      	strb	r2, [r3, #4]
		DMA2_Stream5_Flag.Direct_Mode_Error_Flag = true;
 8001ea2:	4b24      	ldr	r3, [pc, #144]	@ (8001f34 <DMA2_Stream5_IRQHandler+0xcc>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001ea8:	4b20      	ldr	r3, [pc, #128]	@ (8001f2c <DMA2_Stream5_IRQHandler+0xc4>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4a1f      	ldr	r2, [pc, #124]	@ (8001f2c <DMA2_Stream5_IRQHandler+0xc4>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF5)
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f2c <DMA2_Stream5_IRQHandler+0xc4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00b      	beq.n	8001ed8 <DMA2_Stream5_IRQHandler+0x70>
	{
		TIM1_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <DMA2_Stream5_IRQHandler+0xc8>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	70da      	strb	r2, [r3, #3]
		DMA2_Stream5_Flag.Transfer_Error_Flag = true;
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f34 <DMA2_Stream5_IRQHandler+0xcc>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8001ecc:	4b17      	ldr	r3, [pc, #92]	@ (8001f2c <DMA2_Stream5_IRQHandler+0xc4>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4a16      	ldr	r2, [pc, #88]	@ (8001f2c <DMA2_Stream5_IRQHandler+0xc4>)
 8001ed2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ed6:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF5)
 8001ed8:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <DMA2_Stream5_IRQHandler+0xc4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00b      	beq.n	8001efc <DMA2_Stream5_IRQHandler+0x94>
	{
		TIM1_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ee4:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <DMA2_Stream5_IRQHandler+0xc8>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	709a      	strb	r2, [r3, #2]
		DMA2_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 8001eea:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <DMA2_Stream5_IRQHandler+0xcc>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <DMA2_Stream5_IRQHandler+0xc4>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f2c <DMA2_Stream5_IRQHandler+0xc4>)
 8001ef6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001efa:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF5)
 8001efc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <DMA2_Stream5_IRQHandler+0xc4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00b      	beq.n	8001f20 <DMA2_Stream5_IRQHandler+0xb8>
	{
		TIM1_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8001f08:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <DMA2_Stream5_IRQHandler+0xc8>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	705a      	strb	r2, [r3, #1]
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <DMA2_Stream5_IRQHandler+0xcc>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8001f14:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <DMA2_Stream5_IRQHandler+0xc4>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a04      	ldr	r2, [pc, #16]	@ (8001f2c <DMA2_Stream5_IRQHandler+0xc4>)
 8001f1a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f1e:	60d3      	str	r3, [r2, #12]
	}
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40026400 	.word	0x40026400
 8001f30:	200002a0 	.word	0x200002a0
 8001f34:	20000428 	.word	0x20000428

08001f38 <DMA2_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream6_IRQHandler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF6)
 8001f3c:	4b45      	ldr	r3, [pc, #276]	@ (8002054 <DMA2_Stream6_IRQHandler+0x11c>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d014      	beq.n	8001f72 <DMA2_Stream6_IRQHandler+0x3a>
	{
		TIM1_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001f48:	4b43      	ldr	r3, [pc, #268]	@ (8002058 <DMA2_Stream6_IRQHandler+0x120>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	715a      	strb	r2, [r3, #5]
		TIM1_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001f4e:	4b43      	ldr	r3, [pc, #268]	@ (800205c <DMA2_Stream6_IRQHandler+0x124>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	715a      	strb	r2, [r3, #5]
		TIM8_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001f54:	4b42      	ldr	r3, [pc, #264]	@ (8002060 <DMA2_Stream6_IRQHandler+0x128>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	715a      	strb	r2, [r3, #5]
		USART6_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001f5a:	4b42      	ldr	r3, [pc, #264]	@ (8002064 <DMA2_Stream6_IRQHandler+0x12c>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	715a      	strb	r2, [r3, #5]
		DMA2_Stream6_Flag.Fifo_Error_Flag = true;
 8001f60:	4b41      	ldr	r3, [pc, #260]	@ (8002068 <DMA2_Stream6_IRQHandler+0x130>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	715a      	strb	r2, [r3, #5]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001f66:	4b3b      	ldr	r3, [pc, #236]	@ (8002054 <DMA2_Stream6_IRQHandler+0x11c>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4a3a      	ldr	r2, [pc, #232]	@ (8002054 <DMA2_Stream6_IRQHandler+0x11c>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f70:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF6)
 8001f72:	4b38      	ldr	r3, [pc, #224]	@ (8002054 <DMA2_Stream6_IRQHandler+0x11c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d014      	beq.n	8001fa8 <DMA2_Stream6_IRQHandler+0x70>
	{
		TIM1_CH2_DMA_Flag.Direct_Mode_Error_Flag= true;
 8001f7e:	4b36      	ldr	r3, [pc, #216]	@ (8002058 <DMA2_Stream6_IRQHandler+0x120>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	711a      	strb	r2, [r3, #4]
		TIM1_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001f84:	4b35      	ldr	r3, [pc, #212]	@ (800205c <DMA2_Stream6_IRQHandler+0x124>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	711a      	strb	r2, [r3, #4]
		TIM8_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001f8a:	4b35      	ldr	r3, [pc, #212]	@ (8002060 <DMA2_Stream6_IRQHandler+0x128>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	711a      	strb	r2, [r3, #4]
		USART6_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001f90:	4b34      	ldr	r3, [pc, #208]	@ (8002064 <DMA2_Stream6_IRQHandler+0x12c>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	711a      	strb	r2, [r3, #4]
		DMA2_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8001f96:	4b34      	ldr	r3, [pc, #208]	@ (8002068 <DMA2_Stream6_IRQHandler+0x130>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002054 <DMA2_Stream6_IRQHandler+0x11c>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4a2c      	ldr	r2, [pc, #176]	@ (8002054 <DMA2_Stream6_IRQHandler+0x11c>)
 8001fa2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fa6:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF6)
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8002054 <DMA2_Stream6_IRQHandler+0x11c>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d014      	beq.n	8001fde <DMA2_Stream6_IRQHandler+0xa6>
	{
		TIM1_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001fb4:	4b28      	ldr	r3, [pc, #160]	@ (8002058 <DMA2_Stream6_IRQHandler+0x120>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	70da      	strb	r2, [r3, #3]
		TIM1_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8001fba:	4b28      	ldr	r3, [pc, #160]	@ (800205c <DMA2_Stream6_IRQHandler+0x124>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	70da      	strb	r2, [r3, #3]
		TIM8_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8001fc0:	4b27      	ldr	r3, [pc, #156]	@ (8002060 <DMA2_Stream6_IRQHandler+0x128>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	70da      	strb	r2, [r3, #3]
		USART6_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001fc6:	4b27      	ldr	r3, [pc, #156]	@ (8002064 <DMA2_Stream6_IRQHandler+0x12c>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	70da      	strb	r2, [r3, #3]
		DMA2_Stream6_Flag.Transfer_Error_Flag = true;
 8001fcc:	4b26      	ldr	r3, [pc, #152]	@ (8002068 <DMA2_Stream6_IRQHandler+0x130>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001fd2:	4b20      	ldr	r3, [pc, #128]	@ (8002054 <DMA2_Stream6_IRQHandler+0x11c>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8002054 <DMA2_Stream6_IRQHandler+0x11c>)
 8001fd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001fdc:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF6)
 8001fde:	4b1d      	ldr	r3, [pc, #116]	@ (8002054 <DMA2_Stream6_IRQHandler+0x11c>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d014      	beq.n	8002014 <DMA2_Stream6_IRQHandler+0xdc>
	{
		TIM1_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001fea:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <DMA2_Stream6_IRQHandler+0x120>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	709a      	strb	r2, [r3, #2]
		TIM1_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <DMA2_Stream6_IRQHandler+0x124>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	709a      	strb	r2, [r3, #2]
		TIM8_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8002060 <DMA2_Stream6_IRQHandler+0x128>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	709a      	strb	r2, [r3, #2]
		USART6_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ffc:	4b19      	ldr	r3, [pc, #100]	@ (8002064 <DMA2_Stream6_IRQHandler+0x12c>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	709a      	strb	r2, [r3, #2]
		DMA2_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8002002:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <DMA2_Stream6_IRQHandler+0x130>)
 8002004:	2201      	movs	r2, #1
 8002006:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8002008:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <DMA2_Stream6_IRQHandler+0x11c>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4a11      	ldr	r2, [pc, #68]	@ (8002054 <DMA2_Stream6_IRQHandler+0x11c>)
 800200e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002012:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF6)
 8002014:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <DMA2_Stream6_IRQHandler+0x11c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d014      	beq.n	800204a <DMA2_Stream6_IRQHandler+0x112>
	{
		TIM1_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8002020:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <DMA2_Stream6_IRQHandler+0x120>)
 8002022:	2201      	movs	r2, #1
 8002024:	705a      	strb	r2, [r3, #1]
		TIM1_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8002026:	4b0d      	ldr	r3, [pc, #52]	@ (800205c <DMA2_Stream6_IRQHandler+0x124>)
 8002028:	2201      	movs	r2, #1
 800202a:	705a      	strb	r2, [r3, #1]
		TIM8_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 800202c:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <DMA2_Stream6_IRQHandler+0x128>)
 800202e:	2201      	movs	r2, #1
 8002030:	705a      	strb	r2, [r3, #1]
		USART6_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8002032:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <DMA2_Stream6_IRQHandler+0x12c>)
 8002034:	2201      	movs	r2, #1
 8002036:	705a      	strb	r2, [r3, #1]
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <DMA2_Stream6_IRQHandler+0x130>)
 800203a:	2201      	movs	r2, #1
 800203c:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 800203e:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <DMA2_Stream6_IRQHandler+0x11c>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	4a04      	ldr	r2, [pc, #16]	@ (8002054 <DMA2_Stream6_IRQHandler+0x11c>)
 8002044:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002048:	60d3      	str	r3, [r2, #12]
	}
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	40026400 	.word	0x40026400
 8002058:	200002b0 	.word	0x200002b0
 800205c:	200002b8 	.word	0x200002b8
 8002060:	200002f0 	.word	0x200002f0
 8002064:	20000288 	.word	0x20000288
 8002068:	20000430 	.word	0x20000430

0800206c <DMA2_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream7_IRQHandler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF7)
 8002070:	4b3e      	ldr	r3, [pc, #248]	@ (800216c <DMA2_Stream7_IRQHandler+0x100>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d011      	beq.n	80020a0 <DMA2_Stream7_IRQHandler+0x34>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 800207c:	4b3c      	ldr	r3, [pc, #240]	@ (8002170 <DMA2_Stream7_IRQHandler+0x104>)
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8002082:	4b3a      	ldr	r3, [pc, #232]	@ (800216c <DMA2_Stream7_IRQHandler+0x100>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	4a39      	ldr	r2, [pc, #228]	@ (800216c <DMA2_Stream7_IRQHandler+0x100>)
 8002088:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800208c:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Fifo_Error_Flag = true;
 800208e:	4b39      	ldr	r3, [pc, #228]	@ (8002174 <DMA2_Stream7_IRQHandler+0x108>)
 8002090:	2201      	movs	r2, #1
 8002092:	715a      	strb	r2, [r3, #5]
		USART1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8002094:	4b36      	ldr	r3, [pc, #216]	@ (8002170 <DMA2_Stream7_IRQHandler+0x104>)
 8002096:	2201      	movs	r2, #1
 8002098:	715a      	strb	r2, [r3, #5]
		DMA2_Stream7_Flag.Fifo_Error_Flag = true;
 800209a:	4b37      	ldr	r3, [pc, #220]	@ (8002178 <DMA2_Stream7_IRQHandler+0x10c>)
 800209c:	2201      	movs	r2, #1
 800209e:	715a      	strb	r2, [r3, #5]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF7)
 80020a0:	4b32      	ldr	r3, [pc, #200]	@ (800216c <DMA2_Stream7_IRQHandler+0x100>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d011      	beq.n	80020d0 <DMA2_Stream7_IRQHandler+0x64>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 80020ac:	4b30      	ldr	r3, [pc, #192]	@ (8002170 <DMA2_Stream7_IRQHandler+0x104>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80020b2:	4b2e      	ldr	r3, [pc, #184]	@ (800216c <DMA2_Stream7_IRQHandler+0x100>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	4a2d      	ldr	r2, [pc, #180]	@ (800216c <DMA2_Stream7_IRQHandler+0x100>)
 80020b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020bc:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 80020be:	4b2d      	ldr	r3, [pc, #180]	@ (8002174 <DMA2_Stream7_IRQHandler+0x108>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	711a      	strb	r2, [r3, #4]
		USART1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80020c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002170 <DMA2_Stream7_IRQHandler+0x104>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	711a      	strb	r2, [r3, #4]
		DMA2_Stream7_Flag.Direct_Mode_Error_Flag = true;
 80020ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002178 <DMA2_Stream7_IRQHandler+0x10c>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	711a      	strb	r2, [r3, #4]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF7)
 80020d0:	4b26      	ldr	r3, [pc, #152]	@ (800216c <DMA2_Stream7_IRQHandler+0x100>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d011      	beq.n	8002100 <DMA2_Stream7_IRQHandler+0x94>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 80020dc:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <DMA2_Stream7_IRQHandler+0x104>)
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 80020e2:	4b22      	ldr	r3, [pc, #136]	@ (800216c <DMA2_Stream7_IRQHandler+0x100>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	4a21      	ldr	r2, [pc, #132]	@ (800216c <DMA2_Stream7_IRQHandler+0x100>)
 80020e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020ec:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Error_Flag = true;
 80020ee:	4b21      	ldr	r3, [pc, #132]	@ (8002174 <DMA2_Stream7_IRQHandler+0x108>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	70da      	strb	r2, [r3, #3]
		USART1_TX_DMA_Flag.Transfer_Error_Flag = true;
 80020f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <DMA2_Stream7_IRQHandler+0x104>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	70da      	strb	r2, [r3, #3]
		DMA2_Stream7_Flag.Transfer_Error_Flag = true;
 80020fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002178 <DMA2_Stream7_IRQHandler+0x10c>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	70da      	strb	r2, [r3, #3]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF7)
 8002100:	4b1a      	ldr	r3, [pc, #104]	@ (800216c <DMA2_Stream7_IRQHandler+0x100>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d011      	beq.n	8002130 <DMA2_Stream7_IRQHandler+0xc4>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 800210c:	4b18      	ldr	r3, [pc, #96]	@ (8002170 <DMA2_Stream7_IRQHandler+0x104>)
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8002112:	4b16      	ldr	r3, [pc, #88]	@ (800216c <DMA2_Stream7_IRQHandler+0x100>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	4a15      	ldr	r2, [pc, #84]	@ (800216c <DMA2_Stream7_IRQHandler+0x100>)
 8002118:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800211c:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800211e:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <DMA2_Stream7_IRQHandler+0x108>)
 8002120:	2201      	movs	r2, #1
 8002122:	709a      	strb	r2, [r3, #2]
		USART1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002124:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <DMA2_Stream7_IRQHandler+0x104>)
 8002126:	2201      	movs	r2, #1
 8002128:	709a      	strb	r2, [r3, #2]
		DMA2_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 800212a:	4b13      	ldr	r3, [pc, #76]	@ (8002178 <DMA2_Stream7_IRQHandler+0x10c>)
 800212c:	2201      	movs	r2, #1
 800212e:	709a      	strb	r2, [r3, #2]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF7)
 8002130:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <DMA2_Stream7_IRQHandler+0x100>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d011      	beq.n	8002160 <DMA2_Stream7_IRQHandler+0xf4>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 800213c:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <DMA2_Stream7_IRQHandler+0x104>)
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8002142:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <DMA2_Stream7_IRQHandler+0x100>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	4a09      	ldr	r2, [pc, #36]	@ (800216c <DMA2_Stream7_IRQHandler+0x100>)
 8002148:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800214c:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 800214e:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <DMA2_Stream7_IRQHandler+0x108>)
 8002150:	2201      	movs	r2, #1
 8002152:	705a      	strb	r2, [r3, #1]
		USART1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8002154:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <DMA2_Stream7_IRQHandler+0x104>)
 8002156:	2201      	movs	r2, #1
 8002158:	705a      	strb	r2, [r3, #1]
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
 800215a:	4b07      	ldr	r3, [pc, #28]	@ (8002178 <DMA2_Stream7_IRQHandler+0x10c>)
 800215c:	2201      	movs	r2, #1
 800215e:	705a      	strb	r2, [r3, #1]

	}
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40026400 	.word	0x40026400
 8002170:	20000238 	.word	0x20000238
 8002174:	200002f8 	.word	0x200002f8
 8002178:	20000438 	.word	0x20000438

0800217c <DMA_Reset_Flags>:
 * and transfer error.
 *
 * @param flag The `DMA_Flags_Typedef` structure whose flags are to be reset.
 */
void DMA_Reset_Flags(DMA_Flags_Typedef *flag)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
	flag->Direct_Mode_Error_Flag = false;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	711a      	strb	r2, [r3, #4]
	flag->Fifo_Error_Flag = false;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	715a      	strb	r2, [r3, #5]
	flag->Half_Transfer_Complete_Flag = false;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	709a      	strb	r2, [r3, #2]
	flag->Transfer_Complete_Flag = false;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	705a      	strb	r2, [r3, #1]
	flag->Transfer_Error_Flag = false;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	70da      	strb	r2, [r3, #3]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0c      	ldr	r2, [pc, #48]	@ (80021f0 <DMA_Clock_Enable+0x40>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d105      	bne.n	80021ce <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 80021c2:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <DMA_Clock_Enable+0x44>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	4a0b      	ldr	r2, [pc, #44]	@ (80021f4 <DMA_Clock_Enable+0x44>)
 80021c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021cc:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a09      	ldr	r2, [pc, #36]	@ (80021f8 <DMA_Clock_Enable+0x48>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d105      	bne.n	80021e4 <DMA_Clock_Enable+0x34>
		{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <DMA_Clock_Enable+0x44>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021dc:	4a05      	ldr	r2, [pc, #20]	@ (80021f4 <DMA_Clock_Enable+0x44>)
 80021de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021e2:	6313      	str	r3, [r2, #48]	@ 0x30
		}
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40026000 	.word	0x40026000
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40026400 	.word	0x40026400

080021fc <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
    DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ffd3 	bl	80021b0 <DMA_Clock_Enable>
    config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	6819      	ldr	r1, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7a1b      	ldrb	r3, [r3, #8]
 8002214:	065a      	lsls	r2, r3, #25
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	430a      	orrs	r2, r1
 800221c:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	6819      	ldr	r1, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->flow_control;  // Set flow control
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	6819      	ldr	r1, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	430a      	orrs	r2, r1
 8002240:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->priority_level;  // Set priority level
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	6819      	ldr	r1, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695a      	ldr	r2, [r3, #20]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	430a      	orrs	r2, r1
 8002264:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	6819      	ldr	r1, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	430a      	orrs	r2, r1
 8002276:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	6819      	ldr	r1, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691a      	ldr	r2, [r3, #16]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	430a      	orrs	r2, r1
 8002288:	601a      	str	r2, [r3, #0]

    // Configure DMA interrupts if enabled


     if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	2200      	movs	r2, #0
 8002290:	4293      	cmp	r3, r2
 8002292:	f000 80f4 	beq.w	800247e <DMA_Init+0x282>
    {

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	2280      	movs	r2, #128	@ 0x80
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	61da      	str	r2, [r3, #28]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <DMA_Init+0xc0>
        {
        	config->Request.Stream->FCR |= config->interrupts;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	6959      	ldr	r1, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69da      	ldr	r2, [r3, #28]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	615a      	str	r2, [r3, #20]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	2210      	movs	r2, #16
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	61da      	str	r2, [r3, #28]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <DMA_Init+0xe4>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TCIE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f042 0210 	orr.w	r2, r2, #16
 80022de:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	2208      	movs	r2, #8
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	61da      	str	r2, [r3, #28]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <DMA_Init+0x108>
        {
        	config->Request.Stream->CR |= DMA_SxCR_HTIE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f042 0208 	orr.w	r2, r2, #8
 8002302:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	2204      	movs	r2, #4
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	61da      	str	r2, [r3, #28]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <DMA_Init+0x12c>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TEIE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f042 0204 	orr.w	r2, r2, #4
 8002326:	601a      	str	r2, [r3, #0]
        }
        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	2202      	movs	r2, #2
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	61da      	str	r2, [r3, #28]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d007      	beq.n	800234c <DMA_Init+0x150>
        {
        	config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f042 0202 	orr.w	r2, r2, #2
 800234a:	601a      	str	r2, [r3, #0]
        }

        // Enable the corresponding NVIC interrupt for the DMA stream
        if(config->Request.Controller == DMA1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a67      	ldr	r2, [pc, #412]	@ (80024f0 <DMA_Init+0x2f4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d147      	bne.n	80023e6 <DMA_Init+0x1ea>
        {
            if(config->Request.Stream == DMA1_Stream0){
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4a66      	ldr	r2, [pc, #408]	@ (80024f4 <DMA_Init+0x2f8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d103      	bne.n	8002368 <DMA_Init+0x16c>
            	NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002360:	200b      	movs	r0, #11
 8002362:	f7fe fd33 	bl	8000dcc <__NVIC_EnableIRQ>
 8002366:	e08a      	b.n	800247e <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream1){
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a62      	ldr	r2, [pc, #392]	@ (80024f8 <DMA_Init+0x2fc>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d103      	bne.n	800237a <DMA_Init+0x17e>
            	NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002372:	200c      	movs	r0, #12
 8002374:	f7fe fd2a 	bl	8000dcc <__NVIC_EnableIRQ>
 8002378:	e081      	b.n	800247e <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream2){
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4a5f      	ldr	r2, [pc, #380]	@ (80024fc <DMA_Init+0x300>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d103      	bne.n	800238c <DMA_Init+0x190>
            	NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002384:	200d      	movs	r0, #13
 8002386:	f7fe fd21 	bl	8000dcc <__NVIC_EnableIRQ>
 800238a:	e078      	b.n	800247e <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream3){
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a5b      	ldr	r2, [pc, #364]	@ (8002500 <DMA_Init+0x304>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d103      	bne.n	800239e <DMA_Init+0x1a2>
            	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002396:	200e      	movs	r0, #14
 8002398:	f7fe fd18 	bl	8000dcc <__NVIC_EnableIRQ>
 800239c:	e06f      	b.n	800247e <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream4){
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4a58      	ldr	r2, [pc, #352]	@ (8002504 <DMA_Init+0x308>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d103      	bne.n	80023b0 <DMA_Init+0x1b4>
            	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80023a8:	200f      	movs	r0, #15
 80023aa:	f7fe fd0f 	bl	8000dcc <__NVIC_EnableIRQ>
 80023ae:	e066      	b.n	800247e <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream5){
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4a54      	ldr	r2, [pc, #336]	@ (8002508 <DMA_Init+0x30c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d103      	bne.n	80023c2 <DMA_Init+0x1c6>
            	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80023ba:	2010      	movs	r0, #16
 80023bc:	f7fe fd06 	bl	8000dcc <__NVIC_EnableIRQ>
 80023c0:	e05d      	b.n	800247e <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream6) {
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4a51      	ldr	r2, [pc, #324]	@ (800250c <DMA_Init+0x310>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d103      	bne.n	80023d4 <DMA_Init+0x1d8>
            	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80023cc:	2011      	movs	r0, #17
 80023ce:	f7fe fcfd 	bl	8000dcc <__NVIC_EnableIRQ>
 80023d2:	e054      	b.n	800247e <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream7){
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002510 <DMA_Init+0x314>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d14f      	bne.n	800247e <DMA_Init+0x282>
            	NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80023de:	202f      	movs	r0, #47	@ 0x2f
 80023e0:	f7fe fcf4 	bl	8000dcc <__NVIC_EnableIRQ>
 80023e4:	e04b      	b.n	800247e <DMA_Init+0x282>
            }
        }
        else if(config->Request.Controller == DMA2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a4a      	ldr	r2, [pc, #296]	@ (8002514 <DMA_Init+0x318>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d146      	bne.n	800247e <DMA_Init+0x282>
        {
            if(config->Request.Stream == DMA2_Stream0){
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a48      	ldr	r2, [pc, #288]	@ (8002518 <DMA_Init+0x31c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d103      	bne.n	8002402 <DMA_Init+0x206>
            	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80023fa:	2038      	movs	r0, #56	@ 0x38
 80023fc:	f7fe fce6 	bl	8000dcc <__NVIC_EnableIRQ>
 8002400:	e03d      	b.n	800247e <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream1){
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4a45      	ldr	r2, [pc, #276]	@ (800251c <DMA_Init+0x320>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d103      	bne.n	8002414 <DMA_Init+0x218>
            	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800240c:	2039      	movs	r0, #57	@ 0x39
 800240e:	f7fe fcdd 	bl	8000dcc <__NVIC_EnableIRQ>
 8002412:	e034      	b.n	800247e <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream2){
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4a41      	ldr	r2, [pc, #260]	@ (8002520 <DMA_Init+0x324>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d103      	bne.n	8002426 <DMA_Init+0x22a>
            	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800241e:	203a      	movs	r0, #58	@ 0x3a
 8002420:	f7fe fcd4 	bl	8000dcc <__NVIC_EnableIRQ>
 8002424:	e02b      	b.n	800247e <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream3){
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4a3e      	ldr	r2, [pc, #248]	@ (8002524 <DMA_Init+0x328>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d103      	bne.n	8002438 <DMA_Init+0x23c>
            	NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002430:	203b      	movs	r0, #59	@ 0x3b
 8002432:	f7fe fccb 	bl	8000dcc <__NVIC_EnableIRQ>
 8002436:	e022      	b.n	800247e <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream4){
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a3a      	ldr	r2, [pc, #232]	@ (8002528 <DMA_Init+0x32c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d103      	bne.n	800244a <DMA_Init+0x24e>
            	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002442:	203c      	movs	r0, #60	@ 0x3c
 8002444:	f7fe fcc2 	bl	8000dcc <__NVIC_EnableIRQ>
 8002448:	e019      	b.n	800247e <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream5){
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4a37      	ldr	r2, [pc, #220]	@ (800252c <DMA_Init+0x330>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d103      	bne.n	800245c <DMA_Init+0x260>
            	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002454:	2044      	movs	r0, #68	@ 0x44
 8002456:	f7fe fcb9 	bl	8000dcc <__NVIC_EnableIRQ>
 800245a:	e010      	b.n	800247e <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream6){
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a33      	ldr	r2, [pc, #204]	@ (8002530 <DMA_Init+0x334>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d103      	bne.n	800246e <DMA_Init+0x272>
            	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002466:	2045      	movs	r0, #69	@ 0x45
 8002468:	f7fe fcb0 	bl	8000dcc <__NVIC_EnableIRQ>
 800246c:	e007      	b.n	800247e <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream7){
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4a30      	ldr	r2, [pc, #192]	@ (8002534 <DMA_Init+0x338>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d102      	bne.n	800247e <DMA_Init+0x282>
//            	NVIC_SetPriority(DMA2_Stream7_IRQn,0);
            	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002478:	2046      	movs	r0, #70	@ 0x46
 800247a:	f7fe fca7 	bl	8000dcc <__NVIC_EnableIRQ>
            }
        }
    }

    // Configure memory and peripheral pointer increments
    config->Request.Stream->CR |= config->memory_pointer_increment;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	8c1b      	ldrh	r3, [r3, #32]
 8002488:	4619      	mov	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	430a      	orrs	r2, r1
 8002490:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_pointer_increment;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800249c:	4619      	mov	r1, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]

    // Configure circular mode
    if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d108      	bne.n	80024c4 <DMA_Init+0x2c8>
    {
        config->Request.Stream->CR |= DMA_SxCR_CIRC;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	e010      	b.n	80024e6 <DMA_Init+0x2ea>
    }
    else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2200      	movs	r2, #0
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d108      	bne.n	80024e0 <DMA_Init+0x2e4>
    {
        config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e002      	b.n	80024e6 <DMA_Init+0x2ea>
    }
    else
    {
        return -1;  // Return -1 if circular mode configuration is invalid
 80024e0:	f04f 33ff 	mov.w	r3, #4294967295
 80024e4:	e000      	b.n	80024e8 <DMA_Init+0x2ec>
    }

    return 1;  // Return 1 on successful initialization
 80024e6:	2301      	movs	r3, #1
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40026000 	.word	0x40026000
 80024f4:	40026010 	.word	0x40026010
 80024f8:	40026028 	.word	0x40026028
 80024fc:	40026040 	.word	0x40026040
 8002500:	40026058 	.word	0x40026058
 8002504:	40026070 	.word	0x40026070
 8002508:	40026088 	.word	0x40026088
 800250c:	400260a0 	.word	0x400260a0
 8002510:	400260b8 	.word	0x400260b8
 8002514:	40026400 	.word	0x40026400
 8002518:	40026410 	.word	0x40026410
 800251c:	40026428 	.word	0x40026428
 8002520:	40026440 	.word	0x40026440
 8002524:	40026458 	.word	0x40026458
 8002528:	40026470 	.word	0x40026470
 800252c:	40026488 	.word	0x40026488
 8002530:	400264a0 	.word	0x400264a0
 8002534:	400264b8 	.word	0x400264b8

08002538 <DMA_Set_Target>:
 * memory increment before applying the new settings.
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	config -> Request.Stream -> CR &= ~DMA_SxCR_EN;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

	if(config -> circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2200      	movs	r2, #0
 8002556:	4293      	cmp	r3, r2
 8002558:	d108      	bne.n	800256c <DMA_Set_Target+0x34>
	{
		config -> Request.Stream -> CR &= ~DMA_SxCR_CIRC;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e00d      	b.n	8002588 <DMA_Set_Target+0x50>
	}
	else if(config -> circular_mode == DMA_Configuration.Circular_Mode.Enable)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002574:	4293      	cmp	r3, r2
 8002576:	d107      	bne.n	8002588 <DMA_Set_Target+0x50>
	{
		config -> Request.Stream -> CR |= DMA_SxCR_CIRC;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002586:	601a      	str	r2, [r3, #0]
	}

    // Clear previous data size and memory increment settings
    config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8002596:	601a      	str	r2, [r3, #0]

    // Set the peripheral data size
    config -> Request.Stream -> CR |= config -> peripheral_data_size;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]

    // Set the memory data size
    config -> Request.Stream -> CR |= config -> memory_data_size;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	6819      	ldr	r1, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

    // Set the number of data items to be transferred
    config -> Request.Stream -> NDTR = config -> buffer_length;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	605a      	str	r2, [r3, #4]

    // Set memory pointer increment mode
    config -> Request.Stream -> CR |= DMA_SxCR_MINC;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025d4:	601a      	str	r2, [r3, #0]

    // Set the memory address
    config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025de:	60da      	str	r2, [r3, #12]

    // Set the peripheral address
    config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80025e8:	609a      	str	r2, [r3, #8]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <DMA_Set_Trigger>:
 * number and the DMA controller (DMA1 or DMA2).
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the configuration settings.
 */
void DMA_Set_Trigger(DMA_Config *config)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
    // Bit shift values for streams 0 to 7
    static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
    static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

    DMA_TypeDef *controller = config->Request.Controller;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	617b      	str	r3, [r7, #20]
    DMA_Stream_TypeDef *stream = config->Request.Stream;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	613b      	str	r3, [r7, #16]
    uint32_t shift;

    if (controller == DMA1 || controller == DMA2)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	4a43      	ldr	r2, [pc, #268]	@ (800271c <DMA_Set_Trigger+0x124>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d003      	beq.n	800261c <DMA_Set_Trigger+0x24>
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	4a42      	ldr	r2, [pc, #264]	@ (8002720 <DMA_Set_Trigger+0x128>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d178      	bne.n	800270e <DMA_Set_Trigger+0x116>
    {
        // Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
        if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4a41      	ldr	r2, [pc, #260]	@ (8002724 <DMA_Set_Trigger+0x12c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d918      	bls.n	8002656 <DMA_Set_Trigger+0x5e>
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4a40      	ldr	r2, [pc, #256]	@ (8002728 <DMA_Set_Trigger+0x130>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d814      	bhi.n	8002656 <DMA_Set_Trigger+0x5e>
        {
            shift = LIFCR_Shifts[stream - DMA1_Stream0];
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4b3f      	ldr	r3, [pc, #252]	@ (800272c <DMA_Set_Trigger+0x134>)
 8002630:	4413      	add	r3, r2
 8002632:	10db      	asrs	r3, r3, #3
 8002634:	4a3e      	ldr	r2, [pc, #248]	@ (8002730 <DMA_Set_Trigger+0x138>)
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	461a      	mov	r2, r3
 800263c:	4b3d      	ldr	r3, [pc, #244]	@ (8002734 <DMA_Set_Trigger+0x13c>)
 800263e:	5c9b      	ldrb	r3, [r3, r2]
 8002640:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	213f      	movs	r1, #63	@ 0x3f
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	fa01 f202 	lsl.w	r2, r1, r2
 800264e:	431a      	orrs	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	e055      	b.n	8002702 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4a37      	ldr	r2, [pc, #220]	@ (8002738 <DMA_Set_Trigger+0x140>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d918      	bls.n	8002690 <DMA_Set_Trigger+0x98>
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4a36      	ldr	r2, [pc, #216]	@ (800273c <DMA_Set_Trigger+0x144>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d814      	bhi.n	8002690 <DMA_Set_Trigger+0x98>
        {
            shift = HIFCR_Shifts[stream - DMA1_Stream4];
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4b35      	ldr	r3, [pc, #212]	@ (8002740 <DMA_Set_Trigger+0x148>)
 800266a:	4413      	add	r3, r2
 800266c:	10db      	asrs	r3, r3, #3
 800266e:	4a30      	ldr	r2, [pc, #192]	@ (8002730 <DMA_Set_Trigger+0x138>)
 8002670:	fb02 f303 	mul.w	r3, r2, r3
 8002674:	461a      	mov	r2, r3
 8002676:	4b33      	ldr	r3, [pc, #204]	@ (8002744 <DMA_Set_Trigger+0x14c>)
 8002678:	5c9b      	ldrb	r3, [r3, r2]
 800267a:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	213f      	movs	r1, #63	@ 0x3f
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	fa01 f202 	lsl.w	r2, r1, r2
 8002688:	431a      	orrs	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	e038      	b.n	8002702 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4a2d      	ldr	r2, [pc, #180]	@ (8002748 <DMA_Set_Trigger+0x150>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d918      	bls.n	80026ca <DMA_Set_Trigger+0xd2>
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4a2c      	ldr	r2, [pc, #176]	@ (800274c <DMA_Set_Trigger+0x154>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d814      	bhi.n	80026ca <DMA_Set_Trigger+0xd2>
        {
            shift = LIFCR_Shifts[stream - DMA2_Stream0];
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002750 <DMA_Set_Trigger+0x158>)
 80026a4:	4413      	add	r3, r2
 80026a6:	10db      	asrs	r3, r3, #3
 80026a8:	4a21      	ldr	r2, [pc, #132]	@ (8002730 <DMA_Set_Trigger+0x138>)
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	4b20      	ldr	r3, [pc, #128]	@ (8002734 <DMA_Set_Trigger+0x13c>)
 80026b2:	5c9b      	ldrb	r3, [r3, r2]
 80026b4:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	213f      	movs	r1, #63	@ 0x3f
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	fa01 f202 	lsl.w	r2, r1, r2
 80026c2:	431a      	orrs	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	e01b      	b.n	8002702 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4a21      	ldr	r2, [pc, #132]	@ (8002754 <DMA_Set_Trigger+0x15c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d917      	bls.n	8002702 <DMA_Set_Trigger+0x10a>
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4a20      	ldr	r2, [pc, #128]	@ (8002758 <DMA_Set_Trigger+0x160>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d813      	bhi.n	8002702 <DMA_Set_Trigger+0x10a>
        {
            shift = HIFCR_Shifts[stream - DMA2_Stream4];
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4b1f      	ldr	r3, [pc, #124]	@ (800275c <DMA_Set_Trigger+0x164>)
 80026de:	4413      	add	r3, r2
 80026e0:	10db      	asrs	r3, r3, #3
 80026e2:	4a13      	ldr	r2, [pc, #76]	@ (8002730 <DMA_Set_Trigger+0x138>)
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b16      	ldr	r3, [pc, #88]	@ (8002744 <DMA_Set_Trigger+0x14c>)
 80026ec:	5c9b      	ldrb	r3, [r3, r2]
 80026ee:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	213f      	movs	r1, #63	@ 0x3f
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	fa01 f202 	lsl.w	r2, r1, r2
 80026fc:	431a      	orrs	r2, r3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	60da      	str	r2, [r3, #12]
        }

        stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f043 0201 	orr.w	r2, r3, #1
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	601a      	str	r2, [r3, #0]
    }
}
 800270e:	bf00      	nop
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40026000 	.word	0x40026000
 8002720:	40026400 	.word	0x40026400
 8002724:	4002600f 	.word	0x4002600f
 8002728:	40026058 	.word	0x40026058
 800272c:	bffd9ff0 	.word	0xbffd9ff0
 8002730:	aaaaaaab 	.word	0xaaaaaaab
 8002734:	08005b1c 	.word	0x08005b1c
 8002738:	4002606f 	.word	0x4002606f
 800273c:	400260b8 	.word	0x400260b8
 8002740:	bffd9f90 	.word	0xbffd9f90
 8002744:	08005b20 	.word	0x08005b20
 8002748:	4002640f 	.word	0x4002640f
 800274c:	40026458 	.word	0x40026458
 8002750:	bffd9bf0 	.word	0xbffd9bf0
 8002754:	4002646f 	.word	0x4002646f
 8002758:	400264b8 	.word	0x400264b8
 800275c:	bffd9b90 	.word	0xbffd9b90

08002760 <GPIO_Clock_Enable>:
 * @brief  Enables the clock for a specific GPIO port.
 * @param  PORT: Pointer to GPIO port base address.
 * @retval 0 on success, -1 on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a25      	ldr	r2, [pc, #148]	@ (8002800 <GPIO_Clock_Enable+0xa0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d106      	bne.n	800277e <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8002770:	4b24      	ldr	r3, [pc, #144]	@ (8002804 <GPIO_Clock_Enable+0xa4>)
 8002772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002774:	4a23      	ldr	r2, [pc, #140]	@ (8002804 <GPIO_Clock_Enable+0xa4>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6313      	str	r3, [r2, #48]	@ 0x30
 800277c:	e039      	b.n	80027f2 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a21      	ldr	r2, [pc, #132]	@ (8002808 <GPIO_Clock_Enable+0xa8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d106      	bne.n	8002794 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 8002786:	4b1f      	ldr	r3, [pc, #124]	@ (8002804 <GPIO_Clock_Enable+0xa4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	4a1e      	ldr	r2, [pc, #120]	@ (8002804 <GPIO_Clock_Enable+0xa4>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	6313      	str	r3, [r2, #48]	@ 0x30
 8002792:	e02e      	b.n	80027f2 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a1d      	ldr	r2, [pc, #116]	@ (800280c <GPIO_Clock_Enable+0xac>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d106      	bne.n	80027aa <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 800279c:	4b19      	ldr	r3, [pc, #100]	@ (8002804 <GPIO_Clock_Enable+0xa4>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a0:	4a18      	ldr	r2, [pc, #96]	@ (8002804 <GPIO_Clock_Enable+0xa4>)
 80027a2:	f043 0304 	orr.w	r3, r3, #4
 80027a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a8:	e023      	b.n	80027f2 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a18      	ldr	r2, [pc, #96]	@ (8002810 <GPIO_Clock_Enable+0xb0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d106      	bne.n	80027c0 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 80027b2:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <GPIO_Clock_Enable+0xa4>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	4a13      	ldr	r2, [pc, #76]	@ (8002804 <GPIO_Clock_Enable+0xa4>)
 80027b8:	f043 0308 	orr.w	r3, r3, #8
 80027bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027be:	e018      	b.n	80027f2 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a14      	ldr	r2, [pc, #80]	@ (8002814 <GPIO_Clock_Enable+0xb4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d106      	bne.n	80027d6 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 80027c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <GPIO_Clock_Enable+0xa4>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002804 <GPIO_Clock_Enable+0xa4>)
 80027ce:	f043 0310 	orr.w	r3, r3, #16
 80027d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d4:	e00d      	b.n	80027f2 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002818 <GPIO_Clock_Enable+0xb8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d106      	bne.n	80027ec <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 80027de:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <GPIO_Clock_Enable+0xa4>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	4a08      	ldr	r2, [pc, #32]	@ (8002804 <GPIO_Clock_Enable+0xa4>)
 80027e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ea:	e002      	b.n	80027f2 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 80027ec:	f04f 33ff 	mov.w	r3, #4294967295
 80027f0:	e000      	b.n	80027f4 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 80027f2:	2301      	movs	r3, #1
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40020000 	.word	0x40020000
 8002804:	40023800 	.word	0x40023800
 8002808:	40020400 	.word	0x40020400
 800280c:	40020800 	.word	0x40020800
 8002810:	40020c00 	.word	0x40020c00
 8002814:	40021000 	.word	0x40021000
 8002818:	40021c00 	.word	0x40021c00

0800281c <GPIO_Pin_Init>:
 * @param  speed: Speed level (low, medium, high, very high).
 * @param  pull: Pull-up/pull-down configuration (none, pull-up, pull-down).
 * @param  alternate_function: Alternate function selection (0-15).
 */
void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	4608      	mov	r0, r1
 8002826:	4611      	mov	r1, r2
 8002828:	461a      	mov	r2, r3
 800282a:	4603      	mov	r3, r0
 800282c:	70fb      	strb	r3, [r7, #3]
 800282e:	460b      	mov	r3, r1
 8002830:	70bb      	strb	r3, [r7, #2]
 8002832:	4613      	mov	r3, r2
 8002834:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff ff92 	bl	8002760 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	78b9      	ldrb	r1, [r7, #2]
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	0052      	lsls	r2, r2, #1
 8002846:	fa01 f202 	lsl.w	r2, r1, r2
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	601a      	str	r2, [r3, #0]

	if(output_type != GPIO_Configuration.Output_Type.None) Port -> OTYPER |= output_type << pin;
 8002850:	2202      	movs	r2, #2
 8002852:	787b      	ldrb	r3, [r7, #1]
 8002854:	4293      	cmp	r3, r2
 8002856:	d008      	beq.n	800286a <GPIO_Pin_Init+0x4e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	7879      	ldrb	r1, [r7, #1]
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	fa01 f202 	lsl.w	r2, r1, r2
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	605a      	str	r2, [r3, #4]
	if(speed != GPIO_Configuration.Speed.None) Port -> OSPEEDR |= speed << (pin*2);
 800286a:	2204      	movs	r2, #4
 800286c:	7c3b      	ldrb	r3, [r7, #16]
 800286e:	4293      	cmp	r3, r2
 8002870:	d009      	beq.n	8002886 <GPIO_Pin_Init+0x6a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	7c39      	ldrb	r1, [r7, #16]
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	0052      	lsls	r2, r2, #1
 800287c:	fa01 f202 	lsl.w	r2, r1, r2
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	609a      	str	r2, [r3, #8]
	if(pull != GPIO_Configuration.Pull.None) Port -> PUPDR |= pull << (pin*2);
 8002886:	2204      	movs	r2, #4
 8002888:	7d3b      	ldrb	r3, [r7, #20]
 800288a:	4293      	cmp	r3, r2
 800288c:	d009      	beq.n	80028a2 <GPIO_Pin_Init+0x86>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	7d39      	ldrb	r1, [r7, #20]
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	0052      	lsls	r2, r2, #1
 8002898:	fa01 f202 	lsl.w	r2, r1, r2
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	2b07      	cmp	r3, #7
 80028a6:	d80a      	bhi.n	80028be <GPIO_Pin_Init+0xa2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	7e39      	ldrb	r1, [r7, #24]
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	0092      	lsls	r2, r2, #2
 80028b2:	fa01 f202 	lsl.w	r2, r1, r2
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 80028bc:	e00a      	b.n	80028d4 <GPIO_Pin_Init+0xb8>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	7e39      	ldrb	r1, [r7, #24]
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	3a08      	subs	r2, #8
 80028c8:	0092      	lsls	r2, r2, #2
 80028ca:	fa01 f202 	lsl.w	r2, r1, r2
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <__NVIC_EnableIRQ>:
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	db0b      	blt.n	8002906 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	f003 021f 	and.w	r2, r3, #31
 80028f4:	4907      	ldr	r1, [pc, #28]	@ (8002914 <__NVIC_EnableIRQ+0x38>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2001      	movs	r0, #1
 80028fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000e100 	.word	0xe000e100

08002918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	2b00      	cmp	r3, #0
 800292a:	db0a      	blt.n	8002942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	490c      	ldr	r1, [pc, #48]	@ (8002964 <__NVIC_SetPriority+0x4c>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	0112      	lsls	r2, r2, #4
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	440b      	add	r3, r1
 800293c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002940:	e00a      	b.n	8002958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4908      	ldr	r1, [pc, #32]	@ (8002968 <__NVIC_SetPriority+0x50>)
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	3b04      	subs	r3, #4
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	440b      	add	r3, r1
 8002956:	761a      	strb	r2, [r3, #24]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE	void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	ed87 0b02 	vstr	d0, [r7, #8]
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 800297a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800297e:	f7fe f8fd 	bl	8000b7c <__aeabi_d2lz>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	f7fd fe07 	bl	800059c <__aeabi_l2d>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	6839      	ldr	r1, [r7, #0]
 8002994:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029a2:	f7fd fc71 	bl	8000288 <__aeabi_dsub>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	e9c1 2300 	strd	r2, r3, [r1]
}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <Get_USART_Instance_Number>:
DMA_Config xUSART_TX[6];

int8_t usart_dma_instance_number;

static int8_t Get_USART_Instance_Number(USART_Config *config)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1) {return 0;}
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a17      	ldr	r2, [pc, #92]	@ (8002a24 <Get_USART_Instance_Number+0x6c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d101      	bne.n	80029ce <Get_USART_Instance_Number+0x16>
 80029ca:	2300      	movs	r3, #0
 80029cc:	e024      	b.n	8002a18 <Get_USART_Instance_Number+0x60>
	else if(config->Port == USART2) {return 1;}
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a15      	ldr	r2, [pc, #84]	@ (8002a28 <Get_USART_Instance_Number+0x70>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d101      	bne.n	80029dc <Get_USART_Instance_Number+0x24>
 80029d8:	2301      	movs	r3, #1
 80029da:	e01d      	b.n	8002a18 <Get_USART_Instance_Number+0x60>
	else if(config->Port == USART3) {return 2;}
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a12      	ldr	r2, [pc, #72]	@ (8002a2c <Get_USART_Instance_Number+0x74>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <Get_USART_Instance_Number+0x32>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e016      	b.n	8002a18 <Get_USART_Instance_Number+0x60>
	else if(config->Port == UART4) {return 3;}
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a10      	ldr	r2, [pc, #64]	@ (8002a30 <Get_USART_Instance_Number+0x78>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <Get_USART_Instance_Number+0x40>
 80029f4:	2303      	movs	r3, #3
 80029f6:	e00f      	b.n	8002a18 <Get_USART_Instance_Number+0x60>
	else if(config->Port == UART5) {return 4;}
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a34 <Get_USART_Instance_Number+0x7c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d101      	bne.n	8002a06 <Get_USART_Instance_Number+0x4e>
 8002a02:	2304      	movs	r3, #4
 8002a04:	e008      	b.n	8002a18 <Get_USART_Instance_Number+0x60>
	else if(config->Port == USART6) {return 5;}
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002a38 <Get_USART_Instance_Number+0x80>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <Get_USART_Instance_Number+0x5c>
 8002a10:	2305      	movs	r3, #5
 8002a12:	e001      	b.n	8002a18 <Get_USART_Instance_Number+0x60>
	else {return -1;}
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	40011000 	.word	0x40011000
 8002a28:	40004400 	.word	0x40004400
 8002a2c:	40004800 	.word	0x40004800
 8002a30:	40004c00 	.word	0x40004c00
 8002a34:	40005000 	.word	0x40005000
 8002a38:	40011400 	.word	0x40011400

08002a3c <USART_Config_Reset>:

void USART_Config_Reset(USART_Config *config)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	config->mode = USART_Configuration.Mode.Disable;
 8002a44:	2200      	movs	r2, #0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	721a      	strb	r2, [r3, #8]
	config->hardware_flow = USART_Configuration.Hardware_Flow.Disable;
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	73da      	strb	r2, [r3, #15]
	config->baudrate = 9600;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a56:	605a      	str	r2, [r3, #4]
	config->dma_enable = USART_Configuration.DMA_Enable.RX_Disable | USART_Configuration.DMA_Enable.TX_Disable;
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	745a      	strb	r2, [r3, #17]
	config->interrupt = USART_Configuration.Interrupt_Type.Disable;
 8002a64:	2300      	movs	r3, #0
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	739a      	strb	r2, [r3, #14]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a27      	ldr	r2, [pc, #156]	@ (8002b24 <USART_Clock_Enable+0xac>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d106      	bne.n	8002a98 <USART_Clock_Enable+0x20>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8002a8a:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <USART_Clock_Enable+0xb0>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	4a26      	ldr	r2, [pc, #152]	@ (8002b28 <USART_Clock_Enable+0xb0>)
 8002a90:	f043 0310 	orr.w	r3, r3, #16
 8002a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a96:	e03e      	b.n	8002b16 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a23      	ldr	r2, [pc, #140]	@ (8002b2c <USART_Clock_Enable+0xb4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d106      	bne.n	8002ab0 <USART_Clock_Enable+0x38>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8002aa2:	4b21      	ldr	r3, [pc, #132]	@ (8002b28 <USART_Clock_Enable+0xb0>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	4a20      	ldr	r2, [pc, #128]	@ (8002b28 <USART_Clock_Enable+0xb0>)
 8002aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aae:	e032      	b.n	8002b16 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART3)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b30 <USART_Clock_Enable+0xb8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d106      	bne.n	8002ac8 <USART_Clock_Enable+0x50>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 8002aba:	4b1b      	ldr	r3, [pc, #108]	@ (8002b28 <USART_Clock_Enable+0xb0>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4a1a      	ldr	r2, [pc, #104]	@ (8002b28 <USART_Clock_Enable+0xb0>)
 8002ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac6:	e026      	b.n	8002b16 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART4)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a19      	ldr	r2, [pc, #100]	@ (8002b34 <USART_Clock_Enable+0xbc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d106      	bne.n	8002ae0 <USART_Clock_Enable+0x68>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8002ad2:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <USART_Clock_Enable+0xb0>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	4a14      	ldr	r2, [pc, #80]	@ (8002b28 <USART_Clock_Enable+0xb0>)
 8002ad8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ade:	e01a      	b.n	8002b16 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART5)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a14      	ldr	r2, [pc, #80]	@ (8002b38 <USART_Clock_Enable+0xc0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d106      	bne.n	8002af8 <USART_Clock_Enable+0x80>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 8002aea:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <USART_Clock_Enable+0xb0>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	4a0e      	ldr	r2, [pc, #56]	@ (8002b28 <USART_Clock_Enable+0xb0>)
 8002af0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002af6:	e00e      	b.n	8002b16 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART6)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0f      	ldr	r2, [pc, #60]	@ (8002b3c <USART_Clock_Enable+0xc4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d106      	bne.n	8002b10 <USART_Clock_Enable+0x98>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8002b02:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <USART_Clock_Enable+0xb0>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b06:	4a08      	ldr	r2, [pc, #32]	@ (8002b28 <USART_Clock_Enable+0xb0>)
 8002b08:	f043 0320 	orr.w	r3, r3, #32
 8002b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b0e:	e002      	b.n	8002b16 <USART_Clock_Enable+0x9e>
	}
	else
	{
		return -1;
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295
 8002b14:	e000      	b.n	8002b18 <USART_Clock_Enable+0xa0>
	}
	return 1;
 8002b16:	2301      	movs	r3, #1
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	40011000 	.word	0x40011000
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40004400 	.word	0x40004400
 8002b30:	40004800 	.word	0x40004800
 8002b34:	40004c00 	.word	0x40004c00
 8002b38:	40005000 	.word	0x40005000
 8002b3c:	40011400 	.word	0x40011400

08002b40 <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 8002b40:	b5b0      	push	{r4, r5, r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af04      	add	r7, sp, #16
 8002b46:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4aa0      	ldr	r2, [pc, #640]	@ (8002dd0 <PIN_Setup+0x290>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	f040 810d 	bne.w	8002d6e <PIN_Setup+0x22e>
	{
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	7a1b      	ldrb	r3, [r3, #8]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00f      	beq.n	8002b7e <PIN_Setup+0x3e>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	7a1b      	ldrb	r3, [r3, #8]
 8002b62:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00a      	beq.n	8002b7e <PIN_Setup+0x3e>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	7a1b      	ldrb	r3, [r3, #8]
 8002b6c:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d005      	beq.n	8002b7e <PIN_Setup+0x3e>
		   (config->mode == USART_Configuration.Mode.LIN) )
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7a1b      	ldrb	r3, [r3, #8]
 8002b76:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	f040 80be 	bne.w	8002cfa <PIN_Setup+0x1ba>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7a5b      	ldrb	r3, [r3, #9]
 8002b82:	2209      	movs	r2, #9
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d10f      	bne.n	8002ba8 <PIN_Setup+0x68>
 8002b88:	2009      	movs	r0, #9
 8002b8a:	2402      	movs	r4, #2
 8002b8c:	2500      	movs	r5, #0
 8002b8e:	2302      	movs	r3, #2
 8002b90:	2200      	movs	r2, #0
 8002b92:	2107      	movs	r1, #7
 8002b94:	9102      	str	r1, [sp, #8]
 8002b96:	9201      	str	r2, [sp, #4]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	462b      	mov	r3, r5
 8002b9c:	4622      	mov	r2, r4
 8002b9e:	4601      	mov	r1, r0
 8002ba0:	488c      	ldr	r0, [pc, #560]	@ (8002dd4 <PIN_Setup+0x294>)
 8002ba2:	f7ff fe3b 	bl	800281c <GPIO_Pin_Init>
 8002ba6:	e013      	b.n	8002bd0 <PIN_Setup+0x90>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7a5b      	ldrb	r3, [r3, #9]
 8002bac:	2206      	movs	r2, #6
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d10e      	bne.n	8002bd0 <PIN_Setup+0x90>
 8002bb2:	2006      	movs	r0, #6
 8002bb4:	2402      	movs	r4, #2
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	2302      	movs	r3, #2
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2107      	movs	r1, #7
 8002bbe:	9102      	str	r1, [sp, #8]
 8002bc0:	9201      	str	r2, [sp, #4]
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	462b      	mov	r3, r5
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	4601      	mov	r1, r0
 8002bca:	4883      	ldr	r0, [pc, #524]	@ (8002dd8 <PIN_Setup+0x298>)
 8002bcc:	f7ff fe26 	bl	800281c <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	7a9b      	ldrb	r3, [r3, #10]
 8002bd4:	220a      	movs	r2, #10
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d10f      	bne.n	8002bfa <PIN_Setup+0xba>
 8002bda:	200a      	movs	r0, #10
 8002bdc:	2402      	movs	r4, #2
 8002bde:	2500      	movs	r5, #0
 8002be0:	2302      	movs	r3, #2
 8002be2:	2200      	movs	r2, #0
 8002be4:	2107      	movs	r1, #7
 8002be6:	9102      	str	r1, [sp, #8]
 8002be8:	9201      	str	r2, [sp, #4]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	462b      	mov	r3, r5
 8002bee:	4622      	mov	r2, r4
 8002bf0:	4601      	mov	r1, r0
 8002bf2:	4878      	ldr	r0, [pc, #480]	@ (8002dd4 <PIN_Setup+0x294>)
 8002bf4:	f7ff fe12 	bl	800281c <GPIO_Pin_Init>
 8002bf8:	e013      	b.n	8002c22 <PIN_Setup+0xe2>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	7a9b      	ldrb	r3, [r3, #10]
 8002bfe:	2207      	movs	r2, #7
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d10e      	bne.n	8002c22 <PIN_Setup+0xe2>
 8002c04:	2007      	movs	r0, #7
 8002c06:	2402      	movs	r4, #2
 8002c08:	2500      	movs	r5, #0
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2107      	movs	r1, #7
 8002c10:	9102      	str	r1, [sp, #8]
 8002c12:	9201      	str	r2, [sp, #4]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	462b      	mov	r3, r5
 8002c18:	4622      	mov	r2, r4
 8002c1a:	4601      	mov	r1, r0
 8002c1c:	486e      	ldr	r0, [pc, #440]	@ (8002dd8 <PIN_Setup+0x298>)
 8002c1e:	f7ff fdfd 	bl	800281c <GPIO_Pin_Init>

			if((config->mode == USART_Configuration.Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7a1b      	ldrb	r3, [r3, #8]
 8002c26:	2202      	movs	r2, #2
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d113      	bne.n	8002c54 <PIN_Setup+0x114>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7adb      	ldrb	r3, [r3, #11]
 8002c30:	2208      	movs	r2, #8
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d10e      	bne.n	8002c54 <PIN_Setup+0x114>
 8002c36:	2008      	movs	r0, #8
 8002c38:	2402      	movs	r4, #2
 8002c3a:	2500      	movs	r5, #0
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2107      	movs	r1, #7
 8002c42:	9102      	str	r1, [sp, #8]
 8002c44:	9201      	str	r2, [sp, #4]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	462b      	mov	r3, r5
 8002c4a:	4622      	mov	r2, r4
 8002c4c:	4601      	mov	r1, r0
 8002c4e:	4861      	ldr	r0, [pc, #388]	@ (8002dd4 <PIN_Setup+0x294>)
 8002c50:	f7ff fde4 	bl	800281c <GPIO_Pin_Init>

			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7bdb      	ldrb	r3, [r3, #15]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	f000 8424 	beq.w	80034a8 <PIN_Setup+0x968>
			{
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7bdb      	ldrb	r3, [r3, #15]
 8002c64:	2201      	movs	r2, #1
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d10e      	bne.n	8002c88 <PIN_Setup+0x148>
 8002c6a:	200b      	movs	r0, #11
 8002c6c:	2402      	movs	r4, #2
 8002c6e:	2500      	movs	r5, #0
 8002c70:	2302      	movs	r3, #2
 8002c72:	2200      	movs	r2, #0
 8002c74:	2107      	movs	r1, #7
 8002c76:	9102      	str	r1, [sp, #8]
 8002c78:	9201      	str	r2, [sp, #4]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	462b      	mov	r3, r5
 8002c7e:	4622      	mov	r2, r4
 8002c80:	4601      	mov	r1, r0
 8002c82:	4854      	ldr	r0, [pc, #336]	@ (8002dd4 <PIN_Setup+0x294>)
 8002c84:	f7ff fdca 	bl	800281c <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7bdb      	ldrb	r3, [r3, #15]
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d10e      	bne.n	8002cb0 <PIN_Setup+0x170>
 8002c92:	200c      	movs	r0, #12
 8002c94:	2402      	movs	r4, #2
 8002c96:	2500      	movs	r5, #0
 8002c98:	2302      	movs	r3, #2
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2107      	movs	r1, #7
 8002c9e:	9102      	str	r1, [sp, #8]
 8002ca0:	9201      	str	r2, [sp, #4]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	462b      	mov	r3, r5
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	4601      	mov	r1, r0
 8002caa:	484a      	ldr	r0, [pc, #296]	@ (8002dd4 <PIN_Setup+0x294>)
 8002cac:	f7ff fdb6 	bl	800281c <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	7bdb      	ldrb	r3, [r3, #15]
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	f040 83f6 	bne.w	80034a8 <PIN_Setup+0x968>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002cbc:	200b      	movs	r0, #11
 8002cbe:	2402      	movs	r4, #2
 8002cc0:	2500      	movs	r5, #0
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2107      	movs	r1, #7
 8002cc8:	9102      	str	r1, [sp, #8]
 8002cca:	9201      	str	r2, [sp, #4]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	462b      	mov	r3, r5
 8002cd0:	4622      	mov	r2, r4
 8002cd2:	4601      	mov	r1, r0
 8002cd4:	483f      	ldr	r0, [pc, #252]	@ (8002dd4 <PIN_Setup+0x294>)
 8002cd6:	f7ff fda1 	bl	800281c <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002cda:	200c      	movs	r0, #12
 8002cdc:	2402      	movs	r4, #2
 8002cde:	2500      	movs	r5, #0
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2107      	movs	r1, #7
 8002ce6:	9102      	str	r1, [sp, #8]
 8002ce8:	9201      	str	r2, [sp, #4]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	462b      	mov	r3, r5
 8002cee:	4622      	mov	r2, r4
 8002cf0:	4601      	mov	r1, r0
 8002cf2:	4838      	ldr	r0, [pc, #224]	@ (8002dd4 <PIN_Setup+0x294>)
 8002cf4:	f7ff fd92 	bl	800281c <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8002cf8:	e3d6      	b.n	80034a8 <PIN_Setup+0x968>
				}
		    }
		}
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7a1b      	ldrb	r3, [r3, #8]
 8002cfe:	2206      	movs	r2, #6
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00a      	beq.n	8002d1a <PIN_Setup+0x1da>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	7a1b      	ldrb	r3, [r3, #8]
 8002d08:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d005      	beq.n	8002d1a <PIN_Setup+0x1da>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	7a1b      	ldrb	r3, [r3, #8]
 8002d12:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8002d14:	4293      	cmp	r3, r2
 8002d16:	f040 83cc 	bne.w	80034b2 <PIN_Setup+0x972>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	7a5b      	ldrb	r3, [r3, #9]
 8002d1e:	2209      	movs	r2, #9
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d10e      	bne.n	8002d42 <PIN_Setup+0x202>
 8002d24:	2009      	movs	r0, #9
 8002d26:	2402      	movs	r4, #2
 8002d28:	2500      	movs	r5, #0
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2107      	movs	r1, #7
 8002d30:	9102      	str	r1, [sp, #8]
 8002d32:	9201      	str	r2, [sp, #4]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	462b      	mov	r3, r5
 8002d38:	4622      	mov	r2, r4
 8002d3a:	4601      	mov	r1, r0
 8002d3c:	4825      	ldr	r0, [pc, #148]	@ (8002dd4 <PIN_Setup+0x294>)
 8002d3e:	f7ff fd6d 	bl	800281c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	7a1b      	ldrb	r3, [r3, #8]
 8002d46:	2207      	movs	r2, #7
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	f040 83b2 	bne.w	80034b2 <PIN_Setup+0x972>
 8002d4e:	2008      	movs	r0, #8
 8002d50:	2402      	movs	r4, #2
 8002d52:	2500      	movs	r5, #0
 8002d54:	2302      	movs	r3, #2
 8002d56:	2200      	movs	r2, #0
 8002d58:	2107      	movs	r1, #7
 8002d5a:	9102      	str	r1, [sp, #8]
 8002d5c:	9201      	str	r2, [sp, #4]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	462b      	mov	r3, r5
 8002d62:	4622      	mov	r2, r4
 8002d64:	4601      	mov	r1, r0
 8002d66:	481b      	ldr	r0, [pc, #108]	@ (8002dd4 <PIN_Setup+0x294>)
 8002d68:	f7ff fd58 	bl	800281c <GPIO_Pin_Init>
//
//		}
//	}


}
 8002d6c:	e3a1      	b.n	80034b2 <PIN_Setup+0x972>
	else if(config->Port == USART2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1a      	ldr	r2, [pc, #104]	@ (8002ddc <PIN_Setup+0x29c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	f040 817b 	bne.w	8003070 <PIN_Setup+0x530>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	7a1b      	ldrb	r3, [r3, #8]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00f      	beq.n	8002da4 <PIN_Setup+0x264>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	7a1b      	ldrb	r3, [r3, #8]
 8002d88:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00a      	beq.n	8002da4 <PIN_Setup+0x264>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	7a1b      	ldrb	r3, [r3, #8]
 8002d92:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d005      	beq.n	8002da4 <PIN_Setup+0x264>
		   (config->mode == USART_Configuration.Mode.LIN) )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7a1b      	ldrb	r3, [r3, #8]
 8002d9c:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	f040 80f8 	bne.w	8002f94 <PIN_Setup+0x454>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7a5b      	ldrb	r3, [r3, #9]
 8002da8:	2202      	movs	r2, #2
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d118      	bne.n	8002de0 <PIN_Setup+0x2a0>
 8002dae:	2002      	movs	r0, #2
 8002db0:	2402      	movs	r4, #2
 8002db2:	2500      	movs	r5, #0
 8002db4:	2302      	movs	r3, #2
 8002db6:	2200      	movs	r2, #0
 8002db8:	2107      	movs	r1, #7
 8002dba:	9102      	str	r1, [sp, #8]
 8002dbc:	9201      	str	r2, [sp, #4]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	462b      	mov	r3, r5
 8002dc2:	4622      	mov	r2, r4
 8002dc4:	4601      	mov	r1, r0
 8002dc6:	4803      	ldr	r0, [pc, #12]	@ (8002dd4 <PIN_Setup+0x294>)
 8002dc8:	f7ff fd28 	bl	800281c <GPIO_Pin_Init>
 8002dcc:	e01c      	b.n	8002e08 <PIN_Setup+0x2c8>
 8002dce:	bf00      	nop
 8002dd0:	40011000 	.word	0x40011000
 8002dd4:	40020000 	.word	0x40020000
 8002dd8:	40020400 	.word	0x40020400
 8002ddc:	40004400 	.word	0x40004400
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	7a5b      	ldrb	r3, [r3, #9]
 8002de4:	2205      	movs	r2, #5
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10e      	bne.n	8002e08 <PIN_Setup+0x2c8>
 8002dea:	2005      	movs	r0, #5
 8002dec:	2402      	movs	r4, #2
 8002dee:	2500      	movs	r5, #0
 8002df0:	2302      	movs	r3, #2
 8002df2:	2200      	movs	r2, #0
 8002df4:	2107      	movs	r1, #7
 8002df6:	9102      	str	r1, [sp, #8]
 8002df8:	9201      	str	r2, [sp, #4]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	462b      	mov	r3, r5
 8002dfe:	4622      	mov	r2, r4
 8002e00:	4601      	mov	r1, r0
 8002e02:	4899      	ldr	r0, [pc, #612]	@ (8003068 <PIN_Setup+0x528>)
 8002e04:	f7ff fd0a 	bl	800281c <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	7a9b      	ldrb	r3, [r3, #10]
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d10f      	bne.n	8002e32 <PIN_Setup+0x2f2>
 8002e12:	2003      	movs	r0, #3
 8002e14:	2402      	movs	r4, #2
 8002e16:	2500      	movs	r5, #0
 8002e18:	2302      	movs	r3, #2
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2107      	movs	r1, #7
 8002e1e:	9102      	str	r1, [sp, #8]
 8002e20:	9201      	str	r2, [sp, #4]
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	462b      	mov	r3, r5
 8002e26:	4622      	mov	r2, r4
 8002e28:	4601      	mov	r1, r0
 8002e2a:	4890      	ldr	r0, [pc, #576]	@ (800306c <PIN_Setup+0x52c>)
 8002e2c:	f7ff fcf6 	bl	800281c <GPIO_Pin_Init>
 8002e30:	e013      	b.n	8002e5a <PIN_Setup+0x31a>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	7a9b      	ldrb	r3, [r3, #10]
 8002e36:	2206      	movs	r2, #6
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d10e      	bne.n	8002e5a <PIN_Setup+0x31a>
 8002e3c:	2006      	movs	r0, #6
 8002e3e:	2402      	movs	r4, #2
 8002e40:	2500      	movs	r5, #0
 8002e42:	2302      	movs	r3, #2
 8002e44:	2200      	movs	r2, #0
 8002e46:	2107      	movs	r1, #7
 8002e48:	9102      	str	r1, [sp, #8]
 8002e4a:	9201      	str	r2, [sp, #4]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	462b      	mov	r3, r5
 8002e50:	4622      	mov	r2, r4
 8002e52:	4601      	mov	r1, r0
 8002e54:	4884      	ldr	r0, [pc, #528]	@ (8003068 <PIN_Setup+0x528>)
 8002e56:	f7ff fce1 	bl	800281c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous)){
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	7a1b      	ldrb	r3, [r3, #8]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d128      	bne.n	8002eb6 <PIN_Setup+0x376>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7adb      	ldrb	r3, [r3, #11]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10f      	bne.n	8002e8e <PIN_Setup+0x34e>
 8002e6e:	2004      	movs	r0, #4
 8002e70:	2402      	movs	r4, #2
 8002e72:	2500      	movs	r5, #0
 8002e74:	2302      	movs	r3, #2
 8002e76:	2200      	movs	r2, #0
 8002e78:	2107      	movs	r1, #7
 8002e7a:	9102      	str	r1, [sp, #8]
 8002e7c:	9201      	str	r2, [sp, #4]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	462b      	mov	r3, r5
 8002e82:	4622      	mov	r2, r4
 8002e84:	4601      	mov	r1, r0
 8002e86:	4879      	ldr	r0, [pc, #484]	@ (800306c <PIN_Setup+0x52c>)
 8002e88:	f7ff fcc8 	bl	800281c <GPIO_Pin_Init>
 8002e8c:	e013      	b.n	8002eb6 <PIN_Setup+0x376>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	7adb      	ldrb	r3, [r3, #11]
 8002e92:	2207      	movs	r2, #7
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d10e      	bne.n	8002eb6 <PIN_Setup+0x376>
 8002e98:	2007      	movs	r0, #7
 8002e9a:	2402      	movs	r4, #2
 8002e9c:	2500      	movs	r5, #0
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2107      	movs	r1, #7
 8002ea4:	9102      	str	r1, [sp, #8]
 8002ea6:	9201      	str	r2, [sp, #4]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	462b      	mov	r3, r5
 8002eac:	4622      	mov	r2, r4
 8002eae:	4601      	mov	r1, r0
 8002eb0:	486e      	ldr	r0, [pc, #440]	@ (800306c <PIN_Setup+0x52c>)
 8002eb2:	f7ff fcb3 	bl	800281c <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	7bdb      	ldrb	r3, [r3, #15]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d105      	bne.n	8002ecc <PIN_Setup+0x38c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	7bdb      	ldrb	r3, [r3, #15]
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	f040 82f0 	bne.w	80034ac <PIN_Setup+0x96c>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	7bdb      	ldrb	r3, [r3, #15]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d128      	bne.n	8002f28 <PIN_Setup+0x3e8>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	7adb      	ldrb	r3, [r3, #11]
 8002eda:	2200      	movs	r2, #0
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d10f      	bne.n	8002f00 <PIN_Setup+0x3c0>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	2402      	movs	r4, #2
 8002ee4:	2500      	movs	r5, #0
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2107      	movs	r1, #7
 8002eec:	9102      	str	r1, [sp, #8]
 8002eee:	9201      	str	r2, [sp, #4]
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	462b      	mov	r3, r5
 8002ef4:	4622      	mov	r2, r4
 8002ef6:	4601      	mov	r1, r0
 8002ef8:	485c      	ldr	r0, [pc, #368]	@ (800306c <PIN_Setup+0x52c>)
 8002efa:	f7ff fc8f 	bl	800281c <GPIO_Pin_Init>
 8002efe:	e013      	b.n	8002f28 <PIN_Setup+0x3e8>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	7adb      	ldrb	r3, [r3, #11]
 8002f04:	2203      	movs	r2, #3
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d10e      	bne.n	8002f28 <PIN_Setup+0x3e8>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002f0a:	2003      	movs	r0, #3
 8002f0c:	2402      	movs	r4, #2
 8002f0e:	2500      	movs	r5, #0
 8002f10:	2302      	movs	r3, #2
 8002f12:	2200      	movs	r2, #0
 8002f14:	2107      	movs	r1, #7
 8002f16:	9102      	str	r1, [sp, #8]
 8002f18:	9201      	str	r2, [sp, #4]
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	4622      	mov	r2, r4
 8002f20:	4601      	mov	r1, r0
 8002f22:	4851      	ldr	r0, [pc, #324]	@ (8003068 <PIN_Setup+0x528>)
 8002f24:	f7ff fc7a 	bl	800281c <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	7bdb      	ldrb	r3, [r3, #15]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d005      	beq.n	8002f3e <PIN_Setup+0x3fe>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	7bdb      	ldrb	r3, [r3, #15]
 8002f36:	2203      	movs	r2, #3
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	f040 82b7 	bne.w	80034ac <PIN_Setup+0x96c>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7adb      	ldrb	r3, [r3, #11]
 8002f42:	2201      	movs	r2, #1
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d10f      	bne.n	8002f68 <PIN_Setup+0x428>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002f48:	2001      	movs	r0, #1
 8002f4a:	2402      	movs	r4, #2
 8002f4c:	2500      	movs	r5, #0
 8002f4e:	2302      	movs	r3, #2
 8002f50:	2200      	movs	r2, #0
 8002f52:	2107      	movs	r1, #7
 8002f54:	9102      	str	r1, [sp, #8]
 8002f56:	9201      	str	r2, [sp, #4]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	462b      	mov	r3, r5
 8002f5c:	4622      	mov	r2, r4
 8002f5e:	4601      	mov	r1, r0
 8002f60:	4842      	ldr	r0, [pc, #264]	@ (800306c <PIN_Setup+0x52c>)
 8002f62:	f7ff fc5b 	bl	800281c <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8002f66:	e2a1      	b.n	80034ac <PIN_Setup+0x96c>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	7adb      	ldrb	r3, [r3, #11]
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	f040 829c 	bne.w	80034ac <PIN_Setup+0x96c>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002f74:	2004      	movs	r0, #4
 8002f76:	2402      	movs	r4, #2
 8002f78:	2500      	movs	r5, #0
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2107      	movs	r1, #7
 8002f80:	9102      	str	r1, [sp, #8]
 8002f82:	9201      	str	r2, [sp, #4]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	462b      	mov	r3, r5
 8002f88:	4622      	mov	r2, r4
 8002f8a:	4601      	mov	r1, r0
 8002f8c:	4836      	ldr	r0, [pc, #216]	@ (8003068 <PIN_Setup+0x528>)
 8002f8e:	f7ff fc45 	bl	800281c <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8002f92:	e28b      	b.n	80034ac <PIN_Setup+0x96c>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	7a1b      	ldrb	r3, [r3, #8]
 8002f98:	2206      	movs	r2, #6
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00a      	beq.n	8002fb4 <PIN_Setup+0x474>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7a1b      	ldrb	r3, [r3, #8]
 8002fa2:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d005      	beq.n	8002fb4 <PIN_Setup+0x474>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	7a1b      	ldrb	r3, [r3, #8]
 8002fac:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	f040 827f 	bne.w	80034b2 <PIN_Setup+0x972>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	7a5b      	ldrb	r3, [r3, #9]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d10f      	bne.n	8002fde <PIN_Setup+0x49e>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002fbe:	2002      	movs	r0, #2
 8002fc0:	2402      	movs	r4, #2
 8002fc2:	2500      	movs	r5, #0
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2107      	movs	r1, #7
 8002fca:	9102      	str	r1, [sp, #8]
 8002fcc:	9201      	str	r2, [sp, #4]
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	462b      	mov	r3, r5
 8002fd2:	4622      	mov	r2, r4
 8002fd4:	4601      	mov	r1, r0
 8002fd6:	4825      	ldr	r0, [pc, #148]	@ (800306c <PIN_Setup+0x52c>)
 8002fd8:	f7ff fc20 	bl	800281c <GPIO_Pin_Init>
 8002fdc:	e013      	b.n	8003006 <PIN_Setup+0x4c6>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7a5b      	ldrb	r3, [r3, #9]
 8002fe2:	2205      	movs	r2, #5
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d10e      	bne.n	8003006 <PIN_Setup+0x4c6>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002fe8:	2005      	movs	r0, #5
 8002fea:	2402      	movs	r4, #2
 8002fec:	2500      	movs	r5, #0
 8002fee:	2302      	movs	r3, #2
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2107      	movs	r1, #7
 8002ff4:	9102      	str	r1, [sp, #8]
 8002ff6:	9201      	str	r2, [sp, #4]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	462b      	mov	r3, r5
 8002ffc:	4622      	mov	r2, r4
 8002ffe:	4601      	mov	r1, r0
 8003000:	4819      	ldr	r0, [pc, #100]	@ (8003068 <PIN_Setup+0x528>)
 8003002:	f7ff fc0b 	bl	800281c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	7a1b      	ldrb	r3, [r3, #8]
 800300a:	2207      	movs	r2, #7
 800300c:	4293      	cmp	r3, r2
 800300e:	f040 8250 	bne.w	80034b2 <PIN_Setup+0x972>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	7adb      	ldrb	r3, [r3, #11]
 8003016:	2204      	movs	r2, #4
 8003018:	4293      	cmp	r3, r2
 800301a:	d10f      	bne.n	800303c <PIN_Setup+0x4fc>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800301c:	2004      	movs	r0, #4
 800301e:	2402      	movs	r4, #2
 8003020:	2500      	movs	r5, #0
 8003022:	2302      	movs	r3, #2
 8003024:	2200      	movs	r2, #0
 8003026:	2107      	movs	r1, #7
 8003028:	9102      	str	r1, [sp, #8]
 800302a:	9201      	str	r2, [sp, #4]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	462b      	mov	r3, r5
 8003030:	4622      	mov	r2, r4
 8003032:	4601      	mov	r1, r0
 8003034:	480d      	ldr	r0, [pc, #52]	@ (800306c <PIN_Setup+0x52c>)
 8003036:	f7ff fbf1 	bl	800281c <GPIO_Pin_Init>
}
 800303a:	e23a      	b.n	80034b2 <PIN_Setup+0x972>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	7adb      	ldrb	r3, [r3, #11]
 8003040:	2207      	movs	r2, #7
 8003042:	4293      	cmp	r3, r2
 8003044:	f040 8235 	bne.w	80034b2 <PIN_Setup+0x972>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003048:	2007      	movs	r0, #7
 800304a:	2402      	movs	r4, #2
 800304c:	2500      	movs	r5, #0
 800304e:	2302      	movs	r3, #2
 8003050:	2200      	movs	r2, #0
 8003052:	2107      	movs	r1, #7
 8003054:	9102      	str	r1, [sp, #8]
 8003056:	9201      	str	r2, [sp, #4]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	462b      	mov	r3, r5
 800305c:	4622      	mov	r2, r4
 800305e:	4601      	mov	r1, r0
 8003060:	4802      	ldr	r0, [pc, #8]	@ (800306c <PIN_Setup+0x52c>)
 8003062:	f7ff fbdb 	bl	800281c <GPIO_Pin_Init>
}
 8003066:	e224      	b.n	80034b2 <PIN_Setup+0x972>
 8003068:	40020c00 	.word	0x40020c00
 800306c:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4aab      	ldr	r2, [pc, #684]	@ (8003324 <PIN_Setup+0x7e4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	f040 81af 	bne.w	80033da <PIN_Setup+0x89a>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	7a1b      	ldrb	r3, [r3, #8]
 8003080:	2201      	movs	r2, #1
 8003082:	4293      	cmp	r3, r2
 8003084:	d00f      	beq.n	80030a6 <PIN_Setup+0x566>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	7a1b      	ldrb	r3, [r3, #8]
 800308a:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 800308c:	4293      	cmp	r3, r2
 800308e:	d00a      	beq.n	80030a6 <PIN_Setup+0x566>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	7a1b      	ldrb	r3, [r3, #8]
 8003094:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003096:	4293      	cmp	r3, r2
 8003098:	d005      	beq.n	80030a6 <PIN_Setup+0x566>
		   (config->mode == USART_Configuration.Mode.LIN) )
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7a1b      	ldrb	r3, [r3, #8]
 800309e:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 80030a0:	4293      	cmp	r3, r2
 80030a2:	f040 8119 	bne.w	80032d8 <PIN_Setup+0x798>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	7a5b      	ldrb	r3, [r3, #9]
 80030aa:	220b      	movs	r2, #11
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d10f      	bne.n	80030d0 <PIN_Setup+0x590>
 80030b0:	200b      	movs	r0, #11
 80030b2:	2402      	movs	r4, #2
 80030b4:	2500      	movs	r5, #0
 80030b6:	2302      	movs	r3, #2
 80030b8:	2200      	movs	r2, #0
 80030ba:	2107      	movs	r1, #7
 80030bc:	9102      	str	r1, [sp, #8]
 80030be:	9201      	str	r2, [sp, #4]
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	462b      	mov	r3, r5
 80030c4:	4622      	mov	r2, r4
 80030c6:	4601      	mov	r1, r0
 80030c8:	4897      	ldr	r0, [pc, #604]	@ (8003328 <PIN_Setup+0x7e8>)
 80030ca:	f7ff fba7 	bl	800281c <GPIO_Pin_Init>
 80030ce:	e028      	b.n	8003122 <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	7a5b      	ldrb	r3, [r3, #9]
 80030d4:	220a      	movs	r2, #10
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10f      	bne.n	80030fa <PIN_Setup+0x5ba>
 80030da:	200a      	movs	r0, #10
 80030dc:	2402      	movs	r4, #2
 80030de:	2500      	movs	r5, #0
 80030e0:	2302      	movs	r3, #2
 80030e2:	2200      	movs	r2, #0
 80030e4:	2107      	movs	r1, #7
 80030e6:	9102      	str	r1, [sp, #8]
 80030e8:	9201      	str	r2, [sp, #4]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	462b      	mov	r3, r5
 80030ee:	4622      	mov	r2, r4
 80030f0:	4601      	mov	r1, r0
 80030f2:	488e      	ldr	r0, [pc, #568]	@ (800332c <PIN_Setup+0x7ec>)
 80030f4:	f7ff fb92 	bl	800281c <GPIO_Pin_Init>
 80030f8:	e013      	b.n	8003122 <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	7a5b      	ldrb	r3, [r3, #9]
 80030fe:	2208      	movs	r2, #8
 8003100:	4293      	cmp	r3, r2
 8003102:	d10e      	bne.n	8003122 <PIN_Setup+0x5e2>
 8003104:	2008      	movs	r0, #8
 8003106:	2402      	movs	r4, #2
 8003108:	2500      	movs	r5, #0
 800310a:	2302      	movs	r3, #2
 800310c:	2200      	movs	r2, #0
 800310e:	2107      	movs	r1, #7
 8003110:	9102      	str	r1, [sp, #8]
 8003112:	9201      	str	r2, [sp, #4]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	462b      	mov	r3, r5
 8003118:	4622      	mov	r2, r4
 800311a:	4601      	mov	r1, r0
 800311c:	4883      	ldr	r0, [pc, #524]	@ (800332c <PIN_Setup+0x7ec>)
 800311e:	f7ff fb7d 	bl	800281c <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	7a9b      	ldrb	r3, [r3, #10]
 8003126:	220a      	movs	r2, #10
 8003128:	4293      	cmp	r3, r2
 800312a:	d10f      	bne.n	800314c <PIN_Setup+0x60c>
 800312c:	200a      	movs	r0, #10
 800312e:	2402      	movs	r4, #2
 8003130:	2500      	movs	r5, #0
 8003132:	2302      	movs	r3, #2
 8003134:	2200      	movs	r2, #0
 8003136:	2107      	movs	r1, #7
 8003138:	9102      	str	r1, [sp, #8]
 800313a:	9201      	str	r2, [sp, #4]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	462b      	mov	r3, r5
 8003140:	4622      	mov	r2, r4
 8003142:	4601      	mov	r1, r0
 8003144:	4878      	ldr	r0, [pc, #480]	@ (8003328 <PIN_Setup+0x7e8>)
 8003146:	f7ff fb69 	bl	800281c <GPIO_Pin_Init>
 800314a:	e028      	b.n	800319e <PIN_Setup+0x65e>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	7a9b      	ldrb	r3, [r3, #10]
 8003150:	220b      	movs	r2, #11
 8003152:	4293      	cmp	r3, r2
 8003154:	d10f      	bne.n	8003176 <PIN_Setup+0x636>
 8003156:	200b      	movs	r0, #11
 8003158:	2402      	movs	r4, #2
 800315a:	2500      	movs	r5, #0
 800315c:	2302      	movs	r3, #2
 800315e:	2200      	movs	r2, #0
 8003160:	2107      	movs	r1, #7
 8003162:	9102      	str	r1, [sp, #8]
 8003164:	9201      	str	r2, [sp, #4]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	462b      	mov	r3, r5
 800316a:	4622      	mov	r2, r4
 800316c:	4601      	mov	r1, r0
 800316e:	486f      	ldr	r0, [pc, #444]	@ (800332c <PIN_Setup+0x7ec>)
 8003170:	f7ff fb54 	bl	800281c <GPIO_Pin_Init>
 8003174:	e013      	b.n	800319e <PIN_Setup+0x65e>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	7a5b      	ldrb	r3, [r3, #9]
 800317a:	2208      	movs	r2, #8
 800317c:	4293      	cmp	r3, r2
 800317e:	d10e      	bne.n	800319e <PIN_Setup+0x65e>
 8003180:	2008      	movs	r0, #8
 8003182:	2402      	movs	r4, #2
 8003184:	2500      	movs	r5, #0
 8003186:	2302      	movs	r3, #2
 8003188:	2200      	movs	r2, #0
 800318a:	2107      	movs	r1, #7
 800318c:	9102      	str	r1, [sp, #8]
 800318e:	9201      	str	r2, [sp, #4]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	462b      	mov	r3, r5
 8003194:	4622      	mov	r2, r4
 8003196:	4601      	mov	r1, r0
 8003198:	4864      	ldr	r0, [pc, #400]	@ (800332c <PIN_Setup+0x7ec>)
 800319a:	f7ff fb3f 	bl	800281c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7a1b      	ldrb	r3, [r3, #8]
 80031a2:	2202      	movs	r2, #2
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d128      	bne.n	80031fa <PIN_Setup+0x6ba>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	7adb      	ldrb	r3, [r3, #11]
 80031ac:	220c      	movs	r2, #12
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d10f      	bne.n	80031d2 <PIN_Setup+0x692>
 80031b2:	200c      	movs	r0, #12
 80031b4:	2402      	movs	r4, #2
 80031b6:	2500      	movs	r5, #0
 80031b8:	2302      	movs	r3, #2
 80031ba:	2200      	movs	r2, #0
 80031bc:	2107      	movs	r1, #7
 80031be:	9102      	str	r1, [sp, #8]
 80031c0:	9201      	str	r2, [sp, #4]
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	462b      	mov	r3, r5
 80031c6:	4622      	mov	r2, r4
 80031c8:	4601      	mov	r1, r0
 80031ca:	4858      	ldr	r0, [pc, #352]	@ (800332c <PIN_Setup+0x7ec>)
 80031cc:	f7ff fb26 	bl	800281c <GPIO_Pin_Init>
 80031d0:	e013      	b.n	80031fa <PIN_Setup+0x6ba>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	7adb      	ldrb	r3, [r3, #11]
 80031d6:	220a      	movs	r2, #10
 80031d8:	4293      	cmp	r3, r2
 80031da:	d10e      	bne.n	80031fa <PIN_Setup+0x6ba>
 80031dc:	200a      	movs	r0, #10
 80031de:	2402      	movs	r4, #2
 80031e0:	2500      	movs	r5, #0
 80031e2:	2302      	movs	r3, #2
 80031e4:	2200      	movs	r2, #0
 80031e6:	2107      	movs	r1, #7
 80031e8:	9102      	str	r1, [sp, #8]
 80031ea:	9201      	str	r2, [sp, #4]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	462b      	mov	r3, r5
 80031f0:	4622      	mov	r2, r4
 80031f2:	4601      	mov	r1, r0
 80031f4:	484e      	ldr	r0, [pc, #312]	@ (8003330 <PIN_Setup+0x7f0>)
 80031f6:	f7ff fb11 	bl	800281c <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	7bdb      	ldrb	r3, [r3, #15]
 80031fe:	2200      	movs	r2, #0
 8003200:	4293      	cmp	r3, r2
 8003202:	f000 8155 	beq.w	80034b0 <PIN_Setup+0x970>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	7bdb      	ldrb	r3, [r3, #15]
 800320a:	2201      	movs	r2, #1
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <PIN_Setup+0x6da>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7bdb      	ldrb	r3, [r3, #15]
 8003214:	2203      	movs	r2, #3
 8003216:	4293      	cmp	r3, r2
 8003218:	d128      	bne.n	800326c <PIN_Setup+0x72c>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	7adb      	ldrb	r3, [r3, #11]
 800321e:	2200      	movs	r2, #0
 8003220:	4293      	cmp	r3, r2
 8003222:	d10f      	bne.n	8003244 <PIN_Setup+0x704>
 8003224:	2000      	movs	r0, #0
 8003226:	2402      	movs	r4, #2
 8003228:	2500      	movs	r5, #0
 800322a:	2302      	movs	r3, #2
 800322c:	2200      	movs	r2, #0
 800322e:	2107      	movs	r1, #7
 8003230:	9102      	str	r1, [sp, #8]
 8003232:	9201      	str	r2, [sp, #4]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	462b      	mov	r3, r5
 8003238:	4622      	mov	r2, r4
 800323a:	4601      	mov	r1, r0
 800323c:	483b      	ldr	r0, [pc, #236]	@ (800332c <PIN_Setup+0x7ec>)
 800323e:	f7ff faed 	bl	800281c <GPIO_Pin_Init>
 8003242:	e013      	b.n	800326c <PIN_Setup+0x72c>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7adb      	ldrb	r3, [r3, #11]
 8003248:	2203      	movs	r2, #3
 800324a:	4293      	cmp	r3, r2
 800324c:	d10e      	bne.n	800326c <PIN_Setup+0x72c>
 800324e:	2003      	movs	r0, #3
 8003250:	2402      	movs	r4, #2
 8003252:	2500      	movs	r5, #0
 8003254:	2302      	movs	r3, #2
 8003256:	2200      	movs	r2, #0
 8003258:	2107      	movs	r1, #7
 800325a:	9102      	str	r1, [sp, #8]
 800325c:	9201      	str	r2, [sp, #4]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	462b      	mov	r3, r5
 8003262:	4622      	mov	r2, r4
 8003264:	4601      	mov	r1, r0
 8003266:	4832      	ldr	r0, [pc, #200]	@ (8003330 <PIN_Setup+0x7f0>)
 8003268:	f7ff fad8 	bl	800281c <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7bdb      	ldrb	r3, [r3, #15]
 8003270:	2202      	movs	r2, #2
 8003272:	4293      	cmp	r3, r2
 8003274:	d005      	beq.n	8003282 <PIN_Setup+0x742>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	7bdb      	ldrb	r3, [r3, #15]
 800327a:	2203      	movs	r2, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	f040 8117 	bne.w	80034b0 <PIN_Setup+0x970>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	7adb      	ldrb	r3, [r3, #11]
 8003286:	2201      	movs	r2, #1
 8003288:	4293      	cmp	r3, r2
 800328a:	d10f      	bne.n	80032ac <PIN_Setup+0x76c>
 800328c:	2001      	movs	r0, #1
 800328e:	2402      	movs	r4, #2
 8003290:	2500      	movs	r5, #0
 8003292:	2302      	movs	r3, #2
 8003294:	2200      	movs	r2, #0
 8003296:	2107      	movs	r1, #7
 8003298:	9102      	str	r1, [sp, #8]
 800329a:	9201      	str	r2, [sp, #4]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	462b      	mov	r3, r5
 80032a0:	4622      	mov	r2, r4
 80032a2:	4601      	mov	r1, r0
 80032a4:	4821      	ldr	r0, [pc, #132]	@ (800332c <PIN_Setup+0x7ec>)
 80032a6:	f7ff fab9 	bl	800281c <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80032aa:	e101      	b.n	80034b0 <PIN_Setup+0x970>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	7adb      	ldrb	r3, [r3, #11]
 80032b0:	2204      	movs	r2, #4
 80032b2:	4293      	cmp	r3, r2
 80032b4:	f040 80fc 	bne.w	80034b0 <PIN_Setup+0x970>
 80032b8:	2004      	movs	r0, #4
 80032ba:	2402      	movs	r4, #2
 80032bc:	2500      	movs	r5, #0
 80032be:	2302      	movs	r3, #2
 80032c0:	2200      	movs	r2, #0
 80032c2:	2107      	movs	r1, #7
 80032c4:	9102      	str	r1, [sp, #8]
 80032c6:	9201      	str	r2, [sp, #4]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	462b      	mov	r3, r5
 80032cc:	4622      	mov	r2, r4
 80032ce:	4601      	mov	r1, r0
 80032d0:	4817      	ldr	r0, [pc, #92]	@ (8003330 <PIN_Setup+0x7f0>)
 80032d2:	f7ff faa3 	bl	800281c <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80032d6:	e0eb      	b.n	80034b0 <PIN_Setup+0x970>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	7a1b      	ldrb	r3, [r3, #8]
 80032dc:	2206      	movs	r2, #6
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00a      	beq.n	80032f8 <PIN_Setup+0x7b8>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	7a1b      	ldrb	r3, [r3, #8]
 80032e6:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d005      	beq.n	80032f8 <PIN_Setup+0x7b8>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7a1b      	ldrb	r3, [r3, #8]
 80032f0:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 80032f2:	4293      	cmp	r3, r2
 80032f4:	f040 80dd 	bne.w	80034b2 <PIN_Setup+0x972>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	7a5b      	ldrb	r3, [r3, #9]
 80032fc:	220b      	movs	r2, #11
 80032fe:	4293      	cmp	r3, r2
 8003300:	d118      	bne.n	8003334 <PIN_Setup+0x7f4>
 8003302:	200b      	movs	r0, #11
 8003304:	2402      	movs	r4, #2
 8003306:	2500      	movs	r5, #0
 8003308:	2302      	movs	r3, #2
 800330a:	2200      	movs	r2, #0
 800330c:	2107      	movs	r1, #7
 800330e:	9102      	str	r1, [sp, #8]
 8003310:	9201      	str	r2, [sp, #4]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	462b      	mov	r3, r5
 8003316:	4622      	mov	r2, r4
 8003318:	4601      	mov	r1, r0
 800331a:	4803      	ldr	r0, [pc, #12]	@ (8003328 <PIN_Setup+0x7e8>)
 800331c:	f7ff fa7e 	bl	800281c <GPIO_Pin_Init>
 8003320:	e031      	b.n	8003386 <PIN_Setup+0x846>
 8003322:	bf00      	nop
 8003324:	40004800 	.word	0x40004800
 8003328:	40020000 	.word	0x40020000
 800332c:	40020400 	.word	0x40020400
 8003330:	40020c00 	.word	0x40020c00
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	7a5b      	ldrb	r3, [r3, #9]
 8003338:	220a      	movs	r2, #10
 800333a:	4293      	cmp	r3, r2
 800333c:	d10f      	bne.n	800335e <PIN_Setup+0x81e>
 800333e:	200a      	movs	r0, #10
 8003340:	2402      	movs	r4, #2
 8003342:	2500      	movs	r5, #0
 8003344:	2302      	movs	r3, #2
 8003346:	2200      	movs	r2, #0
 8003348:	2107      	movs	r1, #7
 800334a:	9102      	str	r1, [sp, #8]
 800334c:	9201      	str	r2, [sp, #4]
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	462b      	mov	r3, r5
 8003352:	4622      	mov	r2, r4
 8003354:	4601      	mov	r1, r0
 8003356:	4859      	ldr	r0, [pc, #356]	@ (80034bc <PIN_Setup+0x97c>)
 8003358:	f7ff fa60 	bl	800281c <GPIO_Pin_Init>
 800335c:	e013      	b.n	8003386 <PIN_Setup+0x846>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	7a5b      	ldrb	r3, [r3, #9]
 8003362:	2208      	movs	r2, #8
 8003364:	4293      	cmp	r3, r2
 8003366:	d10e      	bne.n	8003386 <PIN_Setup+0x846>
 8003368:	2008      	movs	r0, #8
 800336a:	2402      	movs	r4, #2
 800336c:	2500      	movs	r5, #0
 800336e:	2302      	movs	r3, #2
 8003370:	2200      	movs	r2, #0
 8003372:	2107      	movs	r1, #7
 8003374:	9102      	str	r1, [sp, #8]
 8003376:	9201      	str	r2, [sp, #4]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	462b      	mov	r3, r5
 800337c:	4622      	mov	r2, r4
 800337e:	4601      	mov	r1, r0
 8003380:	484e      	ldr	r0, [pc, #312]	@ (80034bc <PIN_Setup+0x97c>)
 8003382:	f7ff fa4b 	bl	800281c <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	7adb      	ldrb	r3, [r3, #11]
 800338a:	220c      	movs	r2, #12
 800338c:	4293      	cmp	r3, r2
 800338e:	d10f      	bne.n	80033b0 <PIN_Setup+0x870>
 8003390:	200c      	movs	r0, #12
 8003392:	2402      	movs	r4, #2
 8003394:	2500      	movs	r5, #0
 8003396:	2302      	movs	r3, #2
 8003398:	2200      	movs	r2, #0
 800339a:	2107      	movs	r1, #7
 800339c:	9102      	str	r1, [sp, #8]
 800339e:	9201      	str	r2, [sp, #4]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	462b      	mov	r3, r5
 80033a4:	4622      	mov	r2, r4
 80033a6:	4601      	mov	r1, r0
 80033a8:	4844      	ldr	r0, [pc, #272]	@ (80034bc <PIN_Setup+0x97c>)
 80033aa:	f7ff fa37 	bl	800281c <GPIO_Pin_Init>
}
 80033ae:	e080      	b.n	80034b2 <PIN_Setup+0x972>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	7adb      	ldrb	r3, [r3, #11]
 80033b4:	220a      	movs	r2, #10
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d17b      	bne.n	80034b2 <PIN_Setup+0x972>
 80033ba:	200a      	movs	r0, #10
 80033bc:	2402      	movs	r4, #2
 80033be:	2500      	movs	r5, #0
 80033c0:	2302      	movs	r3, #2
 80033c2:	2200      	movs	r2, #0
 80033c4:	2107      	movs	r1, #7
 80033c6:	9102      	str	r1, [sp, #8]
 80033c8:	9201      	str	r2, [sp, #4]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	462b      	mov	r3, r5
 80033ce:	4622      	mov	r2, r4
 80033d0:	4601      	mov	r1, r0
 80033d2:	483b      	ldr	r0, [pc, #236]	@ (80034c0 <PIN_Setup+0x980>)
 80033d4:	f7ff fa22 	bl	800281c <GPIO_Pin_Init>
}
 80033d8:	e06b      	b.n	80034b2 <PIN_Setup+0x972>
	else if(config -> Port == UART4)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a39      	ldr	r2, [pc, #228]	@ (80034c4 <PIN_Setup+0x984>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d166      	bne.n	80034b2 <PIN_Setup+0x972>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	7a1b      	ldrb	r3, [r3, #8]
 80033e8:	2201      	movs	r2, #1
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d009      	beq.n	8003402 <PIN_Setup+0x8c2>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	7a1b      	ldrb	r3, [r3, #8]
 80033f2:	2204      	movs	r2, #4
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d004      	beq.n	8003402 <PIN_Setup+0x8c2>
		   (config->mode == USART_Configuration.Mode.LIN))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	7a1b      	ldrb	r3, [r3, #8]
 80033fc:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 80033fe:	4293      	cmp	r3, r2
 8003400:	d157      	bne.n	80034b2 <PIN_Setup+0x972>
			if(config->TX_Pin == UART4_TX_Pin.PA0)GPIO_Pin_Init(GPIOA, UART4_TX_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	7a5b      	ldrb	r3, [r3, #9]
 8003406:	2200      	movs	r2, #0
 8003408:	4293      	cmp	r3, r2
 800340a:	d10f      	bne.n	800342c <PIN_Setup+0x8ec>
 800340c:	2000      	movs	r0, #0
 800340e:	2402      	movs	r4, #2
 8003410:	2500      	movs	r5, #0
 8003412:	2302      	movs	r3, #2
 8003414:	2200      	movs	r2, #0
 8003416:	2108      	movs	r1, #8
 8003418:	9102      	str	r1, [sp, #8]
 800341a:	9201      	str	r2, [sp, #4]
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	462b      	mov	r3, r5
 8003420:	4622      	mov	r2, r4
 8003422:	4601      	mov	r1, r0
 8003424:	4828      	ldr	r0, [pc, #160]	@ (80034c8 <PIN_Setup+0x988>)
 8003426:	f7ff f9f9 	bl	800281c <GPIO_Pin_Init>
 800342a:	e013      	b.n	8003454 <PIN_Setup+0x914>
			else if(config->TX_Pin == UART4_TX_Pin.PC10)GPIO_Pin_Init(GPIOC, UART4_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	7a5b      	ldrb	r3, [r3, #9]
 8003430:	220a      	movs	r2, #10
 8003432:	4293      	cmp	r3, r2
 8003434:	d10e      	bne.n	8003454 <PIN_Setup+0x914>
 8003436:	200a      	movs	r0, #10
 8003438:	2402      	movs	r4, #2
 800343a:	2500      	movs	r5, #0
 800343c:	2302      	movs	r3, #2
 800343e:	2200      	movs	r2, #0
 8003440:	2108      	movs	r1, #8
 8003442:	9102      	str	r1, [sp, #8]
 8003444:	9201      	str	r2, [sp, #4]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	462b      	mov	r3, r5
 800344a:	4622      	mov	r2, r4
 800344c:	4601      	mov	r1, r0
 800344e:	481f      	ldr	r0, [pc, #124]	@ (80034cc <PIN_Setup+0x98c>)
 8003450:	f7ff f9e4 	bl	800281c <GPIO_Pin_Init>
			if(config->RX_Pin == UART4_RX_Pin.PA1)GPIO_Pin_Init(GPIOA, UART4_RX_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	7a9b      	ldrb	r3, [r3, #10]
 8003458:	2201      	movs	r2, #1
 800345a:	4293      	cmp	r3, r2
 800345c:	d10f      	bne.n	800347e <PIN_Setup+0x93e>
 800345e:	2001      	movs	r0, #1
 8003460:	2402      	movs	r4, #2
 8003462:	2500      	movs	r5, #0
 8003464:	2302      	movs	r3, #2
 8003466:	2200      	movs	r2, #0
 8003468:	2108      	movs	r1, #8
 800346a:	9102      	str	r1, [sp, #8]
 800346c:	9201      	str	r2, [sp, #4]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	462b      	mov	r3, r5
 8003472:	4622      	mov	r2, r4
 8003474:	4601      	mov	r1, r0
 8003476:	4814      	ldr	r0, [pc, #80]	@ (80034c8 <PIN_Setup+0x988>)
 8003478:	f7ff f9d0 	bl	800281c <GPIO_Pin_Init>
}
 800347c:	e019      	b.n	80034b2 <PIN_Setup+0x972>
			else if(config->RX_Pin == UART4_RX_Pin.PC11)GPIO_Pin_Init(GPIOC, UART4_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_4);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7a9b      	ldrb	r3, [r3, #10]
 8003482:	220b      	movs	r2, #11
 8003484:	4293      	cmp	r3, r2
 8003486:	d114      	bne.n	80034b2 <PIN_Setup+0x972>
 8003488:	200b      	movs	r0, #11
 800348a:	2402      	movs	r4, #2
 800348c:	2500      	movs	r5, #0
 800348e:	2302      	movs	r3, #2
 8003490:	2200      	movs	r2, #0
 8003492:	2108      	movs	r1, #8
 8003494:	9102      	str	r1, [sp, #8]
 8003496:	9201      	str	r2, [sp, #4]
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	462b      	mov	r3, r5
 800349c:	4622      	mov	r2, r4
 800349e:	4601      	mov	r1, r0
 80034a0:	480a      	ldr	r0, [pc, #40]	@ (80034cc <PIN_Setup+0x98c>)
 80034a2:	f7ff f9bb 	bl	800281c <GPIO_Pin_Init>
}
 80034a6:	e004      	b.n	80034b2 <PIN_Setup+0x972>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80034a8:	bf00      	nop
 80034aa:	e002      	b.n	80034b2 <PIN_Setup+0x972>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 80034ac:	bf00      	nop
 80034ae:	e000      	b.n	80034b2 <PIN_Setup+0x972>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80034b0:	bf00      	nop
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bdb0      	pop	{r4, r5, r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40020400 	.word	0x40020400
 80034c0:	40020c00 	.word	0x40020c00
 80034c4:	40004c00 	.word	0x40004c00
 80034c8:	40020000 	.word	0x40020000
 80034cc:	40020800 	.word	0x40020800

080034d0 <USART_Init>:

int8_t USART_Init(USART_Config *config)
{
 80034d0:	b5b0      	push	{r4, r5, r7, lr}
 80034d2:	b08a      	sub	sp, #40	@ 0x28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff facd 	bl	8002a78 <USART_Clock_Enable>
	PIN_Setup(config);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff fb2e 	bl	8002b40 <PIN_Setup>

	usart_dma_instance_number = Get_USART_Instance_Number(config);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff fa67 	bl	80029b8 <Get_USART_Instance_Number>
 80034ea:	4603      	mov	r3, r0
 80034ec:	461a      	mov	r2, r3
 80034ee:	4b6c      	ldr	r3, [pc, #432]	@ (80036a0 <USART_Init+0x1d0>)
 80034f0:	701a      	strb	r2, [r3, #0]
	if(usart_dma_instance_number == -1) return -1;
 80034f2:	4b6b      	ldr	r3, [pc, #428]	@ (80036a0 <USART_Init+0x1d0>)
 80034f4:	f993 3000 	ldrsb.w	r3, [r3]
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fc:	d102      	bne.n	8003504 <USART_Init+0x34>
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003502:	e3eb      	b.n	8003cdc <USART_Init+0x80c>
	double brr;
	double div_frac, mantissa;
	int div_frac_1;
	int mantissa_1;

	if(config -> Port == USART1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a66      	ldr	r2, [pc, #408]	@ (80036a4 <USART_Init+0x1d4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d148      	bne.n	80035a0 <USART_Init+0xd0>
	{
		 brr = (168000000.0/ (16.0 * 2.0 * (double)(config->baudrate)));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fc fff6 	bl	8000504 <__aeabi_ui2d>
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	4b62      	ldr	r3, [pc, #392]	@ (80036a8 <USART_Init+0x1d8>)
 800351e:	f7fd f86b 	bl	80005f8 <__aeabi_dmul>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	a15c      	add	r1, pc, #368	@ (adr r1, 8003698 <USART_Init+0x1c8>)
 8003528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800352c:	f7fd f98e 	bl	800084c <__aeabi_ddiv>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	e9c7 2306 	strd	r2, r3, [r7, #24]
		 div_frac, mantissa;
		 separateFractionAndIntegral(brr, &div_frac, &mantissa);
 8003538:	f107 0208 	add.w	r2, r7, #8
 800353c:	f107 0310 	add.w	r3, r7, #16
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	ed97 0b06 	vldr	d0, [r7, #24]
 8003548:	f7ff fa10 	bl	800296c <separateFractionAndIntegral>
		 div_frac_1 = (int)(ceil(div_frac*16.0));
 800354c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	4b55      	ldr	r3, [pc, #340]	@ (80036ac <USART_Init+0x1dc>)
 8003556:	f7fd f84f 	bl	80005f8 <__aeabi_dmul>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	ec43 2b17 	vmov	d7, r2, r3
 8003562:	eeb0 0a47 	vmov.f32	s0, s14
 8003566:	eef0 0a67 	vmov.f32	s1, s15
 800356a:	f002 f9fd 	bl	8005968 <ceil>
 800356e:	ec53 2b10 	vmov	r2, r3, d0
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	f7fd fad9 	bl	8000b2c <__aeabi_d2iz>
 800357a:	4603      	mov	r3, r0
 800357c:	627b      	str	r3, [r7, #36]	@ 0x24
		 mantissa_1 = (int)(ceil(mantissa));
 800357e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003582:	eeb0 0a47 	vmov.f32	s0, s14
 8003586:	eef0 0a67 	vmov.f32	s1, s15
 800358a:	f002 f9ed 	bl	8005968 <ceil>
 800358e:	ec53 2b10 	vmov	r2, r3, d0
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	f7fd fac9 	bl	8000b2c <__aeabi_d2iz>
 800359a:	4603      	mov	r3, r0
 800359c:	623b      	str	r3, [r7, #32]
 800359e:	e047      	b.n	8003630 <USART_Init+0x160>
	}
	else
	{
		 brr = (168000000.0/ (2 * 16.0 * 2.0 * (double)(config->baudrate)));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc ffad 	bl	8000504 <__aeabi_ui2d>
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	4b40      	ldr	r3, [pc, #256]	@ (80036b0 <USART_Init+0x1e0>)
 80035b0:	f7fd f822 	bl	80005f8 <__aeabi_dmul>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	a137      	add	r1, pc, #220	@ (adr r1, 8003698 <USART_Init+0x1c8>)
 80035ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035be:	f7fd f945 	bl	800084c <__aeabi_ddiv>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
		 div_frac, mantissa;
		 separateFractionAndIntegral(brr, &div_frac, &mantissa);
 80035ca:	f107 0208 	add.w	r2, r7, #8
 80035ce:	f107 0310 	add.w	r3, r7, #16
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	ed97 0b06 	vldr	d0, [r7, #24]
 80035da:	f7ff f9c7 	bl	800296c <separateFractionAndIntegral>
		 div_frac_1 = (int)(ceil(div_frac*16.0));
 80035de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	4b31      	ldr	r3, [pc, #196]	@ (80036ac <USART_Init+0x1dc>)
 80035e8:	f7fd f806 	bl	80005f8 <__aeabi_dmul>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	ec43 2b17 	vmov	d7, r2, r3
 80035f4:	eeb0 0a47 	vmov.f32	s0, s14
 80035f8:	eef0 0a67 	vmov.f32	s1, s15
 80035fc:	f002 f9b4 	bl	8005968 <ceil>
 8003600:	ec53 2b10 	vmov	r2, r3, d0
 8003604:	4610      	mov	r0, r2
 8003606:	4619      	mov	r1, r3
 8003608:	f7fd fa90 	bl	8000b2c <__aeabi_d2iz>
 800360c:	4603      	mov	r3, r0
 800360e:	627b      	str	r3, [r7, #36]	@ 0x24
		 mantissa_1 = (int)(ceil(mantissa));
 8003610:	ed97 7b02 	vldr	d7, [r7, #8]
 8003614:	eeb0 0a47 	vmov.f32	s0, s14
 8003618:	eef0 0a67 	vmov.f32	s1, s15
 800361c:	f002 f9a4 	bl	8005968 <ceil>
 8003620:	ec53 2b10 	vmov	r2, r3, d0
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	f7fd fa80 	bl	8000b2c <__aeabi_d2iz>
 800362c:	4603      	mov	r3, r0
 800362e:	623b      	str	r3, [r7, #32]
	}




	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	011a      	lsls	r2, r3, #4
 8003634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7c9b      	ldrb	r3, [r3, #18]
 8003648:	4619      	mov	r1, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	60da      	str	r2, [r3, #12]

	if(config -> interrupt == USART_Configuration.Interrupt_Type.Disable)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	7b9b      	ldrb	r3, [r3, #14]
 8003656:	461a      	mov	r2, r3
 8003658:	2300      	movs	r3, #0
 800365a:	429a      	cmp	r2, r3
 800365c:	d12a      	bne.n	80036b4 <USART_Init+0x1e4>
	{
		config -> Port -> CR1 &= ~(USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE | USART_CR1_RXNEIE | USART_CR1_IDLEIE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 800366c:	60da      	str	r2, [r3, #12]
		config -> Port -> CR2 &= ~(USART_CR2_LBDIE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800367c:	611a      	str	r2, [r3, #16]
		config -> Port -> CR3 &= ~(USART_CR3_CTSIE | USART_CR3_EIE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	6153      	str	r3, [r2, #20]
 8003692:	e0ce      	b.n	8003832 <USART_Init+0x362>
 8003694:	f3af 8000 	nop.w
 8003698:	00000000 	.word	0x00000000
 800369c:	41a406f4 	.word	0x41a406f4
 80036a0:	200006e0 	.word	0x200006e0
 80036a4:	40011000 	.word	0x40011000
 80036a8:	40400000 	.word	0x40400000
 80036ac:	40300000 	.word	0x40300000
 80036b0:	40500000 	.word	0x40500000
	}
	else
	{
		if((config->interrupt & USART_Configuration.Interrupt_Type.Parity_Enable) == USART_Configuration.Interrupt_Type.Parity_Enable)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	7b9b      	ldrb	r3, [r3, #14]
 80036b8:	461a      	mov	r2, r3
 80036ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036be:	4013      	ands	r3, r2
 80036c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d107      	bne.n	80036d8 <USART_Init+0x208>
		{
			config -> Port -> CR1 |= USART_CR1_PEIE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036d6:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmit_Empty_Enable) == USART_Configuration.Interrupt_Type.Transmit_Empty_Enable)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7b9b      	ldrb	r3, [r3, #14]
 80036dc:	461a      	mov	r2, r3
 80036de:	2380      	movs	r3, #128	@ 0x80
 80036e0:	4013      	ands	r3, r2
 80036e2:	2280      	movs	r2, #128	@ 0x80
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d107      	bne.n	80036f8 <USART_Init+0x228>
		{
			config -> Port -> CR1 |= USART_CR1_TXEIE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036f6:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmission_Complete_Enable) == USART_Configuration.Interrupt_Type.Transmission_Complete_Enable)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7b9b      	ldrb	r3, [r3, #14]
 80036fc:	461a      	mov	r2, r3
 80036fe:	2340      	movs	r3, #64	@ 0x40
 8003700:	4013      	ands	r3, r2
 8003702:	2240      	movs	r2, #64	@ 0x40
 8003704:	4293      	cmp	r3, r2
 8003706:	d107      	bne.n	8003718 <USART_Init+0x248>
		{
			config -> Port -> CR1 |= USART_CR1_TCIE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003716:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Receiver_Empty_Enable) == USART_Configuration.Interrupt_Type.Receiver_Empty_Enable)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	7b9b      	ldrb	r3, [r3, #14]
 800371c:	461a      	mov	r2, r3
 800371e:	2320      	movs	r3, #32
 8003720:	4013      	ands	r3, r2
 8003722:	2220      	movs	r2, #32
 8003724:	4293      	cmp	r3, r2
 8003726:	d107      	bne.n	8003738 <USART_Init+0x268>
		{
			config -> Port -> CR1 |= USART_CR1_RXNEIE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0220 	orr.w	r2, r2, #32
 8003736:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.IDLE_Enable) == USART_Configuration.Interrupt_Type.IDLE_Enable)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7b9b      	ldrb	r3, [r3, #14]
 800373c:	461a      	mov	r2, r3
 800373e:	2310      	movs	r3, #16
 8003740:	4013      	ands	r3, r2
 8003742:	2210      	movs	r2, #16
 8003744:	4293      	cmp	r3, r2
 8003746:	d107      	bne.n	8003758 <USART_Init+0x288>
		{
			config -> Port -> CR1 |= USART_CR1_IDLEIE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0210 	orr.w	r2, r2, #16
 8003756:	60da      	str	r2, [r3, #12]
		}

		if((config->interrupt & USART_Configuration.Interrupt_Type.LIN_Break_Detection_Enable) == USART_Configuration.Interrupt_Type.LIN_Break_Detection_Enable)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	7b9b      	ldrb	r3, [r3, #14]
 800375c:	461a      	mov	r2, r3
 800375e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003762:	4013      	ands	r3, r2
 8003764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003768:	4293      	cmp	r3, r2
 800376a:	d107      	bne.n	800377c <USART_Init+0x2ac>
		{
			config -> Port -> CR2 |= USART_CR2_LBDIE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691a      	ldr	r2, [r3, #16]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800377a:	611a      	str	r2, [r3, #16]
		}

		if((config->interrupt & USART_Configuration.Interrupt_Type.CTS_Enable) == USART_Configuration.Interrupt_Type.CTS_Enable)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	7b9b      	ldrb	r3, [r3, #14]
 8003780:	461a      	mov	r2, r3
 8003782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003786:	4013      	ands	r3, r2
 8003788:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800378c:	4293      	cmp	r3, r2
 800378e:	d107      	bne.n	80037a0 <USART_Init+0x2d0>
		{
			config -> Port -> CR3 |= USART_CR3_CTSIE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800379e:	615a      	str	r2, [r3, #20]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Error_Enable) == USART_Configuration.Interrupt_Type.Error_Enable)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7b9b      	ldrb	r3, [r3, #14]
 80037a4:	461a      	mov	r2, r3
 80037a6:	2301      	movs	r3, #1
 80037a8:	4013      	ands	r3, r2
 80037aa:	2201      	movs	r2, #1
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d107      	bne.n	80037c0 <USART_Init+0x2f0>
		{
			config -> Port -> CR3 |= USART_CR3_EIE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	615a      	str	r2, [r3, #20]
		}

		if(config -> Port == USART1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a9f      	ldr	r2, [pc, #636]	@ (8003a44 <USART_Init+0x574>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d107      	bne.n	80037da <USART_Init+0x30a>
		{
			NVIC_SetPriority(USART1_IRQn, 0);
 80037ca:	2100      	movs	r1, #0
 80037cc:	2025      	movs	r0, #37	@ 0x25
 80037ce:	f7ff f8a3 	bl	8002918 <__NVIC_SetPriority>
			NVIC_EnableIRQ(USART1_IRQn);
 80037d2:	2025      	movs	r0, #37	@ 0x25
 80037d4:	f7ff f882 	bl	80028dc <__NVIC_EnableIRQ>
 80037d8:	e02b      	b.n	8003832 <USART_Init+0x362>
		}
		else if(config -> Port == USART2)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a9a      	ldr	r2, [pc, #616]	@ (8003a48 <USART_Init+0x578>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d103      	bne.n	80037ec <USART_Init+0x31c>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 80037e4:	2026      	movs	r0, #38	@ 0x26
 80037e6:	f7ff f879 	bl	80028dc <__NVIC_EnableIRQ>
 80037ea:	e022      	b.n	8003832 <USART_Init+0x362>
		}
		else if(config -> Port == USART3)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a96      	ldr	r2, [pc, #600]	@ (8003a4c <USART_Init+0x57c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d103      	bne.n	80037fe <USART_Init+0x32e>
		{
			NVIC_EnableIRQ(USART3_IRQn);
 80037f6:	2027      	movs	r0, #39	@ 0x27
 80037f8:	f7ff f870 	bl	80028dc <__NVIC_EnableIRQ>
 80037fc:	e019      	b.n	8003832 <USART_Init+0x362>
		}
		else if(config -> Port == UART4)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a93      	ldr	r2, [pc, #588]	@ (8003a50 <USART_Init+0x580>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d103      	bne.n	8003810 <USART_Init+0x340>
		{
			NVIC_EnableIRQ(UART4_IRQn);
 8003808:	2034      	movs	r0, #52	@ 0x34
 800380a:	f7ff f867 	bl	80028dc <__NVIC_EnableIRQ>
 800380e:	e010      	b.n	8003832 <USART_Init+0x362>
		}
		else if(config -> Port == UART5)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a8f      	ldr	r2, [pc, #572]	@ (8003a54 <USART_Init+0x584>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d103      	bne.n	8003822 <USART_Init+0x352>
		{
			NVIC_EnableIRQ(UART5_IRQn);
 800381a:	2035      	movs	r0, #53	@ 0x35
 800381c:	f7ff f85e 	bl	80028dc <__NVIC_EnableIRQ>
 8003820:	e007      	b.n	8003832 <USART_Init+0x362>
		}
		else if(config -> Port == USART6)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a8c      	ldr	r2, [pc, #560]	@ (8003a58 <USART_Init+0x588>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d102      	bne.n	8003832 <USART_Init+0x362>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 800382c:	2047      	movs	r0, #71	@ 0x47
 800382e:	f7ff f855 	bl	80028dc <__NVIC_EnableIRQ>
		}

	}


	config->Port->CR2 |= config->stop_bits;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	7c1b      	ldrb	r3, [r3, #16]
 800383c:	4619      	mov	r1, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	611a      	str	r2, [r3, #16]

	if((config->dma_enable & USART_Configuration.DMA_Enable.RX_Enable) == USART_Configuration.DMA_Enable.RX_Enable)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	7c5b      	ldrb	r3, [r3, #17]
 800384a:	2202      	movs	r2, #2
 800384c:	4013      	ands	r3, r2
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2202      	movs	r2, #2
 8003852:	4293      	cmp	r3, r2
 8003854:	f040 8108 	bne.w	8003a68 <USART_Init+0x598>
	{
		config -> Port -> CR3 |= USART_CR3_DMAR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003866:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a75      	ldr	r2, [pc, #468]	@ (8003a44 <USART_Init+0x574>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d108      	bne.n	8003884 <USART_Init+0x3b4>
		{
			xUSART_RX[0].Request = DMA_Configuration.Request.USART1_RX;
 8003872:	4a7a      	ldr	r2, [pc, #488]	@ (8003a5c <USART_Init+0x58c>)
 8003874:	4b7a      	ldr	r3, [pc, #488]	@ (8003a60 <USART_Init+0x590>)
 8003876:	4614      	mov	r4, r2
 8003878:	33c0      	adds	r3, #192	@ 0xc0
 800387a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800387e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003882:	e03e      	b.n	8003902 <USART_Init+0x432>
		}
		else if(config->Port == USART2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a6f      	ldr	r2, [pc, #444]	@ (8003a48 <USART_Init+0x578>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d107      	bne.n	800389e <USART_Init+0x3ce>
		{
			xUSART_RX[1].Request = DMA_Configuration.Request.USART2_RX;
 800388e:	4b73      	ldr	r3, [pc, #460]	@ (8003a5c <USART_Init+0x58c>)
 8003890:	4a73      	ldr	r2, [pc, #460]	@ (8003a60 <USART_Init+0x590>)
 8003892:	3338      	adds	r3, #56	@ 0x38
 8003894:	32d8      	adds	r2, #216	@ 0xd8
 8003896:	ca07      	ldmia	r2, {r0, r1, r2}
 8003898:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800389c:	e031      	b.n	8003902 <USART_Init+0x432>
		}
		else if(config->Port == USART3)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a6a      	ldr	r2, [pc, #424]	@ (8003a4c <USART_Init+0x57c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d107      	bne.n	80038b8 <USART_Init+0x3e8>
		{
			xUSART_RX[2].Request = DMA_Configuration.Request.USART3_RX;
 80038a8:	4b6c      	ldr	r3, [pc, #432]	@ (8003a5c <USART_Init+0x58c>)
 80038aa:	4a6d      	ldr	r2, [pc, #436]	@ (8003a60 <USART_Init+0x590>)
 80038ac:	3370      	adds	r3, #112	@ 0x70
 80038ae:	32f0      	adds	r2, #240	@ 0xf0
 80038b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80038b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80038b6:	e024      	b.n	8003902 <USART_Init+0x432>
		}
		else if(config->Port == UART4)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a64      	ldr	r2, [pc, #400]	@ (8003a50 <USART_Init+0x580>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d108      	bne.n	80038d4 <USART_Init+0x404>
		{
			xUSART_RX[3].Request = DMA_Configuration.Request.UART4_RX;
 80038c2:	4b66      	ldr	r3, [pc, #408]	@ (8003a5c <USART_Init+0x58c>)
 80038c4:	4a66      	ldr	r2, [pc, #408]	@ (8003a60 <USART_Init+0x590>)
 80038c6:	33a8      	adds	r3, #168	@ 0xa8
 80038c8:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 80038cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80038ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80038d2:	e016      	b.n	8003902 <USART_Init+0x432>
		}
		else if(config->Port == UART5)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5e      	ldr	r2, [pc, #376]	@ (8003a54 <USART_Init+0x584>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d108      	bne.n	80038f0 <USART_Init+0x420>
		{
			xUSART_RX[4].Request = DMA_Configuration.Request.UART5_RX;
 80038de:	4b5f      	ldr	r3, [pc, #380]	@ (8003a5c <USART_Init+0x58c>)
 80038e0:	4a5f      	ldr	r2, [pc, #380]	@ (8003a60 <USART_Init+0x590>)
 80038e2:	33e0      	adds	r3, #224	@ 0xe0
 80038e4:	f502 7290 	add.w	r2, r2, #288	@ 0x120
 80038e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80038ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80038ee:	e008      	b.n	8003902 <USART_Init+0x432>
		}
		else
		{
			xUSART_RX[5].Request = DMA_Configuration.Request.UART6_RX;
 80038f0:	4b5a      	ldr	r3, [pc, #360]	@ (8003a5c <USART_Init+0x58c>)
 80038f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003a60 <USART_Init+0x590>)
 80038f4:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80038f8:	f502 729c 	add.w	r2, r2, #312	@ 0x138
 80038fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80038fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8003902:	4b58      	ldr	r3, [pc, #352]	@ (8003a64 <USART_Init+0x594>)
 8003904:	f993 3000 	ldrsb.w	r3, [r3]
 8003908:	4618      	mov	r0, r3
 800390a:	2200      	movs	r2, #0
 800390c:	4953      	ldr	r1, [pc, #332]	@ (8003a5c <USART_Init+0x58c>)
 800390e:	4603      	mov	r3, r0
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	1a1b      	subs	r3, r3, r0
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	3318      	adds	r3, #24
 800391a:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 800391c:	4b51      	ldr	r3, [pc, #324]	@ (8003a64 <USART_Init+0x594>)
 800391e:	f993 3000 	ldrsb.w	r3, [r3]
 8003922:	4618      	mov	r0, r3
 8003924:	2200      	movs	r2, #0
 8003926:	494d      	ldr	r1, [pc, #308]	@ (8003a5c <USART_Init+0x58c>)
 8003928:	4603      	mov	r3, r0
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	1a1b      	subs	r3, r3, r0
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	440b      	add	r3, r1
 8003932:	330c      	adds	r3, #12
 8003934:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 8003936:	4b4b      	ldr	r3, [pc, #300]	@ (8003a64 <USART_Init+0x594>)
 8003938:	f993 3000 	ldrsb.w	r3, [r3]
 800393c:	4618      	mov	r0, r3
 800393e:	2200      	movs	r2, #0
 8003940:	4946      	ldr	r1, [pc, #280]	@ (8003a5c <USART_Init+0x58c>)
 8003942:	4603      	mov	r3, r0
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	1a1b      	subs	r3, r3, r0
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	440b      	add	r3, r1
 800394c:	331c      	adds	r3, #28
 800394e:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003950:	4b44      	ldr	r3, [pc, #272]	@ (8003a64 <USART_Init+0x594>)
 8003952:	f993 3000 	ldrsb.w	r3, [r3]
 8003956:	4618      	mov	r0, r3
 8003958:	2200      	movs	r2, #0
 800395a:	4940      	ldr	r1, [pc, #256]	@ (8003a5c <USART_Init+0x58c>)
 800395c:	4603      	mov	r3, r0
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	1a1b      	subs	r3, r3, r0
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	440b      	add	r3, r1
 8003966:	3328      	adds	r3, #40	@ 0x28
 8003968:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 800396a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a64 <USART_Init+0x594>)
 800396c:	f993 3000 	ldrsb.w	r3, [r3]
 8003970:	4618      	mov	r0, r3
 8003972:	2200      	movs	r2, #0
 8003974:	4939      	ldr	r1, [pc, #228]	@ (8003a5c <USART_Init+0x58c>)
 8003976:	4603      	mov	r3, r0
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	1a1b      	subs	r3, r3, r0
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	440b      	add	r3, r1
 8003980:	3324      	adds	r3, #36	@ 0x24
 8003982:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8003984:	2200      	movs	r2, #0
 8003986:	4b37      	ldr	r3, [pc, #220]	@ (8003a64 <USART_Init+0x594>)
 8003988:	f993 3000 	ldrsb.w	r3, [r3]
 800398c:	4619      	mov	r1, r3
 800398e:	b290      	uxth	r0, r2
 8003990:	4a32      	ldr	r2, [pc, #200]	@ (8003a5c <USART_Init+0x58c>)
 8003992:	460b      	mov	r3, r1
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	1a5b      	subs	r3, r3, r1
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	3322      	adds	r3, #34	@ 0x22
 800399e:	4602      	mov	r2, r0
 80039a0:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 80039a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003a64 <USART_Init+0x594>)
 80039a8:	f993 3000 	ldrsb.w	r3, [r3]
 80039ac:	4619      	mov	r1, r3
 80039ae:	b290      	uxth	r0, r2
 80039b0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a5c <USART_Init+0x58c>)
 80039b2:	460b      	mov	r3, r1
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	1a5b      	subs	r3, r3, r1
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	3320      	adds	r3, #32
 80039be:	4602      	mov	r2, r0
 80039c0:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.High;
 80039c2:	4b28      	ldr	r3, [pc, #160]	@ (8003a64 <USART_Init+0x594>)
 80039c4:	f993 3000 	ldrsb.w	r3, [r3]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039ce:	4923      	ldr	r1, [pc, #140]	@ (8003a5c <USART_Init+0x58c>)
 80039d0:	4603      	mov	r3, r0
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	1a1b      	subs	r3, r3, r0
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	440b      	add	r3, r1
 80039da:	3314      	adds	r3, #20
 80039dc:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 80039de:	4b21      	ldr	r3, [pc, #132]	@ (8003a64 <USART_Init+0x594>)
 80039e0:	f993 3000 	ldrsb.w	r3, [r3]
 80039e4:	4618      	mov	r0, r3
 80039e6:	2200      	movs	r2, #0
 80039e8:	491c      	ldr	r1, [pc, #112]	@ (8003a5c <USART_Init+0x58c>)
 80039ea:	4603      	mov	r3, r0
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	1a1b      	subs	r3, r3, r0
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	440b      	add	r3, r1
 80039f4:	3310      	adds	r3, #16
 80039f6:	601a      	str	r2, [r3, #0]
		config ->USART_DMA_Instance_RX = xUSART_RX[usart_dma_instance_number];
 80039f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a64 <USART_Init+0x594>)
 80039fa:	f993 3000 	ldrsb.w	r3, [r3]
 80039fe:	4618      	mov	r0, r3
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	4916      	ldr	r1, [pc, #88]	@ (8003a5c <USART_Init+0x58c>)
 8003a04:	4603      	mov	r3, r0
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	1a1b      	subs	r3, r3, r0
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	440b      	add	r3, r1
 8003a0e:	f102 044c 	add.w	r4, r2, #76	@ 0x4c
 8003a12:	461d      	mov	r5, r3
 8003a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003a24:	e884 0003 	stmia.w	r4, {r0, r1}
		DMA_Init(&xUSART_RX[usart_dma_instance_number]);
 8003a28:	4b0e      	ldr	r3, [pc, #56]	@ (8003a64 <USART_Init+0x594>)
 8003a2a:	f993 3000 	ldrsb.w	r3, [r3]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	4a08      	ldr	r2, [pc, #32]	@ (8003a5c <USART_Init+0x58c>)
 8003a3a:	4413      	add	r3, r2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe fbdd 	bl	80021fc <DMA_Init>
 8003a42:	e019      	b.n	8003a78 <USART_Init+0x5a8>
 8003a44:	40011000 	.word	0x40011000
 8003a48:	40004400 	.word	0x40004400
 8003a4c:	40004800 	.word	0x40004800
 8003a50:	40004c00 	.word	0x40004c00
 8003a54:	40005000 	.word	0x40005000
 8003a58:	40011400 	.word	0x40011400
 8003a5c:	20000440 	.word	0x20000440
 8003a60:	08005b24 	.word	0x08005b24
 8003a64:	200006e0 	.word	0x200006e0
	}
	else
	{
		config -> Port  -> CR3 &= ~USART_CR3_DMAR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a76:	615a      	str	r2, [r3, #20]
	}

	if((config->dma_enable & USART_Configuration.DMA_Enable.TX_Enable) == USART_Configuration.DMA_Enable.TX_Enable)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	7c5b      	ldrb	r3, [r3, #17]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	4013      	ands	r3, r2
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2201      	movs	r2, #1
 8003a84:	4293      	cmp	r3, r2
 8003a86:	f040 80f6 	bne.w	8003c76 <USART_Init+0x7a6>
	{

		config -> Port  -> CR3 |= USART_CR3_DMAT;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a98:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a91      	ldr	r2, [pc, #580]	@ (8003ce4 <USART_Init+0x814>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d108      	bne.n	8003ab6 <USART_Init+0x5e6>
		{
			xUSART_TX[0].Request = DMA_Configuration.Request.USART1_TX;
 8003aa4:	4a90      	ldr	r2, [pc, #576]	@ (8003ce8 <USART_Init+0x818>)
 8003aa6:	4b91      	ldr	r3, [pc, #580]	@ (8003cec <USART_Init+0x81c>)
 8003aa8:	4614      	mov	r4, r2
 8003aaa:	33cc      	adds	r3, #204	@ 0xcc
 8003aac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ab0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ab4:	e03e      	b.n	8003b34 <USART_Init+0x664>
		}
		else if(config->Port == USART2)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a8d      	ldr	r2, [pc, #564]	@ (8003cf0 <USART_Init+0x820>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d107      	bne.n	8003ad0 <USART_Init+0x600>
		{
			xUSART_TX[1].Request = DMA_Configuration.Request.USART2_TX;
 8003ac0:	4b89      	ldr	r3, [pc, #548]	@ (8003ce8 <USART_Init+0x818>)
 8003ac2:	4a8a      	ldr	r2, [pc, #552]	@ (8003cec <USART_Init+0x81c>)
 8003ac4:	3338      	adds	r3, #56	@ 0x38
 8003ac6:	32e4      	adds	r2, #228	@ 0xe4
 8003ac8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003ace:	e031      	b.n	8003b34 <USART_Init+0x664>
		}
		else if(config->Port == USART3)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a87      	ldr	r2, [pc, #540]	@ (8003cf4 <USART_Init+0x824>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d107      	bne.n	8003aea <USART_Init+0x61a>
		{
			xUSART_TX[2].Request = DMA_Configuration.Request.USART3_TX;
 8003ada:	4b83      	ldr	r3, [pc, #524]	@ (8003ce8 <USART_Init+0x818>)
 8003adc:	4a83      	ldr	r2, [pc, #524]	@ (8003cec <USART_Init+0x81c>)
 8003ade:	3370      	adds	r3, #112	@ 0x70
 8003ae0:	32fc      	adds	r2, #252	@ 0xfc
 8003ae2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ae4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003ae8:	e024      	b.n	8003b34 <USART_Init+0x664>
		}
		else if(config->Port == UART4)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a82      	ldr	r2, [pc, #520]	@ (8003cf8 <USART_Init+0x828>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d108      	bne.n	8003b06 <USART_Init+0x636>
		{
			xUSART_TX[3].Request = DMA_Configuration.Request.UART4_TX;
 8003af4:	4b7c      	ldr	r3, [pc, #496]	@ (8003ce8 <USART_Init+0x818>)
 8003af6:	4a7d      	ldr	r2, [pc, #500]	@ (8003cec <USART_Init+0x81c>)
 8003af8:	33a8      	adds	r3, #168	@ 0xa8
 8003afa:	f502 728a 	add.w	r2, r2, #276	@ 0x114
 8003afe:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b04:	e016      	b.n	8003b34 <USART_Init+0x664>
		}
		else if(config->Port == UART5)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a7c      	ldr	r2, [pc, #496]	@ (8003cfc <USART_Init+0x82c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d108      	bne.n	8003b22 <USART_Init+0x652>
		{
			xUSART_TX[4].Request = DMA_Configuration.Request.UART5_TX;
 8003b10:	4b75      	ldr	r3, [pc, #468]	@ (8003ce8 <USART_Init+0x818>)
 8003b12:	4a76      	ldr	r2, [pc, #472]	@ (8003cec <USART_Init+0x81c>)
 8003b14:	33e0      	adds	r3, #224	@ 0xe0
 8003b16:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 8003b1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b20:	e008      	b.n	8003b34 <USART_Init+0x664>
		}
		else
		{
			xUSART_TX[5].Request = DMA_Configuration.Request.UART6_TX;
 8003b22:	4b71      	ldr	r3, [pc, #452]	@ (8003ce8 <USART_Init+0x818>)
 8003b24:	4a71      	ldr	r2, [pc, #452]	@ (8003cec <USART_Init+0x81c>)
 8003b26:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8003b2a:	f502 72a2 	add.w	r2, r2, #324	@ 0x144
 8003b2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		xUSART_TX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8003b34:	4b72      	ldr	r3, [pc, #456]	@ (8003d00 <USART_Init+0x830>)
 8003b36:	f993 3000 	ldrsb.w	r3, [r3]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	496a      	ldr	r1, [pc, #424]	@ (8003ce8 <USART_Init+0x818>)
 8003b40:	4603      	mov	r3, r0
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	1a1b      	subs	r3, r3, r0
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	440b      	add	r3, r1
 8003b4a:	3318      	adds	r3, #24
 8003b4c:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8003b4e:	4b6c      	ldr	r3, [pc, #432]	@ (8003d00 <USART_Init+0x830>)
 8003b50:	f993 3000 	ldrsb.w	r3, [r3]
 8003b54:	4618      	mov	r0, r3
 8003b56:	2200      	movs	r2, #0
 8003b58:	4963      	ldr	r1, [pc, #396]	@ (8003ce8 <USART_Init+0x818>)
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	1a1b      	subs	r3, r3, r0
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	440b      	add	r3, r1
 8003b64:	330c      	adds	r3, #12
 8003b66:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete ;
 8003b68:	4b65      	ldr	r3, [pc, #404]	@ (8003d00 <USART_Init+0x830>)
 8003b6a:	f993 3000 	ldrsb.w	r3, [r3]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	2210      	movs	r2, #16
 8003b72:	495d      	ldr	r1, [pc, #372]	@ (8003ce8 <USART_Init+0x818>)
 8003b74:	4603      	mov	r3, r0
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	1a1b      	subs	r3, r3, r0
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	440b      	add	r3, r1
 8003b7e:	331c      	adds	r3, #28
 8003b80:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003b82:	4b5f      	ldr	r3, [pc, #380]	@ (8003d00 <USART_Init+0x830>)
 8003b84:	f993 3000 	ldrsb.w	r3, [r3]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	4956      	ldr	r1, [pc, #344]	@ (8003ce8 <USART_Init+0x818>)
 8003b8e:	4603      	mov	r3, r0
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	1a1b      	subs	r3, r3, r0
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	440b      	add	r3, r1
 8003b98:	3328      	adds	r3, #40	@ 0x28
 8003b9a:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8003b9c:	4b58      	ldr	r3, [pc, #352]	@ (8003d00 <USART_Init+0x830>)
 8003b9e:	f993 3000 	ldrsb.w	r3, [r3]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	4950      	ldr	r1, [pc, #320]	@ (8003ce8 <USART_Init+0x818>)
 8003ba8:	4603      	mov	r3, r0
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	1a1b      	subs	r3, r3, r0
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	440b      	add	r3, r1
 8003bb2:	3324      	adds	r3, #36	@ 0x24
 8003bb4:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	4b51      	ldr	r3, [pc, #324]	@ (8003d00 <USART_Init+0x830>)
 8003bba:	f993 3000 	ldrsb.w	r3, [r3]
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	b290      	uxth	r0, r2
 8003bc2:	4a49      	ldr	r2, [pc, #292]	@ (8003ce8 <USART_Init+0x818>)
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	1a5b      	subs	r3, r3, r1
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4413      	add	r3, r2
 8003bce:	3322      	adds	r3, #34	@ 0x22
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8003bd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bd8:	4b49      	ldr	r3, [pc, #292]	@ (8003d00 <USART_Init+0x830>)
 8003bda:	f993 3000 	ldrsb.w	r3, [r3]
 8003bde:	4619      	mov	r1, r3
 8003be0:	b290      	uxth	r0, r2
 8003be2:	4a41      	ldr	r2, [pc, #260]	@ (8003ce8 <USART_Init+0x818>)
 8003be4:	460b      	mov	r3, r1
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	1a5b      	subs	r3, r3, r1
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4413      	add	r3, r2
 8003bee:	3320      	adds	r3, #32
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.Very_high;
 8003bf4:	4b42      	ldr	r3, [pc, #264]	@ (8003d00 <USART_Init+0x830>)
 8003bf6:	f993 3000 	ldrsb.w	r3, [r3]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003c00:	4939      	ldr	r1, [pc, #228]	@ (8003ce8 <USART_Init+0x818>)
 8003c02:	4603      	mov	r3, r0
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	1a1b      	subs	r3, r3, r0
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3314      	adds	r3, #20
 8003c0e:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8003c10:	4b3b      	ldr	r3, [pc, #236]	@ (8003d00 <USART_Init+0x830>)
 8003c12:	f993 3000 	ldrsb.w	r3, [r3]
 8003c16:	4618      	mov	r0, r3
 8003c18:	2240      	movs	r2, #64	@ 0x40
 8003c1a:	4933      	ldr	r1, [pc, #204]	@ (8003ce8 <USART_Init+0x818>)
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	1a1b      	subs	r3, r3, r0
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	440b      	add	r3, r1
 8003c26:	3310      	adds	r3, #16
 8003c28:	601a      	str	r2, [r3, #0]
		config ->USART_DMA_Instance_TX = xUSART_TX[usart_dma_instance_number];
 8003c2a:	4b35      	ldr	r3, [pc, #212]	@ (8003d00 <USART_Init+0x830>)
 8003c2c:	f993 3000 	ldrsb.w	r3, [r3]
 8003c30:	4618      	mov	r0, r3
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	492c      	ldr	r1, [pc, #176]	@ (8003ce8 <USART_Init+0x818>)
 8003c36:	4603      	mov	r3, r0
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	1a1b      	subs	r3, r3, r0
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	440b      	add	r3, r1
 8003c40:	f102 0414 	add.w	r4, r2, #20
 8003c44:	461d      	mov	r5, r3
 8003c46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c52:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003c56:	e884 0003 	stmia.w	r4, {r0, r1}
		DMA_Init(&xUSART_TX[usart_dma_instance_number]);
 8003c5a:	4b29      	ldr	r3, [pc, #164]	@ (8003d00 <USART_Init+0x830>)
 8003c5c:	f993 3000 	ldrsb.w	r3, [r3]
 8003c60:	461a      	mov	r2, r3
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce8 <USART_Init+0x818>)
 8003c6c:	4413      	add	r3, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe fac4 	bl	80021fc <DMA_Init>
 8003c74:	e007      	b.n	8003c86 <USART_Init+0x7b6>
	}
	else
	{
		config -> Port -> CR3 &= ~USART_CR3_DMAT;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695a      	ldr	r2, [r3, #20]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c84:	615a      	str	r2, [r3, #20]
	}

	if(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	7a1b      	ldrb	r3, [r3, #8]
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d107      	bne.n	8003ca0 <USART_Init+0x7d0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0208 	orr.w	r2, r2, #8
 8003c9e:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Configuration.Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	7a1b      	ldrb	r3, [r3, #8]
 8003ca4:	2205      	movs	r2, #5
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d107      	bne.n	8003cba <USART_Init+0x7ea>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cb8:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 020c 	orr.w	r2, r2, #12
 8003cc8:	60da      	str	r2, [r3, #12]
	config->Port-> CR1 |= USART_CR1_UE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cd8:	60da      	str	r2, [r3, #12]

	return 1;
 8003cda:	2301      	movs	r3, #1
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3728      	adds	r7, #40	@ 0x28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ce4:	40011000 	.word	0x40011000
 8003ce8:	20000590 	.word	0x20000590
 8003cec:	08005b24 	.word	0x08005b24
 8003cf0:	40004400 	.word	0x40004400
 8003cf4:	40004800 	.word	0x40004800
 8003cf8:	40004c00 	.word	0x40004c00
 8003cfc:	40005000 	.word	0x40005000
 8003d00:	200006e0 	.word	0x200006e0

08003d04 <USART_TX_Buffer>:

int8_t USART_TX_Buffer(USART_Config *config, uint8_t *tx_buffer, uint16_t length)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	80fb      	strh	r3, [r7, #6]
	if(config->dma_enable |= USART_Configuration.DMA_Enable.TX_Enable)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	7c5b      	ldrb	r3, [r3, #17]
 8003d16:	2201      	movs	r2, #1
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	745a      	strb	r2, [r3, #17]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	7c5b      	ldrb	r3, [r3, #17]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8121 	beq.w	8003f6c <USART_TX_Buffer+0x268>
	{
		config -> Port -> SR &= ~USART_SR_TC;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d38:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_address = (uint32_t)tx_buffer;
 8003d3a:	4b9b      	ldr	r3, [pc, #620]	@ (8003fa8 <USART_TX_Buffer+0x2a4>)
 8003d3c:	f993 3000 	ldrsb.w	r3, [r3]
 8003d40:	4618      	mov	r0, r3
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	4999      	ldr	r1, [pc, #612]	@ (8003fac <USART_TX_Buffer+0x2a8>)
 8003d46:	4603      	mov	r3, r0
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	1a1b      	subs	r3, r3, r0
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	440b      	add	r3, r1
 8003d50:	3330      	adds	r3, #48	@ 0x30
 8003d52:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	1d1a      	adds	r2, r3, #4
 8003d5a:	4b93      	ldr	r3, [pc, #588]	@ (8003fa8 <USART_TX_Buffer+0x2a4>)
 8003d5c:	f993 3000 	ldrsb.w	r3, [r3]
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	4a91      	ldr	r2, [pc, #580]	@ (8003fac <USART_TX_Buffer+0x2a8>)
 8003d66:	460b      	mov	r3, r1
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	1a5b      	subs	r3, r3, r1
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	332c      	adds	r3, #44	@ 0x2c
 8003d72:	6018      	str	r0, [r3, #0]
		xUSART_TX[usart_dma_instance_number].buffer_length = length;
 8003d74:	4b8c      	ldr	r3, [pc, #560]	@ (8003fa8 <USART_TX_Buffer+0x2a4>)
 8003d76:	f993 3000 	ldrsb.w	r3, [r3]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4a8b      	ldr	r2, [pc, #556]	@ (8003fac <USART_TX_Buffer+0x2a8>)
 8003d7e:	460b      	mov	r3, r1
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	1a5b      	subs	r3, r3, r1
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	3334      	adds	r3, #52	@ 0x34
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
 8003d8c:	801a      	strh	r2, [r3, #0]
		DMA_Set_Target(&xUSART_TX[usart_dma_instance_number]);
 8003d8e:	4b86      	ldr	r3, [pc, #536]	@ (8003fa8 <USART_TX_Buffer+0x2a4>)
 8003d90:	f993 3000 	ldrsb.w	r3, [r3]
 8003d94:	461a      	mov	r2, r3
 8003d96:	4613      	mov	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4a83      	ldr	r2, [pc, #524]	@ (8003fac <USART_TX_Buffer+0x2a8>)
 8003da0:	4413      	add	r3, r2
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe fbc8 	bl	8002538 <DMA_Set_Target>
		DMA_Set_Trigger(&xUSART_TX[usart_dma_instance_number]);
 8003da8:	4b7f      	ldr	r3, [pc, #508]	@ (8003fa8 <USART_TX_Buffer+0x2a4>)
 8003daa:	f993 3000 	ldrsb.w	r3, [r3]
 8003dae:	461a      	mov	r2, r3
 8003db0:	4613      	mov	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4a7c      	ldr	r2, [pc, #496]	@ (8003fac <USART_TX_Buffer+0x2a8>)
 8003dba:	4413      	add	r3, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fe fc1b 	bl	80025f8 <DMA_Set_Trigger>


		if(config->Port == USART1)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a7a      	ldr	r2, [pc, #488]	@ (8003fb0 <USART_TX_Buffer+0x2ac>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d148      	bne.n	8003e5e <USART_TX_Buffer+0x15a>
		{
			if(USART1_TX_DMA_Flag.Triggered != 1)
 8003dcc:	4b79      	ldr	r3, [pc, #484]	@ (8003fb4 <USART_TX_Buffer+0x2b0>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	f083 0301 	eor.w	r3, r3, #1
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d033      	beq.n	8003e42 <USART_TX_Buffer+0x13e>
			{
				USART1_TX_DMA_Flag.Transfer_Complete_Flag = (xUSART_TX[usart_dma_instance_number].Request.Controller -> HISR & DMA_HISR_TCIF7_Msk) >> DMA_HISR_TCIF7_Pos;
 8003dda:	4b73      	ldr	r3, [pc, #460]	@ (8003fa8 <USART_TX_Buffer+0x2a4>)
 8003ddc:	f993 3000 	ldrsb.w	r3, [r3]
 8003de0:	4619      	mov	r1, r3
 8003de2:	4a72      	ldr	r2, [pc, #456]	@ (8003fac <USART_TX_Buffer+0x2a8>)
 8003de4:	460b      	mov	r3, r1
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	1a5b      	subs	r3, r3, r1
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	0edb      	lsrs	r3, r3, #27
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	bf14      	ite	ne
 8003dfc:	2301      	movne	r3, #1
 8003dfe:	2300      	moveq	r3, #0
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	4b6c      	ldr	r3, [pc, #432]	@ (8003fb4 <USART_TX_Buffer+0x2b0>)
 8003e04:	705a      	strb	r2, [r3, #1]
				USART1_TX_DMA_Flag.Transfer_Complete_Flag = (xUSART_TX[usart_dma_instance_number].Request.Controller -> HISR & DMA_HISR_HTIF7_Msk) >> DMA_HISR_HTIF7_Pos;
 8003e06:	4b68      	ldr	r3, [pc, #416]	@ (8003fa8 <USART_TX_Buffer+0x2a4>)
 8003e08:	f993 3000 	ldrsb.w	r3, [r3]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4a67      	ldr	r2, [pc, #412]	@ (8003fac <USART_TX_Buffer+0x2a8>)
 8003e10:	460b      	mov	r3, r1
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	1a5b      	subs	r3, r3, r1
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	0e9b      	lsrs	r3, r3, #26
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf14      	ite	ne
 8003e28:	2301      	movne	r3, #1
 8003e2a:	2300      	moveq	r3, #0
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	4b61      	ldr	r3, [pc, #388]	@ (8003fb4 <USART_TX_Buffer+0x2b0>)
 8003e30:	705a      	strb	r2, [r3, #1]
			}

			while((USART1_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003e32:	e006      	b.n	8003e42 <USART_TX_Buffer+0x13e>
			{
				if(USART1_TX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 8003e34:	4b5f      	ldr	r3, [pc, #380]	@ (8003fb4 <USART_TX_Buffer+0x2b0>)
 8003e36:	78db      	ldrb	r3, [r3, #3]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <USART_TX_Buffer+0x13e>
 8003e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e40:	e0ae      	b.n	8003fa0 <USART_TX_Buffer+0x29c>
			while((USART1_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003e42:	4b5c      	ldr	r3, [pc, #368]	@ (8003fb4 <USART_TX_Buffer+0x2b0>)
 8003e44:	785b      	ldrb	r3, [r3, #1]
 8003e46:	f083 0301 	eor.w	r3, r3, #1
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f1      	bne.n	8003e34 <USART_TX_Buffer+0x130>
			}
			USART1_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8003e50:	4b58      	ldr	r3, [pc, #352]	@ (8003fb4 <USART_TX_Buffer+0x2b0>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	705a      	strb	r2, [r3, #1]
			DMA_Reset_Flags(&USART1_TX_DMA_Flag);
 8003e56:	4857      	ldr	r0, [pc, #348]	@ (8003fb4 <USART_TX_Buffer+0x2b0>)
 8003e58:	f7fe f990 	bl	800217c <DMA_Reset_Flags>
 8003e5c:	e09f      	b.n	8003f9e <USART_TX_Buffer+0x29a>
		}
		else if(config->Port == USART2)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a55      	ldr	r2, [pc, #340]	@ (8003fb8 <USART_TX_Buffer+0x2b4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d115      	bne.n	8003e94 <USART_TX_Buffer+0x190>
		{
			while((USART2_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003e68:	e006      	b.n	8003e78 <USART_TX_Buffer+0x174>
			{
				if(USART2_TX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 8003e6a:	4b54      	ldr	r3, [pc, #336]	@ (8003fbc <USART_TX_Buffer+0x2b8>)
 8003e6c:	78db      	ldrb	r3, [r3, #3]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <USART_TX_Buffer+0x174>
 8003e72:	f04f 33ff 	mov.w	r3, #4294967295
 8003e76:	e093      	b.n	8003fa0 <USART_TX_Buffer+0x29c>
			while((USART2_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003e78:	4b50      	ldr	r3, [pc, #320]	@ (8003fbc <USART_TX_Buffer+0x2b8>)
 8003e7a:	785b      	ldrb	r3, [r3, #1]
 8003e7c:	f083 0301 	eor.w	r3, r3, #1
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f1      	bne.n	8003e6a <USART_TX_Buffer+0x166>
			}
			USART2_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8003e86:	4b4d      	ldr	r3, [pc, #308]	@ (8003fbc <USART_TX_Buffer+0x2b8>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	705a      	strb	r2, [r3, #1]
			DMA_Reset_Flags(&USART2_TX_DMA_Flag);
 8003e8c:	484b      	ldr	r0, [pc, #300]	@ (8003fbc <USART_TX_Buffer+0x2b8>)
 8003e8e:	f7fe f975 	bl	800217c <DMA_Reset_Flags>
 8003e92:	e084      	b.n	8003f9e <USART_TX_Buffer+0x29a>
		}
		else if(config->Port == USART3)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a49      	ldr	r2, [pc, #292]	@ (8003fc0 <USART_TX_Buffer+0x2bc>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d115      	bne.n	8003eca <USART_TX_Buffer+0x1c6>
		{
			while((USART3_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003e9e:	e006      	b.n	8003eae <USART_TX_Buffer+0x1aa>
			{
				if(USART3_TX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 8003ea0:	4b48      	ldr	r3, [pc, #288]	@ (8003fc4 <USART_TX_Buffer+0x2c0>)
 8003ea2:	78db      	ldrb	r3, [r3, #3]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <USART_TX_Buffer+0x1aa>
 8003ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eac:	e078      	b.n	8003fa0 <USART_TX_Buffer+0x29c>
			while((USART3_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003eae:	4b45      	ldr	r3, [pc, #276]	@ (8003fc4 <USART_TX_Buffer+0x2c0>)
 8003eb0:	785b      	ldrb	r3, [r3, #1]
 8003eb2:	f083 0301 	eor.w	r3, r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f1      	bne.n	8003ea0 <USART_TX_Buffer+0x19c>
			}
			USART3_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8003ebc:	4b41      	ldr	r3, [pc, #260]	@ (8003fc4 <USART_TX_Buffer+0x2c0>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	705a      	strb	r2, [r3, #1]
			DMA_Reset_Flags(&USART3_TX_DMA_Flag);
 8003ec2:	4840      	ldr	r0, [pc, #256]	@ (8003fc4 <USART_TX_Buffer+0x2c0>)
 8003ec4:	f7fe f95a 	bl	800217c <DMA_Reset_Flags>
 8003ec8:	e069      	b.n	8003f9e <USART_TX_Buffer+0x29a>
		}
		else if(config->Port == UART4)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a3e      	ldr	r2, [pc, #248]	@ (8003fc8 <USART_TX_Buffer+0x2c4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d115      	bne.n	8003f00 <USART_TX_Buffer+0x1fc>
		{
			while((USART4_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003ed4:	e006      	b.n	8003ee4 <USART_TX_Buffer+0x1e0>
			{
				if(USART4_TX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 8003ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fcc <USART_TX_Buffer+0x2c8>)
 8003ed8:	78db      	ldrb	r3, [r3, #3]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <USART_TX_Buffer+0x1e0>
 8003ede:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee2:	e05d      	b.n	8003fa0 <USART_TX_Buffer+0x29c>
			while((USART4_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003ee4:	4b39      	ldr	r3, [pc, #228]	@ (8003fcc <USART_TX_Buffer+0x2c8>)
 8003ee6:	785b      	ldrb	r3, [r3, #1]
 8003ee8:	f083 0301 	eor.w	r3, r3, #1
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f1      	bne.n	8003ed6 <USART_TX_Buffer+0x1d2>
			}
			USART4_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8003ef2:	4b36      	ldr	r3, [pc, #216]	@ (8003fcc <USART_TX_Buffer+0x2c8>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	705a      	strb	r2, [r3, #1]
			DMA_Reset_Flags(&USART4_TX_DMA_Flag);
 8003ef8:	4834      	ldr	r0, [pc, #208]	@ (8003fcc <USART_TX_Buffer+0x2c8>)
 8003efa:	f7fe f93f 	bl	800217c <DMA_Reset_Flags>
 8003efe:	e04e      	b.n	8003f9e <USART_TX_Buffer+0x29a>
		}
		else if(config->Port == UART5)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a32      	ldr	r2, [pc, #200]	@ (8003fd0 <USART_TX_Buffer+0x2cc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d115      	bne.n	8003f36 <USART_TX_Buffer+0x232>
		{
			while((USART5_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003f0a:	e006      	b.n	8003f1a <USART_TX_Buffer+0x216>
			{
				if(USART5_TX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 8003f0c:	4b31      	ldr	r3, [pc, #196]	@ (8003fd4 <USART_TX_Buffer+0x2d0>)
 8003f0e:	78db      	ldrb	r3, [r3, #3]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <USART_TX_Buffer+0x216>
 8003f14:	f04f 33ff 	mov.w	r3, #4294967295
 8003f18:	e042      	b.n	8003fa0 <USART_TX_Buffer+0x29c>
			while((USART5_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003fd4 <USART_TX_Buffer+0x2d0>)
 8003f1c:	785b      	ldrb	r3, [r3, #1]
 8003f1e:	f083 0301 	eor.w	r3, r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f1      	bne.n	8003f0c <USART_TX_Buffer+0x208>
			}
			USART5_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8003f28:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd4 <USART_TX_Buffer+0x2d0>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	705a      	strb	r2, [r3, #1]
			DMA_Reset_Flags(&USART5_TX_DMA_Flag);
 8003f2e:	4829      	ldr	r0, [pc, #164]	@ (8003fd4 <USART_TX_Buffer+0x2d0>)
 8003f30:	f7fe f924 	bl	800217c <DMA_Reset_Flags>
 8003f34:	e033      	b.n	8003f9e <USART_TX_Buffer+0x29a>
		}
		else if(config->Port == USART6)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a27      	ldr	r2, [pc, #156]	@ (8003fd8 <USART_TX_Buffer+0x2d4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d12e      	bne.n	8003f9e <USART_TX_Buffer+0x29a>
		{
			while((USART6_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003f40:	e006      	b.n	8003f50 <USART_TX_Buffer+0x24c>
			{
				if(USART6_TX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 8003f42:	4b26      	ldr	r3, [pc, #152]	@ (8003fdc <USART_TX_Buffer+0x2d8>)
 8003f44:	78db      	ldrb	r3, [r3, #3]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <USART_TX_Buffer+0x24c>
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	e027      	b.n	8003fa0 <USART_TX_Buffer+0x29c>
			while((USART6_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003f50:	4b22      	ldr	r3, [pc, #136]	@ (8003fdc <USART_TX_Buffer+0x2d8>)
 8003f52:	785b      	ldrb	r3, [r3, #1]
 8003f54:	f083 0301 	eor.w	r3, r3, #1
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f1      	bne.n	8003f42 <USART_TX_Buffer+0x23e>
			}
			USART6_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8003f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8003fdc <USART_TX_Buffer+0x2d8>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	705a      	strb	r2, [r3, #1]
			DMA_Reset_Flags(&USART6_TX_DMA_Flag);
 8003f64:	481d      	ldr	r0, [pc, #116]	@ (8003fdc <USART_TX_Buffer+0x2d8>)
 8003f66:	f7fe f909 	bl	800217c <DMA_Reset_Flags>
 8003f6a:	e018      	b.n	8003f9e <USART_TX_Buffer+0x29a>


	}
	else
	{ //Will Take more time
		for(int i = 0; i <= length; i++)
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	e011      	b.n	8003f96 <USART_TX_Buffer+0x292>
		{
			config->Port->DR = tx_buffer[i];
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	4413      	add	r3, r2
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	605a      	str	r2, [r3, #4]
			while(!(config->Port->SR & USART_SR_TXE));
 8003f80:	bf00      	nop
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f8      	beq.n	8003f82 <USART_TX_Buffer+0x27e>
		for(int i = 0; i <= length; i++)
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	3301      	adds	r3, #1
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	dde9      	ble.n	8003f72 <USART_TX_Buffer+0x26e>
		}
	}

	return 1;
 8003f9e:	2301      	movs	r3, #1

}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	200006e0 	.word	0x200006e0
 8003fac:	20000590 	.word	0x20000590
 8003fb0:	40011000 	.word	0x40011000
 8003fb4:	20000238 	.word	0x20000238
 8003fb8:	40004400 	.word	0x40004400
 8003fbc:	20000248 	.word	0x20000248
 8003fc0:	40004800 	.word	0x40004800
 8003fc4:	20000258 	.word	0x20000258
 8003fc8:	40004c00 	.word	0x40004c00
 8003fcc:	20000268 	.word	0x20000268
 8003fd0:	40005000 	.word	0x40005000
 8003fd4:	20000278 	.word	0x20000278
 8003fd8:	40011400 	.word	0x40011400
 8003fdc:	20000288 	.word	0x20000288

08003fe0 <USART_RX_Buffer>:

int8_t USART_RX_Buffer(USART_Config *config, uint8_t *rx_buffer, uint16_t length, bool circular_buffer_enable)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	4611      	mov	r1, r2
 8003fec:	461a      	mov	r2, r3
 8003fee:	460b      	mov	r3, r1
 8003ff0:	80fb      	strh	r3, [r7, #6]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	717b      	strb	r3, [r7, #5]
	if(config->dma_enable |= USART_Configuration.DMA_Enable.RX_Enable)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	7c5b      	ldrb	r3, [r3, #17]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	745a      	strb	r2, [r3, #17]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	7c5b      	ldrb	r3, [r3, #17]
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80f7 	beq.w	80041fc <USART_RX_Buffer+0x21c>
	{
		if(circular_buffer_enable == 1)
 800400e:	797b      	ldrb	r3, [r7, #5]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00d      	beq.n	8004030 <USART_RX_Buffer+0x50>
		{
			xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8004014:	4b89      	ldr	r3, [pc, #548]	@ (800423c <USART_RX_Buffer+0x25c>)
 8004016:	f993 3000 	ldrsb.w	r3, [r3]
 800401a:	4618      	mov	r0, r3
 800401c:	2200      	movs	r2, #0
 800401e:	4988      	ldr	r1, [pc, #544]	@ (8004240 <USART_RX_Buffer+0x260>)
 8004020:	4603      	mov	r3, r0
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	1a1b      	subs	r3, r3, r0
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	440b      	add	r3, r1
 800402a:	3318      	adds	r3, #24
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e00d      	b.n	800404c <USART_RX_Buffer+0x6c>
		}
		else
		{
			xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Enable;
 8004030:	4b82      	ldr	r3, [pc, #520]	@ (800423c <USART_RX_Buffer+0x25c>)
 8004032:	f993 3000 	ldrsb.w	r3, [r3]
 8004036:	4618      	mov	r0, r3
 8004038:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800403c:	4980      	ldr	r1, [pc, #512]	@ (8004240 <USART_RX_Buffer+0x260>)
 800403e:	4603      	mov	r3, r0
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	1a1b      	subs	r3, r3, r0
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	440b      	add	r3, r1
 8004048:	3318      	adds	r3, #24
 800404a:	601a      	str	r2, [r3, #0]
		}

		xUSART_RX[usart_dma_instance_number].memory_address = (uint32_t)rx_buffer;
 800404c:	4b7b      	ldr	r3, [pc, #492]	@ (800423c <USART_RX_Buffer+0x25c>)
 800404e:	f993 3000 	ldrsb.w	r3, [r3]
 8004052:	4618      	mov	r0, r3
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	497a      	ldr	r1, [pc, #488]	@ (8004240 <USART_RX_Buffer+0x260>)
 8004058:	4603      	mov	r3, r0
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	1a1b      	subs	r3, r3, r0
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	440b      	add	r3, r1
 8004062:	3330      	adds	r3, #48	@ 0x30
 8004064:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	1d1a      	adds	r2, r3, #4
 800406c:	4b73      	ldr	r3, [pc, #460]	@ (800423c <USART_RX_Buffer+0x25c>)
 800406e:	f993 3000 	ldrsb.w	r3, [r3]
 8004072:	4619      	mov	r1, r3
 8004074:	4610      	mov	r0, r2
 8004076:	4a72      	ldr	r2, [pc, #456]	@ (8004240 <USART_RX_Buffer+0x260>)
 8004078:	460b      	mov	r3, r1
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	1a5b      	subs	r3, r3, r1
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	4413      	add	r3, r2
 8004082:	332c      	adds	r3, #44	@ 0x2c
 8004084:	6018      	str	r0, [r3, #0]
		xUSART_RX[usart_dma_instance_number].buffer_length = length;
 8004086:	4b6d      	ldr	r3, [pc, #436]	@ (800423c <USART_RX_Buffer+0x25c>)
 8004088:	f993 3000 	ldrsb.w	r3, [r3]
 800408c:	4619      	mov	r1, r3
 800408e:	4a6c      	ldr	r2, [pc, #432]	@ (8004240 <USART_RX_Buffer+0x260>)
 8004090:	460b      	mov	r3, r1
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	1a5b      	subs	r3, r3, r1
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4413      	add	r3, r2
 800409a:	3334      	adds	r3, #52	@ 0x34
 800409c:	88fa      	ldrh	r2, [r7, #6]
 800409e:	801a      	strh	r2, [r3, #0]
		DMA_Set_Target(&xUSART_RX[usart_dma_instance_number]);
 80040a0:	4b66      	ldr	r3, [pc, #408]	@ (800423c <USART_RX_Buffer+0x25c>)
 80040a2:	f993 3000 	ldrsb.w	r3, [r3]
 80040a6:	461a      	mov	r2, r3
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4a63      	ldr	r2, [pc, #396]	@ (8004240 <USART_RX_Buffer+0x260>)
 80040b2:	4413      	add	r3, r2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fe fa3f 	bl	8002538 <DMA_Set_Target>
		DMA_Set_Trigger(&xUSART_RX[usart_dma_instance_number]);
 80040ba:	4b60      	ldr	r3, [pc, #384]	@ (800423c <USART_RX_Buffer+0x25c>)
 80040bc:	f993 3000 	ldrsb.w	r3, [r3]
 80040c0:	461a      	mov	r2, r3
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	4a5d      	ldr	r2, [pc, #372]	@ (8004240 <USART_RX_Buffer+0x260>)
 80040cc:	4413      	add	r3, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe fa92 	bl	80025f8 <DMA_Set_Trigger>


		if(circular_buffer_enable == 1)
 80040d4:	797b      	ldrb	r3, [r7, #5]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 80aa 	beq.w	8004230 <USART_RX_Buffer+0x250>
		{

		if(config->Port == USART1)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a58      	ldr	r2, [pc, #352]	@ (8004244 <USART_RX_Buffer+0x264>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d112      	bne.n	800410c <USART_RX_Buffer+0x12c>
		{
			while((USART1_RX_DMA_Flag.Transfer_Complete_Flag == false))
 80040e6:	e006      	b.n	80040f6 <USART_RX_Buffer+0x116>
			{
				if(USART1_RX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 80040e8:	4b57      	ldr	r3, [pc, #348]	@ (8004248 <USART_RX_Buffer+0x268>)
 80040ea:	78db      	ldrb	r3, [r3, #3]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <USART_RX_Buffer+0x116>
 80040f0:	f04f 33ff 	mov.w	r3, #4294967295
 80040f4:	e09d      	b.n	8004232 <USART_RX_Buffer+0x252>
			while((USART1_RX_DMA_Flag.Transfer_Complete_Flag == false))
 80040f6:	4b54      	ldr	r3, [pc, #336]	@ (8004248 <USART_RX_Buffer+0x268>)
 80040f8:	785b      	ldrb	r3, [r3, #1]
 80040fa:	f083 0301 	eor.w	r3, r3, #1
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1f1      	bne.n	80040e8 <USART_RX_Buffer+0x108>
			}
			USART1_RX_DMA_Flag.Transfer_Complete_Flag = false;
 8004104:	4b50      	ldr	r3, [pc, #320]	@ (8004248 <USART_RX_Buffer+0x268>)
 8004106:	2200      	movs	r2, #0
 8004108:	705a      	strb	r2, [r3, #1]
 800410a:	e091      	b.n	8004230 <USART_RX_Buffer+0x250>
		}
		else if(config->Port == USART2)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a4e      	ldr	r2, [pc, #312]	@ (800424c <USART_RX_Buffer+0x26c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d112      	bne.n	800413c <USART_RX_Buffer+0x15c>
		{
			while((USART2_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8004116:	e006      	b.n	8004126 <USART_RX_Buffer+0x146>
			{
				if(USART2_RX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 8004118:	4b4d      	ldr	r3, [pc, #308]	@ (8004250 <USART_RX_Buffer+0x270>)
 800411a:	78db      	ldrb	r3, [r3, #3]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <USART_RX_Buffer+0x146>
 8004120:	f04f 33ff 	mov.w	r3, #4294967295
 8004124:	e085      	b.n	8004232 <USART_RX_Buffer+0x252>
			while((USART2_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8004126:	4b4a      	ldr	r3, [pc, #296]	@ (8004250 <USART_RX_Buffer+0x270>)
 8004128:	785b      	ldrb	r3, [r3, #1]
 800412a:	f083 0301 	eor.w	r3, r3, #1
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f1      	bne.n	8004118 <USART_RX_Buffer+0x138>
			}
			USART2_RX_DMA_Flag.Transfer_Complete_Flag = false;
 8004134:	4b46      	ldr	r3, [pc, #280]	@ (8004250 <USART_RX_Buffer+0x270>)
 8004136:	2200      	movs	r2, #0
 8004138:	705a      	strb	r2, [r3, #1]
 800413a:	e079      	b.n	8004230 <USART_RX_Buffer+0x250>
		}
		else if(config->Port == USART3)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a44      	ldr	r2, [pc, #272]	@ (8004254 <USART_RX_Buffer+0x274>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d112      	bne.n	800416c <USART_RX_Buffer+0x18c>
		{
			while((USART3_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8004146:	e006      	b.n	8004156 <USART_RX_Buffer+0x176>
			{
				if(USART3_RX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 8004148:	4b43      	ldr	r3, [pc, #268]	@ (8004258 <USART_RX_Buffer+0x278>)
 800414a:	78db      	ldrb	r3, [r3, #3]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <USART_RX_Buffer+0x176>
 8004150:	f04f 33ff 	mov.w	r3, #4294967295
 8004154:	e06d      	b.n	8004232 <USART_RX_Buffer+0x252>
			while((USART3_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8004156:	4b40      	ldr	r3, [pc, #256]	@ (8004258 <USART_RX_Buffer+0x278>)
 8004158:	785b      	ldrb	r3, [r3, #1]
 800415a:	f083 0301 	eor.w	r3, r3, #1
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1f1      	bne.n	8004148 <USART_RX_Buffer+0x168>
			}
			USART3_RX_DMA_Flag.Transfer_Complete_Flag = false;
 8004164:	4b3c      	ldr	r3, [pc, #240]	@ (8004258 <USART_RX_Buffer+0x278>)
 8004166:	2200      	movs	r2, #0
 8004168:	705a      	strb	r2, [r3, #1]
 800416a:	e061      	b.n	8004230 <USART_RX_Buffer+0x250>
		}
		else if(config->Port == UART4)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a3a      	ldr	r2, [pc, #232]	@ (800425c <USART_RX_Buffer+0x27c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d112      	bne.n	800419c <USART_RX_Buffer+0x1bc>
		{
			while((USART4_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8004176:	e006      	b.n	8004186 <USART_RX_Buffer+0x1a6>
			{
				if(USART4_RX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 8004178:	4b39      	ldr	r3, [pc, #228]	@ (8004260 <USART_RX_Buffer+0x280>)
 800417a:	78db      	ldrb	r3, [r3, #3]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <USART_RX_Buffer+0x1a6>
 8004180:	f04f 33ff 	mov.w	r3, #4294967295
 8004184:	e055      	b.n	8004232 <USART_RX_Buffer+0x252>
			while((USART4_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8004186:	4b36      	ldr	r3, [pc, #216]	@ (8004260 <USART_RX_Buffer+0x280>)
 8004188:	785b      	ldrb	r3, [r3, #1]
 800418a:	f083 0301 	eor.w	r3, r3, #1
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f1      	bne.n	8004178 <USART_RX_Buffer+0x198>
			}
			USART4_RX_DMA_Flag.Transfer_Complete_Flag = false;
 8004194:	4b32      	ldr	r3, [pc, #200]	@ (8004260 <USART_RX_Buffer+0x280>)
 8004196:	2200      	movs	r2, #0
 8004198:	705a      	strb	r2, [r3, #1]
 800419a:	e049      	b.n	8004230 <USART_RX_Buffer+0x250>
		}
		else if(config->Port == UART5)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a30      	ldr	r2, [pc, #192]	@ (8004264 <USART_RX_Buffer+0x284>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d112      	bne.n	80041cc <USART_RX_Buffer+0x1ec>
		{
			while((USART5_RX_DMA_Flag.Transfer_Complete_Flag == false))
 80041a6:	e006      	b.n	80041b6 <USART_RX_Buffer+0x1d6>
			{
				if(USART5_RX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 80041a8:	4b2f      	ldr	r3, [pc, #188]	@ (8004268 <USART_RX_Buffer+0x288>)
 80041aa:	78db      	ldrb	r3, [r3, #3]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <USART_RX_Buffer+0x1d6>
 80041b0:	f04f 33ff 	mov.w	r3, #4294967295
 80041b4:	e03d      	b.n	8004232 <USART_RX_Buffer+0x252>
			while((USART5_RX_DMA_Flag.Transfer_Complete_Flag == false))
 80041b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004268 <USART_RX_Buffer+0x288>)
 80041b8:	785b      	ldrb	r3, [r3, #1]
 80041ba:	f083 0301 	eor.w	r3, r3, #1
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f1      	bne.n	80041a8 <USART_RX_Buffer+0x1c8>
			}
			USART5_RX_DMA_Flag.Transfer_Complete_Flag = false;
 80041c4:	4b28      	ldr	r3, [pc, #160]	@ (8004268 <USART_RX_Buffer+0x288>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	705a      	strb	r2, [r3, #1]
 80041ca:	e031      	b.n	8004230 <USART_RX_Buffer+0x250>
		}
		else if(config->Port == USART6)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a26      	ldr	r2, [pc, #152]	@ (800426c <USART_RX_Buffer+0x28c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d12c      	bne.n	8004230 <USART_RX_Buffer+0x250>
		{
			while((USART6_RX_DMA_Flag.Transfer_Complete_Flag == false))
 80041d6:	e006      	b.n	80041e6 <USART_RX_Buffer+0x206>
			{
				if(USART6_RX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 80041d8:	4b25      	ldr	r3, [pc, #148]	@ (8004270 <USART_RX_Buffer+0x290>)
 80041da:	78db      	ldrb	r3, [r3, #3]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <USART_RX_Buffer+0x206>
 80041e0:	f04f 33ff 	mov.w	r3, #4294967295
 80041e4:	e025      	b.n	8004232 <USART_RX_Buffer+0x252>
			while((USART6_RX_DMA_Flag.Transfer_Complete_Flag == false))
 80041e6:	4b22      	ldr	r3, [pc, #136]	@ (8004270 <USART_RX_Buffer+0x290>)
 80041e8:	785b      	ldrb	r3, [r3, #1]
 80041ea:	f083 0301 	eor.w	r3, r3, #1
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f1      	bne.n	80041d8 <USART_RX_Buffer+0x1f8>
			}
			USART6_RX_DMA_Flag.Transfer_Complete_Flag = false;
 80041f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004270 <USART_RX_Buffer+0x290>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	705a      	strb	r2, [r3, #1]
 80041fa:	e019      	b.n	8004230 <USART_RX_Buffer+0x250>
		}

	}
	else
	{ //Will Take more time
		for(int i = 0; i <= length; i++)
 80041fc:	2300      	movs	r3, #0
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	e012      	b.n	8004228 <USART_RX_Buffer+0x248>
		{
			rx_buffer[i] = config->Port->DR ;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6859      	ldr	r1, [r3, #4]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	4413      	add	r3, r2
 800420e:	b2ca      	uxtb	r2, r1
 8004210:	701a      	strb	r2, [r3, #0]
			while(!(config->Port->SR & USART_SR_RXNE));
 8004212:	bf00      	nop
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f8      	beq.n	8004214 <USART_RX_Buffer+0x234>
		for(int i = 0; i <= length; i++)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	3301      	adds	r3, #1
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	88fb      	ldrh	r3, [r7, #6]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	429a      	cmp	r2, r3
 800422e:	dde8      	ble.n	8004202 <USART_RX_Buffer+0x222>
		}
	}

	return 1;
 8004230:	2301      	movs	r3, #1

}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	200006e0 	.word	0x200006e0
 8004240:	20000440 	.word	0x20000440
 8004244:	40011000 	.word	0x40011000
 8004248:	20000230 	.word	0x20000230
 800424c:	40004400 	.word	0x40004400
 8004250:	20000240 	.word	0x20000240
 8004254:	40004800 	.word	0x40004800
 8004258:	20000250 	.word	0x20000250
 800425c:	40004c00 	.word	0x40004c00
 8004260:	20000260 	.word	0x20000260
 8004264:	40005000 	.word	0x40005000
 8004268:	20000270 	.word	0x20000270
 800426c:	40011400 	.word	0x40011400
 8004270:	20000280 	.word	0x20000280

08004274 <__NVIC_SetPriority>:
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	6039      	str	r1, [r7, #0]
 800427e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004284:	2b00      	cmp	r3, #0
 8004286:	db0a      	blt.n	800429e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	b2da      	uxtb	r2, r3
 800428c:	490c      	ldr	r1, [pc, #48]	@ (80042c0 <__NVIC_SetPriority+0x4c>)
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	0112      	lsls	r2, r2, #4
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	440b      	add	r3, r1
 8004298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800429c:	e00a      	b.n	80042b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	4908      	ldr	r1, [pc, #32]	@ (80042c4 <__NVIC_SetPriority+0x50>)
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	3b04      	subs	r3, #4
 80042ac:	0112      	lsls	r2, r2, #4
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	440b      	add	r3, r1
 80042b2:	761a      	strb	r2, [r3, #24]
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	e000e100 	.word	0xe000e100
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042d8:	d301      	bcc.n	80042de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042da:	2301      	movs	r3, #1
 80042dc:	e00f      	b.n	80042fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042de:	4a0a      	ldr	r2, [pc, #40]	@ (8004308 <SysTick_Config+0x40>)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042e6:	210f      	movs	r1, #15
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	f7ff ffc2 	bl	8004274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042f0:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <SysTick_Config+0x40>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042f6:	4b04      	ldr	r3, [pc, #16]	@ (8004308 <SysTick_Config+0x40>)
 80042f8:	2207      	movs	r2, #7
 80042fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	e000e010 	.word	0xe000e010

0800430c <MCU_Clock_Setup>:
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
	SystemInit();
 8004312:	f000 f929 	bl	8004568 <SystemInit>
	uint8_t pll_m = 8;
 8004316:	2308      	movs	r3, #8
 8004318:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 800431a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800431e:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8004324:	2307      	movs	r3, #7
 8004326:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 8004328:	4b3c      	ldr	r3, [pc, #240]	@ (800441c <MCU_Clock_Setup+0x110>)
 800432a:	2200      	movs	r2, #0
 800432c:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 800432e:	4b3b      	ldr	r3, [pc, #236]	@ (800441c <MCU_Clock_Setup+0x110>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a3a      	ldr	r2, [pc, #232]	@ (800441c <MCU_Clock_Setup+0x110>)
 8004334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004338:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 800433a:	bf00      	nop
 800433c:	4b37      	ldr	r3, [pc, #220]	@ (800441c <MCU_Clock_Setup+0x110>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f9      	beq.n	800433c <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8004348:	4b34      	ldr	r3, [pc, #208]	@ (800441c <MCU_Clock_Setup+0x110>)
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	4a33      	ldr	r2, [pc, #204]	@ (800441c <MCU_Clock_Setup+0x110>)
 800434e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004352:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8004354:	4b32      	ldr	r3, [pc, #200]	@ (8004420 <MCU_Clock_Setup+0x114>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a31      	ldr	r2, [pc, #196]	@ (8004420 <MCU_Clock_Setup+0x114>)
 800435a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800435e:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8004360:	4b30      	ldr	r3, [pc, #192]	@ (8004424 <MCU_Clock_Setup+0x118>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a2f      	ldr	r2, [pc, #188]	@ (8004424 <MCU_Clock_Setup+0x118>)
 8004366:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800436a:	f043 0305 	orr.w	r3, r3, #5
 800436e:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8004370:	4b2a      	ldr	r3, [pc, #168]	@ (800441c <MCU_Clock_Setup+0x110>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	78ba      	ldrb	r2, [r7, #2]
 8004376:	0611      	lsls	r1, r2, #24
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	0412      	lsls	r2, r2, #16
 800437c:	4311      	orrs	r1, r2
 800437e:	88ba      	ldrh	r2, [r7, #4]
 8004380:	0192      	lsls	r2, r2, #6
 8004382:	4311      	orrs	r1, r2
 8004384:	79fa      	ldrb	r2, [r7, #7]
 8004386:	430a      	orrs	r2, r1
 8004388:	4611      	mov	r1, r2
 800438a:	4a24      	ldr	r2, [pc, #144]	@ (800441c <MCU_Clock_Setup+0x110>)
 800438c:	430b      	orrs	r3, r1
 800438e:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8004390:	4b22      	ldr	r3, [pc, #136]	@ (800441c <MCU_Clock_Setup+0x110>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4a21      	ldr	r2, [pc, #132]	@ (800441c <MCU_Clock_Setup+0x110>)
 8004396:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800439a:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 800439c:	4b1f      	ldr	r3, [pc, #124]	@ (800441c <MCU_Clock_Setup+0x110>)
 800439e:	4a1f      	ldr	r2, [pc, #124]	@ (800441c <MCU_Clock_Setup+0x110>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 80043a4:	4b1d      	ldr	r3, [pc, #116]	@ (800441c <MCU_Clock_Setup+0x110>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	4a1c      	ldr	r2, [pc, #112]	@ (800441c <MCU_Clock_Setup+0x110>)
 80043aa:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80043ae:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 80043b0:	4b1a      	ldr	r3, [pc, #104]	@ (800441c <MCU_Clock_Setup+0x110>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4a19      	ldr	r2, [pc, #100]	@ (800441c <MCU_Clock_Setup+0x110>)
 80043b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043ba:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 80043bc:	4b17      	ldr	r3, [pc, #92]	@ (800441c <MCU_Clock_Setup+0x110>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a16      	ldr	r2, [pc, #88]	@ (800441c <MCU_Clock_Setup+0x110>)
 80043c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043c6:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 80043c8:	bf00      	nop
 80043ca:	4b14      	ldr	r3, [pc, #80]	@ (800441c <MCU_Clock_Setup+0x110>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f9      	beq.n	80043ca <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80043d6:	4b11      	ldr	r3, [pc, #68]	@ (800441c <MCU_Clock_Setup+0x110>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	4a10      	ldr	r2, [pc, #64]	@ (800441c <MCU_Clock_Setup+0x110>)
 80043dc:	f043 0302 	orr.w	r3, r3, #2
 80043e0:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80043e2:	bf00      	nop
 80043e4:	4b0d      	ldr	r3, [pc, #52]	@ (800441c <MCU_Clock_Setup+0x110>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d1f9      	bne.n	80043e4 <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 80043f0:	f000 f8cc 	bl	800458c <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80043f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004428 <MCU_Clock_Setup+0x11c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	08db      	lsrs	r3, r3, #3
 80043fa:	4a0c      	ldr	r2, [pc, #48]	@ (800442c <MCU_Clock_Setup+0x120>)
 80043fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff ff60 	bl	80042c8 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8004408:	4b04      	ldr	r3, [pc, #16]	@ (800441c <MCU_Clock_Setup+0x110>)
 800440a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440c:	4a03      	ldr	r2, [pc, #12]	@ (800441c <MCU_Clock_Setup+0x110>)
 800440e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004412:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004414:	bf00      	nop
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40023800 	.word	0x40023800
 8004420:	40007000 	.word	0x40007000
 8004424:	40023c00 	.word	0x40023c00
 8004428:	20000000 	.word	0x20000000
 800442c:	18618619 	.word	0x18618619

08004430 <Delay_Config>:
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8004434:	4b09      	ldr	r3, [pc, #36]	@ (800445c <Delay_Config+0x2c>)
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 800443a:	4b08      	ldr	r3, [pc, #32]	@ (800445c <Delay_Config+0x2c>)
 800443c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8004440:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8004442:	4b06      	ldr	r3, [pc, #24]	@ (800445c <Delay_Config+0x2c>)
 8004444:	2200      	movs	r2, #0
 8004446:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8004448:	4b04      	ldr	r3, [pc, #16]	@ (800445c <Delay_Config+0x2c>)
 800444a:	2205      	movs	r2, #5
 800444c:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	e000e010 	.word	0xe000e010

08004460 <main>:
#include "Console/Console.h"



int main(void)
{
 8004460:	b590      	push	{r4, r7, lr}
 8004462:	b089      	sub	sp, #36	@ 0x24
 8004464:	af04      	add	r7, sp, #16
	MCU_Clock_Setup();
 8004466:	f7ff ff51 	bl	800430c <MCU_Clock_Setup>
	Delay_Config();
 800446a:	f7ff ffe1 	bl	8004430 <Delay_Config>
	Console_Init(9600);
 800446e:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8004472:	f7fc fc19 	bl	8000ca8 <Console_Init>


	GPIO_Pin_Init(GPIOD, 12, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull,
 8004476:	2001      	movs	r0, #1
 8004478:	2400      	movs	r4, #0
			                 GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);
 800447a:	2303      	movs	r3, #3
 800447c:	2200      	movs	r2, #0
 800447e:	2100      	movs	r1, #0
	GPIO_Pin_Init(GPIOD, 12, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull,
 8004480:	9102      	str	r1, [sp, #8]
 8004482:	9201      	str	r2, [sp, #4]
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	4623      	mov	r3, r4
 8004488:	4602      	mov	r2, r0
 800448a:	210c      	movs	r1, #12
 800448c:	4815      	ldr	r0, [pc, #84]	@ (80044e4 <main+0x84>)
 800448e:	f7fe f9c5 	bl	800281c <GPIO_Pin_Init>



	volatile int ret_Scanf_temp = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
	int number1 = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	607b      	str	r3, [r7, #4]
	int number2 = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	603b      	str	r3, [r7, #0]
	int result = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		printConsole("Please First Number X =  ");
 80044a2:	4811      	ldr	r0, [pc, #68]	@ (80044e8 <main+0x88>)
 80044a4:	f7fc fc30 	bl	8000d08 <printConsole>
		ret_Scanf_temp = readConsole("%d",&number1);
 80044a8:	1d3b      	adds	r3, r7, #4
 80044aa:	4619      	mov	r1, r3
 80044ac:	480f      	ldr	r0, [pc, #60]	@ (80044ec <main+0x8c>)
 80044ae:	f7fc fc4d 	bl	8000d4c <readConsole>
 80044b2:	4603      	mov	r3, r0
 80044b4:	60bb      	str	r3, [r7, #8]
		printConsole("Please First Number Y =  ");
 80044b6:	480e      	ldr	r0, [pc, #56]	@ (80044f0 <main+0x90>)
 80044b8:	f7fc fc26 	bl	8000d08 <printConsole>
		ret_Scanf_temp = readConsole("%d",&number2);
 80044bc:	463b      	mov	r3, r7
 80044be:	4619      	mov	r1, r3
 80044c0:	480a      	ldr	r0, [pc, #40]	@ (80044ec <main+0x8c>)
 80044c2:	f7fc fc43 	bl	8000d4c <readConsole>
 80044c6:	4603      	mov	r3, r0
 80044c8:	60bb      	str	r3, [r7, #8]
		result = number1 + number2;
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	4413      	add	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
		printConsole("Final Answer = %d\r\n",result);
 80044d2:	68f9      	ldr	r1, [r7, #12]
 80044d4:	4807      	ldr	r0, [pc, #28]	@ (80044f4 <main+0x94>)
 80044d6:	f7fc fc17 	bl	8000d08 <printConsole>
		printConsole("*******************************************************************\r\n");
 80044da:	4807      	ldr	r0, [pc, #28]	@ (80044f8 <main+0x98>)
 80044dc:	f7fc fc14 	bl	8000d08 <printConsole>
		printConsole("Please First Number X =  ");
 80044e0:	bf00      	nop
 80044e2:	e7de      	b.n	80044a2 <main+0x42>
 80044e4:	40020c00 	.word	0x40020c00
 80044e8:	08005a78 	.word	0x08005a78
 80044ec:	08005a94 	.word	0x08005a94
 80044f0:	08005a98 	.word	0x08005a98
 80044f4:	08005ab4 	.word	0x08005ab4
 80044f8:	08005ac8 	.word	0x08005ac8

080044fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004504:	4a14      	ldr	r2, [pc, #80]	@ (8004558 <_sbrk+0x5c>)
 8004506:	4b15      	ldr	r3, [pc, #84]	@ (800455c <_sbrk+0x60>)
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004510:	4b13      	ldr	r3, [pc, #76]	@ (8004560 <_sbrk+0x64>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d102      	bne.n	800451e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004518:	4b11      	ldr	r3, [pc, #68]	@ (8004560 <_sbrk+0x64>)
 800451a:	4a12      	ldr	r2, [pc, #72]	@ (8004564 <_sbrk+0x68>)
 800451c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800451e:	4b10      	ldr	r3, [pc, #64]	@ (8004560 <_sbrk+0x64>)
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4413      	add	r3, r2
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	429a      	cmp	r2, r3
 800452a:	d207      	bcs.n	800453c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800452c:	f000 f928 	bl	8004780 <__errno>
 8004530:	4603      	mov	r3, r0
 8004532:	220c      	movs	r2, #12
 8004534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004536:	f04f 33ff 	mov.w	r3, #4294967295
 800453a:	e009      	b.n	8004550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800453c:	4b08      	ldr	r3, [pc, #32]	@ (8004560 <_sbrk+0x64>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004542:	4b07      	ldr	r3, [pc, #28]	@ (8004560 <_sbrk+0x64>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4413      	add	r3, r2
 800454a:	4a05      	ldr	r2, [pc, #20]	@ (8004560 <_sbrk+0x64>)
 800454c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800454e:	68fb      	ldr	r3, [r7, #12]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20020000 	.word	0x20020000
 800455c:	00000400 	.word	0x00000400
 8004560:	200006e4 	.word	0x200006e4
 8004564:	20000830 	.word	0x20000830

08004568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800456c:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <SystemInit+0x20>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004572:	4a05      	ldr	r2, [pc, #20]	@ (8004588 <SystemInit+0x20>)
 8004574:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004578:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004592:	2300      	movs	r3, #0
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	2302      	movs	r3, #2
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	2300      	movs	r3, #0
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	2302      	movs	r3, #2
 80045a4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80045a6:	4b34      	ldr	r3, [pc, #208]	@ (8004678 <SystemCoreClockUpdate+0xec>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d011      	beq.n	80045da <SystemCoreClockUpdate+0x4e>
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d844      	bhi.n	8004646 <SystemCoreClockUpdate+0xba>
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <SystemCoreClockUpdate+0x3e>
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d004      	beq.n	80045d2 <SystemCoreClockUpdate+0x46>
 80045c8:	e03d      	b.n	8004646 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80045ca:	4b2c      	ldr	r3, [pc, #176]	@ (800467c <SystemCoreClockUpdate+0xf0>)
 80045cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004680 <SystemCoreClockUpdate+0xf4>)
 80045ce:	601a      	str	r2, [r3, #0]
      break;
 80045d0:	e03d      	b.n	800464e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80045d2:	4b2a      	ldr	r3, [pc, #168]	@ (800467c <SystemCoreClockUpdate+0xf0>)
 80045d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004684 <SystemCoreClockUpdate+0xf8>)
 80045d6:	601a      	str	r2, [r3, #0]
      break;
 80045d8:	e039      	b.n	800464e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80045da:	4b27      	ldr	r3, [pc, #156]	@ (8004678 <SystemCoreClockUpdate+0xec>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	0d9b      	lsrs	r3, r3, #22
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045e6:	4b24      	ldr	r3, [pc, #144]	@ (8004678 <SystemCoreClockUpdate+0xec>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045ee:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00c      	beq.n	8004610 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80045f6:	4a23      	ldr	r2, [pc, #140]	@ (8004684 <SystemCoreClockUpdate+0xf8>)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004678 <SystemCoreClockUpdate+0xec>)
 8004600:	6852      	ldr	r2, [r2, #4]
 8004602:	0992      	lsrs	r2, r2, #6
 8004604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004608:	fb02 f303 	mul.w	r3, r2, r3
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	e00b      	b.n	8004628 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004610:	4a1b      	ldr	r2, [pc, #108]	@ (8004680 <SystemCoreClockUpdate+0xf4>)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	fbb2 f3f3 	udiv	r3, r2, r3
 8004618:	4a17      	ldr	r2, [pc, #92]	@ (8004678 <SystemCoreClockUpdate+0xec>)
 800461a:	6852      	ldr	r2, [r2, #4]
 800461c:	0992      	lsrs	r2, r2, #6
 800461e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004622:	fb02 f303 	mul.w	r3, r2, r3
 8004626:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004628:	4b13      	ldr	r3, [pc, #76]	@ (8004678 <SystemCoreClockUpdate+0xec>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	0c1b      	lsrs	r3, r3, #16
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	3301      	adds	r3, #1
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004640:	4a0e      	ldr	r2, [pc, #56]	@ (800467c <SystemCoreClockUpdate+0xf0>)
 8004642:	6013      	str	r3, [r2, #0]
      break;
 8004644:	e003      	b.n	800464e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8004646:	4b0d      	ldr	r3, [pc, #52]	@ (800467c <SystemCoreClockUpdate+0xf0>)
 8004648:	4a0d      	ldr	r2, [pc, #52]	@ (8004680 <SystemCoreClockUpdate+0xf4>)
 800464a:	601a      	str	r2, [r3, #0]
      break;
 800464c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800464e:	4b0a      	ldr	r3, [pc, #40]	@ (8004678 <SystemCoreClockUpdate+0xec>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	4a0b      	ldr	r2, [pc, #44]	@ (8004688 <SystemCoreClockUpdate+0xfc>)
 800465a:	5cd3      	ldrb	r3, [r2, r3]
 800465c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800465e:	4b07      	ldr	r3, [pc, #28]	@ (800467c <SystemCoreClockUpdate+0xf0>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	fa22 f303 	lsr.w	r3, r2, r3
 8004668:	4a04      	ldr	r2, [pc, #16]	@ (800467c <SystemCoreClockUpdate+0xf0>)
 800466a:	6013      	str	r3, [r2, #0]
}
 800466c:	bf00      	nop
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	40023800 	.word	0x40023800
 800467c:	20000000 	.word	0x20000000
 8004680:	00f42400 	.word	0x00f42400
 8004684:	017d7840 	.word	0x017d7840
 8004688:	08005f20 	.word	0x08005f20

0800468c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800468c:	480d      	ldr	r0, [pc, #52]	@ (80046c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800468e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004690:	f7ff ff6a 	bl	8004568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004694:	480c      	ldr	r0, [pc, #48]	@ (80046c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004696:	490d      	ldr	r1, [pc, #52]	@ (80046cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004698:	4a0d      	ldr	r2, [pc, #52]	@ (80046d0 <LoopForever+0xe>)
  movs r3, #0
 800469a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800469c:	e002      	b.n	80046a4 <LoopCopyDataInit>

0800469e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800469e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046a2:	3304      	adds	r3, #4

080046a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046a8:	d3f9      	bcc.n	800469e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046aa:	4a0a      	ldr	r2, [pc, #40]	@ (80046d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80046ac:	4c0a      	ldr	r4, [pc, #40]	@ (80046d8 <LoopForever+0x16>)
  movs r3, #0
 80046ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046b0:	e001      	b.n	80046b6 <LoopFillZerobss>

080046b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046b4:	3204      	adds	r2, #4

080046b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046b8:	d3fb      	bcc.n	80046b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80046ba:	f000 f867 	bl	800478c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80046be:	f7ff fecf 	bl	8004460 <main>

080046c2 <LoopForever>:

LoopForever:
  b LoopForever
 80046c2:	e7fe      	b.n	80046c2 <LoopForever>
  ldr   r0, =_estack
 80046c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80046c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046cc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80046d0:	08006090 	.word	0x08006090
  ldr r2, =_sbss
 80046d4:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80046d8:	20000830 	.word	0x20000830

080046dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046dc:	e7fe      	b.n	80046dc <ADC_IRQHandler>

080046de <__seofread>:
 80046de:	2000      	movs	r0, #0
 80046e0:	4770      	bx	lr
	...

080046e4 <_vsiprintf_r>:
 80046e4:	b500      	push	{lr}
 80046e6:	b09b      	sub	sp, #108	@ 0x6c
 80046e8:	9100      	str	r1, [sp, #0]
 80046ea:	9104      	str	r1, [sp, #16]
 80046ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80046f0:	9105      	str	r1, [sp, #20]
 80046f2:	9102      	str	r1, [sp, #8]
 80046f4:	4905      	ldr	r1, [pc, #20]	@ (800470c <_vsiprintf_r+0x28>)
 80046f6:	9103      	str	r1, [sp, #12]
 80046f8:	4669      	mov	r1, sp
 80046fa:	f000 f9c1 	bl	8004a80 <_svfiprintf_r>
 80046fe:	9b00      	ldr	r3, [sp, #0]
 8004700:	2200      	movs	r2, #0
 8004702:	701a      	strb	r2, [r3, #0]
 8004704:	b01b      	add	sp, #108	@ 0x6c
 8004706:	f85d fb04 	ldr.w	pc, [sp], #4
 800470a:	bf00      	nop
 800470c:	ffff0208 	.word	0xffff0208

08004710 <vsiprintf>:
 8004710:	4613      	mov	r3, r2
 8004712:	460a      	mov	r2, r1
 8004714:	4601      	mov	r1, r0
 8004716:	4802      	ldr	r0, [pc, #8]	@ (8004720 <vsiprintf+0x10>)
 8004718:	6800      	ldr	r0, [r0, #0]
 800471a:	f7ff bfe3 	b.w	80046e4 <_vsiprintf_r>
 800471e:	bf00      	nop
 8004720:	20000004 	.word	0x20000004

08004724 <_vsiscanf_r>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	b09a      	sub	sp, #104	@ 0x68
 8004728:	4604      	mov	r4, r0
 800472a:	461e      	mov	r6, r3
 800472c:	4608      	mov	r0, r1
 800472e:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8004732:	4615      	mov	r5, r2
 8004734:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004738:	9100      	str	r1, [sp, #0]
 800473a:	9104      	str	r1, [sp, #16]
 800473c:	f7fb fd48 	bl	80001d0 <strlen>
 8004740:	4b09      	ldr	r3, [pc, #36]	@ (8004768 <_vsiscanf_r+0x44>)
 8004742:	9309      	str	r3, [sp, #36]	@ 0x24
 8004744:	2300      	movs	r3, #0
 8004746:	930d      	str	r3, [sp, #52]	@ 0x34
 8004748:	9312      	str	r3, [sp, #72]	@ 0x48
 800474a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800474e:	9001      	str	r0, [sp, #4]
 8004750:	9005      	str	r0, [sp, #20]
 8004752:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004756:	462a      	mov	r2, r5
 8004758:	4633      	mov	r3, r6
 800475a:	4669      	mov	r1, sp
 800475c:	4620      	mov	r0, r4
 800475e:	f000 fae3 	bl	8004d28 <__ssvfiscanf_r>
 8004762:	b01a      	add	sp, #104	@ 0x68
 8004764:	bd70      	pop	{r4, r5, r6, pc}
 8004766:	bf00      	nop
 8004768:	080046df 	.word	0x080046df

0800476c <vsiscanf>:
 800476c:	4613      	mov	r3, r2
 800476e:	460a      	mov	r2, r1
 8004770:	4601      	mov	r1, r0
 8004772:	4802      	ldr	r0, [pc, #8]	@ (800477c <vsiscanf+0x10>)
 8004774:	6800      	ldr	r0, [r0, #0]
 8004776:	f7ff bfd5 	b.w	8004724 <_vsiscanf_r>
 800477a:	bf00      	nop
 800477c:	20000004 	.word	0x20000004

08004780 <__errno>:
 8004780:	4b01      	ldr	r3, [pc, #4]	@ (8004788 <__errno+0x8>)
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000004 	.word	0x20000004

0800478c <__libc_init_array>:
 800478c:	b570      	push	{r4, r5, r6, lr}
 800478e:	4d0d      	ldr	r5, [pc, #52]	@ (80047c4 <__libc_init_array+0x38>)
 8004790:	4c0d      	ldr	r4, [pc, #52]	@ (80047c8 <__libc_init_array+0x3c>)
 8004792:	1b64      	subs	r4, r4, r5
 8004794:	10a4      	asrs	r4, r4, #2
 8004796:	2600      	movs	r6, #0
 8004798:	42a6      	cmp	r6, r4
 800479a:	d109      	bne.n	80047b0 <__libc_init_array+0x24>
 800479c:	4d0b      	ldr	r5, [pc, #44]	@ (80047cc <__libc_init_array+0x40>)
 800479e:	4c0c      	ldr	r4, [pc, #48]	@ (80047d0 <__libc_init_array+0x44>)
 80047a0:	f001 f95e 	bl	8005a60 <_init>
 80047a4:	1b64      	subs	r4, r4, r5
 80047a6:	10a4      	asrs	r4, r4, #2
 80047a8:	2600      	movs	r6, #0
 80047aa:	42a6      	cmp	r6, r4
 80047ac:	d105      	bne.n	80047ba <__libc_init_array+0x2e>
 80047ae:	bd70      	pop	{r4, r5, r6, pc}
 80047b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b4:	4798      	blx	r3
 80047b6:	3601      	adds	r6, #1
 80047b8:	e7ee      	b.n	8004798 <__libc_init_array+0xc>
 80047ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80047be:	4798      	blx	r3
 80047c0:	3601      	adds	r6, #1
 80047c2:	e7f2      	b.n	80047aa <__libc_init_array+0x1e>
 80047c4:	08006088 	.word	0x08006088
 80047c8:	08006088 	.word	0x08006088
 80047cc:	08006088 	.word	0x08006088
 80047d0:	0800608c 	.word	0x0800608c

080047d4 <__retarget_lock_acquire_recursive>:
 80047d4:	4770      	bx	lr

080047d6 <__retarget_lock_release_recursive>:
 80047d6:	4770      	bx	lr

080047d8 <_free_r>:
 80047d8:	b538      	push	{r3, r4, r5, lr}
 80047da:	4605      	mov	r5, r0
 80047dc:	2900      	cmp	r1, #0
 80047de:	d041      	beq.n	8004864 <_free_r+0x8c>
 80047e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e4:	1f0c      	subs	r4, r1, #4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	bfb8      	it	lt
 80047ea:	18e4      	addlt	r4, r4, r3
 80047ec:	f000 f8e0 	bl	80049b0 <__malloc_lock>
 80047f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004868 <_free_r+0x90>)
 80047f2:	6813      	ldr	r3, [r2, #0]
 80047f4:	b933      	cbnz	r3, 8004804 <_free_r+0x2c>
 80047f6:	6063      	str	r3, [r4, #4]
 80047f8:	6014      	str	r4, [r2, #0]
 80047fa:	4628      	mov	r0, r5
 80047fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004800:	f000 b8dc 	b.w	80049bc <__malloc_unlock>
 8004804:	42a3      	cmp	r3, r4
 8004806:	d908      	bls.n	800481a <_free_r+0x42>
 8004808:	6820      	ldr	r0, [r4, #0]
 800480a:	1821      	adds	r1, r4, r0
 800480c:	428b      	cmp	r3, r1
 800480e:	bf01      	itttt	eq
 8004810:	6819      	ldreq	r1, [r3, #0]
 8004812:	685b      	ldreq	r3, [r3, #4]
 8004814:	1809      	addeq	r1, r1, r0
 8004816:	6021      	streq	r1, [r4, #0]
 8004818:	e7ed      	b.n	80047f6 <_free_r+0x1e>
 800481a:	461a      	mov	r2, r3
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	b10b      	cbz	r3, 8004824 <_free_r+0x4c>
 8004820:	42a3      	cmp	r3, r4
 8004822:	d9fa      	bls.n	800481a <_free_r+0x42>
 8004824:	6811      	ldr	r1, [r2, #0]
 8004826:	1850      	adds	r0, r2, r1
 8004828:	42a0      	cmp	r0, r4
 800482a:	d10b      	bne.n	8004844 <_free_r+0x6c>
 800482c:	6820      	ldr	r0, [r4, #0]
 800482e:	4401      	add	r1, r0
 8004830:	1850      	adds	r0, r2, r1
 8004832:	4283      	cmp	r3, r0
 8004834:	6011      	str	r1, [r2, #0]
 8004836:	d1e0      	bne.n	80047fa <_free_r+0x22>
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	6053      	str	r3, [r2, #4]
 800483e:	4408      	add	r0, r1
 8004840:	6010      	str	r0, [r2, #0]
 8004842:	e7da      	b.n	80047fa <_free_r+0x22>
 8004844:	d902      	bls.n	800484c <_free_r+0x74>
 8004846:	230c      	movs	r3, #12
 8004848:	602b      	str	r3, [r5, #0]
 800484a:	e7d6      	b.n	80047fa <_free_r+0x22>
 800484c:	6820      	ldr	r0, [r4, #0]
 800484e:	1821      	adds	r1, r4, r0
 8004850:	428b      	cmp	r3, r1
 8004852:	bf04      	itt	eq
 8004854:	6819      	ldreq	r1, [r3, #0]
 8004856:	685b      	ldreq	r3, [r3, #4]
 8004858:	6063      	str	r3, [r4, #4]
 800485a:	bf04      	itt	eq
 800485c:	1809      	addeq	r1, r1, r0
 800485e:	6021      	streq	r1, [r4, #0]
 8004860:	6054      	str	r4, [r2, #4]
 8004862:	e7ca      	b.n	80047fa <_free_r+0x22>
 8004864:	bd38      	pop	{r3, r4, r5, pc}
 8004866:	bf00      	nop
 8004868:	2000082c 	.word	0x2000082c

0800486c <sbrk_aligned>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	4e0f      	ldr	r6, [pc, #60]	@ (80048ac <sbrk_aligned+0x40>)
 8004870:	460c      	mov	r4, r1
 8004872:	6831      	ldr	r1, [r6, #0]
 8004874:	4605      	mov	r5, r0
 8004876:	b911      	cbnz	r1, 800487e <sbrk_aligned+0x12>
 8004878:	f000 ff34 	bl	80056e4 <_sbrk_r>
 800487c:	6030      	str	r0, [r6, #0]
 800487e:	4621      	mov	r1, r4
 8004880:	4628      	mov	r0, r5
 8004882:	f000 ff2f 	bl	80056e4 <_sbrk_r>
 8004886:	1c43      	adds	r3, r0, #1
 8004888:	d103      	bne.n	8004892 <sbrk_aligned+0x26>
 800488a:	f04f 34ff 	mov.w	r4, #4294967295
 800488e:	4620      	mov	r0, r4
 8004890:	bd70      	pop	{r4, r5, r6, pc}
 8004892:	1cc4      	adds	r4, r0, #3
 8004894:	f024 0403 	bic.w	r4, r4, #3
 8004898:	42a0      	cmp	r0, r4
 800489a:	d0f8      	beq.n	800488e <sbrk_aligned+0x22>
 800489c:	1a21      	subs	r1, r4, r0
 800489e:	4628      	mov	r0, r5
 80048a0:	f000 ff20 	bl	80056e4 <_sbrk_r>
 80048a4:	3001      	adds	r0, #1
 80048a6:	d1f2      	bne.n	800488e <sbrk_aligned+0x22>
 80048a8:	e7ef      	b.n	800488a <sbrk_aligned+0x1e>
 80048aa:	bf00      	nop
 80048ac:	20000828 	.word	0x20000828

080048b0 <_malloc_r>:
 80048b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048b4:	1ccd      	adds	r5, r1, #3
 80048b6:	f025 0503 	bic.w	r5, r5, #3
 80048ba:	3508      	adds	r5, #8
 80048bc:	2d0c      	cmp	r5, #12
 80048be:	bf38      	it	cc
 80048c0:	250c      	movcc	r5, #12
 80048c2:	2d00      	cmp	r5, #0
 80048c4:	4606      	mov	r6, r0
 80048c6:	db01      	blt.n	80048cc <_malloc_r+0x1c>
 80048c8:	42a9      	cmp	r1, r5
 80048ca:	d904      	bls.n	80048d6 <_malloc_r+0x26>
 80048cc:	230c      	movs	r3, #12
 80048ce:	6033      	str	r3, [r6, #0]
 80048d0:	2000      	movs	r0, #0
 80048d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049ac <_malloc_r+0xfc>
 80048da:	f000 f869 	bl	80049b0 <__malloc_lock>
 80048de:	f8d8 3000 	ldr.w	r3, [r8]
 80048e2:	461c      	mov	r4, r3
 80048e4:	bb44      	cbnz	r4, 8004938 <_malloc_r+0x88>
 80048e6:	4629      	mov	r1, r5
 80048e8:	4630      	mov	r0, r6
 80048ea:	f7ff ffbf 	bl	800486c <sbrk_aligned>
 80048ee:	1c43      	adds	r3, r0, #1
 80048f0:	4604      	mov	r4, r0
 80048f2:	d158      	bne.n	80049a6 <_malloc_r+0xf6>
 80048f4:	f8d8 4000 	ldr.w	r4, [r8]
 80048f8:	4627      	mov	r7, r4
 80048fa:	2f00      	cmp	r7, #0
 80048fc:	d143      	bne.n	8004986 <_malloc_r+0xd6>
 80048fe:	2c00      	cmp	r4, #0
 8004900:	d04b      	beq.n	800499a <_malloc_r+0xea>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	4639      	mov	r1, r7
 8004906:	4630      	mov	r0, r6
 8004908:	eb04 0903 	add.w	r9, r4, r3
 800490c:	f000 feea 	bl	80056e4 <_sbrk_r>
 8004910:	4581      	cmp	r9, r0
 8004912:	d142      	bne.n	800499a <_malloc_r+0xea>
 8004914:	6821      	ldr	r1, [r4, #0]
 8004916:	1a6d      	subs	r5, r5, r1
 8004918:	4629      	mov	r1, r5
 800491a:	4630      	mov	r0, r6
 800491c:	f7ff ffa6 	bl	800486c <sbrk_aligned>
 8004920:	3001      	adds	r0, #1
 8004922:	d03a      	beq.n	800499a <_malloc_r+0xea>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	442b      	add	r3, r5
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	f8d8 3000 	ldr.w	r3, [r8]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	bb62      	cbnz	r2, 800498c <_malloc_r+0xdc>
 8004932:	f8c8 7000 	str.w	r7, [r8]
 8004936:	e00f      	b.n	8004958 <_malloc_r+0xa8>
 8004938:	6822      	ldr	r2, [r4, #0]
 800493a:	1b52      	subs	r2, r2, r5
 800493c:	d420      	bmi.n	8004980 <_malloc_r+0xd0>
 800493e:	2a0b      	cmp	r2, #11
 8004940:	d917      	bls.n	8004972 <_malloc_r+0xc2>
 8004942:	1961      	adds	r1, r4, r5
 8004944:	42a3      	cmp	r3, r4
 8004946:	6025      	str	r5, [r4, #0]
 8004948:	bf18      	it	ne
 800494a:	6059      	strne	r1, [r3, #4]
 800494c:	6863      	ldr	r3, [r4, #4]
 800494e:	bf08      	it	eq
 8004950:	f8c8 1000 	streq.w	r1, [r8]
 8004954:	5162      	str	r2, [r4, r5]
 8004956:	604b      	str	r3, [r1, #4]
 8004958:	4630      	mov	r0, r6
 800495a:	f000 f82f 	bl	80049bc <__malloc_unlock>
 800495e:	f104 000b 	add.w	r0, r4, #11
 8004962:	1d23      	adds	r3, r4, #4
 8004964:	f020 0007 	bic.w	r0, r0, #7
 8004968:	1ac2      	subs	r2, r0, r3
 800496a:	bf1c      	itt	ne
 800496c:	1a1b      	subne	r3, r3, r0
 800496e:	50a3      	strne	r3, [r4, r2]
 8004970:	e7af      	b.n	80048d2 <_malloc_r+0x22>
 8004972:	6862      	ldr	r2, [r4, #4]
 8004974:	42a3      	cmp	r3, r4
 8004976:	bf0c      	ite	eq
 8004978:	f8c8 2000 	streq.w	r2, [r8]
 800497c:	605a      	strne	r2, [r3, #4]
 800497e:	e7eb      	b.n	8004958 <_malloc_r+0xa8>
 8004980:	4623      	mov	r3, r4
 8004982:	6864      	ldr	r4, [r4, #4]
 8004984:	e7ae      	b.n	80048e4 <_malloc_r+0x34>
 8004986:	463c      	mov	r4, r7
 8004988:	687f      	ldr	r7, [r7, #4]
 800498a:	e7b6      	b.n	80048fa <_malloc_r+0x4a>
 800498c:	461a      	mov	r2, r3
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	42a3      	cmp	r3, r4
 8004992:	d1fb      	bne.n	800498c <_malloc_r+0xdc>
 8004994:	2300      	movs	r3, #0
 8004996:	6053      	str	r3, [r2, #4]
 8004998:	e7de      	b.n	8004958 <_malloc_r+0xa8>
 800499a:	230c      	movs	r3, #12
 800499c:	6033      	str	r3, [r6, #0]
 800499e:	4630      	mov	r0, r6
 80049a0:	f000 f80c 	bl	80049bc <__malloc_unlock>
 80049a4:	e794      	b.n	80048d0 <_malloc_r+0x20>
 80049a6:	6005      	str	r5, [r0, #0]
 80049a8:	e7d6      	b.n	8004958 <_malloc_r+0xa8>
 80049aa:	bf00      	nop
 80049ac:	2000082c 	.word	0x2000082c

080049b0 <__malloc_lock>:
 80049b0:	4801      	ldr	r0, [pc, #4]	@ (80049b8 <__malloc_lock+0x8>)
 80049b2:	f7ff bf0f 	b.w	80047d4 <__retarget_lock_acquire_recursive>
 80049b6:	bf00      	nop
 80049b8:	20000824 	.word	0x20000824

080049bc <__malloc_unlock>:
 80049bc:	4801      	ldr	r0, [pc, #4]	@ (80049c4 <__malloc_unlock+0x8>)
 80049be:	f7ff bf0a 	b.w	80047d6 <__retarget_lock_release_recursive>
 80049c2:	bf00      	nop
 80049c4:	20000824 	.word	0x20000824

080049c8 <__ssputs_r>:
 80049c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049cc:	688e      	ldr	r6, [r1, #8]
 80049ce:	461f      	mov	r7, r3
 80049d0:	42be      	cmp	r6, r7
 80049d2:	680b      	ldr	r3, [r1, #0]
 80049d4:	4682      	mov	sl, r0
 80049d6:	460c      	mov	r4, r1
 80049d8:	4690      	mov	r8, r2
 80049da:	d82d      	bhi.n	8004a38 <__ssputs_r+0x70>
 80049dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80049e4:	d026      	beq.n	8004a34 <__ssputs_r+0x6c>
 80049e6:	6965      	ldr	r5, [r4, #20]
 80049e8:	6909      	ldr	r1, [r1, #16]
 80049ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049ee:	eba3 0901 	sub.w	r9, r3, r1
 80049f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049f6:	1c7b      	adds	r3, r7, #1
 80049f8:	444b      	add	r3, r9
 80049fa:	106d      	asrs	r5, r5, #1
 80049fc:	429d      	cmp	r5, r3
 80049fe:	bf38      	it	cc
 8004a00:	461d      	movcc	r5, r3
 8004a02:	0553      	lsls	r3, r2, #21
 8004a04:	d527      	bpl.n	8004a56 <__ssputs_r+0x8e>
 8004a06:	4629      	mov	r1, r5
 8004a08:	f7ff ff52 	bl	80048b0 <_malloc_r>
 8004a0c:	4606      	mov	r6, r0
 8004a0e:	b360      	cbz	r0, 8004a6a <__ssputs_r+0xa2>
 8004a10:	6921      	ldr	r1, [r4, #16]
 8004a12:	464a      	mov	r2, r9
 8004a14:	f000 fe76 	bl	8005704 <memcpy>
 8004a18:	89a3      	ldrh	r3, [r4, #12]
 8004a1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a22:	81a3      	strh	r3, [r4, #12]
 8004a24:	6126      	str	r6, [r4, #16]
 8004a26:	6165      	str	r5, [r4, #20]
 8004a28:	444e      	add	r6, r9
 8004a2a:	eba5 0509 	sub.w	r5, r5, r9
 8004a2e:	6026      	str	r6, [r4, #0]
 8004a30:	60a5      	str	r5, [r4, #8]
 8004a32:	463e      	mov	r6, r7
 8004a34:	42be      	cmp	r6, r7
 8004a36:	d900      	bls.n	8004a3a <__ssputs_r+0x72>
 8004a38:	463e      	mov	r6, r7
 8004a3a:	6820      	ldr	r0, [r4, #0]
 8004a3c:	4632      	mov	r2, r6
 8004a3e:	4641      	mov	r1, r8
 8004a40:	f000 fe35 	bl	80056ae <memmove>
 8004a44:	68a3      	ldr	r3, [r4, #8]
 8004a46:	1b9b      	subs	r3, r3, r6
 8004a48:	60a3      	str	r3, [r4, #8]
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	4433      	add	r3, r6
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	2000      	movs	r0, #0
 8004a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a56:	462a      	mov	r2, r5
 8004a58:	f000 fe62 	bl	8005720 <_realloc_r>
 8004a5c:	4606      	mov	r6, r0
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d1e0      	bne.n	8004a24 <__ssputs_r+0x5c>
 8004a62:	6921      	ldr	r1, [r4, #16]
 8004a64:	4650      	mov	r0, sl
 8004a66:	f7ff feb7 	bl	80047d8 <_free_r>
 8004a6a:	230c      	movs	r3, #12
 8004a6c:	f8ca 3000 	str.w	r3, [sl]
 8004a70:	89a3      	ldrh	r3, [r4, #12]
 8004a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a76:	81a3      	strh	r3, [r4, #12]
 8004a78:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7c:	e7e9      	b.n	8004a52 <__ssputs_r+0x8a>
	...

08004a80 <_svfiprintf_r>:
 8004a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a84:	4698      	mov	r8, r3
 8004a86:	898b      	ldrh	r3, [r1, #12]
 8004a88:	061b      	lsls	r3, r3, #24
 8004a8a:	b09d      	sub	sp, #116	@ 0x74
 8004a8c:	4607      	mov	r7, r0
 8004a8e:	460d      	mov	r5, r1
 8004a90:	4614      	mov	r4, r2
 8004a92:	d510      	bpl.n	8004ab6 <_svfiprintf_r+0x36>
 8004a94:	690b      	ldr	r3, [r1, #16]
 8004a96:	b973      	cbnz	r3, 8004ab6 <_svfiprintf_r+0x36>
 8004a98:	2140      	movs	r1, #64	@ 0x40
 8004a9a:	f7ff ff09 	bl	80048b0 <_malloc_r>
 8004a9e:	6028      	str	r0, [r5, #0]
 8004aa0:	6128      	str	r0, [r5, #16]
 8004aa2:	b930      	cbnz	r0, 8004ab2 <_svfiprintf_r+0x32>
 8004aa4:	230c      	movs	r3, #12
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	b01d      	add	sp, #116	@ 0x74
 8004aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab2:	2340      	movs	r3, #64	@ 0x40
 8004ab4:	616b      	str	r3, [r5, #20]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aba:	2320      	movs	r3, #32
 8004abc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ac4:	2330      	movs	r3, #48	@ 0x30
 8004ac6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004c64 <_svfiprintf_r+0x1e4>
 8004aca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ace:	f04f 0901 	mov.w	r9, #1
 8004ad2:	4623      	mov	r3, r4
 8004ad4:	469a      	mov	sl, r3
 8004ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ada:	b10a      	cbz	r2, 8004ae0 <_svfiprintf_r+0x60>
 8004adc:	2a25      	cmp	r2, #37	@ 0x25
 8004ade:	d1f9      	bne.n	8004ad4 <_svfiprintf_r+0x54>
 8004ae0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ae4:	d00b      	beq.n	8004afe <_svfiprintf_r+0x7e>
 8004ae6:	465b      	mov	r3, fp
 8004ae8:	4622      	mov	r2, r4
 8004aea:	4629      	mov	r1, r5
 8004aec:	4638      	mov	r0, r7
 8004aee:	f7ff ff6b 	bl	80049c8 <__ssputs_r>
 8004af2:	3001      	adds	r0, #1
 8004af4:	f000 80a7 	beq.w	8004c46 <_svfiprintf_r+0x1c6>
 8004af8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004afa:	445a      	add	r2, fp
 8004afc:	9209      	str	r2, [sp, #36]	@ 0x24
 8004afe:	f89a 3000 	ldrb.w	r3, [sl]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 809f 	beq.w	8004c46 <_svfiprintf_r+0x1c6>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b12:	f10a 0a01 	add.w	sl, sl, #1
 8004b16:	9304      	str	r3, [sp, #16]
 8004b18:	9307      	str	r3, [sp, #28]
 8004b1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b20:	4654      	mov	r4, sl
 8004b22:	2205      	movs	r2, #5
 8004b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b28:	484e      	ldr	r0, [pc, #312]	@ (8004c64 <_svfiprintf_r+0x1e4>)
 8004b2a:	f7fb fb59 	bl	80001e0 <memchr>
 8004b2e:	9a04      	ldr	r2, [sp, #16]
 8004b30:	b9d8      	cbnz	r0, 8004b6a <_svfiprintf_r+0xea>
 8004b32:	06d0      	lsls	r0, r2, #27
 8004b34:	bf44      	itt	mi
 8004b36:	2320      	movmi	r3, #32
 8004b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b3c:	0711      	lsls	r1, r2, #28
 8004b3e:	bf44      	itt	mi
 8004b40:	232b      	movmi	r3, #43	@ 0x2b
 8004b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b46:	f89a 3000 	ldrb.w	r3, [sl]
 8004b4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b4c:	d015      	beq.n	8004b7a <_svfiprintf_r+0xfa>
 8004b4e:	9a07      	ldr	r2, [sp, #28]
 8004b50:	4654      	mov	r4, sl
 8004b52:	2000      	movs	r0, #0
 8004b54:	f04f 0c0a 	mov.w	ip, #10
 8004b58:	4621      	mov	r1, r4
 8004b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b5e:	3b30      	subs	r3, #48	@ 0x30
 8004b60:	2b09      	cmp	r3, #9
 8004b62:	d94b      	bls.n	8004bfc <_svfiprintf_r+0x17c>
 8004b64:	b1b0      	cbz	r0, 8004b94 <_svfiprintf_r+0x114>
 8004b66:	9207      	str	r2, [sp, #28]
 8004b68:	e014      	b.n	8004b94 <_svfiprintf_r+0x114>
 8004b6a:	eba0 0308 	sub.w	r3, r0, r8
 8004b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8004b72:	4313      	orrs	r3, r2
 8004b74:	9304      	str	r3, [sp, #16]
 8004b76:	46a2      	mov	sl, r4
 8004b78:	e7d2      	b.n	8004b20 <_svfiprintf_r+0xa0>
 8004b7a:	9b03      	ldr	r3, [sp, #12]
 8004b7c:	1d19      	adds	r1, r3, #4
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	9103      	str	r1, [sp, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	bfbb      	ittet	lt
 8004b86:	425b      	neglt	r3, r3
 8004b88:	f042 0202 	orrlt.w	r2, r2, #2
 8004b8c:	9307      	strge	r3, [sp, #28]
 8004b8e:	9307      	strlt	r3, [sp, #28]
 8004b90:	bfb8      	it	lt
 8004b92:	9204      	strlt	r2, [sp, #16]
 8004b94:	7823      	ldrb	r3, [r4, #0]
 8004b96:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b98:	d10a      	bne.n	8004bb0 <_svfiprintf_r+0x130>
 8004b9a:	7863      	ldrb	r3, [r4, #1]
 8004b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b9e:	d132      	bne.n	8004c06 <_svfiprintf_r+0x186>
 8004ba0:	9b03      	ldr	r3, [sp, #12]
 8004ba2:	1d1a      	adds	r2, r3, #4
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	9203      	str	r2, [sp, #12]
 8004ba8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004bac:	3402      	adds	r4, #2
 8004bae:	9305      	str	r3, [sp, #20]
 8004bb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004c74 <_svfiprintf_r+0x1f4>
 8004bb4:	7821      	ldrb	r1, [r4, #0]
 8004bb6:	2203      	movs	r2, #3
 8004bb8:	4650      	mov	r0, sl
 8004bba:	f7fb fb11 	bl	80001e0 <memchr>
 8004bbe:	b138      	cbz	r0, 8004bd0 <_svfiprintf_r+0x150>
 8004bc0:	9b04      	ldr	r3, [sp, #16]
 8004bc2:	eba0 000a 	sub.w	r0, r0, sl
 8004bc6:	2240      	movs	r2, #64	@ 0x40
 8004bc8:	4082      	lsls	r2, r0
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	3401      	adds	r4, #1
 8004bce:	9304      	str	r3, [sp, #16]
 8004bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd4:	4824      	ldr	r0, [pc, #144]	@ (8004c68 <_svfiprintf_r+0x1e8>)
 8004bd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004bda:	2206      	movs	r2, #6
 8004bdc:	f7fb fb00 	bl	80001e0 <memchr>
 8004be0:	2800      	cmp	r0, #0
 8004be2:	d036      	beq.n	8004c52 <_svfiprintf_r+0x1d2>
 8004be4:	4b21      	ldr	r3, [pc, #132]	@ (8004c6c <_svfiprintf_r+0x1ec>)
 8004be6:	bb1b      	cbnz	r3, 8004c30 <_svfiprintf_r+0x1b0>
 8004be8:	9b03      	ldr	r3, [sp, #12]
 8004bea:	3307      	adds	r3, #7
 8004bec:	f023 0307 	bic.w	r3, r3, #7
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	9303      	str	r3, [sp, #12]
 8004bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bf6:	4433      	add	r3, r6
 8004bf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bfa:	e76a      	b.n	8004ad2 <_svfiprintf_r+0x52>
 8004bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c00:	460c      	mov	r4, r1
 8004c02:	2001      	movs	r0, #1
 8004c04:	e7a8      	b.n	8004b58 <_svfiprintf_r+0xd8>
 8004c06:	2300      	movs	r3, #0
 8004c08:	3401      	adds	r4, #1
 8004c0a:	9305      	str	r3, [sp, #20]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	f04f 0c0a 	mov.w	ip, #10
 8004c12:	4620      	mov	r0, r4
 8004c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c18:	3a30      	subs	r2, #48	@ 0x30
 8004c1a:	2a09      	cmp	r2, #9
 8004c1c:	d903      	bls.n	8004c26 <_svfiprintf_r+0x1a6>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0c6      	beq.n	8004bb0 <_svfiprintf_r+0x130>
 8004c22:	9105      	str	r1, [sp, #20]
 8004c24:	e7c4      	b.n	8004bb0 <_svfiprintf_r+0x130>
 8004c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e7f0      	b.n	8004c12 <_svfiprintf_r+0x192>
 8004c30:	ab03      	add	r3, sp, #12
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	462a      	mov	r2, r5
 8004c36:	4b0e      	ldr	r3, [pc, #56]	@ (8004c70 <_svfiprintf_r+0x1f0>)
 8004c38:	a904      	add	r1, sp, #16
 8004c3a:	4638      	mov	r0, r7
 8004c3c:	f3af 8000 	nop.w
 8004c40:	1c42      	adds	r2, r0, #1
 8004c42:	4606      	mov	r6, r0
 8004c44:	d1d6      	bne.n	8004bf4 <_svfiprintf_r+0x174>
 8004c46:	89ab      	ldrh	r3, [r5, #12]
 8004c48:	065b      	lsls	r3, r3, #25
 8004c4a:	f53f af2d 	bmi.w	8004aa8 <_svfiprintf_r+0x28>
 8004c4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c50:	e72c      	b.n	8004aac <_svfiprintf_r+0x2c>
 8004c52:	ab03      	add	r3, sp, #12
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	462a      	mov	r2, r5
 8004c58:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <_svfiprintf_r+0x1f0>)
 8004c5a:	a904      	add	r1, sp, #16
 8004c5c:	4638      	mov	r0, r7
 8004c5e:	f000 fa45 	bl	80050ec <_printf_i>
 8004c62:	e7ed      	b.n	8004c40 <_svfiprintf_r+0x1c0>
 8004c64:	08005f30 	.word	0x08005f30
 8004c68:	08005f3a 	.word	0x08005f3a
 8004c6c:	00000000 	.word	0x00000000
 8004c70:	080049c9 	.word	0x080049c9
 8004c74:	08005f36 	.word	0x08005f36

08004c78 <_sungetc_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	1c4b      	adds	r3, r1, #1
 8004c7c:	4614      	mov	r4, r2
 8004c7e:	d103      	bne.n	8004c88 <_sungetc_r+0x10>
 8004c80:	f04f 35ff 	mov.w	r5, #4294967295
 8004c84:	4628      	mov	r0, r5
 8004c86:	bd38      	pop	{r3, r4, r5, pc}
 8004c88:	8993      	ldrh	r3, [r2, #12]
 8004c8a:	f023 0320 	bic.w	r3, r3, #32
 8004c8e:	8193      	strh	r3, [r2, #12]
 8004c90:	6853      	ldr	r3, [r2, #4]
 8004c92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c94:	b2cd      	uxtb	r5, r1
 8004c96:	b18a      	cbz	r2, 8004cbc <_sungetc_r+0x44>
 8004c98:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	dd08      	ble.n	8004cb0 <_sungetc_r+0x38>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	1e5a      	subs	r2, r3, #1
 8004ca2:	6022      	str	r2, [r4, #0]
 8004ca4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004ca8:	6863      	ldr	r3, [r4, #4]
 8004caa:	3301      	adds	r3, #1
 8004cac:	6063      	str	r3, [r4, #4]
 8004cae:	e7e9      	b.n	8004c84 <_sungetc_r+0xc>
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	f000 fcc2 	bl	800563a <__submore>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	d0f1      	beq.n	8004c9e <_sungetc_r+0x26>
 8004cba:	e7e1      	b.n	8004c80 <_sungetc_r+0x8>
 8004cbc:	6921      	ldr	r1, [r4, #16]
 8004cbe:	6822      	ldr	r2, [r4, #0]
 8004cc0:	b141      	cbz	r1, 8004cd4 <_sungetc_r+0x5c>
 8004cc2:	4291      	cmp	r1, r2
 8004cc4:	d206      	bcs.n	8004cd4 <_sungetc_r+0x5c>
 8004cc6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8004cca:	42a9      	cmp	r1, r5
 8004ccc:	d102      	bne.n	8004cd4 <_sungetc_r+0x5c>
 8004cce:	3a01      	subs	r2, #1
 8004cd0:	6022      	str	r2, [r4, #0]
 8004cd2:	e7ea      	b.n	8004caa <_sungetc_r+0x32>
 8004cd4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8004cd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cde:	2303      	movs	r3, #3
 8004ce0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004ce2:	4623      	mov	r3, r4
 8004ce4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	2301      	movs	r3, #1
 8004cec:	e7de      	b.n	8004cac <_sungetc_r+0x34>

08004cee <__ssrefill_r>:
 8004cee:	b510      	push	{r4, lr}
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004cf4:	b169      	cbz	r1, 8004d12 <__ssrefill_r+0x24>
 8004cf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cfa:	4299      	cmp	r1, r3
 8004cfc:	d001      	beq.n	8004d02 <__ssrefill_r+0x14>
 8004cfe:	f7ff fd6b 	bl	80047d8 <_free_r>
 8004d02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d04:	6063      	str	r3, [r4, #4]
 8004d06:	2000      	movs	r0, #0
 8004d08:	6360      	str	r0, [r4, #52]	@ 0x34
 8004d0a:	b113      	cbz	r3, 8004d12 <__ssrefill_r+0x24>
 8004d0c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004d0e:	6023      	str	r3, [r4, #0]
 8004d10:	bd10      	pop	{r4, pc}
 8004d12:	6923      	ldr	r3, [r4, #16]
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	2300      	movs	r3, #0
 8004d18:	6063      	str	r3, [r4, #4]
 8004d1a:	89a3      	ldrh	r3, [r4, #12]
 8004d1c:	f043 0320 	orr.w	r3, r3, #32
 8004d20:	81a3      	strh	r3, [r4, #12]
 8004d22:	f04f 30ff 	mov.w	r0, #4294967295
 8004d26:	e7f3      	b.n	8004d10 <__ssrefill_r+0x22>

08004d28 <__ssvfiscanf_r>:
 8004d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8004d32:	2100      	movs	r1, #0
 8004d34:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004d38:	49a5      	ldr	r1, [pc, #660]	@ (8004fd0 <__ssvfiscanf_r+0x2a8>)
 8004d3a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8004d3c:	f10d 0804 	add.w	r8, sp, #4
 8004d40:	49a4      	ldr	r1, [pc, #656]	@ (8004fd4 <__ssvfiscanf_r+0x2ac>)
 8004d42:	4fa5      	ldr	r7, [pc, #660]	@ (8004fd8 <__ssvfiscanf_r+0x2b0>)
 8004d44:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004d48:	4606      	mov	r6, r0
 8004d4a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	7813      	ldrb	r3, [r2, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 8158 	beq.w	8005006 <__ssvfiscanf_r+0x2de>
 8004d56:	5cf9      	ldrb	r1, [r7, r3]
 8004d58:	f011 0108 	ands.w	r1, r1, #8
 8004d5c:	f102 0501 	add.w	r5, r2, #1
 8004d60:	d019      	beq.n	8004d96 <__ssvfiscanf_r+0x6e>
 8004d62:	6863      	ldr	r3, [r4, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	dd0f      	ble.n	8004d88 <__ssvfiscanf_r+0x60>
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	781a      	ldrb	r2, [r3, #0]
 8004d6c:	5cba      	ldrb	r2, [r7, r2]
 8004d6e:	0712      	lsls	r2, r2, #28
 8004d70:	d401      	bmi.n	8004d76 <__ssvfiscanf_r+0x4e>
 8004d72:	462a      	mov	r2, r5
 8004d74:	e7eb      	b.n	8004d4e <__ssvfiscanf_r+0x26>
 8004d76:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004d78:	3201      	adds	r2, #1
 8004d7a:	9245      	str	r2, [sp, #276]	@ 0x114
 8004d7c:	6862      	ldr	r2, [r4, #4]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	3a01      	subs	r2, #1
 8004d82:	6062      	str	r2, [r4, #4]
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	e7ec      	b.n	8004d62 <__ssvfiscanf_r+0x3a>
 8004d88:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	4798      	blx	r3
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d0e9      	beq.n	8004d68 <__ssvfiscanf_r+0x40>
 8004d94:	e7ed      	b.n	8004d72 <__ssvfiscanf_r+0x4a>
 8004d96:	2b25      	cmp	r3, #37	@ 0x25
 8004d98:	d012      	beq.n	8004dc0 <__ssvfiscanf_r+0x98>
 8004d9a:	4699      	mov	r9, r3
 8004d9c:	6863      	ldr	r3, [r4, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f340 8093 	ble.w	8004eca <__ssvfiscanf_r+0x1a2>
 8004da4:	6822      	ldr	r2, [r4, #0]
 8004da6:	7813      	ldrb	r3, [r2, #0]
 8004da8:	454b      	cmp	r3, r9
 8004daa:	f040 812c 	bne.w	8005006 <__ssvfiscanf_r+0x2de>
 8004dae:	6863      	ldr	r3, [r4, #4]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	6063      	str	r3, [r4, #4]
 8004db4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004db6:	3201      	adds	r2, #1
 8004db8:	3301      	adds	r3, #1
 8004dba:	6022      	str	r2, [r4, #0]
 8004dbc:	9345      	str	r3, [sp, #276]	@ 0x114
 8004dbe:	e7d8      	b.n	8004d72 <__ssvfiscanf_r+0x4a>
 8004dc0:	9141      	str	r1, [sp, #260]	@ 0x104
 8004dc2:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004dc4:	7853      	ldrb	r3, [r2, #1]
 8004dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dc8:	bf02      	ittt	eq
 8004dca:	2310      	moveq	r3, #16
 8004dcc:	1c95      	addeq	r5, r2, #2
 8004dce:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004dd0:	220a      	movs	r2, #10
 8004dd2:	46a9      	mov	r9, r5
 8004dd4:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004dd8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8004ddc:	2b09      	cmp	r3, #9
 8004dde:	d91e      	bls.n	8004e1e <__ssvfiscanf_r+0xf6>
 8004de0:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8004fdc <__ssvfiscanf_r+0x2b4>
 8004de4:	2203      	movs	r2, #3
 8004de6:	4650      	mov	r0, sl
 8004de8:	f7fb f9fa 	bl	80001e0 <memchr>
 8004dec:	b138      	cbz	r0, 8004dfe <__ssvfiscanf_r+0xd6>
 8004dee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004df0:	eba0 000a 	sub.w	r0, r0, sl
 8004df4:	2301      	movs	r3, #1
 8004df6:	4083      	lsls	r3, r0
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	9341      	str	r3, [sp, #260]	@ 0x104
 8004dfc:	464d      	mov	r5, r9
 8004dfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004e02:	2b78      	cmp	r3, #120	@ 0x78
 8004e04:	d806      	bhi.n	8004e14 <__ssvfiscanf_r+0xec>
 8004e06:	2b57      	cmp	r3, #87	@ 0x57
 8004e08:	d810      	bhi.n	8004e2c <__ssvfiscanf_r+0x104>
 8004e0a:	2b25      	cmp	r3, #37	@ 0x25
 8004e0c:	d0c5      	beq.n	8004d9a <__ssvfiscanf_r+0x72>
 8004e0e:	d857      	bhi.n	8004ec0 <__ssvfiscanf_r+0x198>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d065      	beq.n	8004ee0 <__ssvfiscanf_r+0x1b8>
 8004e14:	2303      	movs	r3, #3
 8004e16:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004e18:	230a      	movs	r3, #10
 8004e1a:	9342      	str	r3, [sp, #264]	@ 0x108
 8004e1c:	e078      	b.n	8004f10 <__ssvfiscanf_r+0x1e8>
 8004e1e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004e20:	fb02 1103 	mla	r1, r2, r3, r1
 8004e24:	3930      	subs	r1, #48	@ 0x30
 8004e26:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004e28:	464d      	mov	r5, r9
 8004e2a:	e7d2      	b.n	8004dd2 <__ssvfiscanf_r+0xaa>
 8004e2c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004e30:	2a20      	cmp	r2, #32
 8004e32:	d8ef      	bhi.n	8004e14 <__ssvfiscanf_r+0xec>
 8004e34:	a101      	add	r1, pc, #4	@ (adr r1, 8004e3c <__ssvfiscanf_r+0x114>)
 8004e36:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004eef 	.word	0x08004eef
 8004e40:	08004e15 	.word	0x08004e15
 8004e44:	08004e15 	.word	0x08004e15
 8004e48:	08004f49 	.word	0x08004f49
 8004e4c:	08004e15 	.word	0x08004e15
 8004e50:	08004e15 	.word	0x08004e15
 8004e54:	08004e15 	.word	0x08004e15
 8004e58:	08004e15 	.word	0x08004e15
 8004e5c:	08004e15 	.word	0x08004e15
 8004e60:	08004e15 	.word	0x08004e15
 8004e64:	08004e15 	.word	0x08004e15
 8004e68:	08004f5f 	.word	0x08004f5f
 8004e6c:	08004f45 	.word	0x08004f45
 8004e70:	08004ec7 	.word	0x08004ec7
 8004e74:	08004ec7 	.word	0x08004ec7
 8004e78:	08004ec7 	.word	0x08004ec7
 8004e7c:	08004e15 	.word	0x08004e15
 8004e80:	08004f01 	.word	0x08004f01
 8004e84:	08004e15 	.word	0x08004e15
 8004e88:	08004e15 	.word	0x08004e15
 8004e8c:	08004e15 	.word	0x08004e15
 8004e90:	08004e15 	.word	0x08004e15
 8004e94:	08004f6f 	.word	0x08004f6f
 8004e98:	08004f09 	.word	0x08004f09
 8004e9c:	08004ee7 	.word	0x08004ee7
 8004ea0:	08004e15 	.word	0x08004e15
 8004ea4:	08004e15 	.word	0x08004e15
 8004ea8:	08004f6b 	.word	0x08004f6b
 8004eac:	08004e15 	.word	0x08004e15
 8004eb0:	08004f45 	.word	0x08004f45
 8004eb4:	08004e15 	.word	0x08004e15
 8004eb8:	08004e15 	.word	0x08004e15
 8004ebc:	08004eef 	.word	0x08004eef
 8004ec0:	3b45      	subs	r3, #69	@ 0x45
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d8a6      	bhi.n	8004e14 <__ssvfiscanf_r+0xec>
 8004ec6:	2305      	movs	r3, #5
 8004ec8:	e021      	b.n	8004f0e <__ssvfiscanf_r+0x1e6>
 8004eca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004ecc:	4621      	mov	r1, r4
 8004ece:	4630      	mov	r0, r6
 8004ed0:	4798      	blx	r3
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	f43f af66 	beq.w	8004da4 <__ssvfiscanf_r+0x7c>
 8004ed8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004eda:	2800      	cmp	r0, #0
 8004edc:	f040 808b 	bne.w	8004ff6 <__ssvfiscanf_r+0x2ce>
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	e08b      	b.n	8004ffe <__ssvfiscanf_r+0x2d6>
 8004ee6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004ee8:	f042 0220 	orr.w	r2, r2, #32
 8004eec:	9241      	str	r2, [sp, #260]	@ 0x104
 8004eee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ef4:	9241      	str	r2, [sp, #260]	@ 0x104
 8004ef6:	2210      	movs	r2, #16
 8004ef8:	2b6e      	cmp	r3, #110	@ 0x6e
 8004efa:	9242      	str	r2, [sp, #264]	@ 0x108
 8004efc:	d902      	bls.n	8004f04 <__ssvfiscanf_r+0x1dc>
 8004efe:	e005      	b.n	8004f0c <__ssvfiscanf_r+0x1e4>
 8004f00:	2300      	movs	r3, #0
 8004f02:	9342      	str	r3, [sp, #264]	@ 0x108
 8004f04:	2303      	movs	r3, #3
 8004f06:	e002      	b.n	8004f0e <__ssvfiscanf_r+0x1e6>
 8004f08:	2308      	movs	r3, #8
 8004f0a:	9342      	str	r3, [sp, #264]	@ 0x108
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004f10:	6863      	ldr	r3, [r4, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dd39      	ble.n	8004f8a <__ssvfiscanf_r+0x262>
 8004f16:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004f18:	0659      	lsls	r1, r3, #25
 8004f1a:	d404      	bmi.n	8004f26 <__ssvfiscanf_r+0x1fe>
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	781a      	ldrb	r2, [r3, #0]
 8004f20:	5cba      	ldrb	r2, [r7, r2]
 8004f22:	0712      	lsls	r2, r2, #28
 8004f24:	d438      	bmi.n	8004f98 <__ssvfiscanf_r+0x270>
 8004f26:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	dc47      	bgt.n	8004fbc <__ssvfiscanf_r+0x294>
 8004f2c:	466b      	mov	r3, sp
 8004f2e:	4622      	mov	r2, r4
 8004f30:	a941      	add	r1, sp, #260	@ 0x104
 8004f32:	4630      	mov	r0, r6
 8004f34:	f000 f9fa 	bl	800532c <_scanf_chars>
 8004f38:	2801      	cmp	r0, #1
 8004f3a:	d064      	beq.n	8005006 <__ssvfiscanf_r+0x2de>
 8004f3c:	2802      	cmp	r0, #2
 8004f3e:	f47f af18 	bne.w	8004d72 <__ssvfiscanf_r+0x4a>
 8004f42:	e7c9      	b.n	8004ed8 <__ssvfiscanf_r+0x1b0>
 8004f44:	220a      	movs	r2, #10
 8004f46:	e7d7      	b.n	8004ef8 <__ssvfiscanf_r+0x1d0>
 8004f48:	4629      	mov	r1, r5
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	f000 fb3c 	bl	80055c8 <__sccl>
 8004f50:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f56:	9341      	str	r3, [sp, #260]	@ 0x104
 8004f58:	4605      	mov	r5, r0
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e7d7      	b.n	8004f0e <__ssvfiscanf_r+0x1e6>
 8004f5e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f64:	9341      	str	r3, [sp, #260]	@ 0x104
 8004f66:	2300      	movs	r3, #0
 8004f68:	e7d1      	b.n	8004f0e <__ssvfiscanf_r+0x1e6>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e7cf      	b.n	8004f0e <__ssvfiscanf_r+0x1e6>
 8004f6e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8004f70:	06c3      	lsls	r3, r0, #27
 8004f72:	f53f aefe 	bmi.w	8004d72 <__ssvfiscanf_r+0x4a>
 8004f76:	9b00      	ldr	r3, [sp, #0]
 8004f78:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004f7a:	1d19      	adds	r1, r3, #4
 8004f7c:	9100      	str	r1, [sp, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	07c0      	lsls	r0, r0, #31
 8004f82:	bf4c      	ite	mi
 8004f84:	801a      	strhmi	r2, [r3, #0]
 8004f86:	601a      	strpl	r2, [r3, #0]
 8004f88:	e6f3      	b.n	8004d72 <__ssvfiscanf_r+0x4a>
 8004f8a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4630      	mov	r0, r6
 8004f90:	4798      	blx	r3
 8004f92:	2800      	cmp	r0, #0
 8004f94:	d0bf      	beq.n	8004f16 <__ssvfiscanf_r+0x1ee>
 8004f96:	e79f      	b.n	8004ed8 <__ssvfiscanf_r+0x1b0>
 8004f98:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004f9a:	3201      	adds	r2, #1
 8004f9c:	9245      	str	r2, [sp, #276]	@ 0x114
 8004f9e:	6862      	ldr	r2, [r4, #4]
 8004fa0:	3a01      	subs	r2, #1
 8004fa2:	2a00      	cmp	r2, #0
 8004fa4:	6062      	str	r2, [r4, #4]
 8004fa6:	dd02      	ble.n	8004fae <__ssvfiscanf_r+0x286>
 8004fa8:	3301      	adds	r3, #1
 8004faa:	6023      	str	r3, [r4, #0]
 8004fac:	e7b6      	b.n	8004f1c <__ssvfiscanf_r+0x1f4>
 8004fae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	4798      	blx	r3
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d0b0      	beq.n	8004f1c <__ssvfiscanf_r+0x1f4>
 8004fba:	e78d      	b.n	8004ed8 <__ssvfiscanf_r+0x1b0>
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	dc0f      	bgt.n	8004fe0 <__ssvfiscanf_r+0x2b8>
 8004fc0:	466b      	mov	r3, sp
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	a941      	add	r1, sp, #260	@ 0x104
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f000 fa0a 	bl	80053e0 <_scanf_i>
 8004fcc:	e7b4      	b.n	8004f38 <__ssvfiscanf_r+0x210>
 8004fce:	bf00      	nop
 8004fd0:	08004c79 	.word	0x08004c79
 8004fd4:	08004cef 	.word	0x08004cef
 8004fd8:	08005f7f 	.word	0x08005f7f
 8004fdc:	08005f36 	.word	0x08005f36
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800500c <__ssvfiscanf_r+0x2e4>)
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f43f aec5 	beq.w	8004d72 <__ssvfiscanf_r+0x4a>
 8004fe8:	466b      	mov	r3, sp
 8004fea:	4622      	mov	r2, r4
 8004fec:	a941      	add	r1, sp, #260	@ 0x104
 8004fee:	4630      	mov	r0, r6
 8004ff0:	f3af 8000 	nop.w
 8004ff4:	e7a0      	b.n	8004f38 <__ssvfiscanf_r+0x210>
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	065b      	lsls	r3, r3, #25
 8004ffa:	f53f af71 	bmi.w	8004ee0 <__ssvfiscanf_r+0x1b8>
 8004ffe:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8005002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005006:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005008:	e7f9      	b.n	8004ffe <__ssvfiscanf_r+0x2d6>
 800500a:	bf00      	nop
 800500c:	00000000 	.word	0x00000000

08005010 <_printf_common>:
 8005010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005014:	4616      	mov	r6, r2
 8005016:	4698      	mov	r8, r3
 8005018:	688a      	ldr	r2, [r1, #8]
 800501a:	690b      	ldr	r3, [r1, #16]
 800501c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005020:	4293      	cmp	r3, r2
 8005022:	bfb8      	it	lt
 8005024:	4613      	movlt	r3, r2
 8005026:	6033      	str	r3, [r6, #0]
 8005028:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800502c:	4607      	mov	r7, r0
 800502e:	460c      	mov	r4, r1
 8005030:	b10a      	cbz	r2, 8005036 <_printf_common+0x26>
 8005032:	3301      	adds	r3, #1
 8005034:	6033      	str	r3, [r6, #0]
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	0699      	lsls	r1, r3, #26
 800503a:	bf42      	ittt	mi
 800503c:	6833      	ldrmi	r3, [r6, #0]
 800503e:	3302      	addmi	r3, #2
 8005040:	6033      	strmi	r3, [r6, #0]
 8005042:	6825      	ldr	r5, [r4, #0]
 8005044:	f015 0506 	ands.w	r5, r5, #6
 8005048:	d106      	bne.n	8005058 <_printf_common+0x48>
 800504a:	f104 0a19 	add.w	sl, r4, #25
 800504e:	68e3      	ldr	r3, [r4, #12]
 8005050:	6832      	ldr	r2, [r6, #0]
 8005052:	1a9b      	subs	r3, r3, r2
 8005054:	42ab      	cmp	r3, r5
 8005056:	dc26      	bgt.n	80050a6 <_printf_common+0x96>
 8005058:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800505c:	6822      	ldr	r2, [r4, #0]
 800505e:	3b00      	subs	r3, #0
 8005060:	bf18      	it	ne
 8005062:	2301      	movne	r3, #1
 8005064:	0692      	lsls	r2, r2, #26
 8005066:	d42b      	bmi.n	80050c0 <_printf_common+0xb0>
 8005068:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800506c:	4641      	mov	r1, r8
 800506e:	4638      	mov	r0, r7
 8005070:	47c8      	blx	r9
 8005072:	3001      	adds	r0, #1
 8005074:	d01e      	beq.n	80050b4 <_printf_common+0xa4>
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	6922      	ldr	r2, [r4, #16]
 800507a:	f003 0306 	and.w	r3, r3, #6
 800507e:	2b04      	cmp	r3, #4
 8005080:	bf02      	ittt	eq
 8005082:	68e5      	ldreq	r5, [r4, #12]
 8005084:	6833      	ldreq	r3, [r6, #0]
 8005086:	1aed      	subeq	r5, r5, r3
 8005088:	68a3      	ldr	r3, [r4, #8]
 800508a:	bf0c      	ite	eq
 800508c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005090:	2500      	movne	r5, #0
 8005092:	4293      	cmp	r3, r2
 8005094:	bfc4      	itt	gt
 8005096:	1a9b      	subgt	r3, r3, r2
 8005098:	18ed      	addgt	r5, r5, r3
 800509a:	2600      	movs	r6, #0
 800509c:	341a      	adds	r4, #26
 800509e:	42b5      	cmp	r5, r6
 80050a0:	d11a      	bne.n	80050d8 <_printf_common+0xc8>
 80050a2:	2000      	movs	r0, #0
 80050a4:	e008      	b.n	80050b8 <_printf_common+0xa8>
 80050a6:	2301      	movs	r3, #1
 80050a8:	4652      	mov	r2, sl
 80050aa:	4641      	mov	r1, r8
 80050ac:	4638      	mov	r0, r7
 80050ae:	47c8      	blx	r9
 80050b0:	3001      	adds	r0, #1
 80050b2:	d103      	bne.n	80050bc <_printf_common+0xac>
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050bc:	3501      	adds	r5, #1
 80050be:	e7c6      	b.n	800504e <_printf_common+0x3e>
 80050c0:	18e1      	adds	r1, r4, r3
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	2030      	movs	r0, #48	@ 0x30
 80050c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050ca:	4422      	add	r2, r4
 80050cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050d4:	3302      	adds	r3, #2
 80050d6:	e7c7      	b.n	8005068 <_printf_common+0x58>
 80050d8:	2301      	movs	r3, #1
 80050da:	4622      	mov	r2, r4
 80050dc:	4641      	mov	r1, r8
 80050de:	4638      	mov	r0, r7
 80050e0:	47c8      	blx	r9
 80050e2:	3001      	adds	r0, #1
 80050e4:	d0e6      	beq.n	80050b4 <_printf_common+0xa4>
 80050e6:	3601      	adds	r6, #1
 80050e8:	e7d9      	b.n	800509e <_printf_common+0x8e>
	...

080050ec <_printf_i>:
 80050ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050f0:	7e0f      	ldrb	r7, [r1, #24]
 80050f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050f4:	2f78      	cmp	r7, #120	@ 0x78
 80050f6:	4691      	mov	r9, r2
 80050f8:	4680      	mov	r8, r0
 80050fa:	460c      	mov	r4, r1
 80050fc:	469a      	mov	sl, r3
 80050fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005102:	d807      	bhi.n	8005114 <_printf_i+0x28>
 8005104:	2f62      	cmp	r7, #98	@ 0x62
 8005106:	d80a      	bhi.n	800511e <_printf_i+0x32>
 8005108:	2f00      	cmp	r7, #0
 800510a:	f000 80d2 	beq.w	80052b2 <_printf_i+0x1c6>
 800510e:	2f58      	cmp	r7, #88	@ 0x58
 8005110:	f000 80b9 	beq.w	8005286 <_printf_i+0x19a>
 8005114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005118:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800511c:	e03a      	b.n	8005194 <_printf_i+0xa8>
 800511e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005122:	2b15      	cmp	r3, #21
 8005124:	d8f6      	bhi.n	8005114 <_printf_i+0x28>
 8005126:	a101      	add	r1, pc, #4	@ (adr r1, 800512c <_printf_i+0x40>)
 8005128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800512c:	08005185 	.word	0x08005185
 8005130:	08005199 	.word	0x08005199
 8005134:	08005115 	.word	0x08005115
 8005138:	08005115 	.word	0x08005115
 800513c:	08005115 	.word	0x08005115
 8005140:	08005115 	.word	0x08005115
 8005144:	08005199 	.word	0x08005199
 8005148:	08005115 	.word	0x08005115
 800514c:	08005115 	.word	0x08005115
 8005150:	08005115 	.word	0x08005115
 8005154:	08005115 	.word	0x08005115
 8005158:	08005299 	.word	0x08005299
 800515c:	080051c3 	.word	0x080051c3
 8005160:	08005253 	.word	0x08005253
 8005164:	08005115 	.word	0x08005115
 8005168:	08005115 	.word	0x08005115
 800516c:	080052bb 	.word	0x080052bb
 8005170:	08005115 	.word	0x08005115
 8005174:	080051c3 	.word	0x080051c3
 8005178:	08005115 	.word	0x08005115
 800517c:	08005115 	.word	0x08005115
 8005180:	0800525b 	.word	0x0800525b
 8005184:	6833      	ldr	r3, [r6, #0]
 8005186:	1d1a      	adds	r2, r3, #4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6032      	str	r2, [r6, #0]
 800518c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005190:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005194:	2301      	movs	r3, #1
 8005196:	e09d      	b.n	80052d4 <_printf_i+0x1e8>
 8005198:	6833      	ldr	r3, [r6, #0]
 800519a:	6820      	ldr	r0, [r4, #0]
 800519c:	1d19      	adds	r1, r3, #4
 800519e:	6031      	str	r1, [r6, #0]
 80051a0:	0606      	lsls	r6, r0, #24
 80051a2:	d501      	bpl.n	80051a8 <_printf_i+0xbc>
 80051a4:	681d      	ldr	r5, [r3, #0]
 80051a6:	e003      	b.n	80051b0 <_printf_i+0xc4>
 80051a8:	0645      	lsls	r5, r0, #25
 80051aa:	d5fb      	bpl.n	80051a4 <_printf_i+0xb8>
 80051ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051b0:	2d00      	cmp	r5, #0
 80051b2:	da03      	bge.n	80051bc <_printf_i+0xd0>
 80051b4:	232d      	movs	r3, #45	@ 0x2d
 80051b6:	426d      	negs	r5, r5
 80051b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051bc:	4859      	ldr	r0, [pc, #356]	@ (8005324 <_printf_i+0x238>)
 80051be:	230a      	movs	r3, #10
 80051c0:	e011      	b.n	80051e6 <_printf_i+0xfa>
 80051c2:	6821      	ldr	r1, [r4, #0]
 80051c4:	6833      	ldr	r3, [r6, #0]
 80051c6:	0608      	lsls	r0, r1, #24
 80051c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80051cc:	d402      	bmi.n	80051d4 <_printf_i+0xe8>
 80051ce:	0649      	lsls	r1, r1, #25
 80051d0:	bf48      	it	mi
 80051d2:	b2ad      	uxthmi	r5, r5
 80051d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80051d6:	4853      	ldr	r0, [pc, #332]	@ (8005324 <_printf_i+0x238>)
 80051d8:	6033      	str	r3, [r6, #0]
 80051da:	bf14      	ite	ne
 80051dc:	230a      	movne	r3, #10
 80051de:	2308      	moveq	r3, #8
 80051e0:	2100      	movs	r1, #0
 80051e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051e6:	6866      	ldr	r6, [r4, #4]
 80051e8:	60a6      	str	r6, [r4, #8]
 80051ea:	2e00      	cmp	r6, #0
 80051ec:	bfa2      	ittt	ge
 80051ee:	6821      	ldrge	r1, [r4, #0]
 80051f0:	f021 0104 	bicge.w	r1, r1, #4
 80051f4:	6021      	strge	r1, [r4, #0]
 80051f6:	b90d      	cbnz	r5, 80051fc <_printf_i+0x110>
 80051f8:	2e00      	cmp	r6, #0
 80051fa:	d04b      	beq.n	8005294 <_printf_i+0x1a8>
 80051fc:	4616      	mov	r6, r2
 80051fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005202:	fb03 5711 	mls	r7, r3, r1, r5
 8005206:	5dc7      	ldrb	r7, [r0, r7]
 8005208:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800520c:	462f      	mov	r7, r5
 800520e:	42bb      	cmp	r3, r7
 8005210:	460d      	mov	r5, r1
 8005212:	d9f4      	bls.n	80051fe <_printf_i+0x112>
 8005214:	2b08      	cmp	r3, #8
 8005216:	d10b      	bne.n	8005230 <_printf_i+0x144>
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	07df      	lsls	r7, r3, #31
 800521c:	d508      	bpl.n	8005230 <_printf_i+0x144>
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	6861      	ldr	r1, [r4, #4]
 8005222:	4299      	cmp	r1, r3
 8005224:	bfde      	ittt	le
 8005226:	2330      	movle	r3, #48	@ 0x30
 8005228:	f806 3c01 	strble.w	r3, [r6, #-1]
 800522c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005230:	1b92      	subs	r2, r2, r6
 8005232:	6122      	str	r2, [r4, #16]
 8005234:	f8cd a000 	str.w	sl, [sp]
 8005238:	464b      	mov	r3, r9
 800523a:	aa03      	add	r2, sp, #12
 800523c:	4621      	mov	r1, r4
 800523e:	4640      	mov	r0, r8
 8005240:	f7ff fee6 	bl	8005010 <_printf_common>
 8005244:	3001      	adds	r0, #1
 8005246:	d14a      	bne.n	80052de <_printf_i+0x1f2>
 8005248:	f04f 30ff 	mov.w	r0, #4294967295
 800524c:	b004      	add	sp, #16
 800524e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	f043 0320 	orr.w	r3, r3, #32
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	4833      	ldr	r0, [pc, #204]	@ (8005328 <_printf_i+0x23c>)
 800525c:	2778      	movs	r7, #120	@ 0x78
 800525e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	6831      	ldr	r1, [r6, #0]
 8005266:	061f      	lsls	r7, r3, #24
 8005268:	f851 5b04 	ldr.w	r5, [r1], #4
 800526c:	d402      	bmi.n	8005274 <_printf_i+0x188>
 800526e:	065f      	lsls	r7, r3, #25
 8005270:	bf48      	it	mi
 8005272:	b2ad      	uxthmi	r5, r5
 8005274:	6031      	str	r1, [r6, #0]
 8005276:	07d9      	lsls	r1, r3, #31
 8005278:	bf44      	itt	mi
 800527a:	f043 0320 	orrmi.w	r3, r3, #32
 800527e:	6023      	strmi	r3, [r4, #0]
 8005280:	b11d      	cbz	r5, 800528a <_printf_i+0x19e>
 8005282:	2310      	movs	r3, #16
 8005284:	e7ac      	b.n	80051e0 <_printf_i+0xf4>
 8005286:	4827      	ldr	r0, [pc, #156]	@ (8005324 <_printf_i+0x238>)
 8005288:	e7e9      	b.n	800525e <_printf_i+0x172>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	f023 0320 	bic.w	r3, r3, #32
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	e7f6      	b.n	8005282 <_printf_i+0x196>
 8005294:	4616      	mov	r6, r2
 8005296:	e7bd      	b.n	8005214 <_printf_i+0x128>
 8005298:	6833      	ldr	r3, [r6, #0]
 800529a:	6825      	ldr	r5, [r4, #0]
 800529c:	6961      	ldr	r1, [r4, #20]
 800529e:	1d18      	adds	r0, r3, #4
 80052a0:	6030      	str	r0, [r6, #0]
 80052a2:	062e      	lsls	r6, r5, #24
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	d501      	bpl.n	80052ac <_printf_i+0x1c0>
 80052a8:	6019      	str	r1, [r3, #0]
 80052aa:	e002      	b.n	80052b2 <_printf_i+0x1c6>
 80052ac:	0668      	lsls	r0, r5, #25
 80052ae:	d5fb      	bpl.n	80052a8 <_printf_i+0x1bc>
 80052b0:	8019      	strh	r1, [r3, #0]
 80052b2:	2300      	movs	r3, #0
 80052b4:	6123      	str	r3, [r4, #16]
 80052b6:	4616      	mov	r6, r2
 80052b8:	e7bc      	b.n	8005234 <_printf_i+0x148>
 80052ba:	6833      	ldr	r3, [r6, #0]
 80052bc:	1d1a      	adds	r2, r3, #4
 80052be:	6032      	str	r2, [r6, #0]
 80052c0:	681e      	ldr	r6, [r3, #0]
 80052c2:	6862      	ldr	r2, [r4, #4]
 80052c4:	2100      	movs	r1, #0
 80052c6:	4630      	mov	r0, r6
 80052c8:	f7fa ff8a 	bl	80001e0 <memchr>
 80052cc:	b108      	cbz	r0, 80052d2 <_printf_i+0x1e6>
 80052ce:	1b80      	subs	r0, r0, r6
 80052d0:	6060      	str	r0, [r4, #4]
 80052d2:	6863      	ldr	r3, [r4, #4]
 80052d4:	6123      	str	r3, [r4, #16]
 80052d6:	2300      	movs	r3, #0
 80052d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052dc:	e7aa      	b.n	8005234 <_printf_i+0x148>
 80052de:	6923      	ldr	r3, [r4, #16]
 80052e0:	4632      	mov	r2, r6
 80052e2:	4649      	mov	r1, r9
 80052e4:	4640      	mov	r0, r8
 80052e6:	47d0      	blx	sl
 80052e8:	3001      	adds	r0, #1
 80052ea:	d0ad      	beq.n	8005248 <_printf_i+0x15c>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	079b      	lsls	r3, r3, #30
 80052f0:	d413      	bmi.n	800531a <_printf_i+0x22e>
 80052f2:	68e0      	ldr	r0, [r4, #12]
 80052f4:	9b03      	ldr	r3, [sp, #12]
 80052f6:	4298      	cmp	r0, r3
 80052f8:	bfb8      	it	lt
 80052fa:	4618      	movlt	r0, r3
 80052fc:	e7a6      	b.n	800524c <_printf_i+0x160>
 80052fe:	2301      	movs	r3, #1
 8005300:	4632      	mov	r2, r6
 8005302:	4649      	mov	r1, r9
 8005304:	4640      	mov	r0, r8
 8005306:	47d0      	blx	sl
 8005308:	3001      	adds	r0, #1
 800530a:	d09d      	beq.n	8005248 <_printf_i+0x15c>
 800530c:	3501      	adds	r5, #1
 800530e:	68e3      	ldr	r3, [r4, #12]
 8005310:	9903      	ldr	r1, [sp, #12]
 8005312:	1a5b      	subs	r3, r3, r1
 8005314:	42ab      	cmp	r3, r5
 8005316:	dcf2      	bgt.n	80052fe <_printf_i+0x212>
 8005318:	e7eb      	b.n	80052f2 <_printf_i+0x206>
 800531a:	2500      	movs	r5, #0
 800531c:	f104 0619 	add.w	r6, r4, #25
 8005320:	e7f5      	b.n	800530e <_printf_i+0x222>
 8005322:	bf00      	nop
 8005324:	08005f41 	.word	0x08005f41
 8005328:	08005f52 	.word	0x08005f52

0800532c <_scanf_chars>:
 800532c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005330:	4615      	mov	r5, r2
 8005332:	688a      	ldr	r2, [r1, #8]
 8005334:	4680      	mov	r8, r0
 8005336:	460c      	mov	r4, r1
 8005338:	b932      	cbnz	r2, 8005348 <_scanf_chars+0x1c>
 800533a:	698a      	ldr	r2, [r1, #24]
 800533c:	2a00      	cmp	r2, #0
 800533e:	bf14      	ite	ne
 8005340:	f04f 32ff 	movne.w	r2, #4294967295
 8005344:	2201      	moveq	r2, #1
 8005346:	608a      	str	r2, [r1, #8]
 8005348:	6822      	ldr	r2, [r4, #0]
 800534a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80053dc <_scanf_chars+0xb0>
 800534e:	06d1      	lsls	r1, r2, #27
 8005350:	bf5f      	itttt	pl
 8005352:	681a      	ldrpl	r2, [r3, #0]
 8005354:	1d11      	addpl	r1, r2, #4
 8005356:	6019      	strpl	r1, [r3, #0]
 8005358:	6816      	ldrpl	r6, [r2, #0]
 800535a:	2700      	movs	r7, #0
 800535c:	69a0      	ldr	r0, [r4, #24]
 800535e:	b188      	cbz	r0, 8005384 <_scanf_chars+0x58>
 8005360:	2801      	cmp	r0, #1
 8005362:	d107      	bne.n	8005374 <_scanf_chars+0x48>
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	781a      	ldrb	r2, [r3, #0]
 8005368:	6963      	ldr	r3, [r4, #20]
 800536a:	5c9b      	ldrb	r3, [r3, r2]
 800536c:	b953      	cbnz	r3, 8005384 <_scanf_chars+0x58>
 800536e:	2f00      	cmp	r7, #0
 8005370:	d031      	beq.n	80053d6 <_scanf_chars+0xaa>
 8005372:	e022      	b.n	80053ba <_scanf_chars+0x8e>
 8005374:	2802      	cmp	r0, #2
 8005376:	d120      	bne.n	80053ba <_scanf_chars+0x8e>
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005380:	071b      	lsls	r3, r3, #28
 8005382:	d41a      	bmi.n	80053ba <_scanf_chars+0x8e>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	06da      	lsls	r2, r3, #27
 8005388:	bf5e      	ittt	pl
 800538a:	682b      	ldrpl	r3, [r5, #0]
 800538c:	781b      	ldrbpl	r3, [r3, #0]
 800538e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005392:	682a      	ldr	r2, [r5, #0]
 8005394:	686b      	ldr	r3, [r5, #4]
 8005396:	3201      	adds	r2, #1
 8005398:	602a      	str	r2, [r5, #0]
 800539a:	68a2      	ldr	r2, [r4, #8]
 800539c:	3b01      	subs	r3, #1
 800539e:	3a01      	subs	r2, #1
 80053a0:	606b      	str	r3, [r5, #4]
 80053a2:	3701      	adds	r7, #1
 80053a4:	60a2      	str	r2, [r4, #8]
 80053a6:	b142      	cbz	r2, 80053ba <_scanf_chars+0x8e>
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	dcd7      	bgt.n	800535c <_scanf_chars+0x30>
 80053ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80053b0:	4629      	mov	r1, r5
 80053b2:	4640      	mov	r0, r8
 80053b4:	4798      	blx	r3
 80053b6:	2800      	cmp	r0, #0
 80053b8:	d0d0      	beq.n	800535c <_scanf_chars+0x30>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	f013 0310 	ands.w	r3, r3, #16
 80053c0:	d105      	bne.n	80053ce <_scanf_chars+0xa2>
 80053c2:	68e2      	ldr	r2, [r4, #12]
 80053c4:	3201      	adds	r2, #1
 80053c6:	60e2      	str	r2, [r4, #12]
 80053c8:	69a2      	ldr	r2, [r4, #24]
 80053ca:	b102      	cbz	r2, 80053ce <_scanf_chars+0xa2>
 80053cc:	7033      	strb	r3, [r6, #0]
 80053ce:	6923      	ldr	r3, [r4, #16]
 80053d0:	443b      	add	r3, r7
 80053d2:	6123      	str	r3, [r4, #16]
 80053d4:	2000      	movs	r0, #0
 80053d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053da:	bf00      	nop
 80053dc:	08005f7f 	.word	0x08005f7f

080053e0 <_scanf_i>:
 80053e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e4:	4698      	mov	r8, r3
 80053e6:	4b74      	ldr	r3, [pc, #464]	@ (80055b8 <_scanf_i+0x1d8>)
 80053e8:	460c      	mov	r4, r1
 80053ea:	4682      	mov	sl, r0
 80053ec:	4616      	mov	r6, r2
 80053ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80053f2:	b087      	sub	sp, #28
 80053f4:	ab03      	add	r3, sp, #12
 80053f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80053fa:	4b70      	ldr	r3, [pc, #448]	@ (80055bc <_scanf_i+0x1dc>)
 80053fc:	69a1      	ldr	r1, [r4, #24]
 80053fe:	4a70      	ldr	r2, [pc, #448]	@ (80055c0 <_scanf_i+0x1e0>)
 8005400:	2903      	cmp	r1, #3
 8005402:	bf08      	it	eq
 8005404:	461a      	moveq	r2, r3
 8005406:	68a3      	ldr	r3, [r4, #8]
 8005408:	9201      	str	r2, [sp, #4]
 800540a:	1e5a      	subs	r2, r3, #1
 800540c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005410:	bf88      	it	hi
 8005412:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005416:	4627      	mov	r7, r4
 8005418:	bf82      	ittt	hi
 800541a:	eb03 0905 	addhi.w	r9, r3, r5
 800541e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005422:	60a3      	strhi	r3, [r4, #8]
 8005424:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005428:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800542c:	bf98      	it	ls
 800542e:	f04f 0900 	movls.w	r9, #0
 8005432:	6023      	str	r3, [r4, #0]
 8005434:	463d      	mov	r5, r7
 8005436:	f04f 0b00 	mov.w	fp, #0
 800543a:	6831      	ldr	r1, [r6, #0]
 800543c:	ab03      	add	r3, sp, #12
 800543e:	7809      	ldrb	r1, [r1, #0]
 8005440:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005444:	2202      	movs	r2, #2
 8005446:	f7fa fecb 	bl	80001e0 <memchr>
 800544a:	b328      	cbz	r0, 8005498 <_scanf_i+0xb8>
 800544c:	f1bb 0f01 	cmp.w	fp, #1
 8005450:	d159      	bne.n	8005506 <_scanf_i+0x126>
 8005452:	6862      	ldr	r2, [r4, #4]
 8005454:	b92a      	cbnz	r2, 8005462 <_scanf_i+0x82>
 8005456:	6822      	ldr	r2, [r4, #0]
 8005458:	2108      	movs	r1, #8
 800545a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800545e:	6061      	str	r1, [r4, #4]
 8005460:	6022      	str	r2, [r4, #0]
 8005462:	6822      	ldr	r2, [r4, #0]
 8005464:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8005468:	6022      	str	r2, [r4, #0]
 800546a:	68a2      	ldr	r2, [r4, #8]
 800546c:	1e51      	subs	r1, r2, #1
 800546e:	60a1      	str	r1, [r4, #8]
 8005470:	b192      	cbz	r2, 8005498 <_scanf_i+0xb8>
 8005472:	6832      	ldr	r2, [r6, #0]
 8005474:	1c51      	adds	r1, r2, #1
 8005476:	6031      	str	r1, [r6, #0]
 8005478:	7812      	ldrb	r2, [r2, #0]
 800547a:	f805 2b01 	strb.w	r2, [r5], #1
 800547e:	6872      	ldr	r2, [r6, #4]
 8005480:	3a01      	subs	r2, #1
 8005482:	2a00      	cmp	r2, #0
 8005484:	6072      	str	r2, [r6, #4]
 8005486:	dc07      	bgt.n	8005498 <_scanf_i+0xb8>
 8005488:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800548c:	4631      	mov	r1, r6
 800548e:	4650      	mov	r0, sl
 8005490:	4790      	blx	r2
 8005492:	2800      	cmp	r0, #0
 8005494:	f040 8085 	bne.w	80055a2 <_scanf_i+0x1c2>
 8005498:	f10b 0b01 	add.w	fp, fp, #1
 800549c:	f1bb 0f03 	cmp.w	fp, #3
 80054a0:	d1cb      	bne.n	800543a <_scanf_i+0x5a>
 80054a2:	6863      	ldr	r3, [r4, #4]
 80054a4:	b90b      	cbnz	r3, 80054aa <_scanf_i+0xca>
 80054a6:	230a      	movs	r3, #10
 80054a8:	6063      	str	r3, [r4, #4]
 80054aa:	6863      	ldr	r3, [r4, #4]
 80054ac:	4945      	ldr	r1, [pc, #276]	@ (80055c4 <_scanf_i+0x1e4>)
 80054ae:	6960      	ldr	r0, [r4, #20]
 80054b0:	1ac9      	subs	r1, r1, r3
 80054b2:	f000 f889 	bl	80055c8 <__sccl>
 80054b6:	f04f 0b00 	mov.w	fp, #0
 80054ba:	68a3      	ldr	r3, [r4, #8]
 80054bc:	6822      	ldr	r2, [r4, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d03d      	beq.n	800553e <_scanf_i+0x15e>
 80054c2:	6831      	ldr	r1, [r6, #0]
 80054c4:	6960      	ldr	r0, [r4, #20]
 80054c6:	f891 c000 	ldrb.w	ip, [r1]
 80054ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d035      	beq.n	800553e <_scanf_i+0x15e>
 80054d2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80054d6:	d124      	bne.n	8005522 <_scanf_i+0x142>
 80054d8:	0510      	lsls	r0, r2, #20
 80054da:	d522      	bpl.n	8005522 <_scanf_i+0x142>
 80054dc:	f10b 0b01 	add.w	fp, fp, #1
 80054e0:	f1b9 0f00 	cmp.w	r9, #0
 80054e4:	d003      	beq.n	80054ee <_scanf_i+0x10e>
 80054e6:	3301      	adds	r3, #1
 80054e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80054ec:	60a3      	str	r3, [r4, #8]
 80054ee:	6873      	ldr	r3, [r6, #4]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	6073      	str	r3, [r6, #4]
 80054f6:	dd1b      	ble.n	8005530 <_scanf_i+0x150>
 80054f8:	6833      	ldr	r3, [r6, #0]
 80054fa:	3301      	adds	r3, #1
 80054fc:	6033      	str	r3, [r6, #0]
 80054fe:	68a3      	ldr	r3, [r4, #8]
 8005500:	3b01      	subs	r3, #1
 8005502:	60a3      	str	r3, [r4, #8]
 8005504:	e7d9      	b.n	80054ba <_scanf_i+0xda>
 8005506:	f1bb 0f02 	cmp.w	fp, #2
 800550a:	d1ae      	bne.n	800546a <_scanf_i+0x8a>
 800550c:	6822      	ldr	r2, [r4, #0]
 800550e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005512:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005516:	d1bf      	bne.n	8005498 <_scanf_i+0xb8>
 8005518:	2110      	movs	r1, #16
 800551a:	6061      	str	r1, [r4, #4]
 800551c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005520:	e7a2      	b.n	8005468 <_scanf_i+0x88>
 8005522:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005526:	6022      	str	r2, [r4, #0]
 8005528:	780b      	ldrb	r3, [r1, #0]
 800552a:	f805 3b01 	strb.w	r3, [r5], #1
 800552e:	e7de      	b.n	80054ee <_scanf_i+0x10e>
 8005530:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005534:	4631      	mov	r1, r6
 8005536:	4650      	mov	r0, sl
 8005538:	4798      	blx	r3
 800553a:	2800      	cmp	r0, #0
 800553c:	d0df      	beq.n	80054fe <_scanf_i+0x11e>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	05d9      	lsls	r1, r3, #23
 8005542:	d50d      	bpl.n	8005560 <_scanf_i+0x180>
 8005544:	42bd      	cmp	r5, r7
 8005546:	d909      	bls.n	800555c <_scanf_i+0x17c>
 8005548:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800554c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005550:	4632      	mov	r2, r6
 8005552:	4650      	mov	r0, sl
 8005554:	4798      	blx	r3
 8005556:	f105 39ff 	add.w	r9, r5, #4294967295
 800555a:	464d      	mov	r5, r9
 800555c:	42bd      	cmp	r5, r7
 800555e:	d028      	beq.n	80055b2 <_scanf_i+0x1d2>
 8005560:	6822      	ldr	r2, [r4, #0]
 8005562:	f012 0210 	ands.w	r2, r2, #16
 8005566:	d113      	bne.n	8005590 <_scanf_i+0x1b0>
 8005568:	702a      	strb	r2, [r5, #0]
 800556a:	6863      	ldr	r3, [r4, #4]
 800556c:	9e01      	ldr	r6, [sp, #4]
 800556e:	4639      	mov	r1, r7
 8005570:	4650      	mov	r0, sl
 8005572:	47b0      	blx	r6
 8005574:	f8d8 3000 	ldr.w	r3, [r8]
 8005578:	6821      	ldr	r1, [r4, #0]
 800557a:	1d1a      	adds	r2, r3, #4
 800557c:	f8c8 2000 	str.w	r2, [r8]
 8005580:	f011 0f20 	tst.w	r1, #32
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	d00f      	beq.n	80055a8 <_scanf_i+0x1c8>
 8005588:	6018      	str	r0, [r3, #0]
 800558a:	68e3      	ldr	r3, [r4, #12]
 800558c:	3301      	adds	r3, #1
 800558e:	60e3      	str	r3, [r4, #12]
 8005590:	6923      	ldr	r3, [r4, #16]
 8005592:	1bed      	subs	r5, r5, r7
 8005594:	445d      	add	r5, fp
 8005596:	442b      	add	r3, r5
 8005598:	6123      	str	r3, [r4, #16]
 800559a:	2000      	movs	r0, #0
 800559c:	b007      	add	sp, #28
 800559e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a2:	f04f 0b00 	mov.w	fp, #0
 80055a6:	e7ca      	b.n	800553e <_scanf_i+0x15e>
 80055a8:	07ca      	lsls	r2, r1, #31
 80055aa:	bf4c      	ite	mi
 80055ac:	8018      	strhmi	r0, [r3, #0]
 80055ae:	6018      	strpl	r0, [r3, #0]
 80055b0:	e7eb      	b.n	800558a <_scanf_i+0x1aa>
 80055b2:	2001      	movs	r0, #1
 80055b4:	e7f2      	b.n	800559c <_scanf_i+0x1bc>
 80055b6:	bf00      	nop
 80055b8:	08005b10 	.word	0x08005b10
 80055bc:	08005871 	.word	0x08005871
 80055c0:	08005951 	.word	0x08005951
 80055c4:	08005f73 	.word	0x08005f73

080055c8 <__sccl>:
 80055c8:	b570      	push	{r4, r5, r6, lr}
 80055ca:	780b      	ldrb	r3, [r1, #0]
 80055cc:	4604      	mov	r4, r0
 80055ce:	2b5e      	cmp	r3, #94	@ 0x5e
 80055d0:	bf0b      	itete	eq
 80055d2:	784b      	ldrbeq	r3, [r1, #1]
 80055d4:	1c4a      	addne	r2, r1, #1
 80055d6:	1c8a      	addeq	r2, r1, #2
 80055d8:	2100      	movne	r1, #0
 80055da:	bf08      	it	eq
 80055dc:	2101      	moveq	r1, #1
 80055de:	3801      	subs	r0, #1
 80055e0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80055e4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80055e8:	42a8      	cmp	r0, r5
 80055ea:	d1fb      	bne.n	80055e4 <__sccl+0x1c>
 80055ec:	b90b      	cbnz	r3, 80055f2 <__sccl+0x2a>
 80055ee:	1e50      	subs	r0, r2, #1
 80055f0:	bd70      	pop	{r4, r5, r6, pc}
 80055f2:	f081 0101 	eor.w	r1, r1, #1
 80055f6:	54e1      	strb	r1, [r4, r3]
 80055f8:	4610      	mov	r0, r2
 80055fa:	4602      	mov	r2, r0
 80055fc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005600:	2d2d      	cmp	r5, #45	@ 0x2d
 8005602:	d005      	beq.n	8005610 <__sccl+0x48>
 8005604:	2d5d      	cmp	r5, #93	@ 0x5d
 8005606:	d016      	beq.n	8005636 <__sccl+0x6e>
 8005608:	2d00      	cmp	r5, #0
 800560a:	d0f1      	beq.n	80055f0 <__sccl+0x28>
 800560c:	462b      	mov	r3, r5
 800560e:	e7f2      	b.n	80055f6 <__sccl+0x2e>
 8005610:	7846      	ldrb	r6, [r0, #1]
 8005612:	2e5d      	cmp	r6, #93	@ 0x5d
 8005614:	d0fa      	beq.n	800560c <__sccl+0x44>
 8005616:	42b3      	cmp	r3, r6
 8005618:	dcf8      	bgt.n	800560c <__sccl+0x44>
 800561a:	3002      	adds	r0, #2
 800561c:	461a      	mov	r2, r3
 800561e:	3201      	adds	r2, #1
 8005620:	4296      	cmp	r6, r2
 8005622:	54a1      	strb	r1, [r4, r2]
 8005624:	dcfb      	bgt.n	800561e <__sccl+0x56>
 8005626:	1af2      	subs	r2, r6, r3
 8005628:	3a01      	subs	r2, #1
 800562a:	1c5d      	adds	r5, r3, #1
 800562c:	42b3      	cmp	r3, r6
 800562e:	bfa8      	it	ge
 8005630:	2200      	movge	r2, #0
 8005632:	18ab      	adds	r3, r5, r2
 8005634:	e7e1      	b.n	80055fa <__sccl+0x32>
 8005636:	4610      	mov	r0, r2
 8005638:	e7da      	b.n	80055f0 <__sccl+0x28>

0800563a <__submore>:
 800563a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800563e:	460c      	mov	r4, r1
 8005640:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005642:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005646:	4299      	cmp	r1, r3
 8005648:	d11d      	bne.n	8005686 <__submore+0x4c>
 800564a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800564e:	f7ff f92f 	bl	80048b0 <_malloc_r>
 8005652:	b918      	cbnz	r0, 800565c <__submore+0x22>
 8005654:	f04f 30ff 	mov.w	r0, #4294967295
 8005658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800565c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005660:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005662:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005666:	6360      	str	r0, [r4, #52]	@ 0x34
 8005668:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800566c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005670:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005674:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005678:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800567c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005680:	6020      	str	r0, [r4, #0]
 8005682:	2000      	movs	r0, #0
 8005684:	e7e8      	b.n	8005658 <__submore+0x1e>
 8005686:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005688:	0077      	lsls	r7, r6, #1
 800568a:	463a      	mov	r2, r7
 800568c:	f000 f848 	bl	8005720 <_realloc_r>
 8005690:	4605      	mov	r5, r0
 8005692:	2800      	cmp	r0, #0
 8005694:	d0de      	beq.n	8005654 <__submore+0x1a>
 8005696:	eb00 0806 	add.w	r8, r0, r6
 800569a:	4601      	mov	r1, r0
 800569c:	4632      	mov	r2, r6
 800569e:	4640      	mov	r0, r8
 80056a0:	f000 f830 	bl	8005704 <memcpy>
 80056a4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80056a8:	f8c4 8000 	str.w	r8, [r4]
 80056ac:	e7e9      	b.n	8005682 <__submore+0x48>

080056ae <memmove>:
 80056ae:	4288      	cmp	r0, r1
 80056b0:	b510      	push	{r4, lr}
 80056b2:	eb01 0402 	add.w	r4, r1, r2
 80056b6:	d902      	bls.n	80056be <memmove+0x10>
 80056b8:	4284      	cmp	r4, r0
 80056ba:	4623      	mov	r3, r4
 80056bc:	d807      	bhi.n	80056ce <memmove+0x20>
 80056be:	1e43      	subs	r3, r0, #1
 80056c0:	42a1      	cmp	r1, r4
 80056c2:	d008      	beq.n	80056d6 <memmove+0x28>
 80056c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056cc:	e7f8      	b.n	80056c0 <memmove+0x12>
 80056ce:	4402      	add	r2, r0
 80056d0:	4601      	mov	r1, r0
 80056d2:	428a      	cmp	r2, r1
 80056d4:	d100      	bne.n	80056d8 <memmove+0x2a>
 80056d6:	bd10      	pop	{r4, pc}
 80056d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056e0:	e7f7      	b.n	80056d2 <memmove+0x24>
	...

080056e4 <_sbrk_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	4d06      	ldr	r5, [pc, #24]	@ (8005700 <_sbrk_r+0x1c>)
 80056e8:	2300      	movs	r3, #0
 80056ea:	4604      	mov	r4, r0
 80056ec:	4608      	mov	r0, r1
 80056ee:	602b      	str	r3, [r5, #0]
 80056f0:	f7fe ff04 	bl	80044fc <_sbrk>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d102      	bne.n	80056fe <_sbrk_r+0x1a>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	b103      	cbz	r3, 80056fe <_sbrk_r+0x1a>
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	20000820 	.word	0x20000820

08005704 <memcpy>:
 8005704:	440a      	add	r2, r1
 8005706:	4291      	cmp	r1, r2
 8005708:	f100 33ff 	add.w	r3, r0, #4294967295
 800570c:	d100      	bne.n	8005710 <memcpy+0xc>
 800570e:	4770      	bx	lr
 8005710:	b510      	push	{r4, lr}
 8005712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005716:	f803 4f01 	strb.w	r4, [r3, #1]!
 800571a:	4291      	cmp	r1, r2
 800571c:	d1f9      	bne.n	8005712 <memcpy+0xe>
 800571e:	bd10      	pop	{r4, pc}

08005720 <_realloc_r>:
 8005720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005724:	4680      	mov	r8, r0
 8005726:	4615      	mov	r5, r2
 8005728:	460c      	mov	r4, r1
 800572a:	b921      	cbnz	r1, 8005736 <_realloc_r+0x16>
 800572c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005730:	4611      	mov	r1, r2
 8005732:	f7ff b8bd 	b.w	80048b0 <_malloc_r>
 8005736:	b92a      	cbnz	r2, 8005744 <_realloc_r+0x24>
 8005738:	f7ff f84e 	bl	80047d8 <_free_r>
 800573c:	2400      	movs	r4, #0
 800573e:	4620      	mov	r0, r4
 8005740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005744:	f000 f906 	bl	8005954 <_malloc_usable_size_r>
 8005748:	4285      	cmp	r5, r0
 800574a:	4606      	mov	r6, r0
 800574c:	d802      	bhi.n	8005754 <_realloc_r+0x34>
 800574e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005752:	d8f4      	bhi.n	800573e <_realloc_r+0x1e>
 8005754:	4629      	mov	r1, r5
 8005756:	4640      	mov	r0, r8
 8005758:	f7ff f8aa 	bl	80048b0 <_malloc_r>
 800575c:	4607      	mov	r7, r0
 800575e:	2800      	cmp	r0, #0
 8005760:	d0ec      	beq.n	800573c <_realloc_r+0x1c>
 8005762:	42b5      	cmp	r5, r6
 8005764:	462a      	mov	r2, r5
 8005766:	4621      	mov	r1, r4
 8005768:	bf28      	it	cs
 800576a:	4632      	movcs	r2, r6
 800576c:	f7ff ffca 	bl	8005704 <memcpy>
 8005770:	4621      	mov	r1, r4
 8005772:	4640      	mov	r0, r8
 8005774:	f7ff f830 	bl	80047d8 <_free_r>
 8005778:	463c      	mov	r4, r7
 800577a:	e7e0      	b.n	800573e <_realloc_r+0x1e>

0800577c <_strtol_l.constprop.0>:
 800577c:	2b24      	cmp	r3, #36	@ 0x24
 800577e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005782:	4686      	mov	lr, r0
 8005784:	4690      	mov	r8, r2
 8005786:	d801      	bhi.n	800578c <_strtol_l.constprop.0+0x10>
 8005788:	2b01      	cmp	r3, #1
 800578a:	d106      	bne.n	800579a <_strtol_l.constprop.0+0x1e>
 800578c:	f7fe fff8 	bl	8004780 <__errno>
 8005790:	2316      	movs	r3, #22
 8005792:	6003      	str	r3, [r0, #0]
 8005794:	2000      	movs	r0, #0
 8005796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800579a:	4834      	ldr	r0, [pc, #208]	@ (800586c <_strtol_l.constprop.0+0xf0>)
 800579c:	460d      	mov	r5, r1
 800579e:	462a      	mov	r2, r5
 80057a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057a4:	5d06      	ldrb	r6, [r0, r4]
 80057a6:	f016 0608 	ands.w	r6, r6, #8
 80057aa:	d1f8      	bne.n	800579e <_strtol_l.constprop.0+0x22>
 80057ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80057ae:	d12d      	bne.n	800580c <_strtol_l.constprop.0+0x90>
 80057b0:	782c      	ldrb	r4, [r5, #0]
 80057b2:	2601      	movs	r6, #1
 80057b4:	1c95      	adds	r5, r2, #2
 80057b6:	f033 0210 	bics.w	r2, r3, #16
 80057ba:	d109      	bne.n	80057d0 <_strtol_l.constprop.0+0x54>
 80057bc:	2c30      	cmp	r4, #48	@ 0x30
 80057be:	d12a      	bne.n	8005816 <_strtol_l.constprop.0+0x9a>
 80057c0:	782a      	ldrb	r2, [r5, #0]
 80057c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80057c6:	2a58      	cmp	r2, #88	@ 0x58
 80057c8:	d125      	bne.n	8005816 <_strtol_l.constprop.0+0x9a>
 80057ca:	786c      	ldrb	r4, [r5, #1]
 80057cc:	2310      	movs	r3, #16
 80057ce:	3502      	adds	r5, #2
 80057d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80057d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80057d8:	2200      	movs	r2, #0
 80057da:	fbbc f9f3 	udiv	r9, ip, r3
 80057de:	4610      	mov	r0, r2
 80057e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80057e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80057e8:	2f09      	cmp	r7, #9
 80057ea:	d81b      	bhi.n	8005824 <_strtol_l.constprop.0+0xa8>
 80057ec:	463c      	mov	r4, r7
 80057ee:	42a3      	cmp	r3, r4
 80057f0:	dd27      	ble.n	8005842 <_strtol_l.constprop.0+0xc6>
 80057f2:	1c57      	adds	r7, r2, #1
 80057f4:	d007      	beq.n	8005806 <_strtol_l.constprop.0+0x8a>
 80057f6:	4581      	cmp	r9, r0
 80057f8:	d320      	bcc.n	800583c <_strtol_l.constprop.0+0xc0>
 80057fa:	d101      	bne.n	8005800 <_strtol_l.constprop.0+0x84>
 80057fc:	45a2      	cmp	sl, r4
 80057fe:	db1d      	blt.n	800583c <_strtol_l.constprop.0+0xc0>
 8005800:	fb00 4003 	mla	r0, r0, r3, r4
 8005804:	2201      	movs	r2, #1
 8005806:	f815 4b01 	ldrb.w	r4, [r5], #1
 800580a:	e7eb      	b.n	80057e4 <_strtol_l.constprop.0+0x68>
 800580c:	2c2b      	cmp	r4, #43	@ 0x2b
 800580e:	bf04      	itt	eq
 8005810:	782c      	ldrbeq	r4, [r5, #0]
 8005812:	1c95      	addeq	r5, r2, #2
 8005814:	e7cf      	b.n	80057b6 <_strtol_l.constprop.0+0x3a>
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1da      	bne.n	80057d0 <_strtol_l.constprop.0+0x54>
 800581a:	2c30      	cmp	r4, #48	@ 0x30
 800581c:	bf0c      	ite	eq
 800581e:	2308      	moveq	r3, #8
 8005820:	230a      	movne	r3, #10
 8005822:	e7d5      	b.n	80057d0 <_strtol_l.constprop.0+0x54>
 8005824:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005828:	2f19      	cmp	r7, #25
 800582a:	d801      	bhi.n	8005830 <_strtol_l.constprop.0+0xb4>
 800582c:	3c37      	subs	r4, #55	@ 0x37
 800582e:	e7de      	b.n	80057ee <_strtol_l.constprop.0+0x72>
 8005830:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005834:	2f19      	cmp	r7, #25
 8005836:	d804      	bhi.n	8005842 <_strtol_l.constprop.0+0xc6>
 8005838:	3c57      	subs	r4, #87	@ 0x57
 800583a:	e7d8      	b.n	80057ee <_strtol_l.constprop.0+0x72>
 800583c:	f04f 32ff 	mov.w	r2, #4294967295
 8005840:	e7e1      	b.n	8005806 <_strtol_l.constprop.0+0x8a>
 8005842:	1c53      	adds	r3, r2, #1
 8005844:	d108      	bne.n	8005858 <_strtol_l.constprop.0+0xdc>
 8005846:	2322      	movs	r3, #34	@ 0x22
 8005848:	f8ce 3000 	str.w	r3, [lr]
 800584c:	4660      	mov	r0, ip
 800584e:	f1b8 0f00 	cmp.w	r8, #0
 8005852:	d0a0      	beq.n	8005796 <_strtol_l.constprop.0+0x1a>
 8005854:	1e69      	subs	r1, r5, #1
 8005856:	e006      	b.n	8005866 <_strtol_l.constprop.0+0xea>
 8005858:	b106      	cbz	r6, 800585c <_strtol_l.constprop.0+0xe0>
 800585a:	4240      	negs	r0, r0
 800585c:	f1b8 0f00 	cmp.w	r8, #0
 8005860:	d099      	beq.n	8005796 <_strtol_l.constprop.0+0x1a>
 8005862:	2a00      	cmp	r2, #0
 8005864:	d1f6      	bne.n	8005854 <_strtol_l.constprop.0+0xd8>
 8005866:	f8c8 1000 	str.w	r1, [r8]
 800586a:	e794      	b.n	8005796 <_strtol_l.constprop.0+0x1a>
 800586c:	08005f7f 	.word	0x08005f7f

08005870 <_strtol_r>:
 8005870:	f7ff bf84 	b.w	800577c <_strtol_l.constprop.0>

08005874 <_strtoul_l.constprop.0>:
 8005874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005878:	4e34      	ldr	r6, [pc, #208]	@ (800594c <_strtoul_l.constprop.0+0xd8>)
 800587a:	4686      	mov	lr, r0
 800587c:	460d      	mov	r5, r1
 800587e:	4628      	mov	r0, r5
 8005880:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005884:	5d37      	ldrb	r7, [r6, r4]
 8005886:	f017 0708 	ands.w	r7, r7, #8
 800588a:	d1f8      	bne.n	800587e <_strtoul_l.constprop.0+0xa>
 800588c:	2c2d      	cmp	r4, #45	@ 0x2d
 800588e:	d12f      	bne.n	80058f0 <_strtoul_l.constprop.0+0x7c>
 8005890:	782c      	ldrb	r4, [r5, #0]
 8005892:	2701      	movs	r7, #1
 8005894:	1c85      	adds	r5, r0, #2
 8005896:	f033 0010 	bics.w	r0, r3, #16
 800589a:	d109      	bne.n	80058b0 <_strtoul_l.constprop.0+0x3c>
 800589c:	2c30      	cmp	r4, #48	@ 0x30
 800589e:	d12c      	bne.n	80058fa <_strtoul_l.constprop.0+0x86>
 80058a0:	7828      	ldrb	r0, [r5, #0]
 80058a2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80058a6:	2858      	cmp	r0, #88	@ 0x58
 80058a8:	d127      	bne.n	80058fa <_strtoul_l.constprop.0+0x86>
 80058aa:	786c      	ldrb	r4, [r5, #1]
 80058ac:	2310      	movs	r3, #16
 80058ae:	3502      	adds	r5, #2
 80058b0:	f04f 38ff 	mov.w	r8, #4294967295
 80058b4:	2600      	movs	r6, #0
 80058b6:	fbb8 f8f3 	udiv	r8, r8, r3
 80058ba:	fb03 f908 	mul.w	r9, r3, r8
 80058be:	ea6f 0909 	mvn.w	r9, r9
 80058c2:	4630      	mov	r0, r6
 80058c4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80058c8:	f1bc 0f09 	cmp.w	ip, #9
 80058cc:	d81c      	bhi.n	8005908 <_strtoul_l.constprop.0+0x94>
 80058ce:	4664      	mov	r4, ip
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	dd2a      	ble.n	800592a <_strtoul_l.constprop.0+0xb6>
 80058d4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80058d8:	d007      	beq.n	80058ea <_strtoul_l.constprop.0+0x76>
 80058da:	4580      	cmp	r8, r0
 80058dc:	d322      	bcc.n	8005924 <_strtoul_l.constprop.0+0xb0>
 80058de:	d101      	bne.n	80058e4 <_strtoul_l.constprop.0+0x70>
 80058e0:	45a1      	cmp	r9, r4
 80058e2:	db1f      	blt.n	8005924 <_strtoul_l.constprop.0+0xb0>
 80058e4:	fb00 4003 	mla	r0, r0, r3, r4
 80058e8:	2601      	movs	r6, #1
 80058ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058ee:	e7e9      	b.n	80058c4 <_strtoul_l.constprop.0+0x50>
 80058f0:	2c2b      	cmp	r4, #43	@ 0x2b
 80058f2:	bf04      	itt	eq
 80058f4:	782c      	ldrbeq	r4, [r5, #0]
 80058f6:	1c85      	addeq	r5, r0, #2
 80058f8:	e7cd      	b.n	8005896 <_strtoul_l.constprop.0+0x22>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1d8      	bne.n	80058b0 <_strtoul_l.constprop.0+0x3c>
 80058fe:	2c30      	cmp	r4, #48	@ 0x30
 8005900:	bf0c      	ite	eq
 8005902:	2308      	moveq	r3, #8
 8005904:	230a      	movne	r3, #10
 8005906:	e7d3      	b.n	80058b0 <_strtoul_l.constprop.0+0x3c>
 8005908:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800590c:	f1bc 0f19 	cmp.w	ip, #25
 8005910:	d801      	bhi.n	8005916 <_strtoul_l.constprop.0+0xa2>
 8005912:	3c37      	subs	r4, #55	@ 0x37
 8005914:	e7dc      	b.n	80058d0 <_strtoul_l.constprop.0+0x5c>
 8005916:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800591a:	f1bc 0f19 	cmp.w	ip, #25
 800591e:	d804      	bhi.n	800592a <_strtoul_l.constprop.0+0xb6>
 8005920:	3c57      	subs	r4, #87	@ 0x57
 8005922:	e7d5      	b.n	80058d0 <_strtoul_l.constprop.0+0x5c>
 8005924:	f04f 36ff 	mov.w	r6, #4294967295
 8005928:	e7df      	b.n	80058ea <_strtoul_l.constprop.0+0x76>
 800592a:	1c73      	adds	r3, r6, #1
 800592c:	d106      	bne.n	800593c <_strtoul_l.constprop.0+0xc8>
 800592e:	2322      	movs	r3, #34	@ 0x22
 8005930:	f8ce 3000 	str.w	r3, [lr]
 8005934:	4630      	mov	r0, r6
 8005936:	b932      	cbnz	r2, 8005946 <_strtoul_l.constprop.0+0xd2>
 8005938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800593c:	b107      	cbz	r7, 8005940 <_strtoul_l.constprop.0+0xcc>
 800593e:	4240      	negs	r0, r0
 8005940:	2a00      	cmp	r2, #0
 8005942:	d0f9      	beq.n	8005938 <_strtoul_l.constprop.0+0xc4>
 8005944:	b106      	cbz	r6, 8005948 <_strtoul_l.constprop.0+0xd4>
 8005946:	1e69      	subs	r1, r5, #1
 8005948:	6011      	str	r1, [r2, #0]
 800594a:	e7f5      	b.n	8005938 <_strtoul_l.constprop.0+0xc4>
 800594c:	08005f7f 	.word	0x08005f7f

08005950 <_strtoul_r>:
 8005950:	f7ff bf90 	b.w	8005874 <_strtoul_l.constprop.0>

08005954 <_malloc_usable_size_r>:
 8005954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005958:	1f18      	subs	r0, r3, #4
 800595a:	2b00      	cmp	r3, #0
 800595c:	bfbc      	itt	lt
 800595e:	580b      	ldrlt	r3, [r1, r0]
 8005960:	18c0      	addlt	r0, r0, r3
 8005962:	4770      	bx	lr
 8005964:	0000      	movs	r0, r0
	...

08005968 <ceil>:
 8005968:	ec51 0b10 	vmov	r0, r1, d0
 800596c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005974:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005978:	2e13      	cmp	r6, #19
 800597a:	460c      	mov	r4, r1
 800597c:	4605      	mov	r5, r0
 800597e:	4680      	mov	r8, r0
 8005980:	dc2e      	bgt.n	80059e0 <ceil+0x78>
 8005982:	2e00      	cmp	r6, #0
 8005984:	da11      	bge.n	80059aa <ceil+0x42>
 8005986:	a332      	add	r3, pc, #200	@ (adr r3, 8005a50 <ceil+0xe8>)
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	f7fa fc7e 	bl	800028c <__adddf3>
 8005990:	2200      	movs	r2, #0
 8005992:	2300      	movs	r3, #0
 8005994:	f7fb f8c0 	bl	8000b18 <__aeabi_dcmpgt>
 8005998:	b120      	cbz	r0, 80059a4 <ceil+0x3c>
 800599a:	2c00      	cmp	r4, #0
 800599c:	db4f      	blt.n	8005a3e <ceil+0xd6>
 800599e:	4325      	orrs	r5, r4
 80059a0:	d151      	bne.n	8005a46 <ceil+0xde>
 80059a2:	462c      	mov	r4, r5
 80059a4:	4621      	mov	r1, r4
 80059a6:	4628      	mov	r0, r5
 80059a8:	e023      	b.n	80059f2 <ceil+0x8a>
 80059aa:	4f2b      	ldr	r7, [pc, #172]	@ (8005a58 <ceil+0xf0>)
 80059ac:	4137      	asrs	r7, r6
 80059ae:	ea01 0307 	and.w	r3, r1, r7
 80059b2:	4303      	orrs	r3, r0
 80059b4:	d01d      	beq.n	80059f2 <ceil+0x8a>
 80059b6:	a326      	add	r3, pc, #152	@ (adr r3, 8005a50 <ceil+0xe8>)
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	f7fa fc66 	bl	800028c <__adddf3>
 80059c0:	2200      	movs	r2, #0
 80059c2:	2300      	movs	r3, #0
 80059c4:	f7fb f8a8 	bl	8000b18 <__aeabi_dcmpgt>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d0eb      	beq.n	80059a4 <ceil+0x3c>
 80059cc:	2c00      	cmp	r4, #0
 80059ce:	bfc2      	ittt	gt
 80059d0:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80059d4:	4133      	asrgt	r3, r6
 80059d6:	18e4      	addgt	r4, r4, r3
 80059d8:	ea24 0407 	bic.w	r4, r4, r7
 80059dc:	2500      	movs	r5, #0
 80059de:	e7e1      	b.n	80059a4 <ceil+0x3c>
 80059e0:	2e33      	cmp	r6, #51	@ 0x33
 80059e2:	dd0a      	ble.n	80059fa <ceil+0x92>
 80059e4:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80059e8:	d103      	bne.n	80059f2 <ceil+0x8a>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	f7fa fc4d 	bl	800028c <__adddf3>
 80059f2:	ec41 0b10 	vmov	d0, r0, r1
 80059f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059fa:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80059fe:	f04f 37ff 	mov.w	r7, #4294967295
 8005a02:	40df      	lsrs	r7, r3
 8005a04:	4238      	tst	r0, r7
 8005a06:	d0f4      	beq.n	80059f2 <ceil+0x8a>
 8005a08:	a311      	add	r3, pc, #68	@ (adr r3, 8005a50 <ceil+0xe8>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f7fa fc3d 	bl	800028c <__adddf3>
 8005a12:	2200      	movs	r2, #0
 8005a14:	2300      	movs	r3, #0
 8005a16:	f7fb f87f 	bl	8000b18 <__aeabi_dcmpgt>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d0c2      	beq.n	80059a4 <ceil+0x3c>
 8005a1e:	2c00      	cmp	r4, #0
 8005a20:	dd0a      	ble.n	8005a38 <ceil+0xd0>
 8005a22:	2e14      	cmp	r6, #20
 8005a24:	d101      	bne.n	8005a2a <ceil+0xc2>
 8005a26:	3401      	adds	r4, #1
 8005a28:	e006      	b.n	8005a38 <ceil+0xd0>
 8005a2a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005a2e:	2301      	movs	r3, #1
 8005a30:	40b3      	lsls	r3, r6
 8005a32:	441d      	add	r5, r3
 8005a34:	45a8      	cmp	r8, r5
 8005a36:	d8f6      	bhi.n	8005a26 <ceil+0xbe>
 8005a38:	ea25 0507 	bic.w	r5, r5, r7
 8005a3c:	e7b2      	b.n	80059a4 <ceil+0x3c>
 8005a3e:	2500      	movs	r5, #0
 8005a40:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8005a44:	e7ae      	b.n	80059a4 <ceil+0x3c>
 8005a46:	4c05      	ldr	r4, [pc, #20]	@ (8005a5c <ceil+0xf4>)
 8005a48:	2500      	movs	r5, #0
 8005a4a:	e7ab      	b.n	80059a4 <ceil+0x3c>
 8005a4c:	f3af 8000 	nop.w
 8005a50:	8800759c 	.word	0x8800759c
 8005a54:	7e37e43c 	.word	0x7e37e43c
 8005a58:	000fffff 	.word	0x000fffff
 8005a5c:	3ff00000 	.word	0x3ff00000

08005a60 <_init>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	bf00      	nop
 8005a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a66:	bc08      	pop	{r3}
 8005a68:	469e      	mov	lr, r3
 8005a6a:	4770      	bx	lr

08005a6c <_fini>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	bf00      	nop
 8005a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a72:	bc08      	pop	{r3}
 8005a74:	469e      	mov	lr, r3
 8005a76:	4770      	bx	lr
