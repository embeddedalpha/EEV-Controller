
EEV_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000508c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  08005214  08005214  00006214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a28  08005a28  00007054  2**0
                  CONTENTS
  4 .ARM          00000000  08005a28  08005a28  00007054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a28  08005a28  00007054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a28  08005a28  00006a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a2c  08005a2c  00006a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08005a30  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007054  2**0
                  CONTENTS
 10 .bss          00000708  20000054  20000054  00007054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000075c  2000075c  00007054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a92a  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010bc  00000000  00000000  000119ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002e8  00000000  00000000  00012a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000022e  00000000  00000000  00012d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a38d  00000000  00000000  00012f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006274  00000000  00000000  0002d313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ff2e  00000000  00000000  00033587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c34b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f58  00000000  00000000  000c34f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000c4450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000054 	.word	0x20000054
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080051fc 	.word	0x080051fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000058 	.word	0x20000058
 80001c4:	080051fc 	.word	0x080051fc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_d2lz>:
 8000b90:	b538      	push	{r3, r4, r5, lr}
 8000b92:	2200      	movs	r2, #0
 8000b94:	2300      	movs	r3, #0
 8000b96:	4604      	mov	r4, r0
 8000b98:	460d      	mov	r5, r1
 8000b9a:	f7ff ff43 	bl	8000a24 <__aeabi_dcmplt>
 8000b9e:	b928      	cbnz	r0, 8000bac <__aeabi_d2lz+0x1c>
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	4629      	mov	r1, r5
 8000ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ba8:	f000 b80a 	b.w	8000bc0 <__aeabi_d2ulz>
 8000bac:	4620      	mov	r0, r4
 8000bae:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bb2:	f000 f805 	bl	8000bc0 <__aeabi_d2ulz>
 8000bb6:	4240      	negs	r0, r0
 8000bb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bbc:	bd38      	pop	{r3, r4, r5, pc}
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_d2ulz>:
 8000bc0:	b5d0      	push	{r4, r6, r7, lr}
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <__aeabi_d2ulz+0x34>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4606      	mov	r6, r0
 8000bc8:	460f      	mov	r7, r1
 8000bca:	f7ff fcb9 	bl	8000540 <__aeabi_dmul>
 8000bce:	f000 f815 	bl	8000bfc <__aeabi_d2uiz>
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	f7ff fc3a 	bl	800044c <__aeabi_ui2d>
 8000bd8:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <__aeabi_d2ulz+0x38>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f7ff fcb0 	bl	8000540 <__aeabi_dmul>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4630      	mov	r0, r6
 8000be6:	4639      	mov	r1, r7
 8000be8:	f7ff faf2 	bl	80001d0 <__aeabi_dsub>
 8000bec:	f000 f806 	bl	8000bfc <__aeabi_d2uiz>
 8000bf0:	4621      	mov	r1, r4
 8000bf2:	bdd0      	pop	{r4, r6, r7, pc}
 8000bf4:	3df00000 	.word	0x3df00000
 8000bf8:	41f00000 	.word	0x41f00000

08000bfc <__aeabi_d2uiz>:
 8000bfc:	004a      	lsls	r2, r1, #1
 8000bfe:	d211      	bcs.n	8000c24 <__aeabi_d2uiz+0x28>
 8000c00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c04:	d211      	bcs.n	8000c2a <__aeabi_d2uiz+0x2e>
 8000c06:	d50d      	bpl.n	8000c24 <__aeabi_d2uiz+0x28>
 8000c08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c10:	d40e      	bmi.n	8000c30 <__aeabi_d2uiz+0x34>
 8000c12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c22:	4770      	bx	lr
 8000c24:	f04f 0000 	mov.w	r0, #0
 8000c28:	4770      	bx	lr
 8000c2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2e:	d102      	bne.n	8000c36 <__aeabi_d2uiz+0x3a>
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	4770      	bx	lr
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	4770      	bx	lr

08000c3c <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8000c46:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c4a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000c90 <Delay_ms+0x54>
 8000c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c56:	ee17 3a90 	vmov	r3, s15
 8000c5a:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c94 <Delay_ms+0x58>)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <Delay_ms+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <Delay_ms+0x58>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a09      	ldr	r2, [pc, #36]	@ (8000c94 <Delay_ms+0x58>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000c74:	bf00      	nop
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <Delay_ms+0x58>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f9      	beq.n	8000c76 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	48241000 	.word	0x48241000
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <Delay_milli>:


__STATIC_INLINE uint32_t Delay_milli(float ms)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	ed87 0a01 	vstr	s0, [r7, #4]
	for (; ms>0; ms--)
 8000ca2:	e00b      	b.n	8000cbc <Delay_milli+0x24>
	{
		Delay_ms(1);
 8000ca4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000ca8:	f7ff ffc8 	bl	8000c3c <Delay_ms>
	for (; ms>0; ms--)
 8000cac:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000cb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000cb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc8:	dcec      	bgt.n	8000ca4 <Delay_milli+0xc>
	}
	return ms;
 8000cca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cd2:	ee17 3a90 	vmov	r3, s15
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <ADC_Timer_External_Trigger_Init>:
 * trigger events, including various channels and timers.
 *
 * @param[in] config Pointer to the ADC configuration structure.
 */
static void ADC_Timer_External_Trigger_Init(ADC_Config *config)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_1_CC1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7a1b      	ldrb	r3, [r3, #8]
 8000cec:	2200      	movs	r2, #0
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d122      	bne.n	8000d38 <ADC_Timer_External_Trigger_Init+0x58>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000cf2:	4b94      	ldr	r3, [pc, #592]	@ (8000f44 <ADC_Timer_External_Trigger_Init+0x264>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf6:	4a93      	ldr	r2, [pc, #588]	@ (8000f44 <ADC_Timer_External_Trigger_Init+0x264>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> CCR1 = 100/2 -1;
 8000cfe:	4b92      	ldr	r3, [pc, #584]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d00:	2231      	movs	r2, #49	@ 0x31
 8000d02:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->PSC = 16800;
 8000d04:	4b90      	ldr	r3, [pc, #576]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d06:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8000d0a:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 100-1;
 8000d0c:	4b8e      	ldr	r3, [pc, #568]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d0e:	2263      	movs	r2, #99	@ 0x63
 8000d10:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1 -> CR2 |= TIM_CR2_MMS_1 | TIM_CR2_MMS_0;
 8000d12:	4b8d      	ldr	r3, [pc, #564]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	4a8c      	ldr	r2, [pc, #560]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d18:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000d1c:	6053      	str	r3, [r2, #4]
		TIM1 -> CCER |= TIM_CCER_CC1E;
 8000d1e:	4b8a      	ldr	r3, [pc, #552]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	4a89      	ldr	r2, [pc, #548]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6213      	str	r3, [r2, #32]
		TIM1->CR1 |= TIM_CR1_CEN ;
 8000d2a:	4b87      	ldr	r3, [pc, #540]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a86      	ldr	r2, [pc, #536]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6013      	str	r3, [r2, #0]
		TIM3->PSC = 10000-1;
		TIM3->ARR = 8400-1;
		TIM3->CR1 |= TIM_CR1_CEN;
	}
	/***************************************************************************************************************/
}
 8000d36:	e1de      	b.n	80010f6 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_1_CC2)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7a1b      	ldrb	r3, [r3, #8]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d120      	bne.n	8000d84 <ADC_Timer_External_Trigger_Init+0xa4>
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000d42:	4b80      	ldr	r3, [pc, #512]	@ (8000f44 <ADC_Timer_External_Trigger_Init+0x264>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	4a7f      	ldr	r2, [pc, #508]	@ (8000f44 <ADC_Timer_External_Trigger_Init+0x264>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> EGR |= TIM_EGR_CC2G;
 8000d4e:	4b7e      	ldr	r3, [pc, #504]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	4a7d      	ldr	r2, [pc, #500]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6153      	str	r3, [r2, #20]
		TIM1->DIER |=  TIM_DIER_CC2IE;
 8000d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	4a7a      	ldr	r2, [pc, #488]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	60d3      	str	r3, [r2, #12]
		TIM1->PSC = 10000-1;
 8000d66:	4b78      	ldr	r3, [pc, #480]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d68:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d6c:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 8400-1;
 8000d6e:	4b76      	ldr	r3, [pc, #472]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d70:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000d74:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CR1 |= TIM_CR1_CEN;
 8000d76:	4b74      	ldr	r3, [pc, #464]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a73      	ldr	r2, [pc, #460]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6013      	str	r3, [r2, #0]
}
 8000d82:	e1b8      	b.n	80010f6 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_1_CC3)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	7a1b      	ldrb	r3, [r3, #8]
 8000d88:	2202      	movs	r2, #2
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d120      	bne.n	8000dd0 <ADC_Timer_External_Trigger_Init+0xf0>
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000d8e:	4b6d      	ldr	r3, [pc, #436]	@ (8000f44 <ADC_Timer_External_Trigger_Init+0x264>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	4a6c      	ldr	r2, [pc, #432]	@ (8000f44 <ADC_Timer_External_Trigger_Init+0x264>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> EGR |= TIM_EGR_CC3G;
 8000d9a:	4b6b      	ldr	r3, [pc, #428]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	4a6a      	ldr	r2, [pc, #424]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	6153      	str	r3, [r2, #20]
		TIM1->DIER |=  TIM_DIER_CC3IE;
 8000da6:	4b68      	ldr	r3, [pc, #416]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	4a67      	ldr	r2, [pc, #412]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000dac:	f043 0308 	orr.w	r3, r3, #8
 8000db0:	60d3      	str	r3, [r2, #12]
		TIM1->PSC = 10000-1;
 8000db2:	4b65      	ldr	r3, [pc, #404]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000db4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000db8:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 8400-1;
 8000dba:	4b63      	ldr	r3, [pc, #396]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000dbc:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CR1 |= TIM_CR1_CEN;
 8000dc2:	4b61      	ldr	r3, [pc, #388]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a60      	ldr	r2, [pc, #384]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6013      	str	r3, [r2, #0]
}
 8000dce:	e192      	b.n	80010f6 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Injected_External_Trigger_Event.Timer_1_CC4)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7a1b      	ldrb	r3, [r3, #8]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d120      	bne.n	8000e1c <ADC_Timer_External_Trigger_Init+0x13c>
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000dda:	4b5a      	ldr	r3, [pc, #360]	@ (8000f44 <ADC_Timer_External_Trigger_Init+0x264>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	4a59      	ldr	r2, [pc, #356]	@ (8000f44 <ADC_Timer_External_Trigger_Init+0x264>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> EGR |= TIM_EGR_CC4G;
 8000de6:	4b58      	ldr	r3, [pc, #352]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	4a57      	ldr	r2, [pc, #348]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000dec:	f043 0310 	orr.w	r3, r3, #16
 8000df0:	6153      	str	r3, [r2, #20]
		TIM1->DIER |=  TIM_DIER_CC4IE;
 8000df2:	4b55      	ldr	r3, [pc, #340]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	4a54      	ldr	r2, [pc, #336]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	60d3      	str	r3, [r2, #12]
		TIM1->PSC = 10000-1;
 8000dfe:	4b52      	ldr	r3, [pc, #328]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000e00:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e04:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 8400-1;
 8000e06:	4b50      	ldr	r3, [pc, #320]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000e08:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CR1 |= TIM_CR1_CEN;
 8000e0e:	4b4e      	ldr	r3, [pc, #312]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a4d      	ldr	r2, [pc, #308]	@ (8000f48 <ADC_Timer_External_Trigger_Init+0x268>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6013      	str	r3, [r2, #0]
}
 8000e1a:	e16c      	b.n	80010f6 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Injected_External_Trigger_Event.Timer_2_CC1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7a1b      	ldrb	r3, [r3, #8]
 8000e20:	2200      	movs	r2, #0
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d128      	bne.n	8000e78 <ADC_Timer_External_Trigger_Init+0x198>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000e26:	4b47      	ldr	r3, [pc, #284]	@ (8000f44 <ADC_Timer_External_Trigger_Init+0x264>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	4a46      	ldr	r2, [pc, #280]	@ (8000f44 <ADC_Timer_External_Trigger_Init+0x264>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC1G;
 8000e32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	6153      	str	r3, [r2, #20]
		TIM2->DIER |=  TIM_DIER_CC1IE;
 8000e42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	60d3      	str	r3, [r2, #12]
		TIM2->PSC = 10000-1;
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e56:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e5a:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 8400-1;
 8000e5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e60:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000e64:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 8000e66:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6013      	str	r3, [r2, #0]
}
 8000e76:	e13e      	b.n	80010f6 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_2_CC2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	7a1b      	ldrb	r3, [r3, #8]
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d132      	bne.n	8000ee8 <ADC_Timer_External_Trigger_Init+0x208>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000e82:	4b30      	ldr	r3, [pc, #192]	@ (8000f44 <ADC_Timer_External_Trigger_Init+0x264>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	4a2f      	ldr	r2, [pc, #188]	@ (8000f44 <ADC_Timer_External_Trigger_Init+0x264>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC2G | TIM_EGR_UG;
 8000e8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e98:	f043 0305 	orr.w	r3, r3, #5
 8000e9c:	6153      	str	r3, [r2, #20]
		TIM2 -> CCR1 = 100/2 -1;
 8000e9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ea2:	2231      	movs	r2, #49	@ 0x31
 8000ea4:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM2->PSC = 168;
 8000ea6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eaa:	22a8      	movs	r2, #168	@ 0xa8
 8000eac:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 100-1;
 8000eae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eb2:	2263      	movs	r2, #99	@ 0x63
 8000eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2 -> CR2 |=  TIM_CR2_MMS_1;
 8000eb6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ec0:	f043 0320 	orr.w	r3, r3, #32
 8000ec4:	6053      	str	r3, [r2, #4]
		TIM2 -> CCER |= TIM_CCER_CC2E;
 8000ec6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	6213      	str	r3, [r2, #32]
		TIM2->CR1 |= TIM_CR1_CEN ;
 8000ed6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6013      	str	r3, [r2, #0]
}
 8000ee6:	e106      	b.n	80010f6 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_2_CC3)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7a1b      	ldrb	r3, [r3, #8]
 8000eec:	2204      	movs	r2, #4
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d12c      	bne.n	8000f4c <ADC_Timer_External_Trigger_Init+0x26c>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <ADC_Timer_External_Trigger_Init+0x264>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	4a13      	ldr	r2, [pc, #76]	@ (8000f44 <ADC_Timer_External_Trigger_Init+0x264>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC3G;
 8000efe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	6153      	str	r3, [r2, #20]
		TIM2->DIER |=  TIM_DIER_CC3IE;
 8000f0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	60d3      	str	r3, [r2, #12]
		TIM2->PSC = 10000-1;
 8000f1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f22:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f26:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 8400-1;
 8000f28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f2c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000f30:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 8000f32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6013      	str	r3, [r2, #0]
}
 8000f42:	e0d8      	b.n	80010f6 <ADC_Timer_External_Trigger_Init+0x416>
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40010000 	.word	0x40010000
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_2_CC4)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7a1b      	ldrb	r3, [r3, #8]
 8000f50:	2205      	movs	r2, #5
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d128      	bne.n	8000fa8 <ADC_Timer_External_Trigger_Init+0x2c8>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000f56:	4b6b      	ldr	r3, [pc, #428]	@ (8001104 <ADC_Timer_External_Trigger_Init+0x424>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	4a6a      	ldr	r2, [pc, #424]	@ (8001104 <ADC_Timer_External_Trigger_Init+0x424>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC3G;
 8000f62:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6153      	str	r3, [r2, #20]
		TIM2->DIER |=  TIM_DIER_CC3IE;
 8000f72:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	60d3      	str	r3, [r2, #12]
		TIM2->PSC = 10000-1;
 8000f82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f86:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f8a:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 8400-1;
 8000f8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f90:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000f94:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 8000f96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6013      	str	r3, [r2, #0]
}
 8000fa6:	e0a6      	b.n	80010f6 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_2_TRGO)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7a1b      	ldrb	r3, [r3, #8]
 8000fac:	2206      	movs	r2, #6
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d130      	bne.n	8001014 <ADC_Timer_External_Trigger_Init+0x334>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000fb2:	4b54      	ldr	r3, [pc, #336]	@ (8001104 <ADC_Timer_External_Trigger_Init+0x424>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	4a53      	ldr	r2, [pc, #332]	@ (8001104 <ADC_Timer_External_Trigger_Init+0x424>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2->DIER |=  TIM_DIER_UIE;
 8000fbe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	60d3      	str	r3, [r2, #12]
		TIM2 -> CR2 |=  TIM_CR2_MMS_1;
 8000fce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fd8:	f043 0320 	orr.w	r3, r3, #32
 8000fdc:	6053      	str	r3, [r2, #4]
		TIM2->PSC = 1000-1;
 8000fde:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fe2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fe6:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 16800-1;
 8000fe8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fec:	f244 129f 	movw	r2, #16799	@ 0x419f
 8000ff0:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 8000ff2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6013      	str	r3, [r2, #0]
		TIM2 -> EGR |= TIM_EGR_UG;
 8001002:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6153      	str	r3, [r2, #20]
}
 8001012:	e070      	b.n	80010f6 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_3_CC1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7a1b      	ldrb	r3, [r3, #8]
 8001018:	2207      	movs	r2, #7
 800101a:	4293      	cmp	r3, r2
 800101c:	d120      	bne.n	8001060 <ADC_Timer_External_Trigger_Init+0x380>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 800101e:	4b39      	ldr	r3, [pc, #228]	@ (8001104 <ADC_Timer_External_Trigger_Init+0x424>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	4a38      	ldr	r2, [pc, #224]	@ (8001104 <ADC_Timer_External_Trigger_Init+0x424>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM3 -> EGR |= TIM_EGR_CC1G;
 800102a:	4b37      	ldr	r3, [pc, #220]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	4a36      	ldr	r2, [pc, #216]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6153      	str	r3, [r2, #20]
		TIM3->DIER |=  TIM_DIER_CC1IE;
 8001036:	4b34      	ldr	r3, [pc, #208]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	4a33      	ldr	r2, [pc, #204]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	60d3      	str	r3, [r2, #12]
		TIM3->PSC = 10000-1;
 8001042:	4b31      	ldr	r3, [pc, #196]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 8001044:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001048:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 8400-1;
 800104a:	4b2f      	ldr	r3, [pc, #188]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 800104c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001050:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM3->CR1 |= TIM_CR1_CEN;
 8001052:	4b2d      	ldr	r3, [pc, #180]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a2c      	ldr	r2, [pc, #176]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6013      	str	r3, [r2, #0]
}
 800105e:	e04a      	b.n	80010f6 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Injected_External_Trigger_Event.Timer_3_CC2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7a1b      	ldrb	r3, [r3, #8]
 8001064:	2200      	movs	r2, #0
 8001066:	4293      	cmp	r3, r2
 8001068:	d120      	bne.n	80010ac <ADC_Timer_External_Trigger_Init+0x3cc>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 800106a:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <ADC_Timer_External_Trigger_Init+0x424>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	4a25      	ldr	r2, [pc, #148]	@ (8001104 <ADC_Timer_External_Trigger_Init+0x424>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM3 -> EGR |= TIM_EGR_CC2G;
 8001076:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	4a23      	ldr	r2, [pc, #140]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6153      	str	r3, [r2, #20]
		TIM3->DIER |=  TIM_DIER_CC2IE;
 8001082:	4b21      	ldr	r3, [pc, #132]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	4a20      	ldr	r2, [pc, #128]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	60d3      	str	r3, [r2, #12]
		TIM3->PSC = 10000-1;
 800108e:	4b1e      	ldr	r3, [pc, #120]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 8001090:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001094:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 8400-1;
 8001096:	4b1c      	ldr	r3, [pc, #112]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 8001098:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800109c:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM3->CR1 |= TIM_CR1_CEN;
 800109e:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a19      	ldr	r2, [pc, #100]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6013      	str	r3, [r2, #0]
}
 80010aa:	e024      	b.n	80010f6 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Injected_External_Trigger_Event.Timer_3_CC4)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7a1b      	ldrb	r3, [r3, #8]
 80010b0:	2200      	movs	r2, #0
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d11f      	bne.n	80010f6 <ADC_Timer_External_Trigger_Init+0x416>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <ADC_Timer_External_Trigger_Init+0x424>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	4a12      	ldr	r2, [pc, #72]	@ (8001104 <ADC_Timer_External_Trigger_Init+0x424>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM3 -> EGR |= TIM_EGR_CC3G;
 80010c2:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4a10      	ldr	r2, [pc, #64]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	6153      	str	r3, [r2, #20]
		TIM3->DIER |=  TIM_DIER_CC3IE;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	60d3      	str	r3, [r2, #12]
		TIM3->PSC = 10000-1;
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 80010dc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010e0:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 8400-1;
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 80010e4:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80010e8:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM3->CR1 |= TIM_CR1_CEN;
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a06      	ldr	r2, [pc, #24]	@ (8001108 <ADC_Timer_External_Trigger_Init+0x428>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6013      	str	r3, [r2, #0]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40000400 	.word	0x40000400

0800110c <ADC_Sampling_Config>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns the number of enabled channels after configuration.
 */
static int8_t ADC_Sampling_Config(ADC_Config *config)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
    uint8_t conversion_Counter = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]

    // Configure sampling time for Channel 0 if enabled
    if(config->Channel_0.Enable == ENABLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7a9b      	ldrb	r3, [r3, #10]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00c      	beq.n	800113a <ADC_Sampling_Config+0x2e>
    {
        config->Port->SMPR2 |= config->Channel_0.Sample_Time << ADC_SMPR2_SMP0_Pos;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	691a      	ldr	r2, [r3, #16]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7b1b      	ldrb	r3, [r3, #12]
 800112a:	4619      	mov	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	3301      	adds	r3, #1
 8001138:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 1 if enabled
    if(config->Channel_1.Enable == ENABLE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7b5b      	ldrb	r3, [r3, #13]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00c      	beq.n	800115c <ADC_Sampling_Config+0x50>
    {
        config->Port->SMPR2 |= config->Channel_1.Sample_Time << ADC_SMPR2_SMP1_Pos;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6919      	ldr	r1, [r3, #16]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7bdb      	ldrb	r3, [r3, #15]
 800114c:	00da      	lsls	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	3301      	adds	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 2 if enabled
    if(config->Channel_2.Enable == ENABLE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7c1b      	ldrb	r3, [r3, #16]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00c      	beq.n	800117e <ADC_Sampling_Config+0x72>
    {
        config->Port->SMPR2 |= config->Channel_2.Sample_Time << ADC_SMPR2_SMP2_Pos;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6919      	ldr	r1, [r3, #16]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7c9b      	ldrb	r3, [r3, #18]
 800116e:	019a      	lsls	r2, r3, #6
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	3301      	adds	r3, #1
 800117c:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 3 if enabled
    if(config->Channel_3.Enable == ENABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7cdb      	ldrb	r3, [r3, #19]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00c      	beq.n	80011a0 <ADC_Sampling_Config+0x94>
    {
        config->Port->SMPR2 |= config->Channel_3.Sample_Time << ADC_SMPR2_SMP3_Pos;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6919      	ldr	r1, [r3, #16]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7d5b      	ldrb	r3, [r3, #21]
 8001190:	025a      	lsls	r2, r3, #9
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	430a      	orrs	r2, r1
 8001198:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	3301      	adds	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 4 if enabled
    if(config->Channel_4.Enable == ENABLE)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7d9b      	ldrb	r3, [r3, #22]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00c      	beq.n	80011c2 <ADC_Sampling_Config+0xb6>
    {
        config->Port->SMPR2 |= config->Channel_4.Sample_Time << ADC_SMPR2_SMP4_Pos;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6919      	ldr	r1, [r3, #16]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7e1b      	ldrb	r3, [r3, #24]
 80011b2:	031a      	lsls	r2, r3, #12
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	3301      	adds	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 5 if enabled
    if(config->Channel_5.Enable == ENABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7e5b      	ldrb	r3, [r3, #25]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00c      	beq.n	80011e4 <ADC_Sampling_Config+0xd8>
    {
        config->Port->SMPR2 |= config->Channel_5.Sample_Time << ADC_SMPR2_SMP5_Pos;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6919      	ldr	r1, [r3, #16]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7edb      	ldrb	r3, [r3, #27]
 80011d4:	03da      	lsls	r2, r3, #15
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	3301      	adds	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 6 if enabled
    if(config->Channel_6.Enable == ENABLE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	7f1b      	ldrb	r3, [r3, #28]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00c      	beq.n	8001206 <ADC_Sampling_Config+0xfa>
    {
        config->Port->SMPR2 |= config->Channel_6.Sample_Time << ADC_SMPR2_SMP6_Pos;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6919      	ldr	r1, [r3, #16]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7f9b      	ldrb	r3, [r3, #30]
 80011f6:	049a      	lsls	r2, r3, #18
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	3301      	adds	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 7 if enabled
    if(config->Channel_7.Enable == ENABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7fdb      	ldrb	r3, [r3, #31]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00d      	beq.n	800122a <ADC_Sampling_Config+0x11e>
    {
        config->Port->SMPR2 |= config->Channel_7.Sample_Time << ADC_SMPR2_SMP7_Pos;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6919      	ldr	r1, [r3, #16]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800121a:	055a      	lsls	r2, r3, #21
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	3301      	adds	r3, #1
 8001228:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 8 if enabled
    if(config->Channel_8.Enable == ENABLE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00d      	beq.n	8001250 <ADC_Sampling_Config+0x144>
    {
        config->Port->SMPR2 |= config->Channel_8.Sample_Time << ADC_SMPR2_SMP8_Pos;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6919      	ldr	r1, [r3, #16]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001240:	061a      	lsls	r2, r3, #24
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	430a      	orrs	r2, r1
 8001248:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	3301      	adds	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 9 if enabled
    if(config->Channel_9.Enable == ENABLE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00d      	beq.n	8001276 <ADC_Sampling_Config+0x16a>
    {
        config->Port->SMPR1 |= config->Channel_9.Sample_Time << ADC_SMPR2_SMP9_Pos;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68d9      	ldr	r1, [r3, #12]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001266:	06da      	lsls	r2, r3, #27
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	3301      	adds	r3, #1
 8001274:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 10 if enabled
    if(config->Channel_10.Enable == ENABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00d      	beq.n	800129c <ADC_Sampling_Config+0x190>
    {
        config->Port->SMPR1 |= config->Channel_10.Sample_Time << ADC_SMPR1_SMP10_Pos;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800128c:	4619      	mov	r1, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	430a      	orrs	r2, r1
 8001294:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	3301      	adds	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 11 if enabled
    if(config->Channel_11.Enable == ENABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00d      	beq.n	80012c2 <ADC_Sampling_Config+0x1b6>
    {
        config->Port->SMPR1 |= config->Channel_11.Sample_Time << ADC_SMPR1_SMP11_Pos;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68d9      	ldr	r1, [r3, #12]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80012b2:	00da      	lsls	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	3301      	adds	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
    }

    /**************************************************************************************************************/

    // Configure sampling time for Channel 12 if enabled
    if(config->Channel_12.Enable == ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00d      	beq.n	80012e8 <ADC_Sampling_Config+0x1dc>
    {
        config->Port->SMPR1 |= config->Channel_12.Sample_Time << ADC_SMPR1_SMP12_Pos;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68d9      	ldr	r1, [r3, #12]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80012d8:	019a      	lsls	r2, r3, #6
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	3301      	adds	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
    }

    /**************************************************************************************************************/

    // Configure sampling time for Channel 13 if enabled
    if(config->Channel_13.Enable == ENABLE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00d      	beq.n	800130e <ADC_Sampling_Config+0x202>
    {
        config->Port->SMPR1 |= config->Channel_13.Sample_Time << ADC_SMPR1_SMP13_Pos;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68d9      	ldr	r1, [r3, #12]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80012fe:	025a      	lsls	r2, r3, #9
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	3301      	adds	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
    }

    /**************************************************************************************************************/

    // Configure sampling time for Channel 14 if enabled
    if(config->Channel_14.Enable == ENABLE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00d      	beq.n	8001334 <ADC_Sampling_Config+0x228>
    {
        config->Port->SMPR1 |= config->Channel_14.Sample_Time << ADC_SMPR1_SMP14_Pos;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68d9      	ldr	r1, [r3, #12]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8001324:	031a      	lsls	r2, r3, #12
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	430a      	orrs	r2, r1
 800132c:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	3301      	adds	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
    }

    /**************************************************************************************************************/

    // Configure sampling time for Channel 15 if enabled
    if(config->Channel_15.Enable == ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00d      	beq.n	800135a <ADC_Sampling_Config+0x24e>
    {
        config->Port->SMPR1 |= config->Channel_15.Sample_Time << ADC_SMPR1_SMP15_Pos;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68d9      	ldr	r1, [r3, #12]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800134a:	03da      	lsls	r2, r3, #15
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	3301      	adds	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]
    }

    // Return the number of configured channels
    return conversion_Counter;
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <ADC_Pin_Init>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful initialization of all enabled channels.
 */
static int8_t ADC_Pin_Init(ADC_Config *config)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b087      	sub	sp, #28
 8001370:	af04      	add	r7, sp, #16
 8001372:	6078      	str	r0, [r7, #4]
    // Initialize GPIO pin for Channel 0 if enabled
    if (config->Channel_0.Enable == ENABLE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7a9b      	ldrb	r3, [r3, #10]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00d      	beq.n	8001398 <ADC_Pin_Init+0x2c>
    {
        GPIO_Pin_Init(GPIOA, 0, GPIO_Configuration.Mode.Analog,
 800137c:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 800137e:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8001380:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8001382:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8001384:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 0, GPIO_Configuration.Mode.Analog,
 8001386:	9102      	str	r1, [sp, #8]
 8001388:	9201      	str	r2, [sp, #4]
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	4623      	mov	r3, r4
 800138e:	4602      	mov	r2, r0
 8001390:	2100      	movs	r1, #0
 8001392:	488f      	ldr	r0, [pc, #572]	@ (80015d0 <ADC_Pin_Init+0x264>)
 8001394:	f002 f91c 	bl	80035d0 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 1 if enabled
    if (config->Channel_1.Enable == ENABLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7b5b      	ldrb	r3, [r3, #13]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00d      	beq.n	80013bc <ADC_Pin_Init+0x50>
    {
        GPIO_Pin_Init(GPIOA, 1, GPIO_Configuration.Mode.Analog,
 80013a0:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 80013a2:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 80013a4:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 80013a6:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 80013a8:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 1, GPIO_Configuration.Mode.Analog,
 80013aa:	9102      	str	r1, [sp, #8]
 80013ac:	9201      	str	r2, [sp, #4]
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	4623      	mov	r3, r4
 80013b2:	4602      	mov	r2, r0
 80013b4:	2101      	movs	r1, #1
 80013b6:	4886      	ldr	r0, [pc, #536]	@ (80015d0 <ADC_Pin_Init+0x264>)
 80013b8:	f002 f90a 	bl	80035d0 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 2 if enabled
    if (config->Channel_2.Enable == ENABLE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7c1b      	ldrb	r3, [r3, #16]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00d      	beq.n	80013e0 <ADC_Pin_Init+0x74>
    {
        GPIO_Pin_Init(GPIOA, 2, GPIO_Configuration.Mode.Analog,
 80013c4:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 80013c6:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 80013c8:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 80013ca:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 80013cc:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 2, GPIO_Configuration.Mode.Analog,
 80013ce:	9102      	str	r1, [sp, #8]
 80013d0:	9201      	str	r2, [sp, #4]
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	4623      	mov	r3, r4
 80013d6:	4602      	mov	r2, r0
 80013d8:	2102      	movs	r1, #2
 80013da:	487d      	ldr	r0, [pc, #500]	@ (80015d0 <ADC_Pin_Init+0x264>)
 80013dc:	f002 f8f8 	bl	80035d0 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 3 if enabled
    if (config->Channel_3.Enable == ENABLE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7cdb      	ldrb	r3, [r3, #19]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00d      	beq.n	8001404 <ADC_Pin_Init+0x98>
    {
        GPIO_Pin_Init(GPIOA, 3, GPIO_Configuration.Mode.Analog,
 80013e8:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 80013ea:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 80013ec:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 80013ee:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 80013f0:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 3, GPIO_Configuration.Mode.Analog,
 80013f2:	9102      	str	r1, [sp, #8]
 80013f4:	9201      	str	r2, [sp, #4]
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	4623      	mov	r3, r4
 80013fa:	4602      	mov	r2, r0
 80013fc:	2103      	movs	r1, #3
 80013fe:	4874      	ldr	r0, [pc, #464]	@ (80015d0 <ADC_Pin_Init+0x264>)
 8001400:	f002 f8e6 	bl	80035d0 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 4 if enabled
    if (config->Channel_4.Enable == ENABLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7d9b      	ldrb	r3, [r3, #22]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00d      	beq.n	8001428 <ADC_Pin_Init+0xbc>
    {
        GPIO_Pin_Init(GPIOA, 4, GPIO_Configuration.Mode.Analog,
 800140c:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 800140e:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8001410:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8001412:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8001414:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 4, GPIO_Configuration.Mode.Analog,
 8001416:	9102      	str	r1, [sp, #8]
 8001418:	9201      	str	r2, [sp, #4]
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	4623      	mov	r3, r4
 800141e:	4602      	mov	r2, r0
 8001420:	2104      	movs	r1, #4
 8001422:	486b      	ldr	r0, [pc, #428]	@ (80015d0 <ADC_Pin_Init+0x264>)
 8001424:	f002 f8d4 	bl	80035d0 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 5 if enabled
    if (config->Channel_5.Enable == ENABLE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7e5b      	ldrb	r3, [r3, #25]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00d      	beq.n	800144c <ADC_Pin_Init+0xe0>
    {
        GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Analog,
 8001430:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8001432:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8001434:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8001436:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8001438:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Analog,
 800143a:	9102      	str	r1, [sp, #8]
 800143c:	9201      	str	r2, [sp, #4]
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	4623      	mov	r3, r4
 8001442:	4602      	mov	r2, r0
 8001444:	2105      	movs	r1, #5
 8001446:	4862      	ldr	r0, [pc, #392]	@ (80015d0 <ADC_Pin_Init+0x264>)
 8001448:	f002 f8c2 	bl	80035d0 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 6 if enabled
    if (config->Channel_6.Enable == ENABLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7f1b      	ldrb	r3, [r3, #28]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00d      	beq.n	8001470 <ADC_Pin_Init+0x104>
    {
        GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Analog,
 8001454:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8001456:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8001458:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 800145a:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 800145c:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Analog,
 800145e:	9102      	str	r1, [sp, #8]
 8001460:	9201      	str	r2, [sp, #4]
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	4623      	mov	r3, r4
 8001466:	4602      	mov	r2, r0
 8001468:	2106      	movs	r1, #6
 800146a:	4859      	ldr	r0, [pc, #356]	@ (80015d0 <ADC_Pin_Init+0x264>)
 800146c:	f002 f8b0 	bl	80035d0 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 7 if enabled
    if (config->Channel_7.Enable == ENABLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7fdb      	ldrb	r3, [r3, #31]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00d      	beq.n	8001494 <ADC_Pin_Init+0x128>
    {
        GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Analog,
 8001478:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 800147a:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 800147c:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 800147e:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8001480:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Analog,
 8001482:	9102      	str	r1, [sp, #8]
 8001484:	9201      	str	r2, [sp, #4]
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4623      	mov	r3, r4
 800148a:	4602      	mov	r2, r0
 800148c:	2107      	movs	r1, #7
 800148e:	4850      	ldr	r0, [pc, #320]	@ (80015d0 <ADC_Pin_Init+0x264>)
 8001490:	f002 f89e 	bl	80035d0 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 8 if enabled
    if (config->Channel_8.Enable == ENABLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00d      	beq.n	80014ba <ADC_Pin_Init+0x14e>
    {
        GPIO_Pin_Init(GPIOB, 0, GPIO_Configuration.Mode.Analog,
 800149e:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 80014a0:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 80014a2:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 80014a4:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 80014a6:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOB, 0, GPIO_Configuration.Mode.Analog,
 80014a8:	9102      	str	r1, [sp, #8]
 80014aa:	9201      	str	r2, [sp, #4]
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	4623      	mov	r3, r4
 80014b0:	4602      	mov	r2, r0
 80014b2:	2100      	movs	r1, #0
 80014b4:	4847      	ldr	r0, [pc, #284]	@ (80015d4 <ADC_Pin_Init+0x268>)
 80014b6:	f002 f88b 	bl	80035d0 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 9 if enabled
    if (config->Channel_9.Enable == ENABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00d      	beq.n	80014e0 <ADC_Pin_Init+0x174>
    {
        GPIO_Pin_Init(GPIOB, 1, GPIO_Configuration.Mode.Analog,
 80014c4:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 80014c6:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 80014c8:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 80014ca:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 80014cc:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOB, 1, GPIO_Configuration.Mode.Analog,
 80014ce:	9102      	str	r1, [sp, #8]
 80014d0:	9201      	str	r2, [sp, #4]
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	4623      	mov	r3, r4
 80014d6:	4602      	mov	r2, r0
 80014d8:	2101      	movs	r1, #1
 80014da:	483e      	ldr	r0, [pc, #248]	@ (80015d4 <ADC_Pin_Init+0x268>)
 80014dc:	f002 f878 	bl	80035d0 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 10 if enabled
    if (config->Channel_10.Enable == ENABLE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00d      	beq.n	8001506 <ADC_Pin_Init+0x19a>
    {
        GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Analog,
 80014ea:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 80014ec:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 80014ee:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 80014f0:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 80014f2:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Analog,
 80014f4:	9102      	str	r1, [sp, #8]
 80014f6:	9201      	str	r2, [sp, #4]
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	4623      	mov	r3, r4
 80014fc:	4602      	mov	r2, r0
 80014fe:	2100      	movs	r1, #0
 8001500:	4835      	ldr	r0, [pc, #212]	@ (80015d8 <ADC_Pin_Init+0x26c>)
 8001502:	f002 f865 	bl	80035d0 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 11 if enabled
    if (config->Channel_11.Enable == ENABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00d      	beq.n	800152c <ADC_Pin_Init+0x1c0>
    {
        GPIO_Pin_Init(GPIOC, 1, GPIO_Configuration.Mode.Analog,
 8001510:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8001512:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8001514:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8001516:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8001518:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 1, GPIO_Configuration.Mode.Analog,
 800151a:	9102      	str	r1, [sp, #8]
 800151c:	9201      	str	r2, [sp, #4]
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	4623      	mov	r3, r4
 8001522:	4602      	mov	r2, r0
 8001524:	2101      	movs	r1, #1
 8001526:	482c      	ldr	r0, [pc, #176]	@ (80015d8 <ADC_Pin_Init+0x26c>)
 8001528:	f002 f852 	bl	80035d0 <GPIO_Pin_Init>
    }

    /**************************************************************************************************************/

    // Initialize GPIO pin for Channel 12 if enabled
    if (config->Channel_12.Enable == ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00d      	beq.n	8001552 <ADC_Pin_Init+0x1e6>
    {
        GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Analog,
 8001536:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8001538:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 800153a:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 800153c:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 800153e:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Analog,
 8001540:	9102      	str	r1, [sp, #8]
 8001542:	9201      	str	r2, [sp, #4]
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	4623      	mov	r3, r4
 8001548:	4602      	mov	r2, r0
 800154a:	2102      	movs	r1, #2
 800154c:	4822      	ldr	r0, [pc, #136]	@ (80015d8 <ADC_Pin_Init+0x26c>)
 800154e:	f002 f83f 	bl	80035d0 <GPIO_Pin_Init>
    }

    /**************************************************************************************************************/

    // Initialize GPIO pin for Channel 13 if enabled
    if (config->Channel_13.Enable == ENABLE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00d      	beq.n	8001578 <ADC_Pin_Init+0x20c>
    {
        GPIO_Pin_Init(GPIOC, 3, GPIO_Configuration.Mode.Analog,
 800155c:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 800155e:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8001560:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8001562:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8001564:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 3, GPIO_Configuration.Mode.Analog,
 8001566:	9102      	str	r1, [sp, #8]
 8001568:	9201      	str	r2, [sp, #4]
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	4623      	mov	r3, r4
 800156e:	4602      	mov	r2, r0
 8001570:	2103      	movs	r1, #3
 8001572:	4819      	ldr	r0, [pc, #100]	@ (80015d8 <ADC_Pin_Init+0x26c>)
 8001574:	f002 f82c 	bl	80035d0 <GPIO_Pin_Init>
    }

    /**************************************************************************************************************/

    // Initialize GPIO pin for Channel 14 if enabled
    if (config->Channel_14.Enable == ENABLE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00d      	beq.n	800159e <ADC_Pin_Init+0x232>
    {
        GPIO_Pin_Init(GPIOC, 4, GPIO_Configuration.Mode.Analog,
 8001582:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8001584:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8001586:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8001588:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 800158a:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 4, GPIO_Configuration.Mode.Analog,
 800158c:	9102      	str	r1, [sp, #8]
 800158e:	9201      	str	r2, [sp, #4]
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4623      	mov	r3, r4
 8001594:	4602      	mov	r2, r0
 8001596:	2104      	movs	r1, #4
 8001598:	480f      	ldr	r0, [pc, #60]	@ (80015d8 <ADC_Pin_Init+0x26c>)
 800159a:	f002 f819 	bl	80035d0 <GPIO_Pin_Init>
    }

    /**************************************************************************************************************/

    // Initialize GPIO pin for Channel 15 if enabled
    if (config->Channel_15.Enable == ENABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00d      	beq.n	80015c4 <ADC_Pin_Init+0x258>
    {
        GPIO_Pin_Init(GPIOC, 5, GPIO_Configuration.Mode.Analog,
 80015a8:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 80015aa:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 80015ac:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 80015ae:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 80015b0:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 5, GPIO_Configuration.Mode.Analog,
 80015b2:	9102      	str	r1, [sp, #8]
 80015b4:	9201      	str	r2, [sp, #4]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	4623      	mov	r3, r4
 80015ba:	4602      	mov	r2, r0
 80015bc:	2105      	movs	r1, #5
 80015be:	4806      	ldr	r0, [pc, #24]	@ (80015d8 <ADC_Pin_Init+0x26c>)
 80015c0:	f002 f806 	bl	80035d0 <GPIO_Pin_Init>
    }

    // Return success
    return 1;
 80015c4:	2301      	movs	r3, #1
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd90      	pop	{r4, r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40020800 	.word	0x40020800

080015dc <ADC_Sequence_Config>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful configuration of the sequence.
 */
static int8_t ADC_Sequence_Config(ADC_Config *config)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    // Configure sequence for Channel 0
    if(config->Channel_0.Enable == ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7a9b      	ldrb	r3, [r3, #10]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d009      	beq.n	8001600 <ADC_Sequence_Config+0x24>
    {
        config->Port->SQR3 |= config->Channel_0.Sequence_Number << ADC_SQR3_SQ1_Pos;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7adb      	ldrb	r3, [r3, #11]
 80015f6:	4619      	mov	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 1
    if(config->Channel_1.Enable == ENABLE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7b5b      	ldrb	r3, [r3, #13]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d009      	beq.n	800161c <ADC_Sequence_Config+0x40>
    {
        config->Port->SQR3 |= config->Channel_1.Sequence_Number << ADC_SQR3_SQ2_Pos;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7b9b      	ldrb	r3, [r3, #14]
 8001612:	015a      	lsls	r2, r3, #5
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 2
    if(config->Channel_2.Enable == ENABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7c1b      	ldrb	r3, [r3, #16]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d009      	beq.n	8001638 <ADC_Sequence_Config+0x5c>
    {
        config->Port->SQR3 |= config->Channel_2.Sequence_Number << ADC_SQR3_SQ3_Pos;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7c5b      	ldrb	r3, [r3, #17]
 800162e:	029a      	lsls	r2, r3, #10
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 3
    if(config->Channel_3.Enable == ENABLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7cdb      	ldrb	r3, [r3, #19]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d009      	beq.n	8001654 <ADC_Sequence_Config+0x78>
    {
        config->Port->SQR3 |= config->Channel_3.Sequence_Number << ADC_SQR3_SQ4_Pos;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7d1b      	ldrb	r3, [r3, #20]
 800164a:	03da      	lsls	r2, r3, #15
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 4
    if(config->Channel_4.Enable == ENABLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7d9b      	ldrb	r3, [r3, #22]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d009      	beq.n	8001670 <ADC_Sequence_Config+0x94>
    {
        config->Port->SQR3 |= config->Channel_4.Sequence_Number << ADC_SQR3_SQ5_Pos;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7ddb      	ldrb	r3, [r3, #23]
 8001666:	051a      	lsls	r2, r3, #20
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 5
    if(config->Channel_5.Enable == ENABLE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7e5b      	ldrb	r3, [r3, #25]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d009      	beq.n	800168c <ADC_Sequence_Config+0xb0>
    {
        config->Port->SQR3 |= config->Channel_5.Sequence_Number << ADC_SQR3_SQ6_Pos;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	7e9b      	ldrb	r3, [r3, #26]
 8001682:	065a      	lsls	r2, r3, #25
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 6
    if(config->Channel_6.Enable == ENABLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7f1b      	ldrb	r3, [r3, #28]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <ADC_Sequence_Config+0xcc>
    {
        config->Port->SQR2 |= config->Channel_6.Sequence_Number << ADC_SQR2_SQ7_Pos;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	7f5b      	ldrb	r3, [r3, #29]
 800169e:	4619      	mov	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    // Configure sequence for Channel 7
    if(config->Channel_7.Enable == ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7fdb      	ldrb	r3, [r3, #31]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00a      	beq.n	80016c6 <ADC_Sequence_Config+0xea>
    {
        config->Port->SQR2 |= config->Channel_7.Sequence_Number << ADC_SQR2_SQ8_Pos;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016bc:	015a      	lsls	r2, r3, #5
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    // Configure sequence for Channel 8
    if(config->Channel_8.Enable == ENABLE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00a      	beq.n	80016e6 <ADC_Sequence_Config+0x10a>
    {
        config->Port->SQR2 |= config->Channel_8.Sequence_Number << ADC_SQR2_SQ9_Pos;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80016dc:	029a      	lsls	r2, r3, #10
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    // Configure sequence for Channel 9
    if(config->Channel_9.Enable == ENABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00a      	beq.n	8001706 <ADC_Sequence_Config+0x12a>
    {
        config->Port->SQR2 |= config->Channel_9.Sequence_Number << ADC_SQR2_SQ10_Pos;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80016fc:	03da      	lsls	r2, r3, #15
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    // Configure sequence for Channel 10
    if(config->Channel_10.Enable == ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00a      	beq.n	8001726 <ADC_Sequence_Config+0x14a>
    {
        config->Port->SQR2 |= config->Channel_10.Sequence_Number << ADC_SQR2_SQ11_Pos;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800171c:	051a      	lsls	r2, r3, #20
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    // Configure sequence for Channel 11
    if(config->Channel_11.Enable == ENABLE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00a      	beq.n	8001746 <ADC_Sequence_Config+0x16a>
    {
        config->Port->SQR2 |= config->Channel_11.Sequence_Number << ADC_SQR2_SQ12_Pos;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800173c:	065a      	lsls	r2, r3, #25
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /**************************************************************************************************************/

    // Configure sequence for Channel 12
    if(config->Channel_12.Enable == ENABLE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00a      	beq.n	8001766 <ADC_Sequence_Config+0x18a>
    {
        config->Port->SQR1 |= config->Channel_12.Sequence_Number << ADC_SQR1_SQ13_Pos;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800175c:	4619      	mov	r1, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /**************************************************************************************************************/

    // Configure sequence for Channel 13
    if(config->Channel_13.Enable == ENABLE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00a      	beq.n	8001786 <ADC_Sequence_Config+0x1aa>
    {
        config->Port->SQR1 |= config->Channel_13.Sequence_Number << ADC_SQR1_SQ14_Pos;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800177c:	015a      	lsls	r2, r3, #5
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /**************************************************************************************************************/

    // Configure sequence for Channel 14
    if(config->Channel_14.Enable == ENABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00a      	beq.n	80017a6 <ADC_Sequence_Config+0x1ca>
    {
        config->Port->SQR1 |= config->Channel_14.Sequence_Number << ADC_SQR1_SQ15_Pos;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800179c:	029a      	lsls	r2, r3, #10
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /**************************************************************************************************************/

    // Configure sequence for Channel 15
    if(config->Channel_15.Enable == ENABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00a      	beq.n	80017c6 <ADC_Sequence_Config+0x1ea>
    {
        config->Port->SQR1 |= config->Channel_15.Sequence_Number << ADC_SQR1_SQ16_Pos;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017bc:	03da      	lsls	r2, r3, #15
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    // Return success
    return 1;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <ADC_Init>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t ADC_Init(ADC_Config *config)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
    // Enable the clock for the selected ADC port
    if (config->Port == ADC_Configuration.Port._ADC1_)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a8a      	ldr	r2, [pc, #552]	@ (8001a0c <ADC_Init+0x238>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d106      	bne.n	80017f4 <ADC_Init+0x20>
        RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80017e6:	4b8a      	ldr	r3, [pc, #552]	@ (8001a10 <ADC_Init+0x23c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ea:	4a89      	ldr	r2, [pc, #548]	@ (8001a10 <ADC_Init+0x23c>)
 80017ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f2:	e01a      	b.n	800182a <ADC_Init+0x56>
    else if (config->Port == ADC_Configuration.Port._ADC2_)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a86      	ldr	r2, [pc, #536]	@ (8001a14 <ADC_Init+0x240>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d106      	bne.n	800180c <ADC_Init+0x38>
        RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 80017fe:	4b84      	ldr	r3, [pc, #528]	@ (8001a10 <ADC_Init+0x23c>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	4a83      	ldr	r2, [pc, #524]	@ (8001a10 <ADC_Init+0x23c>)
 8001804:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001808:	6453      	str	r3, [r2, #68]	@ 0x44
 800180a:	e00e      	b.n	800182a <ADC_Init+0x56>
    else if (config->Port == ADC_Configuration.Port._ADC3_)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a81      	ldr	r2, [pc, #516]	@ (8001a18 <ADC_Init+0x244>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d106      	bne.n	8001824 <ADC_Init+0x50>
        RCC->APB2ENR |= RCC_APB2ENR_ADC3EN;
 8001816:	4b7e      	ldr	r3, [pc, #504]	@ (8001a10 <ADC_Init+0x23c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a10 <ADC_Init+0x23c>)
 800181c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001820:	6453      	str	r3, [r2, #68]	@ 0x44
 8001822:	e002      	b.n	800182a <ADC_Init+0x56>
    else
        return -1;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
 8001828:	e13d      	b.n	8001aa6 <ADC_Init+0x2d2>

    // Configure the ADC scan mode
    config->Port->CR1 |= ADC_CR1_SCAN;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001838:	605a      	str	r2, [r3, #4]

    // Set the ADC resolution
    if (config->Resolution == ADC_Configuration.Resolution.Bit_12)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001840:	2200      	movs	r2, #0
 8001842:	4293      	cmp	r3, r2
 8001844:	d108      	bne.n	8001858 <ADC_Init+0x84>
        config->Port->CR1 &= ~ADC_CR1_RES;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	e02f      	b.n	80018b8 <ADC_Init+0xe4>
    else if (config->Resolution == ADC_Configuration.Resolution.Bit_10)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800185e:	2200      	movs	r2, #0
 8001860:	4293      	cmp	r3, r2
 8001862:	d108      	bne.n	8001876 <ADC_Init+0xa2>
        config->Port->CR1 |=  1 << ADC_CR1_RES_Pos;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	e020      	b.n	80018b8 <ADC_Init+0xe4>
    else if (config->Resolution == ADC_Configuration.Resolution.Bit_8)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800187c:	2200      	movs	r2, #0
 800187e:	4293      	cmp	r3, r2
 8001880:	d108      	bne.n	8001894 <ADC_Init+0xc0>
        config->Port->CR1 |=  2 << ADC_CR1_RES_Pos;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	e011      	b.n	80018b8 <ADC_Init+0xe4>
    else if (config->Resolution == ADC_Configuration.Resolution.Bit_6)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800189a:	2200      	movs	r2, #0
 800189c:	4293      	cmp	r3, r2
 800189e:	d108      	bne.n	80018b2 <ADC_Init+0xde>
        config->Port->CR1 |=  3 << ADC_CR1_RES_Pos;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	e002      	b.n	80018b8 <ADC_Init+0xe4>
    else
        return -1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e0f6      	b.n	8001aa6 <ADC_Init+0x2d2>

    // Configure the conversion mode
    if (config->Conversion_Mode == ADC_Configuration.Conversion_Mode.Single) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	795b      	ldrb	r3, [r3, #5]
 80018bc:	2201      	movs	r2, #1
 80018be:	4293      	cmp	r3, r2
 80018c0:	d108      	bne.n	80018d4 <ADC_Init+0x100>
        config->Port->CR2 &= ~ADC_CR2_CONT;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0202 	bic.w	r2, r2, #2
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	e010      	b.n	80018f6 <ADC_Init+0x122>
    } else if (config->Conversion_Mode == ADC_Configuration.Conversion_Mode.Continuous) {
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	795b      	ldrb	r3, [r3, #5]
 80018d8:	2202      	movs	r2, #2
 80018da:	4293      	cmp	r3, r2
 80018dc:	d108      	bne.n	80018f0 <ADC_Init+0x11c>
        config->Port->CR2 |= ADC_CR2_CONT;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0202 	orr.w	r2, r2, #2
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	e002      	b.n	80018f6 <ADC_Init+0x122>
    } else {
        return -1;
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
 80018f4:	e0d7      	b.n	8001aa6 <ADC_Init+0x2d2>
    }

    // Enable end-of-conversion selection
    config->Port->CR2 |= ADC_CR2_EOCS;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001904:	609a      	str	r2, [r3, #8]

    // Set the data alignment
    if (config->Data_Alignment == ADC_Configuration.Data_Alignment.Right_Justified) {
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	791b      	ldrb	r3, [r3, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	4293      	cmp	r3, r2
 800190e:	d108      	bne.n	8001922 <ADC_Init+0x14e>
        config->Port->CR2 &= ~ADC_CR2_ALIGN;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	e010      	b.n	8001944 <ADC_Init+0x170>
    } else if (config->Data_Alignment == ADC_Configuration.Data_Alignment.Left_Justified) {
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	791b      	ldrb	r3, [r3, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	4293      	cmp	r3, r2
 800192a:	d108      	bne.n	800193e <ADC_Init+0x16a>
        config->Port->CR2 |= ADC_CR2_ALIGN;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	e002      	b.n	8001944 <ADC_Init+0x170>
    } else {
        return -1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	e0b0      	b.n	8001aa6 <ADC_Init+0x2d2>
    }

    // Configure sampling settings and initialize ADC pins
    pin_temp = ADC_Sampling_Config(config);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff fbe1 	bl	800110c <ADC_Sampling_Config>
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	4b33      	ldr	r3, [pc, #204]	@ (8001a1c <ADC_Init+0x248>)
 8001950:	701a      	strb	r2, [r3, #0]
    config->Port->SQR1 |= (pin_temp - 1) << ADC_SQR1_L_Pos;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001958:	4b30      	ldr	r3, [pc, #192]	@ (8001a1c <ADC_Init+0x248>)
 800195a:	f993 3000 	ldrsb.w	r3, [r3]
 800195e:	3b01      	subs	r3, #1
 8001960:	051b      	lsls	r3, r3, #20
 8001962:	4619      	mov	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADC_Pin_Init(config);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff fcfd 	bl	800136c <ADC_Pin_Init>

    // Configure external trigger for regular or injected channels
    if (config->Channel_Type == ADC_Configuration.Channel_Type.Regular) {
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	799b      	ldrb	r3, [r3, #6]
 8001976:	2200      	movs	r2, #0
 8001978:	4293      	cmp	r3, r2
 800197a:	d11f      	bne.n	80019bc <ADC_Init+0x1e8>
        config->Port->CR2 &= ~ADC_CR2_EXTSEL;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800198a:	609a      	str	r2, [r3, #8]

        if (config->External_Trigger.Enable == ENABLE) {
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	79db      	ldrb	r3, [r3, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d045      	beq.n	8001a20 <ADC_Init+0x24c>
            // config->Port->CR2 |= config->External_Trigger.Trigger_Event << ADC_CR2_EXTSEL_Pos;
            config->Port->CR2 |= ADC_CR2_EXTSEL_2 | ADC_CR2_EXTSEL_1;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 62c0 	orr.w	r2, r2, #100663296	@ 0x6000000
 80019a2:	609a      	str	r2, [r3, #8]
            config->Port->CR2 |= ADC_CR2_EXTEN_0;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80019b2:	609a      	str	r2, [r3, #8]
            ADC_Timer_External_Trigger_Init(config);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff f993 	bl	8000ce0 <ADC_Timer_External_Trigger_Init>
 80019ba:	e031      	b.n	8001a20 <ADC_Init+0x24c>
        }
    } else if (config->Channel_Type == ADC_Configuration.Channel_Type.Injected) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	799b      	ldrb	r3, [r3, #6]
 80019c0:	2201      	movs	r2, #1
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d11f      	bne.n	8001a06 <ADC_Init+0x232>
        config->Port->CR2 &= ~ADC_CR2_JEXTSEL;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80019d4:	609a      	str	r2, [r3, #8]
        config->Port->CR2 |= config->External_Trigger.Enable << ADC_CR2_JEXTEN_Pos;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6899      	ldr	r1, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	79db      	ldrb	r3, [r3, #7]
 80019e0:	051a      	lsls	r2, r3, #20
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	609a      	str	r2, [r3, #8]
        config->Port->CR2 |= config->External_Trigger.Trigger_Event << ADC_CR2_JEXTSEL_Pos;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6899      	ldr	r1, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7a1b      	ldrb	r3, [r3, #8]
 80019f4:	041a      	lsls	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	609a      	str	r2, [r3, #8]
        ADC_Timer_External_Trigger_Init(config);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff f96e 	bl	8000ce0 <ADC_Timer_External_Trigger_Init>
 8001a04:	e00c      	b.n	8001a20 <ADC_Init+0x24c>
    } else {
        return -1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	e04c      	b.n	8001aa6 <ADC_Init+0x2d2>
 8001a0c:	40012000 	.word	0x40012000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40012100 	.word	0x40012100
 8001a18:	40012200 	.word	0x40012200
 8001a1c:	200000a8 	.word	0x200000a8
    }

    // Enable DMA and set DDS for continuous requests
    config->Port->CR2 |= ADC_CR2_DMA;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a2e:	609a      	str	r2, [r3, #8]
    config->Port->CR2 |= ADC_CR2_DDS;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a3e:	609a      	str	r2, [r3, #8]

    // Configure ADC sequence
    ADC_Sequence_Config(config);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff fdcb 	bl	80015dc <ADC_Sequence_Config>

    // Enable the ADC
    ADC_Enable(config);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f836 	bl	8001ab8 <ADC_Enable>

    // Initialize the DMA with the provided settings
    xADC.Request = DMA_Configuration.Request._ADC1;
 8001a4c:	4a18      	ldr	r2, [pc, #96]	@ (8001ab0 <ADC_Init+0x2dc>)
 8001a4e:	4b19      	ldr	r3, [pc, #100]	@ (8001ab4 <ADC_Init+0x2e0>)
 8001a50:	4614      	mov	r4, r2
 8001a52:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8001a56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    xADC.transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <ADC_Init+0x2dc>)
 8001a62:	611a      	str	r2, [r3, #16]
    xADC.circular_mode = DMA_Configuration.Circular_Mode.Enable;
 8001a64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <ADC_Init+0x2dc>)
 8001a6a:	619a      	str	r2, [r3, #24]
    xADC.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <ADC_Init+0x2dc>)
 8001a70:	60da      	str	r2, [r3, #12]
    xADC.memory_data_size = DMA_Configuration.Memory_Data_Size.half_word;
 8001a72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a76:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <ADC_Init+0x2dc>)
 8001a78:	629a      	str	r2, [r3, #40]	@ 0x28
    xADC.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8001a7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <ADC_Init+0x2dc>)
 8001a80:	625a      	str	r2, [r3, #36]	@ 0x24
    xADC.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8001a82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <ADC_Init+0x2dc>)
 8001a8a:	841a      	strh	r2, [r3, #32]
    xADC.interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete | DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete;
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	2308      	movs	r3, #8
 8001a90:	4313      	orrs	r3, r2
 8001a92:	4a07      	ldr	r2, [pc, #28]	@ (8001ab0 <ADC_Init+0x2dc>)
 8001a94:	61d3      	str	r3, [r2, #28]
    xADC.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8001a96:	2300      	movs	r3, #0
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <ADC_Init+0x2dc>)
 8001a9c:	845a      	strh	r2, [r3, #34]	@ 0x22
    DMA_Init(&xADC);
 8001a9e:	4804      	ldr	r0, [pc, #16]	@ (8001ab0 <ADC_Init+0x2dc>)
 8001aa0:	f001 faa8 	bl	8002ff4 <DMA_Init>

    // Return success
    return 1;
 8001aa4:	2301      	movs	r3, #1
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd90      	pop	{r4, r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000070 	.word	0x20000070
 8001ab4:	08005214 	.word	0x08005214

08001ab8 <ADC_Enable>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful enabling of the ADC.
 */
int8_t ADC_Enable(ADC_Config *config)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
    // Enable the ADC by setting the ADON bit
    config->Port->CR2 |= ADC_CR2_ADON;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	609a      	str	r2, [r3, #8]

    // Introduce a delay for ADC stabilization
    Delay_milli(1000);
 8001ad0:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001ae4 <ADC_Enable+0x2c>
 8001ad4:	f7ff f8e0 	bl	8000c98 <Delay_milli>

    // Return success
    return 1;
 8001ad8:	2301      	movs	r3, #1
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	447a0000 	.word	0x447a0000

08001ae8 <ADC_Start>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful start of the ADC conversion, or -1 if the channel type is invalid.
 */
int8_t ADC_Start(ADC_Config *config)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    // Clear the ADC status register
    config->Port->SR = 0;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

    // Start the conversion based on the channel type
    if (config->Channel_Type == ADC_Configuration.Channel_Type.Regular) {
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	799b      	ldrb	r3, [r3, #6]
 8001afc:	2200      	movs	r2, #0
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d108      	bne.n	8001b14 <ADC_Start+0x2c>
        config->Port->CR2 |= ADC_CR2_SWSTART;  // Start regular conversion
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	e010      	b.n	8001b36 <ADC_Start+0x4e>
    }
    else if (config->Channel_Type == ADC_Configuration.Channel_Type.Injected) {
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	799b      	ldrb	r3, [r3, #6]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d108      	bne.n	8001b30 <ADC_Start+0x48>
        config->Port->CR2 |= ADC_CR2_JSWSTART; // Start injected conversion
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	e002      	b.n	8001b36 <ADC_Start+0x4e>
    }
    else {
        return -1; // Return error if channel type is invalid
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295
 8001b34:	e000      	b.n	8001b38 <ADC_Start+0x50>
    }

    // Return success
    return 1;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <ADC_Start_Capture>:
 * @param[out] buffer Pointer to the buffer where ADC data will be stored.
 *
 * @return int8_t Returns 1 on successful start of ADC capture.
 */
int8_t ADC_Start_Capture(ADC_Config *config, uint16_t *buffer)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
    // Check for overrun and reset ADC if necessary
    if ((config->Port->SR) & (ADC_SR_OVR))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00f      	beq.n	8001b7c <ADC_Start_Capture+0x38>
    {
        config->Port->CR2 &= ~ADC_CR2_ADON; // Turn off the ADC
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	609a      	str	r2, [r3, #8]
        config->Port->CR2 |= ADC_CR2_ADON;  // Turn on the ADC
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	609a      	str	r2, [r3, #8]
    }

    // Configure DMA settings for the ADC capture
    xADC.buffer_length = pin_temp;
 8001b7c:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <ADC_Start_Capture+0x7c>)
 8001b7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <ADC_Start_Capture+0x80>)
 8001b86:	869a      	strh	r2, [r3, #52]	@ 0x34
    xADC.peripheral_address = (uint32_t)&(config->Port->DR);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	334c      	adds	r3, #76	@ 0x4c
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <ADC_Start_Capture+0x80>)
 8001b92:	62da      	str	r2, [r3, #44]	@ 0x2c
    xADC.memory_address = (uint32_t)buffer;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc4 <ADC_Start_Capture+0x80>)
 8001b98:	6313      	str	r3, [r2, #48]	@ 0x30

    // Initialize DMA with the target settings
    DMA_Set_Target(&xADC);
 8001b9a:	480a      	ldr	r0, [pc, #40]	@ (8001bc4 <ADC_Start_Capture+0x80>)
 8001b9c:	f001 fbc8 	bl	8003330 <DMA_Set_Target>
    DMA_Set_Trigger(&xADC);
 8001ba0:	4808      	ldr	r0, [pc, #32]	@ (8001bc4 <ADC_Start_Capture+0x80>)
 8001ba2:	f001 fc03 	bl	80033ac <DMA_Set_Trigger>

    // Clear the ADC status register
    config->Port->SR = 0;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]

    // Start the ADC conversion
    ADC_Start(config);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ff9a 	bl	8001ae8 <ADC_Start>

    // Return success
    return 1;
 8001bb4:	2301      	movs	r3, #1
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200000a8 	.word	0x200000a8
 8001bc4:	20000070 	.word	0x20000070

08001bc8 <Console_Init>:

USART_Config serial;


 void Console_Init(int32_t baudrate)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	 USART_Config_Reset(&serial);
 8001bd0:	480f      	ldr	r0, [pc, #60]	@ (8001c10 <Console_Init+0x48>)
 8001bd2:	f001 fdc5 	bl	8003760 <USART_Config_Reset>
	 serial.Port = USART1;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <Console_Init+0x48>)
 8001bd8:	4a0e      	ldr	r2, [pc, #56]	@ (8001c14 <Console_Init+0x4c>)
 8001bda:	601a      	str	r2, [r3, #0]
	 serial.baudrate = baudrate;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a0c      	ldr	r2, [pc, #48]	@ (8001c10 <Console_Init+0x48>)
 8001be0:	6053      	str	r3, [r2, #4]
	 serial.mode = USART_Configuration.Mode.Asynchronous;
 8001be2:	2201      	movs	r2, #1
 8001be4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <Console_Init+0x48>)
 8001be6:	721a      	strb	r2, [r3, #8]
	 serial.stop_bits = USART_Configuration.Stop_Bits.Bit_1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <Console_Init+0x48>)
 8001bee:	741a      	strb	r2, [r3, #16]
	 serial.TX_Pin = USART1_TX_Pin.PB6;
 8001bf0:	2206      	movs	r2, #6
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <Console_Init+0x48>)
 8001bf4:	725a      	strb	r2, [r3, #9]
	 serial.RX_Pin = USART1_RX_Pin.PB7;
 8001bf6:	2207      	movs	r2, #7
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <Console_Init+0x48>)
 8001bfa:	729a      	strb	r2, [r3, #10]
	 serial.dma_enable = USART_Configuration.DMA_Enable.TX_Enable;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4b04      	ldr	r3, [pc, #16]	@ (8001c10 <Console_Init+0x48>)
 8001c00:	745a      	strb	r2, [r3, #17]
	 USART_Init(&serial);
 8001c02:	4803      	ldr	r0, [pc, #12]	@ (8001c10 <Console_Init+0x48>)
 8001c04:	f002 fa88 	bl	8004118 <USART_Init>
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200000ac 	.word	0x200000ac
 8001c14:	40011000 	.word	0x40011000

08001c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db0b      	blt.n	8001c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	4907      	ldr	r1, [pc, #28]	@ (8001c50 <__NVIC_EnableIRQ+0x38>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2001      	movs	r0, #1
 8001c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000e100 	.word	0xe000e100

08001c54 <DMA1_Stream0_IRQHandler>:
 * status flags for FIFO error, direct mode error, transfer error, half
 * transfer complete, and transfer complete, and clears the respective
 * interrupt flag after handling it.
 */
void DMA1_Stream0_IRQHandler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF0)
 8001c58:	4b54      	ldr	r3, [pc, #336]	@ (8001dac <DMA1_Stream0_IRQHandler+0x158>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d01a      	beq.n	8001c9a <DMA1_Stream0_IRQHandler+0x46>
	{
		TIM5_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001c64:	4b52      	ldr	r3, [pc, #328]	@ (8001db0 <DMA1_Stream0_IRQHandler+0x15c>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	711a      	strb	r2, [r3, #4]
		TIM4_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8001c6a:	4b52      	ldr	r3, [pc, #328]	@ (8001db4 <DMA1_Stream0_IRQHandler+0x160>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001c70:	4b51      	ldr	r3, [pc, #324]	@ (8001db8 <DMA1_Stream0_IRQHandler+0x164>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	711a      	strb	r2, [r3, #4]
		USART5_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001c76:	4b51      	ldr	r3, [pc, #324]	@ (8001dbc <DMA1_Stream0_IRQHandler+0x168>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	711a      	strb	r2, [r3, #4]
		I2C1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001c7c:	4b50      	ldr	r3, [pc, #320]	@ (8001dc0 <DMA1_Stream0_IRQHandler+0x16c>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	711a      	strb	r2, [r3, #4]
		SPI3_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001c82:	4b50      	ldr	r3, [pc, #320]	@ (8001dc4 <DMA1_Stream0_IRQHandler+0x170>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	711a      	strb	r2, [r3, #4]
		DMA1_Stream0_Flag.Fifo_Error_Flag = true;
 8001c88:	4b4f      	ldr	r3, [pc, #316]	@ (8001dc8 <DMA1_Stream0_IRQHandler+0x174>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8001c8e:	4b47      	ldr	r3, [pc, #284]	@ (8001dac <DMA1_Stream0_IRQHandler+0x158>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	4a46      	ldr	r2, [pc, #280]	@ (8001dac <DMA1_Stream0_IRQHandler+0x158>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF0)
 8001c9a:	4b44      	ldr	r3, [pc, #272]	@ (8001dac <DMA1_Stream0_IRQHandler+0x158>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d01a      	beq.n	8001cdc <DMA1_Stream0_IRQHandler+0x88>
	{
		TIM5_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001ca6:	4b42      	ldr	r3, [pc, #264]	@ (8001db0 <DMA1_Stream0_IRQHandler+0x15c>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	70da      	strb	r2, [r3, #3]
		TIM4_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cac:	4b41      	ldr	r3, [pc, #260]	@ (8001db4 <DMA1_Stream0_IRQHandler+0x160>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cb2:	4b41      	ldr	r3, [pc, #260]	@ (8001db8 <DMA1_Stream0_IRQHandler+0x164>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	70da      	strb	r2, [r3, #3]
		USART5_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cb8:	4b40      	ldr	r3, [pc, #256]	@ (8001dbc <DMA1_Stream0_IRQHandler+0x168>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	70da      	strb	r2, [r3, #3]
		I2C1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cbe:	4b40      	ldr	r3, [pc, #256]	@ (8001dc0 <DMA1_Stream0_IRQHandler+0x16c>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	70da      	strb	r2, [r3, #3]
		SPI3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cc4:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc4 <DMA1_Stream0_IRQHandler+0x170>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	70da      	strb	r2, [r3, #3]
		DMA1_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8001cca:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc8 <DMA1_Stream0_IRQHandler+0x174>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8001cd0:	4b36      	ldr	r3, [pc, #216]	@ (8001dac <DMA1_Stream0_IRQHandler+0x158>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	4a35      	ldr	r2, [pc, #212]	@ (8001dac <DMA1_Stream0_IRQHandler+0x158>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF0)
 8001cdc:	4b33      	ldr	r3, [pc, #204]	@ (8001dac <DMA1_Stream0_IRQHandler+0x158>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01a      	beq.n	8001d1e <DMA1_Stream0_IRQHandler+0xca>
	{
		TIM5_CH3_DMA_Flag.Transfer_Error_Flag= true;
 8001ce8:	4b31      	ldr	r3, [pc, #196]	@ (8001db0 <DMA1_Stream0_IRQHandler+0x15c>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	709a      	strb	r2, [r3, #2]
		TIM4_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8001cee:	4b31      	ldr	r3, [pc, #196]	@ (8001db4 <DMA1_Stream0_IRQHandler+0x160>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001cf4:	4b30      	ldr	r3, [pc, #192]	@ (8001db8 <DMA1_Stream0_IRQHandler+0x164>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	709a      	strb	r2, [r3, #2]
		USART5_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001cfa:	4b30      	ldr	r3, [pc, #192]	@ (8001dbc <DMA1_Stream0_IRQHandler+0x168>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	709a      	strb	r2, [r3, #2]
		I2C1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001d00:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc0 <DMA1_Stream0_IRQHandler+0x16c>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	709a      	strb	r2, [r3, #2]
		SPI3_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001d06:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc4 <DMA1_Stream0_IRQHandler+0x170>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	709a      	strb	r2, [r3, #2]
		DMA1_Stream0_Flag.Transfer_Error_Flag = true;
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc8 <DMA1_Stream0_IRQHandler+0x174>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8001d12:	4b26      	ldr	r3, [pc, #152]	@ (8001dac <DMA1_Stream0_IRQHandler+0x158>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	4a25      	ldr	r2, [pc, #148]	@ (8001dac <DMA1_Stream0_IRQHandler+0x158>)
 8001d18:	f043 0308 	orr.w	r3, r3, #8
 8001d1c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF0)
 8001d1e:	4b23      	ldr	r3, [pc, #140]	@ (8001dac <DMA1_Stream0_IRQHandler+0x158>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d01a      	beq.n	8001d60 <DMA1_Stream0_IRQHandler+0x10c>
	{
		TIM5_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d2a:	4b21      	ldr	r3, [pc, #132]	@ (8001db0 <DMA1_Stream0_IRQHandler+0x15c>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	705a      	strb	r2, [r3, #1]
		TIM4_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d30:	4b20      	ldr	r3, [pc, #128]	@ (8001db4 <DMA1_Stream0_IRQHandler+0x160>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d36:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <DMA1_Stream0_IRQHandler+0x164>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	705a      	strb	r2, [r3, #1]
		USART5_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dbc <DMA1_Stream0_IRQHandler+0x168>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	705a      	strb	r2, [r3, #1]
		I2C1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d42:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc0 <DMA1_Stream0_IRQHandler+0x16c>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	705a      	strb	r2, [r3, #1]
		SPI3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d48:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc4 <DMA1_Stream0_IRQHandler+0x170>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	705a      	strb	r2, [r3, #1]
		DMA1_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc8 <DMA1_Stream0_IRQHandler+0x174>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8001d54:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <DMA1_Stream0_IRQHandler+0x158>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4a14      	ldr	r2, [pc, #80]	@ (8001dac <DMA1_Stream0_IRQHandler+0x158>)
 8001d5a:	f043 0310 	orr.w	r3, r3, #16
 8001d5e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF0)
 8001d60:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <DMA1_Stream0_IRQHandler+0x158>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d01a      	beq.n	8001da2 <DMA1_Stream0_IRQHandler+0x14e>
	{
		TIM5_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001d6c:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <DMA1_Stream0_IRQHandler+0x15c>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	701a      	strb	r2, [r3, #0]
		TIM4_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8001d72:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <DMA1_Stream0_IRQHandler+0x160>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <DMA1_Stream0_IRQHandler+0x164>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
		USART5_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <DMA1_Stream0_IRQHandler+0x168>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
		I2C1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001d84:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <DMA1_Stream0_IRQHandler+0x16c>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
		SPI3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <DMA1_Stream0_IRQHandler+0x170>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
 8001d90:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc8 <DMA1_Stream0_IRQHandler+0x174>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001d96:	4b05      	ldr	r3, [pc, #20]	@ (8001dac <DMA1_Stream0_IRQHandler+0x158>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	4a04      	ldr	r2, [pc, #16]	@ (8001dac <DMA1_Stream0_IRQHandler+0x158>)
 8001d9c:	f043 0320 	orr.w	r3, r3, #32
 8001da0:	6093      	str	r3, [r2, #8]
	}
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	40026000 	.word	0x40026000
 8001db0:	20000268 	.word	0x20000268
 8001db4:	20000248 	.word	0x20000248
 8001db8:	20000188 	.word	0x20000188
 8001dbc:	20000160 	.word	0x20000160
 8001dc0:	200000d8 	.word	0x200000d8
 8001dc4:	20000108 	.word	0x20000108
 8001dc8:	200002b0 	.word	0x200002b0

08001dcc <DMA1_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream1_IRQHandler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF1)
 8001dd0:	4b45      	ldr	r3, [pc, #276]	@ (8001ee8 <DMA1_Stream1_IRQHandler+0x11c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d014      	beq.n	8001e06 <DMA1_Stream1_IRQHandler+0x3a>
	{
		TIM2_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001ddc:	4b43      	ldr	r3, [pc, #268]	@ (8001eec <DMA1_Stream1_IRQHandler+0x120>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	711a      	strb	r2, [r3, #4]
		TIM6_UP_DMA_Flag.Fifo_Error_Flag = true;
 8001de2:	4b43      	ldr	r3, [pc, #268]	@ (8001ef0 <DMA1_Stream1_IRQHandler+0x124>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001de8:	4b42      	ldr	r3, [pc, #264]	@ (8001ef4 <DMA1_Stream1_IRQHandler+0x128>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	711a      	strb	r2, [r3, #4]
		USART3_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001dee:	4b42      	ldr	r3, [pc, #264]	@ (8001ef8 <DMA1_Stream1_IRQHandler+0x12c>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	711a      	strb	r2, [r3, #4]
		DMA1_Stream1_Flag.Fifo_Error_Flag = true;
 8001df4:	4b41      	ldr	r3, [pc, #260]	@ (8001efc <DMA1_Stream1_IRQHandler+0x130>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8001dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee8 <DMA1_Stream1_IRQHandler+0x11c>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee8 <DMA1_Stream1_IRQHandler+0x11c>)
 8001e00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e04:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF1)
 8001e06:	4b38      	ldr	r3, [pc, #224]	@ (8001ee8 <DMA1_Stream1_IRQHandler+0x11c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d014      	beq.n	8001e3c <DMA1_Stream1_IRQHandler+0x70>
	{
		TIM2_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e12:	4b36      	ldr	r3, [pc, #216]	@ (8001eec <DMA1_Stream1_IRQHandler+0x120>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	70da      	strb	r2, [r3, #3]
		TIM6_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e18:	4b35      	ldr	r3, [pc, #212]	@ (8001ef0 <DMA1_Stream1_IRQHandler+0x124>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e1e:	4b35      	ldr	r3, [pc, #212]	@ (8001ef4 <DMA1_Stream1_IRQHandler+0x128>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	70da      	strb	r2, [r3, #3]
		USART3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e24:	4b34      	ldr	r3, [pc, #208]	@ (8001ef8 <DMA1_Stream1_IRQHandler+0x12c>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	70da      	strb	r2, [r3, #3]
		DMA1_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8001e2a:	4b34      	ldr	r3, [pc, #208]	@ (8001efc <DMA1_Stream1_IRQHandler+0x130>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001e30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee8 <DMA1_Stream1_IRQHandler+0x11c>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4a2c      	ldr	r2, [pc, #176]	@ (8001ee8 <DMA1_Stream1_IRQHandler+0x11c>)
 8001e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF1)
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee8 <DMA1_Stream1_IRQHandler+0x11c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d014      	beq.n	8001e72 <DMA1_Stream1_IRQHandler+0xa6>
	{
		TIM2_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8001e48:	4b28      	ldr	r3, [pc, #160]	@ (8001eec <DMA1_Stream1_IRQHandler+0x120>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	709a      	strb	r2, [r3, #2]
		TIM6_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001e4e:	4b28      	ldr	r3, [pc, #160]	@ (8001ef0 <DMA1_Stream1_IRQHandler+0x124>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001e54:	4b27      	ldr	r3, [pc, #156]	@ (8001ef4 <DMA1_Stream1_IRQHandler+0x128>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	709a      	strb	r2, [r3, #2]
		USART3_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001e5a:	4b27      	ldr	r3, [pc, #156]	@ (8001ef8 <DMA1_Stream1_IRQHandler+0x12c>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	709a      	strb	r2, [r3, #2]
		DMA1_Stream1_Flag.Transfer_Error_Flag = true;
 8001e60:	4b26      	ldr	r3, [pc, #152]	@ (8001efc <DMA1_Stream1_IRQHandler+0x130>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8001e66:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <DMA1_Stream1_IRQHandler+0x11c>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee8 <DMA1_Stream1_IRQHandler+0x11c>)
 8001e6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e70:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF1)
 8001e72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee8 <DMA1_Stream1_IRQHandler+0x11c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d014      	beq.n	8001ea8 <DMA1_Stream1_IRQHandler+0xdc>
	{
		TIM2_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001eec <DMA1_Stream1_IRQHandler+0x120>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	705a      	strb	r2, [r3, #1]
		TIM6_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001e84:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <DMA1_Stream1_IRQHandler+0x124>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <DMA1_Stream1_IRQHandler+0x128>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	705a      	strb	r2, [r3, #1]
		USART3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001e90:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <DMA1_Stream1_IRQHandler+0x12c>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	705a      	strb	r2, [r3, #1]
		DMA1_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8001e96:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <DMA1_Stream1_IRQHandler+0x130>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <DMA1_Stream1_IRQHandler+0x11c>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	4a11      	ldr	r2, [pc, #68]	@ (8001ee8 <DMA1_Stream1_IRQHandler+0x11c>)
 8001ea2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ea6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF1)
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee8 <DMA1_Stream1_IRQHandler+0x11c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d014      	beq.n	8001ede <DMA1_Stream1_IRQHandler+0x112>
	{
		TIM2_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001eec <DMA1_Stream1_IRQHandler+0x120>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
		TIM6_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <DMA1_Stream1_IRQHandler+0x124>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <DMA1_Stream1_IRQHandler+0x128>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
		USART3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <DMA1_Stream1_IRQHandler+0x12c>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <DMA1_Stream1_IRQHandler+0x130>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <DMA1_Stream1_IRQHandler+0x11c>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4a04      	ldr	r2, [pc, #16]	@ (8001ee8 <DMA1_Stream1_IRQHandler+0x11c>)
 8001ed8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001edc:	6093      	str	r3, [r2, #8]
	}
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	40026000 	.word	0x40026000
 8001eec:	20000218 	.word	0x20000218
 8001ef0:	20000278 	.word	0x20000278
 8001ef4:	20000180 	.word	0x20000180
 8001ef8:	20000148 	.word	0x20000148
 8001efc:	200002b8 	.word	0x200002b8

08001f00 <DMA1_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream2_IRQHandler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF2)
 8001f04:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc4 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00b      	beq.n	8001f28 <DMA1_Stream2_IRQHandler+0x28>
	{
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001f10:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc8 <DMA1_Stream2_IRQHandler+0xc8>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	711a      	strb	r2, [r3, #4]
		DMA1_Stream2_Flag.Fifo_Error_Flag = true;
 8001f16:	4b2d      	ldr	r3, [pc, #180]	@ (8001fcc <DMA1_Stream2_IRQHandler+0xcc>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001f1c:	4b29      	ldr	r3, [pc, #164]	@ (8001fc4 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4a28      	ldr	r2, [pc, #160]	@ (8001fc4 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f26:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF2)
 8001f28:	4b26      	ldr	r3, [pc, #152]	@ (8001fc4 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00b      	beq.n	8001f4c <DMA1_Stream2_IRQHandler+0x4c>
	{
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001f34:	4b24      	ldr	r3, [pc, #144]	@ (8001fc8 <DMA1_Stream2_IRQHandler+0xc8>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	70da      	strb	r2, [r3, #3]
		DMA1_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8001f3a:	4b24      	ldr	r3, [pc, #144]	@ (8001fcc <DMA1_Stream2_IRQHandler+0xcc>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001f40:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc4 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f4a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF2)
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00b      	beq.n	8001f70 <DMA1_Stream2_IRQHandler+0x70>
	{
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001f58:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc8 <DMA1_Stream2_IRQHandler+0xc8>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	709a      	strb	r2, [r3, #2]
		DMA1_Stream2_Flag.Transfer_Error_Flag = true;
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <DMA1_Stream2_IRQHandler+0xcc>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001f64:	4b17      	ldr	r3, [pc, #92]	@ (8001fc4 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4a16      	ldr	r2, [pc, #88]	@ (8001fc4 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f6e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF2)
 8001f70:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <DMA1_Stream2_IRQHandler+0x94>
	{
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001f7c:	4b12      	ldr	r3, [pc, #72]	@ (8001fc8 <DMA1_Stream2_IRQHandler+0xc8>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	705a      	strb	r2, [r3, #1]
		DMA1_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8001f82:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <DMA1_Stream2_IRQHandler+0xcc>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001f88:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc4 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f92:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF2)
 8001f94:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00b      	beq.n	8001fb8 <DMA1_Stream2_IRQHandler+0xb8>
	{
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001fa0:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <DMA1_Stream2_IRQHandler+0xc8>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
 8001fa6:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <DMA1_Stream2_IRQHandler+0xcc>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <DMA1_Stream2_IRQHandler+0xc4>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4a04      	ldr	r2, [pc, #16]	@ (8001fc4 <DMA1_Stream2_IRQHandler+0xc4>)
 8001fb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fb6:	6093      	str	r3, [r2, #8]
	}
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40026000 	.word	0x40026000
 8001fc8:	20000150 	.word	0x20000150
 8001fcc:	200002c0 	.word	0x200002c0

08001fd0 <DMA1_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream3_IRQHandler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF3)
 8001fd4:	4b54      	ldr	r3, [pc, #336]	@ (8002128 <DMA1_Stream3_IRQHandler+0x158>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d01a      	beq.n	8002016 <DMA1_Stream3_IRQHandler+0x46>
	{
		TIM5_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8001fe0:	4b52      	ldr	r3, [pc, #328]	@ (800212c <DMA1_Stream3_IRQHandler+0x15c>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	711a      	strb	r2, [r3, #4]
		TIM4_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001fe6:	4b52      	ldr	r3, [pc, #328]	@ (8002130 <DMA1_Stream3_IRQHandler+0x160>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001fec:	4b51      	ldr	r3, [pc, #324]	@ (8002134 <DMA1_Stream3_IRQHandler+0x164>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	711a      	strb	r2, [r3, #4]
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001ff2:	4b51      	ldr	r3, [pc, #324]	@ (8002138 <DMA1_Stream3_IRQHandler+0x168>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	711a      	strb	r2, [r3, #4]
		I2S2_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001ff8:	4b50      	ldr	r3, [pc, #320]	@ (800213c <DMA1_Stream3_IRQHandler+0x16c>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	711a      	strb	r2, [r3, #4]
		SPI2_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001ffe:	4b50      	ldr	r3, [pc, #320]	@ (8002140 <DMA1_Stream3_IRQHandler+0x170>)
 8002000:	2201      	movs	r2, #1
 8002002:	711a      	strb	r2, [r3, #4]
		DMA1_Stream3_Flag.Fifo_Error_Flag = true;
 8002004:	4b4f      	ldr	r3, [pc, #316]	@ (8002144 <DMA1_Stream3_IRQHandler+0x174>)
 8002006:	2201      	movs	r2, #1
 8002008:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 800200a:	4b47      	ldr	r3, [pc, #284]	@ (8002128 <DMA1_Stream3_IRQHandler+0x158>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	4a46      	ldr	r2, [pc, #280]	@ (8002128 <DMA1_Stream3_IRQHandler+0x158>)
 8002010:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002014:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF3)
 8002016:	4b44      	ldr	r3, [pc, #272]	@ (8002128 <DMA1_Stream3_IRQHandler+0x158>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d01a      	beq.n	8002058 <DMA1_Stream3_IRQHandler+0x88>
	{
		TIM5_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002022:	4b42      	ldr	r3, [pc, #264]	@ (800212c <DMA1_Stream3_IRQHandler+0x15c>)
 8002024:	2201      	movs	r2, #1
 8002026:	70da      	strb	r2, [r3, #3]
		TIM4_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002028:	4b41      	ldr	r3, [pc, #260]	@ (8002130 <DMA1_Stream3_IRQHandler+0x160>)
 800202a:	2201      	movs	r2, #1
 800202c:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800202e:	4b41      	ldr	r3, [pc, #260]	@ (8002134 <DMA1_Stream3_IRQHandler+0x164>)
 8002030:	2201      	movs	r2, #1
 8002032:	70da      	strb	r2, [r3, #3]
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002034:	4b40      	ldr	r3, [pc, #256]	@ (8002138 <DMA1_Stream3_IRQHandler+0x168>)
 8002036:	2201      	movs	r2, #1
 8002038:	70da      	strb	r2, [r3, #3]
		I2S2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800203a:	4b40      	ldr	r3, [pc, #256]	@ (800213c <DMA1_Stream3_IRQHandler+0x16c>)
 800203c:	2201      	movs	r2, #1
 800203e:	70da      	strb	r2, [r3, #3]
		SPI2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002040:	4b3f      	ldr	r3, [pc, #252]	@ (8002140 <DMA1_Stream3_IRQHandler+0x170>)
 8002042:	2201      	movs	r2, #1
 8002044:	70da      	strb	r2, [r3, #3]
		DMA1_Stream3_Flag.Direct_Mode_Error_Flag = true;
 8002046:	4b3f      	ldr	r3, [pc, #252]	@ (8002144 <DMA1_Stream3_IRQHandler+0x174>)
 8002048:	2201      	movs	r2, #1
 800204a:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 800204c:	4b36      	ldr	r3, [pc, #216]	@ (8002128 <DMA1_Stream3_IRQHandler+0x158>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a35      	ldr	r2, [pc, #212]	@ (8002128 <DMA1_Stream3_IRQHandler+0x158>)
 8002052:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002056:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF3)
 8002058:	4b33      	ldr	r3, [pc, #204]	@ (8002128 <DMA1_Stream3_IRQHandler+0x158>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01a      	beq.n	800209a <DMA1_Stream3_IRQHandler+0xca>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8002064:	4b31      	ldr	r3, [pc, #196]	@ (800212c <DMA1_Stream3_IRQHandler+0x15c>)
 8002066:	2201      	movs	r2, #1
 8002068:	709a      	strb	r2, [r3, #2]
		TIM4_CH2_DMA_Flag.Transfer_Error_Flag = true;
 800206a:	4b31      	ldr	r3, [pc, #196]	@ (8002130 <DMA1_Stream3_IRQHandler+0x160>)
 800206c:	2201      	movs	r2, #1
 800206e:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8002070:	4b30      	ldr	r3, [pc, #192]	@ (8002134 <DMA1_Stream3_IRQHandler+0x164>)
 8002072:	2201      	movs	r2, #1
 8002074:	709a      	strb	r2, [r3, #2]
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002076:	4b30      	ldr	r3, [pc, #192]	@ (8002138 <DMA1_Stream3_IRQHandler+0x168>)
 8002078:	2201      	movs	r2, #1
 800207a:	709a      	strb	r2, [r3, #2]
		I2S2_RX_DMA_Flag.Transfer_Error_Flag = true;
 800207c:	4b2f      	ldr	r3, [pc, #188]	@ (800213c <DMA1_Stream3_IRQHandler+0x16c>)
 800207e:	2201      	movs	r2, #1
 8002080:	709a      	strb	r2, [r3, #2]
		SPI2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8002082:	4b2f      	ldr	r3, [pc, #188]	@ (8002140 <DMA1_Stream3_IRQHandler+0x170>)
 8002084:	2201      	movs	r2, #1
 8002086:	709a      	strb	r2, [r3, #2]
		DMA1_Stream3_Flag.Transfer_Error_Flag = true;
 8002088:	4b2e      	ldr	r3, [pc, #184]	@ (8002144 <DMA1_Stream3_IRQHandler+0x174>)
 800208a:	2201      	movs	r2, #1
 800208c:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 800208e:	4b26      	ldr	r3, [pc, #152]	@ (8002128 <DMA1_Stream3_IRQHandler+0x158>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	4a25      	ldr	r2, [pc, #148]	@ (8002128 <DMA1_Stream3_IRQHandler+0x158>)
 8002094:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002098:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF3)
 800209a:	4b23      	ldr	r3, [pc, #140]	@ (8002128 <DMA1_Stream3_IRQHandler+0x158>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01a      	beq.n	80020dc <DMA1_Stream3_IRQHandler+0x10c>
	{
		TIM5_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80020a6:	4b21      	ldr	r3, [pc, #132]	@ (800212c <DMA1_Stream3_IRQHandler+0x15c>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	705a      	strb	r2, [r3, #1]
		TIM4_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80020ac:	4b20      	ldr	r3, [pc, #128]	@ (8002130 <DMA1_Stream3_IRQHandler+0x160>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80020b2:	4b20      	ldr	r3, [pc, #128]	@ (8002134 <DMA1_Stream3_IRQHandler+0x164>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	705a      	strb	r2, [r3, #1]
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80020b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002138 <DMA1_Stream3_IRQHandler+0x168>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	705a      	strb	r2, [r3, #1]
		I2S2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80020be:	4b1f      	ldr	r3, [pc, #124]	@ (800213c <DMA1_Stream3_IRQHandler+0x16c>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	705a      	strb	r2, [r3, #1]
		SPI2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80020c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002140 <DMA1_Stream3_IRQHandler+0x170>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	705a      	strb	r2, [r3, #1]
		DMA1_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 80020ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002144 <DMA1_Stream3_IRQHandler+0x174>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 80020d0:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <DMA1_Stream3_IRQHandler+0x158>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a14      	ldr	r2, [pc, #80]	@ (8002128 <DMA1_Stream3_IRQHandler+0x158>)
 80020d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80020da:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF3)
 80020dc:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <DMA1_Stream3_IRQHandler+0x158>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01a      	beq.n	800211e <DMA1_Stream3_IRQHandler+0x14e>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 80020e8:	4b10      	ldr	r3, [pc, #64]	@ (800212c <DMA1_Stream3_IRQHandler+0x15c>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
		TIM4_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80020ee:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <DMA1_Stream3_IRQHandler+0x160>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002134 <DMA1_Stream3_IRQHandler+0x164>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80020fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002138 <DMA1_Stream3_IRQHandler+0x168>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
		I2S2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8002100:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <DMA1_Stream3_IRQHandler+0x16c>)
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
		SPI2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8002106:	4b0e      	ldr	r3, [pc, #56]	@ (8002140 <DMA1_Stream3_IRQHandler+0x170>)
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
 800210c:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <DMA1_Stream3_IRQHandler+0x174>)
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8002112:	4b05      	ldr	r3, [pc, #20]	@ (8002128 <DMA1_Stream3_IRQHandler+0x158>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a04      	ldr	r2, [pc, #16]	@ (8002128 <DMA1_Stream3_IRQHandler+0x158>)
 8002118:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800211c:	6093      	str	r3, [r2, #8]
	}
}
 800211e:	bf00      	nop
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	40026000 	.word	0x40026000
 800212c:	20000270 	.word	0x20000270
 8002130:	20000250 	.word	0x20000250
 8002134:	20000180 	.word	0x20000180
 8002138:	20000150 	.word	0x20000150
 800213c:	200000c0 	.word	0x200000c0
 8002140:	20000100 	.word	0x20000100
 8002144:	200002c8 	.word	0x200002c8

08002148 <DMA1_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream4_IRQHandler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF4)
 800214c:	4b54      	ldr	r3, [pc, #336]	@ (80022a0 <DMA1_Stream4_IRQHandler+0x158>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01a      	beq.n	800218e <DMA1_Stream4_IRQHandler+0x46>
	{
		TIM5_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8002158:	4b52      	ldr	r3, [pc, #328]	@ (80022a4 <DMA1_Stream4_IRQHandler+0x15c>)
 800215a:	2201      	movs	r2, #1
 800215c:	711a      	strb	r2, [r3, #4]
		TIM3_CH1_DMA_Flag.Fifo_Error_Flag = true;
 800215e:	4b52      	ldr	r3, [pc, #328]	@ (80022a8 <DMA1_Stream4_IRQHandler+0x160>)
 8002160:	2201      	movs	r2, #1
 8002162:	711a      	strb	r2, [r3, #4]
		USART4_TX_DMA_Flag.Fifo_Error_Flag = true;
 8002164:	4b51      	ldr	r3, [pc, #324]	@ (80022ac <DMA1_Stream4_IRQHandler+0x164>)
 8002166:	2201      	movs	r2, #1
 8002168:	711a      	strb	r2, [r3, #4]
		I2C3_TX_DMA_Flag.Fifo_Error_Flag = true;
 800216a:	4b51      	ldr	r3, [pc, #324]	@ (80022b0 <DMA1_Stream4_IRQHandler+0x168>)
 800216c:	2201      	movs	r2, #1
 800216e:	711a      	strb	r2, [r3, #4]
		I2S2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8002170:	4b50      	ldr	r3, [pc, #320]	@ (80022b4 <DMA1_Stream4_IRQHandler+0x16c>)
 8002172:	2201      	movs	r2, #1
 8002174:	711a      	strb	r2, [r3, #4]
		SPI2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8002176:	4b50      	ldr	r3, [pc, #320]	@ (80022b8 <DMA1_Stream4_IRQHandler+0x170>)
 8002178:	2201      	movs	r2, #1
 800217a:	711a      	strb	r2, [r3, #4]
		DMA1_Stream4_Flag.Fifo_Error_Flag = true;
 800217c:	4b4f      	ldr	r3, [pc, #316]	@ (80022bc <DMA1_Stream4_IRQHandler+0x174>)
 800217e:	2201      	movs	r2, #1
 8002180:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF4;
 8002182:	4b47      	ldr	r3, [pc, #284]	@ (80022a0 <DMA1_Stream4_IRQHandler+0x158>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	4a46      	ldr	r2, [pc, #280]	@ (80022a0 <DMA1_Stream4_IRQHandler+0x158>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF4)
 800218e:	4b44      	ldr	r3, [pc, #272]	@ (80022a0 <DMA1_Stream4_IRQHandler+0x158>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01a      	beq.n	80021d0 <DMA1_Stream4_IRQHandler+0x88>
	{
		TIM5_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800219a:	4b42      	ldr	r3, [pc, #264]	@ (80022a4 <DMA1_Stream4_IRQHandler+0x15c>)
 800219c:	2201      	movs	r2, #1
 800219e:	70da      	strb	r2, [r3, #3]
		TIM3_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 80021a0:	4b41      	ldr	r3, [pc, #260]	@ (80022a8 <DMA1_Stream4_IRQHandler+0x160>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	70da      	strb	r2, [r3, #3]
		USART4_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80021a6:	4b41      	ldr	r3, [pc, #260]	@ (80022ac <DMA1_Stream4_IRQHandler+0x164>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	70da      	strb	r2, [r3, #3]
		I2C3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80021ac:	4b40      	ldr	r3, [pc, #256]	@ (80022b0 <DMA1_Stream4_IRQHandler+0x168>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	70da      	strb	r2, [r3, #3]
		I2S2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80021b2:	4b40      	ldr	r3, [pc, #256]	@ (80022b4 <DMA1_Stream4_IRQHandler+0x16c>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	70da      	strb	r2, [r3, #3]
		SPI2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80021b8:	4b3f      	ldr	r3, [pc, #252]	@ (80022b8 <DMA1_Stream4_IRQHandler+0x170>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	70da      	strb	r2, [r3, #3]
		DMA1_Stream4_Flag.Direct_Mode_Error_Flag = true;
 80021be:	4b3f      	ldr	r3, [pc, #252]	@ (80022bc <DMA1_Stream4_IRQHandler+0x174>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80021c4:	4b36      	ldr	r3, [pc, #216]	@ (80022a0 <DMA1_Stream4_IRQHandler+0x158>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a35      	ldr	r2, [pc, #212]	@ (80022a0 <DMA1_Stream4_IRQHandler+0x158>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF4)
 80021d0:	4b33      	ldr	r3, [pc, #204]	@ (80022a0 <DMA1_Stream4_IRQHandler+0x158>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01a      	beq.n	8002212 <DMA1_Stream4_IRQHandler+0xca>
	{
		TIM5_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80021dc:	4b31      	ldr	r3, [pc, #196]	@ (80022a4 <DMA1_Stream4_IRQHandler+0x15c>)
 80021de:	2201      	movs	r2, #1
 80021e0:	709a      	strb	r2, [r3, #2]
		TIM3_CH1_DMA_Flag.Transfer_Error_Flag = true;
 80021e2:	4b31      	ldr	r3, [pc, #196]	@ (80022a8 <DMA1_Stream4_IRQHandler+0x160>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	709a      	strb	r2, [r3, #2]
		USART4_TX_DMA_Flag.Transfer_Error_Flag = true;
 80021e8:	4b30      	ldr	r3, [pc, #192]	@ (80022ac <DMA1_Stream4_IRQHandler+0x164>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	709a      	strb	r2, [r3, #2]
		I2C3_TX_DMA_Flag.Transfer_Error_Flag = true;
 80021ee:	4b30      	ldr	r3, [pc, #192]	@ (80022b0 <DMA1_Stream4_IRQHandler+0x168>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	709a      	strb	r2, [r3, #2]
		I2S2_TX_DMA_Flag.Transfer_Error_Flag = true;
 80021f4:	4b2f      	ldr	r3, [pc, #188]	@ (80022b4 <DMA1_Stream4_IRQHandler+0x16c>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	709a      	strb	r2, [r3, #2]
		SPI2_TX_DMA_Flag.Transfer_Error_Flag = true;
 80021fa:	4b2f      	ldr	r3, [pc, #188]	@ (80022b8 <DMA1_Stream4_IRQHandler+0x170>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	709a      	strb	r2, [r3, #2]
		DMA1_Stream4_Flag.Transfer_Error_Flag = true;
 8002200:	4b2e      	ldr	r3, [pc, #184]	@ (80022bc <DMA1_Stream4_IRQHandler+0x174>)
 8002202:	2201      	movs	r2, #1
 8002204:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8002206:	4b26      	ldr	r3, [pc, #152]	@ (80022a0 <DMA1_Stream4_IRQHandler+0x158>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	4a25      	ldr	r2, [pc, #148]	@ (80022a0 <DMA1_Stream4_IRQHandler+0x158>)
 800220c:	f043 0308 	orr.w	r3, r3, #8
 8002210:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF4)
 8002212:	4b23      	ldr	r3, [pc, #140]	@ (80022a0 <DMA1_Stream4_IRQHandler+0x158>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d01a      	beq.n	8002254 <DMA1_Stream4_IRQHandler+0x10c>
	{
		TIM5_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800221e:	4b21      	ldr	r3, [pc, #132]	@ (80022a4 <DMA1_Stream4_IRQHandler+0x15c>)
 8002220:	2201      	movs	r2, #1
 8002222:	705a      	strb	r2, [r3, #1]
		TIM3_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002224:	4b20      	ldr	r3, [pc, #128]	@ (80022a8 <DMA1_Stream4_IRQHandler+0x160>)
 8002226:	2201      	movs	r2, #1
 8002228:	705a      	strb	r2, [r3, #1]
		USART4_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800222a:	4b20      	ldr	r3, [pc, #128]	@ (80022ac <DMA1_Stream4_IRQHandler+0x164>)
 800222c:	2201      	movs	r2, #1
 800222e:	705a      	strb	r2, [r3, #1]
		I2C3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002230:	4b1f      	ldr	r3, [pc, #124]	@ (80022b0 <DMA1_Stream4_IRQHandler+0x168>)
 8002232:	2201      	movs	r2, #1
 8002234:	705a      	strb	r2, [r3, #1]
		I2S2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002236:	4b1f      	ldr	r3, [pc, #124]	@ (80022b4 <DMA1_Stream4_IRQHandler+0x16c>)
 8002238:	2201      	movs	r2, #1
 800223a:	705a      	strb	r2, [r3, #1]
		SPI2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800223c:	4b1e      	ldr	r3, [pc, #120]	@ (80022b8 <DMA1_Stream4_IRQHandler+0x170>)
 800223e:	2201      	movs	r2, #1
 8002240:	705a      	strb	r2, [r3, #1]
		DMA1_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 8002242:	4b1e      	ldr	r3, [pc, #120]	@ (80022bc <DMA1_Stream4_IRQHandler+0x174>)
 8002244:	2201      	movs	r2, #1
 8002246:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8002248:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <DMA1_Stream4_IRQHandler+0x158>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a14      	ldr	r2, [pc, #80]	@ (80022a0 <DMA1_Stream4_IRQHandler+0x158>)
 800224e:	f043 0310 	orr.w	r3, r3, #16
 8002252:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF4)
 8002254:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <DMA1_Stream4_IRQHandler+0x158>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01a      	beq.n	8002296 <DMA1_Stream4_IRQHandler+0x14e>
	{
		TIM5_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8002260:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <DMA1_Stream4_IRQHandler+0x15c>)
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
		TIM3_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8002266:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <DMA1_Stream4_IRQHandler+0x160>)
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
		USART4_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800226c:	4b0f      	ldr	r3, [pc, #60]	@ (80022ac <DMA1_Stream4_IRQHandler+0x164>)
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
		I2C3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8002272:	4b0f      	ldr	r3, [pc, #60]	@ (80022b0 <DMA1_Stream4_IRQHandler+0x168>)
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
		I2S2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8002278:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <DMA1_Stream4_IRQHandler+0x16c>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
		SPI2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800227e:	4b0e      	ldr	r3, [pc, #56]	@ (80022b8 <DMA1_Stream4_IRQHandler+0x170>)
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
 8002284:	4b0d      	ldr	r3, [pc, #52]	@ (80022bc <DMA1_Stream4_IRQHandler+0x174>)
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800228a:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <DMA1_Stream4_IRQHandler+0x158>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	4a04      	ldr	r2, [pc, #16]	@ (80022a0 <DMA1_Stream4_IRQHandler+0x158>)
 8002290:	f043 0320 	orr.w	r3, r3, #32
 8002294:	60d3      	str	r3, [r2, #12]
	}
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40026000 	.word	0x40026000
 80022a4:	20000260 	.word	0x20000260
 80022a8:	20000228 	.word	0x20000228
 80022ac:	20000158 	.word	0x20000158
 80022b0:	200000f0 	.word	0x200000f0
 80022b4:	200000c8 	.word	0x200000c8
 80022b8:	20000118 	.word	0x20000118
 80022bc:	200002d0 	.word	0x200002d0

080022c0 <DMA1_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream5_IRQHandler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF5)
 80022c4:	4b54      	ldr	r3, [pc, #336]	@ (8002418 <DMA1_Stream5_IRQHandler+0x158>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01a      	beq.n	8002306 <DMA1_Stream5_IRQHandler+0x46>
	{
		SPI3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80022d0:	4b52      	ldr	r3, [pc, #328]	@ (800241c <DMA1_Stream5_IRQHandler+0x15c>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	711a      	strb	r2, [r3, #4]
		TIM3_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 80022d6:	4b52      	ldr	r3, [pc, #328]	@ (8002420 <DMA1_Stream5_IRQHandler+0x160>)
 80022d8:	2201      	movs	r2, #1
 80022da:	711a      	strb	r2, [r3, #4]
		TIM2_CH1_DMA_Flag.Fifo_Error_Flag =  true;
 80022dc:	4b51      	ldr	r3, [pc, #324]	@ (8002424 <DMA1_Stream5_IRQHandler+0x164>)
 80022de:	2201      	movs	r2, #1
 80022e0:	711a      	strb	r2, [r3, #4]
		DAC2_DMA_Flag.Fifo_Error_Flag = true;
 80022e2:	4b51      	ldr	r3, [pc, #324]	@ (8002428 <DMA1_Stream5_IRQHandler+0x168>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	711a      	strb	r2, [r3, #4]
		TIM3_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80022e8:	4b50      	ldr	r3, [pc, #320]	@ (800242c <DMA1_Stream5_IRQHandler+0x16c>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	711a      	strb	r2, [r3, #4]
		USART2_RX_DMA_Flag.Fifo_Error_Flag = true;
 80022ee:	4b50      	ldr	r3, [pc, #320]	@ (8002430 <DMA1_Stream5_IRQHandler+0x170>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	711a      	strb	r2, [r3, #4]
		DMA1_Stream5_Flag.Fifo_Error_Flag = true;
 80022f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002434 <DMA1_Stream5_IRQHandler+0x174>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 80022fa:	4b47      	ldr	r3, [pc, #284]	@ (8002418 <DMA1_Stream5_IRQHandler+0x158>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	4a46      	ldr	r2, [pc, #280]	@ (8002418 <DMA1_Stream5_IRQHandler+0x158>)
 8002300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002304:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF5)
 8002306:	4b44      	ldr	r3, [pc, #272]	@ (8002418 <DMA1_Stream5_IRQHandler+0x158>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d01a      	beq.n	8002348 <DMA1_Stream5_IRQHandler+0x88>
	{
		SPI3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002312:	4b42      	ldr	r3, [pc, #264]	@ (800241c <DMA1_Stream5_IRQHandler+0x15c>)
 8002314:	2201      	movs	r2, #1
 8002316:	70da      	strb	r2, [r3, #3]
		TIM3_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002318:	4b41      	ldr	r3, [pc, #260]	@ (8002420 <DMA1_Stream5_IRQHandler+0x160>)
 800231a:	2201      	movs	r2, #1
 800231c:	70da      	strb	r2, [r3, #3]
		TIM2_CH1_DMA_Flag.Direct_Mode_Error_Flag =  true;
 800231e:	4b41      	ldr	r3, [pc, #260]	@ (8002424 <DMA1_Stream5_IRQHandler+0x164>)
 8002320:	2201      	movs	r2, #1
 8002322:	70da      	strb	r2, [r3, #3]
		DAC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002324:	4b40      	ldr	r3, [pc, #256]	@ (8002428 <DMA1_Stream5_IRQHandler+0x168>)
 8002326:	2201      	movs	r2, #1
 8002328:	70da      	strb	r2, [r3, #3]
		TIM3_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800232a:	4b40      	ldr	r3, [pc, #256]	@ (800242c <DMA1_Stream5_IRQHandler+0x16c>)
 800232c:	2201      	movs	r2, #1
 800232e:	70da      	strb	r2, [r3, #3]
		USART2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002330:	4b3f      	ldr	r3, [pc, #252]	@ (8002430 <DMA1_Stream5_IRQHandler+0x170>)
 8002332:	2201      	movs	r2, #1
 8002334:	70da      	strb	r2, [r3, #3]
		DMA1_Stream5_Flag.Direct_Mode_Error_Flag = true;
 8002336:	4b3f      	ldr	r3, [pc, #252]	@ (8002434 <DMA1_Stream5_IRQHandler+0x174>)
 8002338:	2201      	movs	r2, #1
 800233a:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 800233c:	4b36      	ldr	r3, [pc, #216]	@ (8002418 <DMA1_Stream5_IRQHandler+0x158>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a35      	ldr	r2, [pc, #212]	@ (8002418 <DMA1_Stream5_IRQHandler+0x158>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002346:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF5)
 8002348:	4b33      	ldr	r3, [pc, #204]	@ (8002418 <DMA1_Stream5_IRQHandler+0x158>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01a      	beq.n	800238a <DMA1_Stream5_IRQHandler+0xca>
	{
		SPI3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002354:	4b31      	ldr	r3, [pc, #196]	@ (800241c <DMA1_Stream5_IRQHandler+0x15c>)
 8002356:	2201      	movs	r2, #1
 8002358:	709a      	strb	r2, [r3, #2]
		TIM3_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 800235a:	4b31      	ldr	r3, [pc, #196]	@ (8002420 <DMA1_Stream5_IRQHandler+0x160>)
 800235c:	2201      	movs	r2, #1
 800235e:	709a      	strb	r2, [r3, #2]
		TIM2_CH1_DMA_Flag.Transfer_Error_Flag =  true;
 8002360:	4b30      	ldr	r3, [pc, #192]	@ (8002424 <DMA1_Stream5_IRQHandler+0x164>)
 8002362:	2201      	movs	r2, #1
 8002364:	709a      	strb	r2, [r3, #2]
		DAC2_DMA_Flag.Transfer_Error_Flag = true;
 8002366:	4b30      	ldr	r3, [pc, #192]	@ (8002428 <DMA1_Stream5_IRQHandler+0x168>)
 8002368:	2201      	movs	r2, #1
 800236a:	709a      	strb	r2, [r3, #2]
		TIM3_CH2_DMA_Flag.Transfer_Error_Flag = true;
 800236c:	4b2f      	ldr	r3, [pc, #188]	@ (800242c <DMA1_Stream5_IRQHandler+0x16c>)
 800236e:	2201      	movs	r2, #1
 8002370:	709a      	strb	r2, [r3, #2]
		USART2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8002372:	4b2f      	ldr	r3, [pc, #188]	@ (8002430 <DMA1_Stream5_IRQHandler+0x170>)
 8002374:	2201      	movs	r2, #1
 8002376:	709a      	strb	r2, [r3, #2]
		DMA1_Stream5_Flag.Transfer_Error_Flag = true;
 8002378:	4b2e      	ldr	r3, [pc, #184]	@ (8002434 <DMA1_Stream5_IRQHandler+0x174>)
 800237a:	2201      	movs	r2, #1
 800237c:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 800237e:	4b26      	ldr	r3, [pc, #152]	@ (8002418 <DMA1_Stream5_IRQHandler+0x158>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	4a25      	ldr	r2, [pc, #148]	@ (8002418 <DMA1_Stream5_IRQHandler+0x158>)
 8002384:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002388:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF5)
 800238a:	4b23      	ldr	r3, [pc, #140]	@ (8002418 <DMA1_Stream5_IRQHandler+0x158>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002392:	2b00      	cmp	r3, #0
 8002394:	d01a      	beq.n	80023cc <DMA1_Stream5_IRQHandler+0x10c>
	{
		SPI3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002396:	4b21      	ldr	r3, [pc, #132]	@ (800241c <DMA1_Stream5_IRQHandler+0x15c>)
 8002398:	2201      	movs	r2, #1
 800239a:	705a      	strb	r2, [r3, #1]
		TIM3_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800239c:	4b20      	ldr	r3, [pc, #128]	@ (8002420 <DMA1_Stream5_IRQHandler+0x160>)
 800239e:	2201      	movs	r2, #1
 80023a0:	705a      	strb	r2, [r3, #1]
		TIM2_CH1_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 80023a2:	4b20      	ldr	r3, [pc, #128]	@ (8002424 <DMA1_Stream5_IRQHandler+0x164>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	705a      	strb	r2, [r3, #1]
		DAC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80023a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002428 <DMA1_Stream5_IRQHandler+0x168>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	705a      	strb	r2, [r3, #1]
		TIM3_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80023ae:	4b1f      	ldr	r3, [pc, #124]	@ (800242c <DMA1_Stream5_IRQHandler+0x16c>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	705a      	strb	r2, [r3, #1]
		USART2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80023b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002430 <DMA1_Stream5_IRQHandler+0x170>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	705a      	strb	r2, [r3, #1]
		DMA1_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 80023ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002434 <DMA1_Stream5_IRQHandler+0x174>)
 80023bc:	2201      	movs	r2, #1
 80023be:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80023c0:	4b15      	ldr	r3, [pc, #84]	@ (8002418 <DMA1_Stream5_IRQHandler+0x158>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4a14      	ldr	r2, [pc, #80]	@ (8002418 <DMA1_Stream5_IRQHandler+0x158>)
 80023c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023ca:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF5)
 80023cc:	4b12      	ldr	r3, [pc, #72]	@ (8002418 <DMA1_Stream5_IRQHandler+0x158>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01a      	beq.n	800240e <DMA1_Stream5_IRQHandler+0x14e>
	{
		SPI3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80023d8:	4b10      	ldr	r3, [pc, #64]	@ (800241c <DMA1_Stream5_IRQHandler+0x15c>)
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
		TIM3_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 80023de:	4b10      	ldr	r3, [pc, #64]	@ (8002420 <DMA1_Stream5_IRQHandler+0x160>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
		TIM2_CH1_DMA_Flag.Transfer_Complete_Flag =  true;
 80023e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002424 <DMA1_Stream5_IRQHandler+0x164>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	701a      	strb	r2, [r3, #0]
		DAC2_DMA_Flag.Transfer_Complete_Flag = true;
 80023ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <DMA1_Stream5_IRQHandler+0x168>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
		TIM3_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80023f0:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <DMA1_Stream5_IRQHandler+0x16c>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
		USART2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <DMA1_Stream5_IRQHandler+0x170>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
 80023fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002434 <DMA1_Stream5_IRQHandler+0x174>)
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8002402:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <DMA1_Stream5_IRQHandler+0x158>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	4a04      	ldr	r2, [pc, #16]	@ (8002418 <DMA1_Stream5_IRQHandler+0x158>)
 8002408:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800240c:	60d3      	str	r3, [r2, #12]
	}
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	40026000 	.word	0x40026000
 800241c:	20000120 	.word	0x20000120
 8002420:	20000240 	.word	0x20000240
 8002424:	20000208 	.word	0x20000208
 8002428:	20000280 	.word	0x20000280
 800242c:	20000230 	.word	0x20000230
 8002430:	20000138 	.word	0x20000138
 8002434:	200002d8 	.word	0x200002d8

08002438 <DMA1_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream6_IRQHandler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF6)
 800243c:	4b47      	ldr	r3, [pc, #284]	@ (800255c <DMA1_Stream6_IRQHandler+0x124>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d017      	beq.n	8002478 <DMA1_Stream6_IRQHandler+0x40>
	{
		TIM3_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8002448:	4b45      	ldr	r3, [pc, #276]	@ (8002560 <DMA1_Stream6_IRQHandler+0x128>)
 800244a:	2201      	movs	r2, #1
 800244c:	711a      	strb	r2, [r3, #4]
		TIM2_UP_DMA_Flag.Fifo_Error_Flag = true;
 800244e:	4b45      	ldr	r3, [pc, #276]	@ (8002564 <DMA1_Stream6_IRQHandler+0x12c>)
 8002450:	2201      	movs	r2, #1
 8002452:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8002454:	4b44      	ldr	r3, [pc, #272]	@ (8002568 <DMA1_Stream6_IRQHandler+0x130>)
 8002456:	2201      	movs	r2, #1
 8002458:	711a      	strb	r2, [r3, #4]
		USART2_TX_DMA_Flag.Fifo_Error_Flag =  true;
 800245a:	4b44      	ldr	r3, [pc, #272]	@ (800256c <DMA1_Stream6_IRQHandler+0x134>)
 800245c:	2201      	movs	r2, #1
 800245e:	711a      	strb	r2, [r3, #4]
		I2C1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8002460:	4b43      	ldr	r3, [pc, #268]	@ (8002570 <DMA1_Stream6_IRQHandler+0x138>)
 8002462:	2201      	movs	r2, #1
 8002464:	711a      	strb	r2, [r3, #4]
		DMA1_Stream6_Flag.Fifo_Error_Flag = true;
 8002466:	4b43      	ldr	r3, [pc, #268]	@ (8002574 <DMA1_Stream6_IRQHandler+0x13c>)
 8002468:	2201      	movs	r2, #1
 800246a:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 800246c:	4b3b      	ldr	r3, [pc, #236]	@ (800255c <DMA1_Stream6_IRQHandler+0x124>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a3a      	ldr	r2, [pc, #232]	@ (800255c <DMA1_Stream6_IRQHandler+0x124>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002476:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF6)
 8002478:	4b38      	ldr	r3, [pc, #224]	@ (800255c <DMA1_Stream6_IRQHandler+0x124>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d014      	beq.n	80024ae <DMA1_Stream6_IRQHandler+0x76>
	{
		TIM2_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002484:	4b37      	ldr	r3, [pc, #220]	@ (8002564 <DMA1_Stream6_IRQHandler+0x12c>)
 8002486:	2201      	movs	r2, #1
 8002488:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800248a:	4b37      	ldr	r3, [pc, #220]	@ (8002568 <DMA1_Stream6_IRQHandler+0x130>)
 800248c:	2201      	movs	r2, #1
 800248e:	70da      	strb	r2, [r3, #3]
		USART2_TX_DMA_Flag.Direct_Mode_Error_Flag =  true;
 8002490:	4b36      	ldr	r3, [pc, #216]	@ (800256c <DMA1_Stream6_IRQHandler+0x134>)
 8002492:	2201      	movs	r2, #1
 8002494:	70da      	strb	r2, [r3, #3]
		I2C1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002496:	4b36      	ldr	r3, [pc, #216]	@ (8002570 <DMA1_Stream6_IRQHandler+0x138>)
 8002498:	2201      	movs	r2, #1
 800249a:	70da      	strb	r2, [r3, #3]
		DMA1_Stream6_Flag.Direct_Mode_Error_Flag = true;
 800249c:	4b35      	ldr	r3, [pc, #212]	@ (8002574 <DMA1_Stream6_IRQHandler+0x13c>)
 800249e:	2201      	movs	r2, #1
 80024a0:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80024a2:	4b2e      	ldr	r3, [pc, #184]	@ (800255c <DMA1_Stream6_IRQHandler+0x124>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	4a2d      	ldr	r2, [pc, #180]	@ (800255c <DMA1_Stream6_IRQHandler+0x124>)
 80024a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ac:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF6)
 80024ae:	4b2b      	ldr	r3, [pc, #172]	@ (800255c <DMA1_Stream6_IRQHandler+0x124>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d014      	beq.n	80024e4 <DMA1_Stream6_IRQHandler+0xac>
	{
		TIM2_UP_DMA_Flag.Transfer_Error_Flag = true;
 80024ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002564 <DMA1_Stream6_IRQHandler+0x12c>)
 80024bc:	2201      	movs	r2, #1
 80024be:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 80024c0:	4b29      	ldr	r3, [pc, #164]	@ (8002568 <DMA1_Stream6_IRQHandler+0x130>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	709a      	strb	r2, [r3, #2]
		USART2_TX_DMA_Flag.Transfer_Error_Flag =  true;
 80024c6:	4b29      	ldr	r3, [pc, #164]	@ (800256c <DMA1_Stream6_IRQHandler+0x134>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	709a      	strb	r2, [r3, #2]
		I2C1_TX_DMA_Flag.Transfer_Error_Flag = true;
 80024cc:	4b28      	ldr	r3, [pc, #160]	@ (8002570 <DMA1_Stream6_IRQHandler+0x138>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	709a      	strb	r2, [r3, #2]
		DMA1_Stream6_Flag.Transfer_Error_Flag = true;
 80024d2:	4b28      	ldr	r3, [pc, #160]	@ (8002574 <DMA1_Stream6_IRQHandler+0x13c>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 80024d8:	4b20      	ldr	r3, [pc, #128]	@ (800255c <DMA1_Stream6_IRQHandler+0x124>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4a1f      	ldr	r2, [pc, #124]	@ (800255c <DMA1_Stream6_IRQHandler+0x124>)
 80024de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80024e2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF6)
 80024e4:	4b1d      	ldr	r3, [pc, #116]	@ (800255c <DMA1_Stream6_IRQHandler+0x124>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d014      	beq.n	800251a <DMA1_Stream6_IRQHandler+0xe2>
	{
		TIM2_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80024f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002564 <DMA1_Stream6_IRQHandler+0x12c>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80024f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002568 <DMA1_Stream6_IRQHandler+0x130>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	705a      	strb	r2, [r3, #1]
		USART2_TX_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 80024fc:	4b1b      	ldr	r3, [pc, #108]	@ (800256c <DMA1_Stream6_IRQHandler+0x134>)
 80024fe:	2201      	movs	r2, #1
 8002500:	705a      	strb	r2, [r3, #1]
		I2C1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002502:	4b1b      	ldr	r3, [pc, #108]	@ (8002570 <DMA1_Stream6_IRQHandler+0x138>)
 8002504:	2201      	movs	r2, #1
 8002506:	705a      	strb	r2, [r3, #1]
		DMA1_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8002508:	4b1a      	ldr	r3, [pc, #104]	@ (8002574 <DMA1_Stream6_IRQHandler+0x13c>)
 800250a:	2201      	movs	r2, #1
 800250c:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 800250e:	4b13      	ldr	r3, [pc, #76]	@ (800255c <DMA1_Stream6_IRQHandler+0x124>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	4a12      	ldr	r2, [pc, #72]	@ (800255c <DMA1_Stream6_IRQHandler+0x124>)
 8002514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002518:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF6)
 800251a:	4b10      	ldr	r3, [pc, #64]	@ (800255c <DMA1_Stream6_IRQHandler+0x124>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d014      	beq.n	8002550 <DMA1_Stream6_IRQHandler+0x118>
	{
		TIM2_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8002526:	4b0f      	ldr	r3, [pc, #60]	@ (8002564 <DMA1_Stream6_IRQHandler+0x12c>)
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800252c:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <DMA1_Stream6_IRQHandler+0x130>)
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
		USART2_TX_DMA_Flag.Transfer_Complete_Flag =  true;
 8002532:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <DMA1_Stream6_IRQHandler+0x134>)
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
		I2C1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8002538:	4b0d      	ldr	r3, [pc, #52]	@ (8002570 <DMA1_Stream6_IRQHandler+0x138>)
 800253a:	2201      	movs	r2, #1
 800253c:	701a      	strb	r2, [r3, #0]
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
 800253e:	4b0d      	ldr	r3, [pc, #52]	@ (8002574 <DMA1_Stream6_IRQHandler+0x13c>)
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8002544:	4b05      	ldr	r3, [pc, #20]	@ (800255c <DMA1_Stream6_IRQHandler+0x124>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4a04      	ldr	r2, [pc, #16]	@ (800255c <DMA1_Stream6_IRQHandler+0x124>)
 800254a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800254e:	60d3      	str	r3, [r2, #12]
	}
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40026000 	.word	0x40026000
 8002560:	20000238 	.word	0x20000238
 8002564:	20000200 	.word	0x20000200
 8002568:	20000188 	.word	0x20000188
 800256c:	20000140 	.word	0x20000140
 8002570:	200000e0 	.word	0x200000e0
 8002574:	200002e0 	.word	0x200002e0

08002578 <DMA1_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream7_IRQHandler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF7)
 800257c:	4b54      	ldr	r3, [pc, #336]	@ (80026d0 <DMA1_Stream7_IRQHandler+0x158>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01a      	beq.n	80025be <DMA1_Stream7_IRQHandler+0x46>
	{
		I2S3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8002588:	4b52      	ldr	r3, [pc, #328]	@ (80026d4 <DMA1_Stream7_IRQHandler+0x15c>)
 800258a:	2201      	movs	r2, #1
 800258c:	711a      	strb	r2, [r3, #4]
		I2C2_TX_DMA_Flag.Fifo_Error_Flag = true;
 800258e:	4b52      	ldr	r3, [pc, #328]	@ (80026d8 <DMA1_Stream7_IRQHandler+0x160>)
 8002590:	2201      	movs	r2, #1
 8002592:	711a      	strb	r2, [r3, #4]
		USART5_TX_DMA_Flag.Fifo_Error_Flag = true;
 8002594:	4b51      	ldr	r3, [pc, #324]	@ (80026dc <DMA1_Stream7_IRQHandler+0x164>)
 8002596:	2201      	movs	r2, #1
 8002598:	711a      	strb	r2, [r3, #4]
		TIM4_CH3_DMA_Flag.Fifo_Error_Flag = true;
 800259a:	4b51      	ldr	r3, [pc, #324]	@ (80026e0 <DMA1_Stream7_IRQHandler+0x168>)
 800259c:	2201      	movs	r2, #1
 800259e:	711a      	strb	r2, [r3, #4]
		TIM2_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80025a0:	4b50      	ldr	r3, [pc, #320]	@ (80026e4 <DMA1_Stream7_IRQHandler+0x16c>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	711a      	strb	r2, [r3, #4]
		TIM2_CH4_DMA_Flag.Fifo_Error_Flag = true;
 80025a6:	4b50      	ldr	r3, [pc, #320]	@ (80026e8 <DMA1_Stream7_IRQHandler+0x170>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	711a      	strb	r2, [r3, #4]

		DMA1_Stream7_Flag.Fifo_Error_Flag = true;
 80025ac:	4b4f      	ldr	r3, [pc, #316]	@ (80026ec <DMA1_Stream7_IRQHandler+0x174>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80025b2:	4b47      	ldr	r3, [pc, #284]	@ (80026d0 <DMA1_Stream7_IRQHandler+0x158>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	4a46      	ldr	r2, [pc, #280]	@ (80026d0 <DMA1_Stream7_IRQHandler+0x158>)
 80025b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025bc:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF7)
 80025be:	4b44      	ldr	r3, [pc, #272]	@ (80026d0 <DMA1_Stream7_IRQHandler+0x158>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d01a      	beq.n	8002600 <DMA1_Stream7_IRQHandler+0x88>
	{
		I2S3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80025ca:	4b42      	ldr	r3, [pc, #264]	@ (80026d4 <DMA1_Stream7_IRQHandler+0x15c>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	70da      	strb	r2, [r3, #3]
		I2C2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80025d0:	4b41      	ldr	r3, [pc, #260]	@ (80026d8 <DMA1_Stream7_IRQHandler+0x160>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	70da      	strb	r2, [r3, #3]
		USART5_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80025d6:	4b41      	ldr	r3, [pc, #260]	@ (80026dc <DMA1_Stream7_IRQHandler+0x164>)
 80025d8:	2201      	movs	r2, #1
 80025da:	70da      	strb	r2, [r3, #3]
		TIM4_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 80025dc:	4b40      	ldr	r3, [pc, #256]	@ (80026e0 <DMA1_Stream7_IRQHandler+0x168>)
 80025de:	2201      	movs	r2, #1
 80025e0:	70da      	strb	r2, [r3, #3]
		TIM2_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80025e2:	4b40      	ldr	r3, [pc, #256]	@ (80026e4 <DMA1_Stream7_IRQHandler+0x16c>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	70da      	strb	r2, [r3, #3]
		TIM2_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 80025e8:	4b3f      	ldr	r3, [pc, #252]	@ (80026e8 <DMA1_Stream7_IRQHandler+0x170>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	70da      	strb	r2, [r3, #3]
		DMA1_Stream7_Flag.Direct_Mode_Error_Flag = true;
 80025ee:	4b3f      	ldr	r3, [pc, #252]	@ (80026ec <DMA1_Stream7_IRQHandler+0x174>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80025f4:	4b36      	ldr	r3, [pc, #216]	@ (80026d0 <DMA1_Stream7_IRQHandler+0x158>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a35      	ldr	r2, [pc, #212]	@ (80026d0 <DMA1_Stream7_IRQHandler+0x158>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025fe:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF7)
 8002600:	4b33      	ldr	r3, [pc, #204]	@ (80026d0 <DMA1_Stream7_IRQHandler+0x158>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01a      	beq.n	8002642 <DMA1_Stream7_IRQHandler+0xca>
	{
		I2S3_TX_DMA_Flag.Transfer_Error_Flag = true;
 800260c:	4b31      	ldr	r3, [pc, #196]	@ (80026d4 <DMA1_Stream7_IRQHandler+0x15c>)
 800260e:	2201      	movs	r2, #1
 8002610:	709a      	strb	r2, [r3, #2]
		I2C2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002612:	4b31      	ldr	r3, [pc, #196]	@ (80026d8 <DMA1_Stream7_IRQHandler+0x160>)
 8002614:	2201      	movs	r2, #1
 8002616:	709a      	strb	r2, [r3, #2]
		USART5_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002618:	4b30      	ldr	r3, [pc, #192]	@ (80026dc <DMA1_Stream7_IRQHandler+0x164>)
 800261a:	2201      	movs	r2, #1
 800261c:	709a      	strb	r2, [r3, #2]
		TIM4_CH3_DMA_Flag.Transfer_Error_Flag = true;
 800261e:	4b30      	ldr	r3, [pc, #192]	@ (80026e0 <DMA1_Stream7_IRQHandler+0x168>)
 8002620:	2201      	movs	r2, #1
 8002622:	709a      	strb	r2, [r3, #2]
		TIM2_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8002624:	4b2f      	ldr	r3, [pc, #188]	@ (80026e4 <DMA1_Stream7_IRQHandler+0x16c>)
 8002626:	2201      	movs	r2, #1
 8002628:	709a      	strb	r2, [r3, #2]
		TIM2_CH4_DMA_Flag.Transfer_Error_Flag = true;
 800262a:	4b2f      	ldr	r3, [pc, #188]	@ (80026e8 <DMA1_Stream7_IRQHandler+0x170>)
 800262c:	2201      	movs	r2, #1
 800262e:	709a      	strb	r2, [r3, #2]
		DMA1_Stream7_Flag.Transfer_Error_Flag = true;
 8002630:	4b2e      	ldr	r3, [pc, #184]	@ (80026ec <DMA1_Stream7_IRQHandler+0x174>)
 8002632:	2201      	movs	r2, #1
 8002634:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8002636:	4b26      	ldr	r3, [pc, #152]	@ (80026d0 <DMA1_Stream7_IRQHandler+0x158>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	4a25      	ldr	r2, [pc, #148]	@ (80026d0 <DMA1_Stream7_IRQHandler+0x158>)
 800263c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002640:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF7)
 8002642:	4b23      	ldr	r3, [pc, #140]	@ (80026d0 <DMA1_Stream7_IRQHandler+0x158>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01a      	beq.n	8002684 <DMA1_Stream7_IRQHandler+0x10c>
	{
		I2S3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800264e:	4b21      	ldr	r3, [pc, #132]	@ (80026d4 <DMA1_Stream7_IRQHandler+0x15c>)
 8002650:	2201      	movs	r2, #1
 8002652:	705a      	strb	r2, [r3, #1]
		I2C2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002654:	4b20      	ldr	r3, [pc, #128]	@ (80026d8 <DMA1_Stream7_IRQHandler+0x160>)
 8002656:	2201      	movs	r2, #1
 8002658:	705a      	strb	r2, [r3, #1]
		USART5_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800265a:	4b20      	ldr	r3, [pc, #128]	@ (80026dc <DMA1_Stream7_IRQHandler+0x164>)
 800265c:	2201      	movs	r2, #1
 800265e:	705a      	strb	r2, [r3, #1]
		TIM4_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002660:	4b1f      	ldr	r3, [pc, #124]	@ (80026e0 <DMA1_Stream7_IRQHandler+0x168>)
 8002662:	2201      	movs	r2, #1
 8002664:	705a      	strb	r2, [r3, #1]
		TIM2_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002666:	4b1f      	ldr	r3, [pc, #124]	@ (80026e4 <DMA1_Stream7_IRQHandler+0x16c>)
 8002668:	2201      	movs	r2, #1
 800266a:	705a      	strb	r2, [r3, #1]
		TIM2_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800266c:	4b1e      	ldr	r3, [pc, #120]	@ (80026e8 <DMA1_Stream7_IRQHandler+0x170>)
 800266e:	2201      	movs	r2, #1
 8002670:	705a      	strb	r2, [r3, #1]
		DMA1_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8002672:	4b1e      	ldr	r3, [pc, #120]	@ (80026ec <DMA1_Stream7_IRQHandler+0x174>)
 8002674:	2201      	movs	r2, #1
 8002676:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8002678:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <DMA1_Stream7_IRQHandler+0x158>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4a14      	ldr	r2, [pc, #80]	@ (80026d0 <DMA1_Stream7_IRQHandler+0x158>)
 800267e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002682:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF7)
 8002684:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <DMA1_Stream7_IRQHandler+0x158>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01a      	beq.n	80026c6 <DMA1_Stream7_IRQHandler+0x14e>
	{
		I2S3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8002690:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <DMA1_Stream7_IRQHandler+0x15c>)
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
		I2C2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8002696:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <DMA1_Stream7_IRQHandler+0x160>)
 8002698:	2201      	movs	r2, #1
 800269a:	701a      	strb	r2, [r3, #0]
		USART5_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800269c:	4b0f      	ldr	r3, [pc, #60]	@ (80026dc <DMA1_Stream7_IRQHandler+0x164>)
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
		TIM4_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 80026a2:	4b0f      	ldr	r3, [pc, #60]	@ (80026e0 <DMA1_Stream7_IRQHandler+0x168>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
		TIM2_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80026a8:	4b0e      	ldr	r3, [pc, #56]	@ (80026e4 <DMA1_Stream7_IRQHandler+0x16c>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
		TIM2_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	@ (80026e8 <DMA1_Stream7_IRQHandler+0x170>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
 80026b4:	4b0d      	ldr	r3, [pc, #52]	@ (80026ec <DMA1_Stream7_IRQHandler+0x174>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80026ba:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <DMA1_Stream7_IRQHandler+0x158>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	4a04      	ldr	r2, [pc, #16]	@ (80026d0 <DMA1_Stream7_IRQHandler+0x158>)
 80026c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80026c4:	60d3      	str	r3, [r2, #12]
	}
}
 80026c6:	bf00      	nop
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40026000 	.word	0x40026000
 80026d4:	200000d0 	.word	0x200000d0
 80026d8:	200000e8 	.word	0x200000e8
 80026dc:	20000168 	.word	0x20000168
 80026e0:	20000258 	.word	0x20000258
 80026e4:	20000210 	.word	0x20000210
 80026e8:	20000220 	.word	0x20000220
 80026ec:	200002e8 	.word	0x200002e8

080026f0 <DMA2_Stream0_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream0_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream0_IRQHandler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF0)
 80026f4:	4b45      	ldr	r3, [pc, #276]	@ (800280c <DMA2_Stream0_IRQHandler+0x11c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d014      	beq.n	800272a <DMA2_Stream0_IRQHandler+0x3a>
	{
		SPI1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8002700:	4b43      	ldr	r3, [pc, #268]	@ (8002810 <DMA2_Stream0_IRQHandler+0x120>)
 8002702:	2201      	movs	r2, #1
 8002704:	711a      	strb	r2, [r3, #4]
		ADC1_DMA_Flag.Fifo_Error_Flag = true;
 8002706:	4b43      	ldr	r3, [pc, #268]	@ (8002814 <DMA2_Stream0_IRQHandler+0x124>)
 8002708:	2201      	movs	r2, #1
 800270a:	711a      	strb	r2, [r3, #4]
		TIM1_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 800270c:	4b42      	ldr	r3, [pc, #264]	@ (8002818 <DMA2_Stream0_IRQHandler+0x128>)
 800270e:	2201      	movs	r2, #1
 8002710:	711a      	strb	r2, [r3, #4]
		TIM1_COM_DMA_Flag.Fifo_Error_Flag = true;
 8002712:	4b42      	ldr	r3, [pc, #264]	@ (800281c <DMA2_Stream0_IRQHandler+0x12c>)
 8002714:	2201      	movs	r2, #1
 8002716:	711a      	strb	r2, [r3, #4]
		DMA2_Stream0_Flag.Fifo_Error_Flag = true;
 8002718:	4b41      	ldr	r3, [pc, #260]	@ (8002820 <DMA2_Stream0_IRQHandler+0x130>)
 800271a:	2201      	movs	r2, #1
 800271c:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 800271e:	4b3b      	ldr	r3, [pc, #236]	@ (800280c <DMA2_Stream0_IRQHandler+0x11c>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	4a3a      	ldr	r2, [pc, #232]	@ (800280c <DMA2_Stream0_IRQHandler+0x11c>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF0)
 800272a:	4b38      	ldr	r3, [pc, #224]	@ (800280c <DMA2_Stream0_IRQHandler+0x11c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	d014      	beq.n	8002760 <DMA2_Stream0_IRQHandler+0x70>
	{
		SPI1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002736:	4b36      	ldr	r3, [pc, #216]	@ (8002810 <DMA2_Stream0_IRQHandler+0x120>)
 8002738:	2201      	movs	r2, #1
 800273a:	70da      	strb	r2, [r3, #3]
		ADC1_DMA_Flag.Direct_Mode_Error_Flag = true;
 800273c:	4b35      	ldr	r3, [pc, #212]	@ (8002814 <DMA2_Stream0_IRQHandler+0x124>)
 800273e:	2201      	movs	r2, #1
 8002740:	70da      	strb	r2, [r3, #3]
		TIM1_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002742:	4b35      	ldr	r3, [pc, #212]	@ (8002818 <DMA2_Stream0_IRQHandler+0x128>)
 8002744:	2201      	movs	r2, #1
 8002746:	70da      	strb	r2, [r3, #3]
		TIM1_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002748:	4b34      	ldr	r3, [pc, #208]	@ (800281c <DMA2_Stream0_IRQHandler+0x12c>)
 800274a:	2201      	movs	r2, #1
 800274c:	70da      	strb	r2, [r3, #3]
		DMA2_Stream0_Flag.Direct_Mode_Error_Flag = true;
 800274e:	4b34      	ldr	r3, [pc, #208]	@ (8002820 <DMA2_Stream0_IRQHandler+0x130>)
 8002750:	2201      	movs	r2, #1
 8002752:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8002754:	4b2d      	ldr	r3, [pc, #180]	@ (800280c <DMA2_Stream0_IRQHandler+0x11c>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	4a2c      	ldr	r2, [pc, #176]	@ (800280c <DMA2_Stream0_IRQHandler+0x11c>)
 800275a:	f043 0304 	orr.w	r3, r3, #4
 800275e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF0)
 8002760:	4b2a      	ldr	r3, [pc, #168]	@ (800280c <DMA2_Stream0_IRQHandler+0x11c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d014      	beq.n	8002796 <DMA2_Stream0_IRQHandler+0xa6>
	{
		SPI1_RX_DMA_Flag.Transfer_Error_Flag = true;
 800276c:	4b28      	ldr	r3, [pc, #160]	@ (8002810 <DMA2_Stream0_IRQHandler+0x120>)
 800276e:	2201      	movs	r2, #1
 8002770:	709a      	strb	r2, [r3, #2]
		ADC1_DMA_Flag.Transfer_Error_Flag = true;
 8002772:	4b28      	ldr	r3, [pc, #160]	@ (8002814 <DMA2_Stream0_IRQHandler+0x124>)
 8002774:	2201      	movs	r2, #1
 8002776:	709a      	strb	r2, [r3, #2]
		TIM1_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8002778:	4b27      	ldr	r3, [pc, #156]	@ (8002818 <DMA2_Stream0_IRQHandler+0x128>)
 800277a:	2201      	movs	r2, #1
 800277c:	709a      	strb	r2, [r3, #2]
		TIM1_COM_DMA_Flag.Transfer_Error_Flag = true;
 800277e:	4b27      	ldr	r3, [pc, #156]	@ (800281c <DMA2_Stream0_IRQHandler+0x12c>)
 8002780:	2201      	movs	r2, #1
 8002782:	709a      	strb	r2, [r3, #2]
		DMA2_Stream0_Flag.Transfer_Error_Flag = true;
 8002784:	4b26      	ldr	r3, [pc, #152]	@ (8002820 <DMA2_Stream0_IRQHandler+0x130>)
 8002786:	2201      	movs	r2, #1
 8002788:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 800278a:	4b20      	ldr	r3, [pc, #128]	@ (800280c <DMA2_Stream0_IRQHandler+0x11c>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	4a1f      	ldr	r2, [pc, #124]	@ (800280c <DMA2_Stream0_IRQHandler+0x11c>)
 8002790:	f043 0308 	orr.w	r3, r3, #8
 8002794:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF0)
 8002796:	4b1d      	ldr	r3, [pc, #116]	@ (800280c <DMA2_Stream0_IRQHandler+0x11c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d014      	beq.n	80027cc <DMA2_Stream0_IRQHandler+0xdc>
	{
		SPI1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80027a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <DMA2_Stream0_IRQHandler+0x120>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	705a      	strb	r2, [r3, #1]
		ADC1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80027a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002814 <DMA2_Stream0_IRQHandler+0x124>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	705a      	strb	r2, [r3, #1]
		TIM1_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80027ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002818 <DMA2_Stream0_IRQHandler+0x128>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	705a      	strb	r2, [r3, #1]
		TIM1_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80027b4:	4b19      	ldr	r3, [pc, #100]	@ (800281c <DMA2_Stream0_IRQHandler+0x12c>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	705a      	strb	r2, [r3, #1]
		DMA2_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 80027ba:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <DMA2_Stream0_IRQHandler+0x130>)
 80027bc:	2201      	movs	r2, #1
 80027be:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 80027c0:	4b12      	ldr	r3, [pc, #72]	@ (800280c <DMA2_Stream0_IRQHandler+0x11c>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4a11      	ldr	r2, [pc, #68]	@ (800280c <DMA2_Stream0_IRQHandler+0x11c>)
 80027c6:	f043 0310 	orr.w	r3, r3, #16
 80027ca:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF0)
 80027cc:	4b0f      	ldr	r3, [pc, #60]	@ (800280c <DMA2_Stream0_IRQHandler+0x11c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d014      	beq.n	8002802 <DMA2_Stream0_IRQHandler+0x112>
	{
		SPI1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80027d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002810 <DMA2_Stream0_IRQHandler+0x120>)
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
		ADC1_DMA_Flag.Transfer_Complete_Flag = true;
 80027de:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <DMA2_Stream0_IRQHandler+0x124>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
		TIM1_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 80027e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <DMA2_Stream0_IRQHandler+0x128>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
		TIM1_COM_DMA_Flag.Transfer_Complete_Flag = true;
 80027ea:	4b0c      	ldr	r3, [pc, #48]	@ (800281c <DMA2_Stream0_IRQHandler+0x12c>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
 80027f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <DMA2_Stream0_IRQHandler+0x130>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 80027f6:	4b05      	ldr	r3, [pc, #20]	@ (800280c <DMA2_Stream0_IRQHandler+0x11c>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	4a04      	ldr	r2, [pc, #16]	@ (800280c <DMA2_Stream0_IRQHandler+0x11c>)
 80027fc:	f043 0320 	orr.w	r3, r3, #32
 8002800:	6093      	str	r3, [r2, #8]
	}
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	40026400 	.word	0x40026400
 8002810:	200000f8 	.word	0x200000f8
 8002814:	20000298 	.word	0x20000298
 8002818:	200001b8 	.word	0x200001b8
 800281c:	200001c0 	.word	0x200001c0
 8002820:	200002f0 	.word	0x200002f0

08002824 <DMA2_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream1_IRQHandler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF1)
 8002828:	4b5c      	ldr	r3, [pc, #368]	@ (800299c <DMA2_Stream1_IRQHandler+0x178>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01d      	beq.n	8002870 <DMA2_Stream1_IRQHandler+0x4c>
	{
		ADC3_DMA_Flag.Fifo_Error_Flag = true;
 8002834:	4b5a      	ldr	r3, [pc, #360]	@ (80029a0 <DMA2_Stream1_IRQHandler+0x17c>)
 8002836:	2201      	movs	r2, #1
 8002838:	711a      	strb	r2, [r3, #4]
		TIM1_CH1_DMA_Flag.Fifo_Error_Flag = true;
 800283a:	4b5a      	ldr	r3, [pc, #360]	@ (80029a4 <DMA2_Stream1_IRQHandler+0x180>)
 800283c:	2201      	movs	r2, #1
 800283e:	711a      	strb	r2, [r3, #4]
		TIM8_UP_DMA_Flag.Fifo_Error_Flag = true;
 8002840:	4b59      	ldr	r3, [pc, #356]	@ (80029a8 <DMA2_Stream1_IRQHandler+0x184>)
 8002842:	2201      	movs	r2, #1
 8002844:	711a      	strb	r2, [r3, #4]
		TIM8_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8002846:	4b59      	ldr	r3, [pc, #356]	@ (80029ac <DMA2_Stream1_IRQHandler+0x188>)
 8002848:	2201      	movs	r2, #1
 800284a:	711a      	strb	r2, [r3, #4]
		TIM8_COM_DMA_Flag.Fifo_Error_Flag = true;
 800284c:	4b58      	ldr	r3, [pc, #352]	@ (80029b0 <DMA2_Stream1_IRQHandler+0x18c>)
 800284e:	2201      	movs	r2, #1
 8002850:	711a      	strb	r2, [r3, #4]
		DCMI_DMA_Flag.Fifo_Error_Flag = true;
 8002852:	4b58      	ldr	r3, [pc, #352]	@ (80029b4 <DMA2_Stream1_IRQHandler+0x190>)
 8002854:	2201      	movs	r2, #1
 8002856:	711a      	strb	r2, [r3, #4]
		USART6_RX_DMA_Flag.Fifo_Error_Flag = true;
 8002858:	4b57      	ldr	r3, [pc, #348]	@ (80029b8 <DMA2_Stream1_IRQHandler+0x194>)
 800285a:	2201      	movs	r2, #1
 800285c:	711a      	strb	r2, [r3, #4]
		DMA2_Stream1_Flag.Fifo_Error_Flag = true;
 800285e:	4b57      	ldr	r3, [pc, #348]	@ (80029bc <DMA2_Stream1_IRQHandler+0x198>)
 8002860:	2201      	movs	r2, #1
 8002862:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8002864:	4b4d      	ldr	r3, [pc, #308]	@ (800299c <DMA2_Stream1_IRQHandler+0x178>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	4a4c      	ldr	r2, [pc, #304]	@ (800299c <DMA2_Stream1_IRQHandler+0x178>)
 800286a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800286e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF1)
 8002870:	4b4a      	ldr	r3, [pc, #296]	@ (800299c <DMA2_Stream1_IRQHandler+0x178>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d01d      	beq.n	80028b8 <DMA2_Stream1_IRQHandler+0x94>
	{
		ADC3_DMA_Flag.Direct_Mode_Error_Flag = true;
 800287c:	4b48      	ldr	r3, [pc, #288]	@ (80029a0 <DMA2_Stream1_IRQHandler+0x17c>)
 800287e:	2201      	movs	r2, #1
 8002880:	70da      	strb	r2, [r3, #3]
		TIM1_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002882:	4b48      	ldr	r3, [pc, #288]	@ (80029a4 <DMA2_Stream1_IRQHandler+0x180>)
 8002884:	2201      	movs	r2, #1
 8002886:	70da      	strb	r2, [r3, #3]
		TIM8_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002888:	4b47      	ldr	r3, [pc, #284]	@ (80029a8 <DMA2_Stream1_IRQHandler+0x184>)
 800288a:	2201      	movs	r2, #1
 800288c:	70da      	strb	r2, [r3, #3]
		TIM8_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 800288e:	4b47      	ldr	r3, [pc, #284]	@ (80029ac <DMA2_Stream1_IRQHandler+0x188>)
 8002890:	2201      	movs	r2, #1
 8002892:	70da      	strb	r2, [r3, #3]
		TIM8_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002894:	4b46      	ldr	r3, [pc, #280]	@ (80029b0 <DMA2_Stream1_IRQHandler+0x18c>)
 8002896:	2201      	movs	r2, #1
 8002898:	70da      	strb	r2, [r3, #3]
		DCMI_DMA_Flag.Direct_Mode_Error_Flag = true;
 800289a:	4b46      	ldr	r3, [pc, #280]	@ (80029b4 <DMA2_Stream1_IRQHandler+0x190>)
 800289c:	2201      	movs	r2, #1
 800289e:	70da      	strb	r2, [r3, #3]
		USART6_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80028a0:	4b45      	ldr	r3, [pc, #276]	@ (80029b8 <DMA2_Stream1_IRQHandler+0x194>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	70da      	strb	r2, [r3, #3]
		DMA2_Stream1_Flag.Direct_Mode_Error_Flag = true;
 80028a6:	4b45      	ldr	r3, [pc, #276]	@ (80029bc <DMA2_Stream1_IRQHandler+0x198>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80028ac:	4b3b      	ldr	r3, [pc, #236]	@ (800299c <DMA2_Stream1_IRQHandler+0x178>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4a3a      	ldr	r2, [pc, #232]	@ (800299c <DMA2_Stream1_IRQHandler+0x178>)
 80028b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF1)
 80028b8:	4b38      	ldr	r3, [pc, #224]	@ (800299c <DMA2_Stream1_IRQHandler+0x178>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01d      	beq.n	8002900 <DMA2_Stream1_IRQHandler+0xdc>
	{
		ADC3_DMA_Flag.Transfer_Error_Flag = true;
 80028c4:	4b36      	ldr	r3, [pc, #216]	@ (80029a0 <DMA2_Stream1_IRQHandler+0x17c>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	709a      	strb	r2, [r3, #2]
		TIM1_CH1_DMA_Flag.Transfer_Error_Flag = true;
 80028ca:	4b36      	ldr	r3, [pc, #216]	@ (80029a4 <DMA2_Stream1_IRQHandler+0x180>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	709a      	strb	r2, [r3, #2]
		TIM8_UP_DMA_Flag.Transfer_Error_Flag = true;
 80028d0:	4b35      	ldr	r3, [pc, #212]	@ (80029a8 <DMA2_Stream1_IRQHandler+0x184>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	709a      	strb	r2, [r3, #2]
		TIM8_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 80028d6:	4b35      	ldr	r3, [pc, #212]	@ (80029ac <DMA2_Stream1_IRQHandler+0x188>)
 80028d8:	2201      	movs	r2, #1
 80028da:	709a      	strb	r2, [r3, #2]
		TIM8_COM_DMA_Flag.Transfer_Error_Flag = true;
 80028dc:	4b34      	ldr	r3, [pc, #208]	@ (80029b0 <DMA2_Stream1_IRQHandler+0x18c>)
 80028de:	2201      	movs	r2, #1
 80028e0:	709a      	strb	r2, [r3, #2]
		DCMI_DMA_Flag.Transfer_Error_Flag = true;
 80028e2:	4b34      	ldr	r3, [pc, #208]	@ (80029b4 <DMA2_Stream1_IRQHandler+0x190>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	709a      	strb	r2, [r3, #2]
		USART6_RX_DMA_Flag.Transfer_Error_Flag = true;
 80028e8:	4b33      	ldr	r3, [pc, #204]	@ (80029b8 <DMA2_Stream1_IRQHandler+0x194>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	709a      	strb	r2, [r3, #2]
		DMA2_Stream1_Flag.Transfer_Error_Flag = true;
 80028ee:	4b33      	ldr	r3, [pc, #204]	@ (80029bc <DMA2_Stream1_IRQHandler+0x198>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 80028f4:	4b29      	ldr	r3, [pc, #164]	@ (800299c <DMA2_Stream1_IRQHandler+0x178>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	4a28      	ldr	r2, [pc, #160]	@ (800299c <DMA2_Stream1_IRQHandler+0x178>)
 80028fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028fe:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF1)
 8002900:	4b26      	ldr	r3, [pc, #152]	@ (800299c <DMA2_Stream1_IRQHandler+0x178>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01d      	beq.n	8002948 <DMA2_Stream1_IRQHandler+0x124>
	{
		ADC3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800290c:	4b24      	ldr	r3, [pc, #144]	@ (80029a0 <DMA2_Stream1_IRQHandler+0x17c>)
 800290e:	2201      	movs	r2, #1
 8002910:	705a      	strb	r2, [r3, #1]
		TIM1_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002912:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <DMA2_Stream1_IRQHandler+0x180>)
 8002914:	2201      	movs	r2, #1
 8002916:	705a      	strb	r2, [r3, #1]
		TIM8_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002918:	4b23      	ldr	r3, [pc, #140]	@ (80029a8 <DMA2_Stream1_IRQHandler+0x184>)
 800291a:	2201      	movs	r2, #1
 800291c:	705a      	strb	r2, [r3, #1]
		TIM8_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800291e:	4b23      	ldr	r3, [pc, #140]	@ (80029ac <DMA2_Stream1_IRQHandler+0x188>)
 8002920:	2201      	movs	r2, #1
 8002922:	705a      	strb	r2, [r3, #1]
		TIM8_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002924:	4b22      	ldr	r3, [pc, #136]	@ (80029b0 <DMA2_Stream1_IRQHandler+0x18c>)
 8002926:	2201      	movs	r2, #1
 8002928:	705a      	strb	r2, [r3, #1]
		DCMI_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800292a:	4b22      	ldr	r3, [pc, #136]	@ (80029b4 <DMA2_Stream1_IRQHandler+0x190>)
 800292c:	2201      	movs	r2, #1
 800292e:	705a      	strb	r2, [r3, #1]
		USART6_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002930:	4b21      	ldr	r3, [pc, #132]	@ (80029b8 <DMA2_Stream1_IRQHandler+0x194>)
 8002932:	2201      	movs	r2, #1
 8002934:	705a      	strb	r2, [r3, #1]
		DMA2_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8002936:	4b21      	ldr	r3, [pc, #132]	@ (80029bc <DMA2_Stream1_IRQHandler+0x198>)
 8002938:	2201      	movs	r2, #1
 800293a:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 800293c:	4b17      	ldr	r3, [pc, #92]	@ (800299c <DMA2_Stream1_IRQHandler+0x178>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a16      	ldr	r2, [pc, #88]	@ (800299c <DMA2_Stream1_IRQHandler+0x178>)
 8002942:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002946:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF1)
 8002948:	4b14      	ldr	r3, [pc, #80]	@ (800299c <DMA2_Stream1_IRQHandler+0x178>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01d      	beq.n	8002990 <DMA2_Stream1_IRQHandler+0x16c>
	{
		ADC3_DMA_Flag.Transfer_Complete_Flag = true;
 8002954:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <DMA2_Stream1_IRQHandler+0x17c>)
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
		TIM1_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 800295a:	4b12      	ldr	r3, [pc, #72]	@ (80029a4 <DMA2_Stream1_IRQHandler+0x180>)
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
		TIM8_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8002960:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <DMA2_Stream1_IRQHandler+0x184>)
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
		TIM8_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8002966:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <DMA2_Stream1_IRQHandler+0x188>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
		TIM8_COM_DMA_Flag.Transfer_Complete_Flag = true;
 800296c:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <DMA2_Stream1_IRQHandler+0x18c>)
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
		DCMI_DMA_Flag.Transfer_Complete_Flag = true;
 8002972:	4b10      	ldr	r3, [pc, #64]	@ (80029b4 <DMA2_Stream1_IRQHandler+0x190>)
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
		USART6_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8002978:	4b0f      	ldr	r3, [pc, #60]	@ (80029b8 <DMA2_Stream1_IRQHandler+0x194>)
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
 800297e:	4b0f      	ldr	r3, [pc, #60]	@ (80029bc <DMA2_Stream1_IRQHandler+0x198>)
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <DMA2_Stream1_IRQHandler+0x178>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a04      	ldr	r2, [pc, #16]	@ (800299c <DMA2_Stream1_IRQHandler+0x178>)
 800298a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800298e:	6093      	str	r3, [r2, #8]
	}
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40026400 	.word	0x40026400
 80029a0:	200002a8 	.word	0x200002a8
 80029a4:	20000198 	.word	0x20000198
 80029a8:	200001c8 	.word	0x200001c8
 80029ac:	200001f0 	.word	0x200001f0
 80029b0:	200001f8 	.word	0x200001f8
 80029b4:	20000290 	.word	0x20000290
 80029b8:	20000170 	.word	0x20000170
 80029bc:	200002f8 	.word	0x200002f8

080029c0 <DMA2_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream2_IRQHandler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF2)
 80029c4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ac0 <DMA2_Stream2_IRQHandler+0x100>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d011      	beq.n	80029f4 <DMA2_Stream2_IRQHandler+0x34>
	{
		TIM8_CH1_DMA_Flag.Fifo_Error_Flag = true;
 80029d0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ac4 <DMA2_Stream2_IRQHandler+0x104>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	711a      	strb	r2, [r3, #4]
		USART1_RX_DMA_Flag.Fifo_Error_Flag = true;
 80029d6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ac8 <DMA2_Stream2_IRQHandler+0x108>)
 80029d8:	2201      	movs	r2, #1
 80029da:	711a      	strb	r2, [r3, #4]
		ADC2_DMA_Flag.Fifo_Error_Flag = true;
 80029dc:	4b3b      	ldr	r3, [pc, #236]	@ (8002acc <DMA2_Stream2_IRQHandler+0x10c>)
 80029de:	2201      	movs	r2, #1
 80029e0:	711a      	strb	r2, [r3, #4]
		DMA2_Stream2_Flag.Fifo_Error_Flag = true;
 80029e2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad0 <DMA2_Stream2_IRQHandler+0x110>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80029e8:	4b35      	ldr	r3, [pc, #212]	@ (8002ac0 <DMA2_Stream2_IRQHandler+0x100>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a34      	ldr	r2, [pc, #208]	@ (8002ac0 <DMA2_Stream2_IRQHandler+0x100>)
 80029ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF2)
 80029f4:	4b32      	ldr	r3, [pc, #200]	@ (8002ac0 <DMA2_Stream2_IRQHandler+0x100>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d011      	beq.n	8002a24 <DMA2_Stream2_IRQHandler+0x64>
	{
		TIM8_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002a00:	4b30      	ldr	r3, [pc, #192]	@ (8002ac4 <DMA2_Stream2_IRQHandler+0x104>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	70da      	strb	r2, [r3, #3]
		USART1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002a06:	4b30      	ldr	r3, [pc, #192]	@ (8002ac8 <DMA2_Stream2_IRQHandler+0x108>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	70da      	strb	r2, [r3, #3]
		ADC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002a0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002acc <DMA2_Stream2_IRQHandler+0x10c>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	70da      	strb	r2, [r3, #3]
		DMA2_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8002a12:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad0 <DMA2_Stream2_IRQHandler+0x110>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8002a18:	4b29      	ldr	r3, [pc, #164]	@ (8002ac0 <DMA2_Stream2_IRQHandler+0x100>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	4a28      	ldr	r2, [pc, #160]	@ (8002ac0 <DMA2_Stream2_IRQHandler+0x100>)
 8002a1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a22:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF2)
 8002a24:	4b26      	ldr	r3, [pc, #152]	@ (8002ac0 <DMA2_Stream2_IRQHandler+0x100>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <DMA2_Stream2_IRQHandler+0x94>
	{
		TIM8_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8002a30:	4b24      	ldr	r3, [pc, #144]	@ (8002ac4 <DMA2_Stream2_IRQHandler+0x104>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	709a      	strb	r2, [r3, #2]
		USART1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8002a36:	4b24      	ldr	r3, [pc, #144]	@ (8002ac8 <DMA2_Stream2_IRQHandler+0x108>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	709a      	strb	r2, [r3, #2]
		ADC2_DMA_Flag.Transfer_Error_Flag = true;
 8002a3c:	4b23      	ldr	r3, [pc, #140]	@ (8002acc <DMA2_Stream2_IRQHandler+0x10c>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	709a      	strb	r2, [r3, #2]
		DMA2_Stream2_Flag.Transfer_Error_Flag = true;
 8002a42:	4b23      	ldr	r3, [pc, #140]	@ (8002ad0 <DMA2_Stream2_IRQHandler+0x110>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8002a48:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac0 <DMA2_Stream2_IRQHandler+0x100>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ac0 <DMA2_Stream2_IRQHandler+0x100>)
 8002a4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002a52:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF2)
 8002a54:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac0 <DMA2_Stream2_IRQHandler+0x100>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d011      	beq.n	8002a84 <DMA2_Stream2_IRQHandler+0xc4>
	{
		TIM8_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002a60:	4b18      	ldr	r3, [pc, #96]	@ (8002ac4 <DMA2_Stream2_IRQHandler+0x104>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	705a      	strb	r2, [r3, #1]
		USART1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002a66:	4b18      	ldr	r3, [pc, #96]	@ (8002ac8 <DMA2_Stream2_IRQHandler+0x108>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	705a      	strb	r2, [r3, #1]
		ADC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002a6c:	4b17      	ldr	r3, [pc, #92]	@ (8002acc <DMA2_Stream2_IRQHandler+0x10c>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	705a      	strb	r2, [r3, #1]
		DMA2_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8002a72:	4b17      	ldr	r3, [pc, #92]	@ (8002ad0 <DMA2_Stream2_IRQHandler+0x110>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8002a78:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <DMA2_Stream2_IRQHandler+0x100>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a10      	ldr	r2, [pc, #64]	@ (8002ac0 <DMA2_Stream2_IRQHandler+0x100>)
 8002a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a82:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF2)
 8002a84:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac0 <DMA2_Stream2_IRQHandler+0x100>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d011      	beq.n	8002ab4 <DMA2_Stream2_IRQHandler+0xf4>
	{
		TIM8_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8002a90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <DMA2_Stream2_IRQHandler+0x104>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]
		USART1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8002a96:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <DMA2_Stream2_IRQHandler+0x108>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
		ADC2_DMA_Flag.Transfer_Complete_Flag = true;
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002acc <DMA2_Stream2_IRQHandler+0x10c>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <DMA2_Stream2_IRQHandler+0x110>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8002aa8:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <DMA2_Stream2_IRQHandler+0x100>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a04      	ldr	r2, [pc, #16]	@ (8002ac0 <DMA2_Stream2_IRQHandler+0x100>)
 8002aae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ab2:	6093      	str	r3, [r2, #8]
	}
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40026400 	.word	0x40026400
 8002ac4:	200001d0 	.word	0x200001d0
 8002ac8:	20000128 	.word	0x20000128
 8002acc:	200002a0 	.word	0x200002a0
 8002ad0:	20000300 	.word	0x20000300

08002ad4 <DMA2_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream3_IRQHandler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF3)
 8002ad8:	4b36      	ldr	r3, [pc, #216]	@ (8002bb4 <DMA2_Stream3_IRQHandler+0xe0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00e      	beq.n	8002b02 <DMA2_Stream3_IRQHandler+0x2e>
	{
		SDIO_RXTX_DMA_Flag.Fifo_Error_Flag = true;
 8002ae4:	4b34      	ldr	r3, [pc, #208]	@ (8002bb8 <DMA2_Stream3_IRQHandler+0xe4>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	711a      	strb	r2, [r3, #4]
		SPI1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8002aea:	4b34      	ldr	r3, [pc, #208]	@ (8002bbc <DMA2_Stream3_IRQHandler+0xe8>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	711a      	strb	r2, [r3, #4]
		DMA2_Stream3_Flag.Fifo_Error_Flag = true;
 8002af0:	4b33      	ldr	r3, [pc, #204]	@ (8002bc0 <DMA2_Stream3_IRQHandler+0xec>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8002af6:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb4 <DMA2_Stream3_IRQHandler+0xe0>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	4a2e      	ldr	r2, [pc, #184]	@ (8002bb4 <DMA2_Stream3_IRQHandler+0xe0>)
 8002afc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b00:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF3)
 8002b02:	4b2c      	ldr	r3, [pc, #176]	@ (8002bb4 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00e      	beq.n	8002b2c <DMA2_Stream3_IRQHandler+0x58>
	{
		SDIO_RXTX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb8 <DMA2_Stream3_IRQHandler+0xe4>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	70da      	strb	r2, [r3, #3]
		SPI1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002b14:	4b29      	ldr	r3, [pc, #164]	@ (8002bbc <DMA2_Stream3_IRQHandler+0xe8>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	70da      	strb	r2, [r3, #3]
		DMA2_Stream3_Flag.Direct_Mode_Error_Flag = true;
 8002b1a:	4b29      	ldr	r3, [pc, #164]	@ (8002bc0 <DMA2_Stream3_IRQHandler+0xec>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8002b20:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a23      	ldr	r2, [pc, #140]	@ (8002bb4 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b2a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF3)
 8002b2c:	4b21      	ldr	r3, [pc, #132]	@ (8002bb4 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00e      	beq.n	8002b56 <DMA2_Stream3_IRQHandler+0x82>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Error_Flag = true;
 8002b38:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb8 <DMA2_Stream3_IRQHandler+0xe4>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	709a      	strb	r2, [r3, #2]
		SPI1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bbc <DMA2_Stream3_IRQHandler+0xe8>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	709a      	strb	r2, [r3, #2]
		DMA2_Stream3_Flag.Transfer_Error_Flag = true;
 8002b44:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc0 <DMA2_Stream3_IRQHandler+0xec>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb4 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	4a19      	ldr	r2, [pc, #100]	@ (8002bb4 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b54:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF3)
 8002b56:	4b17      	ldr	r3, [pc, #92]	@ (8002bb4 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00e      	beq.n	8002b80 <DMA2_Stream3_IRQHandler+0xac>
	{
		SDIO_RXTX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002b62:	4b15      	ldr	r3, [pc, #84]	@ (8002bb8 <DMA2_Stream3_IRQHandler+0xe4>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	705a      	strb	r2, [r3, #1]
		SPI1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002b68:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <DMA2_Stream3_IRQHandler+0xe8>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	705a      	strb	r2, [r3, #1]
		DMA2_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8002b6e:	4b14      	ldr	r3, [pc, #80]	@ (8002bc0 <DMA2_Stream3_IRQHandler+0xec>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8002b74:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb4 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a0e      	ldr	r2, [pc, #56]	@ (8002bb4 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b7e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF3)
 8002b80:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb4 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00e      	beq.n	8002baa <DMA2_Stream3_IRQHandler+0xd6>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Complete_Flag = true;
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb8 <DMA2_Stream3_IRQHandler+0xe4>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	701a      	strb	r2, [r3, #0]
		SPI1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8002b92:	4b0a      	ldr	r3, [pc, #40]	@ (8002bbc <DMA2_Stream3_IRQHandler+0xe8>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
 8002b98:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <DMA2_Stream3_IRQHandler+0xec>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8002b9e:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <DMA2_Stream3_IRQHandler+0xe0>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	4a04      	ldr	r2, [pc, #16]	@ (8002bb4 <DMA2_Stream3_IRQHandler+0xe0>)
 8002ba4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ba8:	6093      	str	r3, [r2, #8]
	}
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	40026400 	.word	0x40026400
 8002bb8:	20000288 	.word	0x20000288
 8002bbc:	20000110 	.word	0x20000110
 8002bc0:	20000308 	.word	0x20000308

08002bc4 <DMA2_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream4_IRQHandler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF4)
 8002bc8:	4b36      	ldr	r3, [pc, #216]	@ (8002ca4 <DMA2_Stream4_IRQHandler+0xe0>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00e      	beq.n	8002bf2 <DMA2_Stream4_IRQHandler+0x2e>
	{
		TIM1_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8002bd4:	4b34      	ldr	r3, [pc, #208]	@ (8002ca8 <DMA2_Stream4_IRQHandler+0xe4>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	711a      	strb	r2, [r3, #4]
		TIM8_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8002bda:	4b34      	ldr	r3, [pc, #208]	@ (8002cac <DMA2_Stream4_IRQHandler+0xe8>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	711a      	strb	r2, [r3, #4]
		DMA2_Stream4_Flag.Fifo_Error_Flag = true;
 8002be0:	4b33      	ldr	r3, [pc, #204]	@ (8002cb0 <DMA2_Stream4_IRQHandler+0xec>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF4;
 8002be6:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca4 <DMA2_Stream4_IRQHandler+0xe0>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	4a2e      	ldr	r2, [pc, #184]	@ (8002ca4 <DMA2_Stream4_IRQHandler+0xe0>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF4)
 8002bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca4 <DMA2_Stream4_IRQHandler+0xe0>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00e      	beq.n	8002c1c <DMA2_Stream4_IRQHandler+0x58>
	{
		TIM1_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca8 <DMA2_Stream4_IRQHandler+0xe4>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	70da      	strb	r2, [r3, #3]
		TIM8_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002c04:	4b29      	ldr	r3, [pc, #164]	@ (8002cac <DMA2_Stream4_IRQHandler+0xe8>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	70da      	strb	r2, [r3, #3]
		DMA2_Stream4_Flag.Direct_Mode_Error_Flag = true;
 8002c0a:	4b29      	ldr	r3, [pc, #164]	@ (8002cb0 <DMA2_Stream4_IRQHandler+0xec>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8002c10:	4b24      	ldr	r3, [pc, #144]	@ (8002ca4 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4a23      	ldr	r2, [pc, #140]	@ (8002ca4 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c16:	f043 0304 	orr.w	r3, r3, #4
 8002c1a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF4)
 8002c1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ca4 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00e      	beq.n	8002c46 <DMA2_Stream4_IRQHandler+0x82>
	{
		TIM1_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8002c28:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca8 <DMA2_Stream4_IRQHandler+0xe4>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	709a      	strb	r2, [r3, #2]
		TIM8_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8002c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002cac <DMA2_Stream4_IRQHandler+0xe8>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	709a      	strb	r2, [r3, #2]
		DMA2_Stream4_Flag.Transfer_Error_Flag = true;
 8002c34:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb0 <DMA2_Stream4_IRQHandler+0xec>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8002c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	4a19      	ldr	r2, [pc, #100]	@ (8002ca4 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c40:	f043 0308 	orr.w	r3, r3, #8
 8002c44:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF4)
 8002c46:	4b17      	ldr	r3, [pc, #92]	@ (8002ca4 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00e      	beq.n	8002c70 <DMA2_Stream4_IRQHandler+0xac>
	{
		TIM1_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002c52:	4b15      	ldr	r3, [pc, #84]	@ (8002ca8 <DMA2_Stream4_IRQHandler+0xe4>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	705a      	strb	r2, [r3, #1]
		TIM8_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002c58:	4b14      	ldr	r3, [pc, #80]	@ (8002cac <DMA2_Stream4_IRQHandler+0xe8>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	705a      	strb	r2, [r3, #1]
		DMA2_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 8002c5e:	4b14      	ldr	r3, [pc, #80]	@ (8002cb0 <DMA2_Stream4_IRQHandler+0xec>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8002c64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca4 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4a0e      	ldr	r2, [pc, #56]	@ (8002ca4 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c6a:	f043 0310 	orr.w	r3, r3, #16
 8002c6e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF4)
 8002c70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00e      	beq.n	8002c9a <DMA2_Stream4_IRQHandler+0xd6>
	{
		TIM1_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca8 <DMA2_Stream4_IRQHandler+0xe4>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
		TIM8_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8002c82:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <DMA2_Stream4_IRQHandler+0xe8>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
 8002c88:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <DMA2_Stream4_IRQHandler+0xec>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8002c8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c94:	f043 0320 	orr.w	r3, r3, #32
 8002c98:	60d3      	str	r3, [r2, #12]
	}
}
 8002c9a:	bf00      	nop
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	40026400 	.word	0x40026400
 8002ca8:	200001b0 	.word	0x200001b0
 8002cac:	200001d8 	.word	0x200001d8
 8002cb0:	20000310 	.word	0x20000310

08002cb4 <DMA2_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream5_IRQHandler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF5)
 8002cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d78 <DMA2_Stream5_IRQHandler+0xc4>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <DMA2_Stream5_IRQHandler+0x28>
	{
		TIM1_UP_DMA_Flag.Fifo_Error_Flag = true;
 8002cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d7c <DMA2_Stream5_IRQHandler+0xc8>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	711a      	strb	r2, [r3, #4]
		DMA2_Stream5_Flag.Fifo_Error_Flag = true;
 8002cca:	4b2d      	ldr	r3, [pc, #180]	@ (8002d80 <DMA2_Stream5_IRQHandler+0xcc>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8002cd0:	4b29      	ldr	r3, [pc, #164]	@ (8002d78 <DMA2_Stream5_IRQHandler+0xc4>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4a28      	ldr	r2, [pc, #160]	@ (8002d78 <DMA2_Stream5_IRQHandler+0xc4>)
 8002cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cda:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF5)
 8002cdc:	4b26      	ldr	r3, [pc, #152]	@ (8002d78 <DMA2_Stream5_IRQHandler+0xc4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00b      	beq.n	8002d00 <DMA2_Stream5_IRQHandler+0x4c>
	{
		TIM1_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002ce8:	4b24      	ldr	r3, [pc, #144]	@ (8002d7c <DMA2_Stream5_IRQHandler+0xc8>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	70da      	strb	r2, [r3, #3]
		DMA2_Stream5_Flag.Direct_Mode_Error_Flag = true;
 8002cee:	4b24      	ldr	r3, [pc, #144]	@ (8002d80 <DMA2_Stream5_IRQHandler+0xcc>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8002cf4:	4b20      	ldr	r3, [pc, #128]	@ (8002d78 <DMA2_Stream5_IRQHandler+0xc4>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d78 <DMA2_Stream5_IRQHandler+0xc4>)
 8002cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cfe:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF5)
 8002d00:	4b1d      	ldr	r3, [pc, #116]	@ (8002d78 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00b      	beq.n	8002d24 <DMA2_Stream5_IRQHandler+0x70>
	{
		TIM1_UP_DMA_Flag.Transfer_Error_Flag = true;
 8002d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d7c <DMA2_Stream5_IRQHandler+0xc8>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	709a      	strb	r2, [r3, #2]
		DMA2_Stream5_Flag.Transfer_Error_Flag = true;
 8002d12:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <DMA2_Stream5_IRQHandler+0xcc>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8002d18:	4b17      	ldr	r3, [pc, #92]	@ (8002d78 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a16      	ldr	r2, [pc, #88]	@ (8002d78 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d22:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF5)
 8002d24:	4b14      	ldr	r3, [pc, #80]	@ (8002d78 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00b      	beq.n	8002d48 <DMA2_Stream5_IRQHandler+0x94>
	{
		TIM1_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002d30:	4b12      	ldr	r3, [pc, #72]	@ (8002d7c <DMA2_Stream5_IRQHandler+0xc8>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	705a      	strb	r2, [r3, #1]
		DMA2_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 8002d36:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <DMA2_Stream5_IRQHandler+0xcc>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4a0d      	ldr	r2, [pc, #52]	@ (8002d78 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d46:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF5)
 8002d48:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00b      	beq.n	8002d6c <DMA2_Stream5_IRQHandler+0xb8>
	{
		TIM1_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8002d54:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <DMA2_Stream5_IRQHandler+0xc8>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
 8002d5a:	4b09      	ldr	r3, [pc, #36]	@ (8002d80 <DMA2_Stream5_IRQHandler+0xcc>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8002d60:	4b05      	ldr	r3, [pc, #20]	@ (8002d78 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4a04      	ldr	r2, [pc, #16]	@ (8002d78 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d66:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d6a:	60d3      	str	r3, [r2, #12]
	}
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40026400 	.word	0x40026400
 8002d7c:	20000190 	.word	0x20000190
 8002d80:	20000318 	.word	0x20000318

08002d84 <DMA2_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream6_IRQHandler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF6)
 8002d88:	4b45      	ldr	r3, [pc, #276]	@ (8002ea0 <DMA2_Stream6_IRQHandler+0x11c>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d014      	beq.n	8002dbe <DMA2_Stream6_IRQHandler+0x3a>
	{
		TIM1_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8002d94:	4b43      	ldr	r3, [pc, #268]	@ (8002ea4 <DMA2_Stream6_IRQHandler+0x120>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	711a      	strb	r2, [r3, #4]
		TIM1_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8002d9a:	4b43      	ldr	r3, [pc, #268]	@ (8002ea8 <DMA2_Stream6_IRQHandler+0x124>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	711a      	strb	r2, [r3, #4]
		TIM8_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8002da0:	4b42      	ldr	r3, [pc, #264]	@ (8002eac <DMA2_Stream6_IRQHandler+0x128>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	711a      	strb	r2, [r3, #4]
		USART6_TX_DMA_Flag.Fifo_Error_Flag = true;
 8002da6:	4b42      	ldr	r3, [pc, #264]	@ (8002eb0 <DMA2_Stream6_IRQHandler+0x12c>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	711a      	strb	r2, [r3, #4]
		DMA2_Stream6_Flag.Fifo_Error_Flag = true;
 8002dac:	4b41      	ldr	r3, [pc, #260]	@ (8002eb4 <DMA2_Stream6_IRQHandler+0x130>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8002db2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ea0 <DMA2_Stream6_IRQHandler+0x11c>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	4a3a      	ldr	r2, [pc, #232]	@ (8002ea0 <DMA2_Stream6_IRQHandler+0x11c>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dbc:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF6)
 8002dbe:	4b38      	ldr	r3, [pc, #224]	@ (8002ea0 <DMA2_Stream6_IRQHandler+0x11c>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d014      	beq.n	8002df4 <DMA2_Stream6_IRQHandler+0x70>
	{
		TIM1_CH2_DMA_Flag.Direct_Mode_Error_Flag= true;
 8002dca:	4b36      	ldr	r3, [pc, #216]	@ (8002ea4 <DMA2_Stream6_IRQHandler+0x120>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	70da      	strb	r2, [r3, #3]
		TIM1_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002dd0:	4b35      	ldr	r3, [pc, #212]	@ (8002ea8 <DMA2_Stream6_IRQHandler+0x124>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	70da      	strb	r2, [r3, #3]
		TIM8_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002dd6:	4b35      	ldr	r3, [pc, #212]	@ (8002eac <DMA2_Stream6_IRQHandler+0x128>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	70da      	strb	r2, [r3, #3]
		USART6_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002ddc:	4b34      	ldr	r3, [pc, #208]	@ (8002eb0 <DMA2_Stream6_IRQHandler+0x12c>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	70da      	strb	r2, [r3, #3]
		DMA2_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8002de2:	4b34      	ldr	r3, [pc, #208]	@ (8002eb4 <DMA2_Stream6_IRQHandler+0x130>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8002de8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea0 <DMA2_Stream6_IRQHandler+0x11c>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4a2c      	ldr	r2, [pc, #176]	@ (8002ea0 <DMA2_Stream6_IRQHandler+0x11c>)
 8002dee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002df2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF6)
 8002df4:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea0 <DMA2_Stream6_IRQHandler+0x11c>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d014      	beq.n	8002e2a <DMA2_Stream6_IRQHandler+0xa6>
	{
		TIM1_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8002e00:	4b28      	ldr	r3, [pc, #160]	@ (8002ea4 <DMA2_Stream6_IRQHandler+0x120>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	709a      	strb	r2, [r3, #2]
		TIM1_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8002e06:	4b28      	ldr	r3, [pc, #160]	@ (8002ea8 <DMA2_Stream6_IRQHandler+0x124>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	709a      	strb	r2, [r3, #2]
		TIM8_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8002e0c:	4b27      	ldr	r3, [pc, #156]	@ (8002eac <DMA2_Stream6_IRQHandler+0x128>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	709a      	strb	r2, [r3, #2]
		USART6_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002e12:	4b27      	ldr	r3, [pc, #156]	@ (8002eb0 <DMA2_Stream6_IRQHandler+0x12c>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	709a      	strb	r2, [r3, #2]
		DMA2_Stream6_Flag.Transfer_Error_Flag = true;
 8002e18:	4b26      	ldr	r3, [pc, #152]	@ (8002eb4 <DMA2_Stream6_IRQHandler+0x130>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8002e1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ea0 <DMA2_Stream6_IRQHandler+0x11c>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea0 <DMA2_Stream6_IRQHandler+0x11c>)
 8002e24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002e28:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF6)
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea0 <DMA2_Stream6_IRQHandler+0x11c>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d014      	beq.n	8002e60 <DMA2_Stream6_IRQHandler+0xdc>
	{
		TIM1_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002e36:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea4 <DMA2_Stream6_IRQHandler+0x120>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	705a      	strb	r2, [r3, #1]
		TIM1_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea8 <DMA2_Stream6_IRQHandler+0x124>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	705a      	strb	r2, [r3, #1]
		TIM8_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002e42:	4b1a      	ldr	r3, [pc, #104]	@ (8002eac <DMA2_Stream6_IRQHandler+0x128>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	705a      	strb	r2, [r3, #1]
		USART6_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002e48:	4b19      	ldr	r3, [pc, #100]	@ (8002eb0 <DMA2_Stream6_IRQHandler+0x12c>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	705a      	strb	r2, [r3, #1]
		DMA2_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8002e4e:	4b19      	ldr	r3, [pc, #100]	@ (8002eb4 <DMA2_Stream6_IRQHandler+0x130>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8002e54:	4b12      	ldr	r3, [pc, #72]	@ (8002ea0 <DMA2_Stream6_IRQHandler+0x11c>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a11      	ldr	r2, [pc, #68]	@ (8002ea0 <DMA2_Stream6_IRQHandler+0x11c>)
 8002e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e5e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF6)
 8002e60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea0 <DMA2_Stream6_IRQHandler+0x11c>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d014      	beq.n	8002e96 <DMA2_Stream6_IRQHandler+0x112>
	{
		TIM1_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8002e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea4 <DMA2_Stream6_IRQHandler+0x120>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
		TIM1_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8002e72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea8 <DMA2_Stream6_IRQHandler+0x124>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
		TIM8_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8002e78:	4b0c      	ldr	r3, [pc, #48]	@ (8002eac <DMA2_Stream6_IRQHandler+0x128>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
		USART6_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb0 <DMA2_Stream6_IRQHandler+0x12c>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
 8002e84:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb4 <DMA2_Stream6_IRQHandler+0x130>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8002e8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <DMA2_Stream6_IRQHandler+0x11c>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	4a04      	ldr	r2, [pc, #16]	@ (8002ea0 <DMA2_Stream6_IRQHandler+0x11c>)
 8002e90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e94:	60d3      	str	r3, [r2, #12]
	}
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40026400 	.word	0x40026400
 8002ea4:	200001a0 	.word	0x200001a0
 8002ea8:	200001a8 	.word	0x200001a8
 8002eac:	200001e0 	.word	0x200001e0
 8002eb0:	20000178 	.word	0x20000178
 8002eb4:	20000320 	.word	0x20000320

08002eb8 <DMA2_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream7_IRQHandler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF7)
 8002ebc:	4b36      	ldr	r3, [pc, #216]	@ (8002f98 <DMA2_Stream7_IRQHandler+0xe0>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00e      	beq.n	8002ee6 <DMA2_Stream7_IRQHandler+0x2e>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8002ec8:	4b33      	ldr	r3, [pc, #204]	@ (8002f98 <DMA2_Stream7_IRQHandler+0xe0>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a32      	ldr	r2, [pc, #200]	@ (8002f98 <DMA2_Stream7_IRQHandler+0xe0>)
 8002ece:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ed2:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8002ed4:	4b31      	ldr	r3, [pc, #196]	@ (8002f9c <DMA2_Stream7_IRQHandler+0xe4>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	711a      	strb	r2, [r3, #4]
		USART1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8002eda:	4b31      	ldr	r3, [pc, #196]	@ (8002fa0 <DMA2_Stream7_IRQHandler+0xe8>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	711a      	strb	r2, [r3, #4]
		DMA2_Stream7_Flag.Fifo_Error_Flag = true;
 8002ee0:	4b30      	ldr	r3, [pc, #192]	@ (8002fa4 <DMA2_Stream7_IRQHandler+0xec>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	711a      	strb	r2, [r3, #4]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF7)
 8002ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8002f98 <DMA2_Stream7_IRQHandler+0xe0>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00e      	beq.n	8002f10 <DMA2_Stream7_IRQHandler+0x58>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8002ef2:	4b29      	ldr	r3, [pc, #164]	@ (8002f98 <DMA2_Stream7_IRQHandler+0xe0>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	4a28      	ldr	r2, [pc, #160]	@ (8002f98 <DMA2_Stream7_IRQHandler+0xe0>)
 8002ef8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002efc:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002efe:	4b27      	ldr	r3, [pc, #156]	@ (8002f9c <DMA2_Stream7_IRQHandler+0xe4>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	70da      	strb	r2, [r3, #3]
		USART1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002f04:	4b26      	ldr	r3, [pc, #152]	@ (8002fa0 <DMA2_Stream7_IRQHandler+0xe8>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	70da      	strb	r2, [r3, #3]
		DMA2_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8002f0a:	4b26      	ldr	r3, [pc, #152]	@ (8002fa4 <DMA2_Stream7_IRQHandler+0xec>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	70da      	strb	r2, [r3, #3]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF7)
 8002f10:	4b21      	ldr	r3, [pc, #132]	@ (8002f98 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00e      	beq.n	8002f3a <DMA2_Stream7_IRQHandler+0x82>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8002f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002f98 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a1d      	ldr	r2, [pc, #116]	@ (8002f98 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f26:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8002f28:	4b1c      	ldr	r3, [pc, #112]	@ (8002f9c <DMA2_Stream7_IRQHandler+0xe4>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	709a      	strb	r2, [r3, #2]
		USART1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa0 <DMA2_Stream7_IRQHandler+0xe8>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	709a      	strb	r2, [r3, #2]
		DMA2_Stream7_Flag.Transfer_Error_Flag = true;
 8002f34:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa4 <DMA2_Stream7_IRQHandler+0xec>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	709a      	strb	r2, [r3, #2]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF7)
 8002f3a:	4b17      	ldr	r3, [pc, #92]	@ (8002f98 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00e      	beq.n	8002f64 <DMA2_Stream7_IRQHandler+0xac>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8002f46:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4a13      	ldr	r2, [pc, #76]	@ (8002f98 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f50:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002f52:	4b12      	ldr	r3, [pc, #72]	@ (8002f9c <DMA2_Stream7_IRQHandler+0xe4>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	705a      	strb	r2, [r3, #1]
		USART1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002f58:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <DMA2_Stream7_IRQHandler+0xe8>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	705a      	strb	r2, [r3, #1]
		DMA2_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8002f5e:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <DMA2_Stream7_IRQHandler+0xec>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	705a      	strb	r2, [r3, #1]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF7)
 8002f64:	4b0c      	ldr	r3, [pc, #48]	@ (8002f98 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00e      	beq.n	8002f8e <DMA2_Stream7_IRQHandler+0xd6>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8002f70:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4a08      	ldr	r2, [pc, #32]	@ (8002f98 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002f7a:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8002f7c:	4b07      	ldr	r3, [pc, #28]	@ (8002f9c <DMA2_Stream7_IRQHandler+0xe4>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	701a      	strb	r2, [r3, #0]
		USART1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8002f82:	4b07      	ldr	r3, [pc, #28]	@ (8002fa0 <DMA2_Stream7_IRQHandler+0xe8>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	701a      	strb	r2, [r3, #0]
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <DMA2_Stream7_IRQHandler+0xec>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]

	}
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	40026400 	.word	0x40026400
 8002f9c:	200001e8 	.word	0x200001e8
 8002fa0:	20000130 	.word	0x20000130
 8002fa4:	20000328 	.word	0x20000328

08002fa8 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8002fe8 <DMA_Clock_Enable+0x40>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d105      	bne.n	8002fc6 <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8002fba:	4b0c      	ldr	r3, [pc, #48]	@ (8002fec <DMA_Clock_Enable+0x44>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbe:	4a0b      	ldr	r2, [pc, #44]	@ (8002fec <DMA_Clock_Enable+0x44>)
 8002fc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002fc4:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a09      	ldr	r2, [pc, #36]	@ (8002ff0 <DMA_Clock_Enable+0x48>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d105      	bne.n	8002fdc <DMA_Clock_Enable+0x34>
		{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <DMA_Clock_Enable+0x44>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd4:	4a05      	ldr	r2, [pc, #20]	@ (8002fec <DMA_Clock_Enable+0x44>)
 8002fd6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fda:	6313      	str	r3, [r2, #48]	@ 0x30
		}
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	40026000 	.word	0x40026000
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40026400 	.word	0x40026400

08002ff4 <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
    DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ffd3 	bl	8002fa8 <DMA_Clock_Enable>
    config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	7a1b      	ldrb	r3, [r3, #8]
 800300c:	065a      	lsls	r2, r3, #25
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	430a      	orrs	r2, r1
 8003014:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	6819      	ldr	r1, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699a      	ldr	r2, [r3, #24]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->flow_control;  // Set flow control
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	6819      	ldr	r1, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	430a      	orrs	r2, r1
 8003038:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->priority_level;  // Set priority level
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	6819      	ldr	r1, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	430a      	orrs	r2, r1
 800304a:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	6819      	ldr	r1, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	430a      	orrs	r2, r1
 800305c:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	6819      	ldr	r1, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	430a      	orrs	r2, r1
 800306e:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	6819      	ldr	r1, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	430a      	orrs	r2, r1
 8003080:	601a      	str	r2, [r3, #0]

    // Configure DMA interrupts if enabled


     if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	2200      	movs	r2, #0
 8003088:	4293      	cmp	r3, r2
 800308a:	f000 80f4 	beq.w	8003276 <DMA_Init+0x282>
    {

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Fifo_Error)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	2280      	movs	r2, #128	@ 0x80
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	61da      	str	r2, [r3, #28]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <DMA_Init+0xc0>
        {
        	config->Request.Stream->FCR |= config->interrupts;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	6959      	ldr	r1, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	615a      	str	r2, [r3, #20]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	2210      	movs	r2, #16
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	61da      	str	r2, [r3, #28]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <DMA_Init+0xe4>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TCIE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f042 0210 	orr.w	r2, r2, #16
 80030d6:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	2208      	movs	r2, #8
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	61da      	str	r2, [r3, #28]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <DMA_Init+0x108>
        {
        	config->Request.Stream->CR |= DMA_SxCR_HTIE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f042 0208 	orr.w	r2, r2, #8
 80030fa:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	2204      	movs	r2, #4
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	61da      	str	r2, [r3, #28]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d007      	beq.n	8003120 <DMA_Init+0x12c>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TEIE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f042 0204 	orr.w	r2, r2, #4
 800311e:	601a      	str	r2, [r3, #0]
        }
        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	2202      	movs	r2, #2
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	61da      	str	r2, [r3, #28]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d007      	beq.n	8003144 <DMA_Init+0x150>
        {
        	config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f042 0202 	orr.w	r2, r2, #2
 8003142:	601a      	str	r2, [r3, #0]
        }

        // Enable the corresponding NVIC interrupt for the DMA stream
        if(config->Request.Controller == DMA1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a67      	ldr	r2, [pc, #412]	@ (80032e8 <DMA_Init+0x2f4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d147      	bne.n	80031de <DMA_Init+0x1ea>
        {
            if(config->Request.Stream == DMA1_Stream0){
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4a66      	ldr	r2, [pc, #408]	@ (80032ec <DMA_Init+0x2f8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d103      	bne.n	8003160 <DMA_Init+0x16c>
            	NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003158:	200b      	movs	r0, #11
 800315a:	f7fe fd5d 	bl	8001c18 <__NVIC_EnableIRQ>
 800315e:	e08a      	b.n	8003276 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream1){
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4a62      	ldr	r2, [pc, #392]	@ (80032f0 <DMA_Init+0x2fc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d103      	bne.n	8003172 <DMA_Init+0x17e>
            	NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800316a:	200c      	movs	r0, #12
 800316c:	f7fe fd54 	bl	8001c18 <__NVIC_EnableIRQ>
 8003170:	e081      	b.n	8003276 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream2){
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4a5f      	ldr	r2, [pc, #380]	@ (80032f4 <DMA_Init+0x300>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d103      	bne.n	8003184 <DMA_Init+0x190>
            	NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800317c:	200d      	movs	r0, #13
 800317e:	f7fe fd4b 	bl	8001c18 <__NVIC_EnableIRQ>
 8003182:	e078      	b.n	8003276 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream3){
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4a5b      	ldr	r2, [pc, #364]	@ (80032f8 <DMA_Init+0x304>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d103      	bne.n	8003196 <DMA_Init+0x1a2>
            	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800318e:	200e      	movs	r0, #14
 8003190:	f7fe fd42 	bl	8001c18 <__NVIC_EnableIRQ>
 8003194:	e06f      	b.n	8003276 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream4){
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4a58      	ldr	r2, [pc, #352]	@ (80032fc <DMA_Init+0x308>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d103      	bne.n	80031a8 <DMA_Init+0x1b4>
            	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80031a0:	200f      	movs	r0, #15
 80031a2:	f7fe fd39 	bl	8001c18 <__NVIC_EnableIRQ>
 80031a6:	e066      	b.n	8003276 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream5){
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a54      	ldr	r2, [pc, #336]	@ (8003300 <DMA_Init+0x30c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d103      	bne.n	80031ba <DMA_Init+0x1c6>
            	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80031b2:	2010      	movs	r0, #16
 80031b4:	f7fe fd30 	bl	8001c18 <__NVIC_EnableIRQ>
 80031b8:	e05d      	b.n	8003276 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream6) {
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4a51      	ldr	r2, [pc, #324]	@ (8003304 <DMA_Init+0x310>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d103      	bne.n	80031cc <DMA_Init+0x1d8>
            	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80031c4:	2011      	movs	r0, #17
 80031c6:	f7fe fd27 	bl	8001c18 <__NVIC_EnableIRQ>
 80031ca:	e054      	b.n	8003276 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream7){
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003308 <DMA_Init+0x314>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d14f      	bne.n	8003276 <DMA_Init+0x282>
            	NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80031d6:	202f      	movs	r0, #47	@ 0x2f
 80031d8:	f7fe fd1e 	bl	8001c18 <__NVIC_EnableIRQ>
 80031dc:	e04b      	b.n	8003276 <DMA_Init+0x282>
            }
        }
        else if(config->Request.Controller == DMA2)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a4a      	ldr	r2, [pc, #296]	@ (800330c <DMA_Init+0x318>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d146      	bne.n	8003276 <DMA_Init+0x282>
        {
            if(config->Request.Stream == DMA2_Stream0){
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4a48      	ldr	r2, [pc, #288]	@ (8003310 <DMA_Init+0x31c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d103      	bne.n	80031fa <DMA_Init+0x206>
            	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80031f2:	2038      	movs	r0, #56	@ 0x38
 80031f4:	f7fe fd10 	bl	8001c18 <__NVIC_EnableIRQ>
 80031f8:	e03d      	b.n	8003276 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream1){
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4a45      	ldr	r2, [pc, #276]	@ (8003314 <DMA_Init+0x320>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d103      	bne.n	800320c <DMA_Init+0x218>
            	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003204:	2039      	movs	r0, #57	@ 0x39
 8003206:	f7fe fd07 	bl	8001c18 <__NVIC_EnableIRQ>
 800320a:	e034      	b.n	8003276 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream2){
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a41      	ldr	r2, [pc, #260]	@ (8003318 <DMA_Init+0x324>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d103      	bne.n	800321e <DMA_Init+0x22a>
            	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003216:	203a      	movs	r0, #58	@ 0x3a
 8003218:	f7fe fcfe 	bl	8001c18 <__NVIC_EnableIRQ>
 800321c:	e02b      	b.n	8003276 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream3){
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4a3e      	ldr	r2, [pc, #248]	@ (800331c <DMA_Init+0x328>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d103      	bne.n	8003230 <DMA_Init+0x23c>
            	NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003228:	203b      	movs	r0, #59	@ 0x3b
 800322a:	f7fe fcf5 	bl	8001c18 <__NVIC_EnableIRQ>
 800322e:	e022      	b.n	8003276 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream4){
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a3a      	ldr	r2, [pc, #232]	@ (8003320 <DMA_Init+0x32c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d103      	bne.n	8003242 <DMA_Init+0x24e>
            	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800323a:	203c      	movs	r0, #60	@ 0x3c
 800323c:	f7fe fcec 	bl	8001c18 <__NVIC_EnableIRQ>
 8003240:	e019      	b.n	8003276 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream5){
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4a37      	ldr	r2, [pc, #220]	@ (8003324 <DMA_Init+0x330>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d103      	bne.n	8003254 <DMA_Init+0x260>
            	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800324c:	2044      	movs	r0, #68	@ 0x44
 800324e:	f7fe fce3 	bl	8001c18 <__NVIC_EnableIRQ>
 8003252:	e010      	b.n	8003276 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream6){
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4a33      	ldr	r2, [pc, #204]	@ (8003328 <DMA_Init+0x334>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d103      	bne.n	8003266 <DMA_Init+0x272>
            	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800325e:	2045      	movs	r0, #69	@ 0x45
 8003260:	f7fe fcda 	bl	8001c18 <__NVIC_EnableIRQ>
 8003264:	e007      	b.n	8003276 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream7){
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4a30      	ldr	r2, [pc, #192]	@ (800332c <DMA_Init+0x338>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d102      	bne.n	8003276 <DMA_Init+0x282>
            	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003270:	2046      	movs	r0, #70	@ 0x46
 8003272:	f7fe fcd1 	bl	8001c18 <__NVIC_EnableIRQ>
            }
        }
    }

    // Configure memory and peripheral pointer increments
    config->Request.Stream->CR |= config->memory_pointer_increment;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	8c1b      	ldrh	r3, [r3, #32]
 8003280:	4619      	mov	r1, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_pointer_increment;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003294:	4619      	mov	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	430a      	orrs	r2, r1
 800329c:	601a      	str	r2, [r3, #0]

    // Configure circular mode
    if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d108      	bne.n	80032bc <DMA_Init+0x2c8>
    {
        config->Request.Stream->CR |= DMA_SxCR_CIRC;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e010      	b.n	80032de <DMA_Init+0x2ea>
    }
    else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2200      	movs	r2, #0
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d108      	bne.n	80032d8 <DMA_Init+0x2e4>
    {
        config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e002      	b.n	80032de <DMA_Init+0x2ea>
    }
    else
    {
        return -1;  // Return -1 if circular mode configuration is invalid
 80032d8:	f04f 33ff 	mov.w	r3, #4294967295
 80032dc:	e000      	b.n	80032e0 <DMA_Init+0x2ec>
    }

    return 1;  // Return 1 on successful initialization
 80032de:	2301      	movs	r3, #1
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40026000 	.word	0x40026000
 80032ec:	40026010 	.word	0x40026010
 80032f0:	40026028 	.word	0x40026028
 80032f4:	40026040 	.word	0x40026040
 80032f8:	40026058 	.word	0x40026058
 80032fc:	40026070 	.word	0x40026070
 8003300:	40026088 	.word	0x40026088
 8003304:	400260a0 	.word	0x400260a0
 8003308:	400260b8 	.word	0x400260b8
 800330c:	40026400 	.word	0x40026400
 8003310:	40026410 	.word	0x40026410
 8003314:	40026428 	.word	0x40026428
 8003318:	40026440 	.word	0x40026440
 800331c:	40026458 	.word	0x40026458
 8003320:	40026470 	.word	0x40026470
 8003324:	40026488 	.word	0x40026488
 8003328:	400264a0 	.word	0x400264a0
 800332c:	400264b8 	.word	0x400264b8

08003330 <DMA_Set_Target>:
 * memory increment before applying the new settings.
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
    // Clear previous data size and memory increment settings
    config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8003346:	601a      	str	r2, [r3, #0]

    // Set the peripheral data size
    config -> Request.Stream -> CR |= config -> peripheral_data_size;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	6819      	ldr	r1, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	430a      	orrs	r2, r1
 8003358:	601a      	str	r2, [r3, #0]

    // Set the memory data size
    config -> Request.Stream -> CR |= config -> memory_data_size;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	6819      	ldr	r1, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	430a      	orrs	r2, r1
 800336a:	601a      	str	r2, [r3, #0]

    // Set the number of data items to be transferred
    config -> Request.Stream -> NDTR = config -> buffer_length;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	605a      	str	r2, [r3, #4]

    // Set memory pointer increment mode
    config -> Request.Stream -> CR |= config -> memory_pointer_increment;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	8c1b      	ldrh	r3, [r3, #32]
 8003380:	4619      	mov	r1, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	430a      	orrs	r2, r1
 8003388:	601a      	str	r2, [r3, #0]

    // Set the memory address
    config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003392:	60da      	str	r2, [r3, #12]

    // Set the peripheral address
    config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800339c:	609a      	str	r2, [r3, #8]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <DMA_Set_Trigger>:
 * number and the DMA controller (DMA1 or DMA2).
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the configuration settings.
 */
void DMA_Set_Trigger(DMA_Config *config)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
    // Bit shift values for streams 0 to 7
    static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
    static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

    DMA_TypeDef *controller = config->Request.Controller;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	617b      	str	r3, [r7, #20]
    DMA_Stream_TypeDef *stream = config->Request.Stream;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	613b      	str	r3, [r7, #16]
    uint32_t shift;

    if (controller == DMA1 || controller == DMA2)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	4a43      	ldr	r2, [pc, #268]	@ (80034d0 <DMA_Set_Trigger+0x124>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d003      	beq.n	80033d0 <DMA_Set_Trigger+0x24>
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	4a42      	ldr	r2, [pc, #264]	@ (80034d4 <DMA_Set_Trigger+0x128>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d178      	bne.n	80034c2 <DMA_Set_Trigger+0x116>
    {
        // Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
        if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4a41      	ldr	r2, [pc, #260]	@ (80034d8 <DMA_Set_Trigger+0x12c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d918      	bls.n	800340a <DMA_Set_Trigger+0x5e>
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4a40      	ldr	r2, [pc, #256]	@ (80034dc <DMA_Set_Trigger+0x130>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d814      	bhi.n	800340a <DMA_Set_Trigger+0x5e>
        {
            shift = LIFCR_Shifts[stream - DMA1_Stream0];
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4b3f      	ldr	r3, [pc, #252]	@ (80034e0 <DMA_Set_Trigger+0x134>)
 80033e4:	4413      	add	r3, r2
 80033e6:	10db      	asrs	r3, r3, #3
 80033e8:	4a3e      	ldr	r2, [pc, #248]	@ (80034e4 <DMA_Set_Trigger+0x138>)
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	4b3d      	ldr	r3, [pc, #244]	@ (80034e8 <DMA_Set_Trigger+0x13c>)
 80033f2:	5c9b      	ldrb	r3, [r3, r2]
 80033f4:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	213f      	movs	r1, #63	@ 0x3f
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003402:	431a      	orrs	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	e055      	b.n	80034b6 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4a37      	ldr	r2, [pc, #220]	@ (80034ec <DMA_Set_Trigger+0x140>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d918      	bls.n	8003444 <DMA_Set_Trigger+0x98>
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4a36      	ldr	r2, [pc, #216]	@ (80034f0 <DMA_Set_Trigger+0x144>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d814      	bhi.n	8003444 <DMA_Set_Trigger+0x98>
        {
            shift = HIFCR_Shifts[stream - DMA1_Stream4];
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4b35      	ldr	r3, [pc, #212]	@ (80034f4 <DMA_Set_Trigger+0x148>)
 800341e:	4413      	add	r3, r2
 8003420:	10db      	asrs	r3, r3, #3
 8003422:	4a30      	ldr	r2, [pc, #192]	@ (80034e4 <DMA_Set_Trigger+0x138>)
 8003424:	fb02 f303 	mul.w	r3, r2, r3
 8003428:	461a      	mov	r2, r3
 800342a:	4b33      	ldr	r3, [pc, #204]	@ (80034f8 <DMA_Set_Trigger+0x14c>)
 800342c:	5c9b      	ldrb	r3, [r3, r2]
 800342e:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	213f      	movs	r1, #63	@ 0x3f
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	fa01 f202 	lsl.w	r2, r1, r2
 800343c:	431a      	orrs	r2, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	e038      	b.n	80034b6 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4a2d      	ldr	r2, [pc, #180]	@ (80034fc <DMA_Set_Trigger+0x150>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d918      	bls.n	800347e <DMA_Set_Trigger+0xd2>
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4a2c      	ldr	r2, [pc, #176]	@ (8003500 <DMA_Set_Trigger+0x154>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d814      	bhi.n	800347e <DMA_Set_Trigger+0xd2>
        {
            shift = LIFCR_Shifts[stream - DMA2_Stream0];
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4b2b      	ldr	r3, [pc, #172]	@ (8003504 <DMA_Set_Trigger+0x158>)
 8003458:	4413      	add	r3, r2
 800345a:	10db      	asrs	r3, r3, #3
 800345c:	4a21      	ldr	r2, [pc, #132]	@ (80034e4 <DMA_Set_Trigger+0x138>)
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	461a      	mov	r2, r3
 8003464:	4b20      	ldr	r3, [pc, #128]	@ (80034e8 <DMA_Set_Trigger+0x13c>)
 8003466:	5c9b      	ldrb	r3, [r3, r2]
 8003468:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	213f      	movs	r1, #63	@ 0x3f
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	fa01 f202 	lsl.w	r2, r1, r2
 8003476:	431a      	orrs	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	e01b      	b.n	80034b6 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4a21      	ldr	r2, [pc, #132]	@ (8003508 <DMA_Set_Trigger+0x15c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d917      	bls.n	80034b6 <DMA_Set_Trigger+0x10a>
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4a20      	ldr	r2, [pc, #128]	@ (800350c <DMA_Set_Trigger+0x160>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d813      	bhi.n	80034b6 <DMA_Set_Trigger+0x10a>
        {
            shift = HIFCR_Shifts[stream - DMA2_Stream4];
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4b1f      	ldr	r3, [pc, #124]	@ (8003510 <DMA_Set_Trigger+0x164>)
 8003492:	4413      	add	r3, r2
 8003494:	10db      	asrs	r3, r3, #3
 8003496:	4a13      	ldr	r2, [pc, #76]	@ (80034e4 <DMA_Set_Trigger+0x138>)
 8003498:	fb02 f303 	mul.w	r3, r2, r3
 800349c:	461a      	mov	r2, r3
 800349e:	4b16      	ldr	r3, [pc, #88]	@ (80034f8 <DMA_Set_Trigger+0x14c>)
 80034a0:	5c9b      	ldrb	r3, [r3, r2]
 80034a2:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	213f      	movs	r1, #63	@ 0x3f
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	fa01 f202 	lsl.w	r2, r1, r2
 80034b0:	431a      	orrs	r2, r3
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	60da      	str	r2, [r3, #12]
        }

        stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f043 0201 	orr.w	r2, r3, #1
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	601a      	str	r2, [r3, #0]
    }
}
 80034c2:	bf00      	nop
 80034c4:	371c      	adds	r7, #28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40026000 	.word	0x40026000
 80034d4:	40026400 	.word	0x40026400
 80034d8:	4002600f 	.word	0x4002600f
 80034dc:	40026058 	.word	0x40026058
 80034e0:	bffd9ff0 	.word	0xbffd9ff0
 80034e4:	aaaaaaab 	.word	0xaaaaaaab
 80034e8:	08005610 	.word	0x08005610
 80034ec:	4002606f 	.word	0x4002606f
 80034f0:	400260b8 	.word	0x400260b8
 80034f4:	bffd9f90 	.word	0xbffd9f90
 80034f8:	08005614 	.word	0x08005614
 80034fc:	4002640f 	.word	0x4002640f
 8003500:	40026458 	.word	0x40026458
 8003504:	bffd9bf0 	.word	0xbffd9bf0
 8003508:	4002646f 	.word	0x4002646f
 800350c:	400264b8 	.word	0x400264b8
 8003510:	bffd9b90 	.word	0xbffd9b90

08003514 <GPIO_Clock_Enable>:
 * @brief  Enables the clock for a specific GPIO port.
 * @param  PORT: Pointer to GPIO port base address.
 * @retval 0 on success, -1 on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a25      	ldr	r2, [pc, #148]	@ (80035b4 <GPIO_Clock_Enable+0xa0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d106      	bne.n	8003532 <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8003524:	4b24      	ldr	r3, [pc, #144]	@ (80035b8 <GPIO_Clock_Enable+0xa4>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003528:	4a23      	ldr	r2, [pc, #140]	@ (80035b8 <GPIO_Clock_Enable+0xa4>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003530:	e039      	b.n	80035a6 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a21      	ldr	r2, [pc, #132]	@ (80035bc <GPIO_Clock_Enable+0xa8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d106      	bne.n	8003548 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 800353a:	4b1f      	ldr	r3, [pc, #124]	@ (80035b8 <GPIO_Clock_Enable+0xa4>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	4a1e      	ldr	r2, [pc, #120]	@ (80035b8 <GPIO_Clock_Enable+0xa4>)
 8003540:	f043 0302 	orr.w	r3, r3, #2
 8003544:	6313      	str	r3, [r2, #48]	@ 0x30
 8003546:	e02e      	b.n	80035a6 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a1d      	ldr	r2, [pc, #116]	@ (80035c0 <GPIO_Clock_Enable+0xac>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d106      	bne.n	800355e <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 8003550:	4b19      	ldr	r3, [pc, #100]	@ (80035b8 <GPIO_Clock_Enable+0xa4>)
 8003552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003554:	4a18      	ldr	r2, [pc, #96]	@ (80035b8 <GPIO_Clock_Enable+0xa4>)
 8003556:	f043 0304 	orr.w	r3, r3, #4
 800355a:	6313      	str	r3, [r2, #48]	@ 0x30
 800355c:	e023      	b.n	80035a6 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a18      	ldr	r2, [pc, #96]	@ (80035c4 <GPIO_Clock_Enable+0xb0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d106      	bne.n	8003574 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8003566:	4b14      	ldr	r3, [pc, #80]	@ (80035b8 <GPIO_Clock_Enable+0xa4>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	4a13      	ldr	r2, [pc, #76]	@ (80035b8 <GPIO_Clock_Enable+0xa4>)
 800356c:	f043 0308 	orr.w	r3, r3, #8
 8003570:	6313      	str	r3, [r2, #48]	@ 0x30
 8003572:	e018      	b.n	80035a6 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a14      	ldr	r2, [pc, #80]	@ (80035c8 <GPIO_Clock_Enable+0xb4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d106      	bne.n	800358a <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 800357c:	4b0e      	ldr	r3, [pc, #56]	@ (80035b8 <GPIO_Clock_Enable+0xa4>)
 800357e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003580:	4a0d      	ldr	r2, [pc, #52]	@ (80035b8 <GPIO_Clock_Enable+0xa4>)
 8003582:	f043 0310 	orr.w	r3, r3, #16
 8003586:	6313      	str	r3, [r2, #48]	@ 0x30
 8003588:	e00d      	b.n	80035a6 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a0f      	ldr	r2, [pc, #60]	@ (80035cc <GPIO_Clock_Enable+0xb8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d106      	bne.n	80035a0 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 8003592:	4b09      	ldr	r3, [pc, #36]	@ (80035b8 <GPIO_Clock_Enable+0xa4>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	4a08      	ldr	r2, [pc, #32]	@ (80035b8 <GPIO_Clock_Enable+0xa4>)
 8003598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800359c:	6313      	str	r3, [r2, #48]	@ 0x30
 800359e:	e002      	b.n	80035a6 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 80035a0:	f04f 33ff 	mov.w	r3, #4294967295
 80035a4:	e000      	b.n	80035a8 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 80035a6:	2301      	movs	r3, #1
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40020000 	.word	0x40020000
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40020400 	.word	0x40020400
 80035c0:	40020800 	.word	0x40020800
 80035c4:	40020c00 	.word	0x40020c00
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40021c00 	.word	0x40021c00

080035d0 <GPIO_Pin_Init>:
 * @param  speed: Speed level (low, medium, high, very high).
 * @param  pull: Pull-up/pull-down configuration (none, pull-up, pull-down).
 * @param  alternate_function: Alternate function selection (0-15).
 */
void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	4608      	mov	r0, r1
 80035da:	4611      	mov	r1, r2
 80035dc:	461a      	mov	r2, r3
 80035de:	4603      	mov	r3, r0
 80035e0:	70fb      	strb	r3, [r7, #3]
 80035e2:	460b      	mov	r3, r1
 80035e4:	70bb      	strb	r3, [r7, #2]
 80035e6:	4613      	mov	r3, r2
 80035e8:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ff92 	bl	8003514 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	78b9      	ldrb	r1, [r7, #2]
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	0052      	lsls	r2, r2, #1
 80035fa:	fa01 f202 	lsl.w	r2, r1, r2
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	601a      	str	r2, [r3, #0]

	if(output_type != GPIO_Configuration.Output_Type.None) Port -> OTYPER |= output_type << pin;
 8003604:	2202      	movs	r2, #2
 8003606:	787b      	ldrb	r3, [r7, #1]
 8003608:	4293      	cmp	r3, r2
 800360a:	d008      	beq.n	800361e <GPIO_Pin_Init+0x4e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	7879      	ldrb	r1, [r7, #1]
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	fa01 f202 	lsl.w	r2, r1, r2
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	605a      	str	r2, [r3, #4]
	if(speed != GPIO_Configuration.Speed.None) Port -> OSPEEDR |= speed << (pin*2);
 800361e:	2204      	movs	r2, #4
 8003620:	7c3b      	ldrb	r3, [r7, #16]
 8003622:	4293      	cmp	r3, r2
 8003624:	d009      	beq.n	800363a <GPIO_Pin_Init+0x6a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	7c39      	ldrb	r1, [r7, #16]
 800362c:	78fa      	ldrb	r2, [r7, #3]
 800362e:	0052      	lsls	r2, r2, #1
 8003630:	fa01 f202 	lsl.w	r2, r1, r2
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	609a      	str	r2, [r3, #8]
	if(pull != GPIO_Configuration.Pull.None) Port -> PUPDR |= pull << (pin*2);
 800363a:	2204      	movs	r2, #4
 800363c:	7d3b      	ldrb	r3, [r7, #20]
 800363e:	4293      	cmp	r3, r2
 8003640:	d009      	beq.n	8003656 <GPIO_Pin_Init+0x86>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	7d39      	ldrb	r1, [r7, #20]
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	0052      	lsls	r2, r2, #1
 800364c:	fa01 f202 	lsl.w	r2, r1, r2
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	2b07      	cmp	r3, #7
 800365a:	d80a      	bhi.n	8003672 <GPIO_Pin_Init+0xa2>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	7e39      	ldrb	r1, [r7, #24]
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	0092      	lsls	r2, r2, #2
 8003666:	fa01 f202 	lsl.w	r2, r1, r2
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8003670:	e00a      	b.n	8003688 <GPIO_Pin_Init+0xb8>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	7e39      	ldrb	r1, [r7, #24]
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	3a08      	subs	r2, #8
 800367c:	0092      	lsls	r2, r2, #2
 800367e:	fa01 f202 	lsl.w	r2, r1, r2
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE	void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	ed87 0b02 	vstr	d0, [r7, #8]
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 800369e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036a2:	f7fd fa75 	bl	8000b90 <__aeabi_d2lz>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4610      	mov	r0, r2
 80036ac:	4619      	mov	r1, r3
 80036ae:	f7fc ff19 	bl	80004e4 <__aeabi_l2d>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	6839      	ldr	r1, [r7, #0]
 80036b8:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036c6:	f7fc fd83 	bl	80001d0 <__aeabi_dsub>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <Get_USART_Instance_Number>:
DMA_Config xUSART_TX[6];

int8_t usart_dma_instance_number;

static int8_t Get_USART_Instance_Number(USART_Config *config)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1) {return 0;}
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a17      	ldr	r2, [pc, #92]	@ (8003748 <Get_USART_Instance_Number+0x6c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d101      	bne.n	80036f2 <Get_USART_Instance_Number+0x16>
 80036ee:	2300      	movs	r3, #0
 80036f0:	e024      	b.n	800373c <Get_USART_Instance_Number+0x60>
	else if(config->Port == USART2) {return 1;}
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a15      	ldr	r2, [pc, #84]	@ (800374c <Get_USART_Instance_Number+0x70>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d101      	bne.n	8003700 <Get_USART_Instance_Number+0x24>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e01d      	b.n	800373c <Get_USART_Instance_Number+0x60>
	else if(config->Port == USART3) {return 2;}
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a12      	ldr	r2, [pc, #72]	@ (8003750 <Get_USART_Instance_Number+0x74>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <Get_USART_Instance_Number+0x32>
 800370a:	2302      	movs	r3, #2
 800370c:	e016      	b.n	800373c <Get_USART_Instance_Number+0x60>
	else if(config->Port == UART4) {return 3;}
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a10      	ldr	r2, [pc, #64]	@ (8003754 <Get_USART_Instance_Number+0x78>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d101      	bne.n	800371c <Get_USART_Instance_Number+0x40>
 8003718:	2303      	movs	r3, #3
 800371a:	e00f      	b.n	800373c <Get_USART_Instance_Number+0x60>
	else if(config->Port == UART5) {return 4;}
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0d      	ldr	r2, [pc, #52]	@ (8003758 <Get_USART_Instance_Number+0x7c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <Get_USART_Instance_Number+0x4e>
 8003726:	2304      	movs	r3, #4
 8003728:	e008      	b.n	800373c <Get_USART_Instance_Number+0x60>
	else if(config->Port == USART6) {return 5;}
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a0b      	ldr	r2, [pc, #44]	@ (800375c <Get_USART_Instance_Number+0x80>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d101      	bne.n	8003738 <Get_USART_Instance_Number+0x5c>
 8003734:	2305      	movs	r3, #5
 8003736:	e001      	b.n	800373c <Get_USART_Instance_Number+0x60>
	else {return -1;}
 8003738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	40011000 	.word	0x40011000
 800374c:	40004400 	.word	0x40004400
 8003750:	40004800 	.word	0x40004800
 8003754:	40004c00 	.word	0x40004c00
 8003758:	40005000 	.word	0x40005000
 800375c:	40011400 	.word	0x40011400

08003760 <USART_Config_Reset>:

void USART_Config_Reset(USART_Config *config)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	config->mode = USART_Configuration.Mode.Disable;
 8003768:	2200      	movs	r2, #0
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	721a      	strb	r2, [r3, #8]
	config->hardware_flow = USART_Configuration.Hardware_Flow.Disable;
 800376e:	2200      	movs	r2, #0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	73da      	strb	r2, [r3, #15]
	config->baudrate = 9600;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800377a:	605a      	str	r2, [r3, #4]
	config->dma_enable = USART_Configuration.DMA_Enable.RX_Disable | USART_Configuration.DMA_Enable.TX_Disable;
 800377c:	2200      	movs	r2, #0
 800377e:	2300      	movs	r3, #0
 8003780:	4313      	orrs	r3, r2
 8003782:	b2da      	uxtb	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	745a      	strb	r2, [r3, #17]
	config->interrupt = USART_Configuration.Interrupt_Type.Disable;
 8003788:	2300      	movs	r3, #0
 800378a:	b2da      	uxtb	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	739a      	strb	r2, [r3, #14]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a27      	ldr	r2, [pc, #156]	@ (8003848 <USART_Clock_Enable+0xac>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d106      	bne.n	80037bc <USART_Clock_Enable+0x20>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80037ae:	4b27      	ldr	r3, [pc, #156]	@ (800384c <USART_Clock_Enable+0xb0>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b2:	4a26      	ldr	r2, [pc, #152]	@ (800384c <USART_Clock_Enable+0xb0>)
 80037b4:	f043 0310 	orr.w	r3, r3, #16
 80037b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ba:	e03e      	b.n	800383a <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART2)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a23      	ldr	r2, [pc, #140]	@ (8003850 <USART_Clock_Enable+0xb4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d106      	bne.n	80037d4 <USART_Clock_Enable+0x38>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 80037c6:	4b21      	ldr	r3, [pc, #132]	@ (800384c <USART_Clock_Enable+0xb0>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	4a20      	ldr	r2, [pc, #128]	@ (800384c <USART_Clock_Enable+0xb0>)
 80037cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037d2:	e032      	b.n	800383a <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART3)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003854 <USART_Clock_Enable+0xb8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d106      	bne.n	80037ec <USART_Clock_Enable+0x50>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 80037de:	4b1b      	ldr	r3, [pc, #108]	@ (800384c <USART_Clock_Enable+0xb0>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	4a1a      	ldr	r2, [pc, #104]	@ (800384c <USART_Clock_Enable+0xb0>)
 80037e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ea:	e026      	b.n	800383a <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART4)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a19      	ldr	r2, [pc, #100]	@ (8003858 <USART_Clock_Enable+0xbc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d106      	bne.n	8003804 <USART_Clock_Enable+0x68>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 80037f6:	4b15      	ldr	r3, [pc, #84]	@ (800384c <USART_Clock_Enable+0xb0>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	4a14      	ldr	r2, [pc, #80]	@ (800384c <USART_Clock_Enable+0xb0>)
 80037fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003800:	6413      	str	r3, [r2, #64]	@ 0x40
 8003802:	e01a      	b.n	800383a <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART5)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a14      	ldr	r2, [pc, #80]	@ (800385c <USART_Clock_Enable+0xc0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d106      	bne.n	800381c <USART_Clock_Enable+0x80>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 800380e:	4b0f      	ldr	r3, [pc, #60]	@ (800384c <USART_Clock_Enable+0xb0>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	4a0e      	ldr	r2, [pc, #56]	@ (800384c <USART_Clock_Enable+0xb0>)
 8003814:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003818:	6413      	str	r3, [r2, #64]	@ 0x40
 800381a:	e00e      	b.n	800383a <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART6)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0f      	ldr	r2, [pc, #60]	@ (8003860 <USART_Clock_Enable+0xc4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d106      	bne.n	8003834 <USART_Clock_Enable+0x98>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8003826:	4b09      	ldr	r3, [pc, #36]	@ (800384c <USART_Clock_Enable+0xb0>)
 8003828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382a:	4a08      	ldr	r2, [pc, #32]	@ (800384c <USART_Clock_Enable+0xb0>)
 800382c:	f043 0320 	orr.w	r3, r3, #32
 8003830:	6453      	str	r3, [r2, #68]	@ 0x44
 8003832:	e002      	b.n	800383a <USART_Clock_Enable+0x9e>
	}
	else
	{
		return -1;
 8003834:	f04f 33ff 	mov.w	r3, #4294967295
 8003838:	e000      	b.n	800383c <USART_Clock_Enable+0xa0>
	}
	return 1;
 800383a:	2301      	movs	r3, #1
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	40011000 	.word	0x40011000
 800384c:	40023800 	.word	0x40023800
 8003850:	40004400 	.word	0x40004400
 8003854:	40004800 	.word	0x40004800
 8003858:	40004c00 	.word	0x40004c00
 800385c:	40005000 	.word	0x40005000
 8003860:	40011400 	.word	0x40011400

08003864 <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 8003864:	b5b0      	push	{r4, r5, r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af04      	add	r7, sp, #16
 800386a:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4aa0      	ldr	r2, [pc, #640]	@ (8003af4 <PIN_Setup+0x290>)
 8003872:	4293      	cmp	r3, r2
 8003874:	f040 810d 	bne.w	8003a92 <PIN_Setup+0x22e>
	{
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	7a1b      	ldrb	r3, [r3, #8]
 800387c:	2201      	movs	r2, #1
 800387e:	4293      	cmp	r3, r2
 8003880:	d00f      	beq.n	80038a2 <PIN_Setup+0x3e>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	7a1b      	ldrb	r3, [r3, #8]
 8003886:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003888:	4293      	cmp	r3, r2
 800388a:	d00a      	beq.n	80038a2 <PIN_Setup+0x3e>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	7a1b      	ldrb	r3, [r3, #8]
 8003890:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003892:	4293      	cmp	r3, r2
 8003894:	d005      	beq.n	80038a2 <PIN_Setup+0x3e>
		   (config->mode == USART_Configuration.Mode.LIN) )
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	7a1b      	ldrb	r3, [r3, #8]
 800389a:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 800389c:	4293      	cmp	r3, r2
 800389e:	f040 80be 	bne.w	8003a1e <PIN_Setup+0x1ba>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	7a5b      	ldrb	r3, [r3, #9]
 80038a6:	2209      	movs	r2, #9
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d10f      	bne.n	80038cc <PIN_Setup+0x68>
 80038ac:	2009      	movs	r0, #9
 80038ae:	2402      	movs	r4, #2
 80038b0:	2500      	movs	r5, #0
 80038b2:	2302      	movs	r3, #2
 80038b4:	2200      	movs	r2, #0
 80038b6:	2107      	movs	r1, #7
 80038b8:	9102      	str	r1, [sp, #8]
 80038ba:	9201      	str	r2, [sp, #4]
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	462b      	mov	r3, r5
 80038c0:	4622      	mov	r2, r4
 80038c2:	4601      	mov	r1, r0
 80038c4:	488c      	ldr	r0, [pc, #560]	@ (8003af8 <PIN_Setup+0x294>)
 80038c6:	f7ff fe83 	bl	80035d0 <GPIO_Pin_Init>
 80038ca:	e013      	b.n	80038f4 <PIN_Setup+0x90>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	7a5b      	ldrb	r3, [r3, #9]
 80038d0:	2206      	movs	r2, #6
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d10e      	bne.n	80038f4 <PIN_Setup+0x90>
 80038d6:	2006      	movs	r0, #6
 80038d8:	2402      	movs	r4, #2
 80038da:	2500      	movs	r5, #0
 80038dc:	2302      	movs	r3, #2
 80038de:	2200      	movs	r2, #0
 80038e0:	2107      	movs	r1, #7
 80038e2:	9102      	str	r1, [sp, #8]
 80038e4:	9201      	str	r2, [sp, #4]
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	462b      	mov	r3, r5
 80038ea:	4622      	mov	r2, r4
 80038ec:	4601      	mov	r1, r0
 80038ee:	4883      	ldr	r0, [pc, #524]	@ (8003afc <PIN_Setup+0x298>)
 80038f0:	f7ff fe6e 	bl	80035d0 <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	7a9b      	ldrb	r3, [r3, #10]
 80038f8:	220a      	movs	r2, #10
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d10f      	bne.n	800391e <PIN_Setup+0xba>
 80038fe:	200a      	movs	r0, #10
 8003900:	2402      	movs	r4, #2
 8003902:	2500      	movs	r5, #0
 8003904:	2302      	movs	r3, #2
 8003906:	2200      	movs	r2, #0
 8003908:	2107      	movs	r1, #7
 800390a:	9102      	str	r1, [sp, #8]
 800390c:	9201      	str	r2, [sp, #4]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	462b      	mov	r3, r5
 8003912:	4622      	mov	r2, r4
 8003914:	4601      	mov	r1, r0
 8003916:	4878      	ldr	r0, [pc, #480]	@ (8003af8 <PIN_Setup+0x294>)
 8003918:	f7ff fe5a 	bl	80035d0 <GPIO_Pin_Init>
 800391c:	e013      	b.n	8003946 <PIN_Setup+0xe2>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	7a9b      	ldrb	r3, [r3, #10]
 8003922:	2207      	movs	r2, #7
 8003924:	4293      	cmp	r3, r2
 8003926:	d10e      	bne.n	8003946 <PIN_Setup+0xe2>
 8003928:	2007      	movs	r0, #7
 800392a:	2402      	movs	r4, #2
 800392c:	2500      	movs	r5, #0
 800392e:	2302      	movs	r3, #2
 8003930:	2200      	movs	r2, #0
 8003932:	2107      	movs	r1, #7
 8003934:	9102      	str	r1, [sp, #8]
 8003936:	9201      	str	r2, [sp, #4]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	462b      	mov	r3, r5
 800393c:	4622      	mov	r2, r4
 800393e:	4601      	mov	r1, r0
 8003940:	486e      	ldr	r0, [pc, #440]	@ (8003afc <PIN_Setup+0x298>)
 8003942:	f7ff fe45 	bl	80035d0 <GPIO_Pin_Init>

			if((config->mode == USART_Configuration.Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	7a1b      	ldrb	r3, [r3, #8]
 800394a:	2202      	movs	r2, #2
 800394c:	4293      	cmp	r3, r2
 800394e:	d113      	bne.n	8003978 <PIN_Setup+0x114>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	7adb      	ldrb	r3, [r3, #11]
 8003954:	2208      	movs	r2, #8
 8003956:	4293      	cmp	r3, r2
 8003958:	d10e      	bne.n	8003978 <PIN_Setup+0x114>
 800395a:	2008      	movs	r0, #8
 800395c:	2402      	movs	r4, #2
 800395e:	2500      	movs	r5, #0
 8003960:	2302      	movs	r3, #2
 8003962:	2200      	movs	r2, #0
 8003964:	2107      	movs	r1, #7
 8003966:	9102      	str	r1, [sp, #8]
 8003968:	9201      	str	r2, [sp, #4]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	462b      	mov	r3, r5
 800396e:	4622      	mov	r2, r4
 8003970:	4601      	mov	r1, r0
 8003972:	4861      	ldr	r0, [pc, #388]	@ (8003af8 <PIN_Setup+0x294>)
 8003974:	f7ff fe2c 	bl	80035d0 <GPIO_Pin_Init>

			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	7bdb      	ldrb	r3, [r3, #15]
 800397c:	2200      	movs	r2, #0
 800397e:	4293      	cmp	r3, r2
 8003980:	f000 83bb 	beq.w	80040fa <PIN_Setup+0x896>
			{
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	7bdb      	ldrb	r3, [r3, #15]
 8003988:	2201      	movs	r2, #1
 800398a:	4293      	cmp	r3, r2
 800398c:	d10e      	bne.n	80039ac <PIN_Setup+0x148>
 800398e:	200b      	movs	r0, #11
 8003990:	2402      	movs	r4, #2
 8003992:	2500      	movs	r5, #0
 8003994:	2302      	movs	r3, #2
 8003996:	2200      	movs	r2, #0
 8003998:	2107      	movs	r1, #7
 800399a:	9102      	str	r1, [sp, #8]
 800399c:	9201      	str	r2, [sp, #4]
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	462b      	mov	r3, r5
 80039a2:	4622      	mov	r2, r4
 80039a4:	4601      	mov	r1, r0
 80039a6:	4854      	ldr	r0, [pc, #336]	@ (8003af8 <PIN_Setup+0x294>)
 80039a8:	f7ff fe12 	bl	80035d0 <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	7bdb      	ldrb	r3, [r3, #15]
 80039b0:	2202      	movs	r2, #2
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d10e      	bne.n	80039d4 <PIN_Setup+0x170>
 80039b6:	200c      	movs	r0, #12
 80039b8:	2402      	movs	r4, #2
 80039ba:	2500      	movs	r5, #0
 80039bc:	2302      	movs	r3, #2
 80039be:	2200      	movs	r2, #0
 80039c0:	2107      	movs	r1, #7
 80039c2:	9102      	str	r1, [sp, #8]
 80039c4:	9201      	str	r2, [sp, #4]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	462b      	mov	r3, r5
 80039ca:	4622      	mov	r2, r4
 80039cc:	4601      	mov	r1, r0
 80039ce:	484a      	ldr	r0, [pc, #296]	@ (8003af8 <PIN_Setup+0x294>)
 80039d0:	f7ff fdfe 	bl	80035d0 <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7bdb      	ldrb	r3, [r3, #15]
 80039d8:	2203      	movs	r2, #3
 80039da:	4293      	cmp	r3, r2
 80039dc:	f040 838d 	bne.w	80040fa <PIN_Setup+0x896>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80039e0:	200b      	movs	r0, #11
 80039e2:	2402      	movs	r4, #2
 80039e4:	2500      	movs	r5, #0
 80039e6:	2302      	movs	r3, #2
 80039e8:	2200      	movs	r2, #0
 80039ea:	2107      	movs	r1, #7
 80039ec:	9102      	str	r1, [sp, #8]
 80039ee:	9201      	str	r2, [sp, #4]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	462b      	mov	r3, r5
 80039f4:	4622      	mov	r2, r4
 80039f6:	4601      	mov	r1, r0
 80039f8:	483f      	ldr	r0, [pc, #252]	@ (8003af8 <PIN_Setup+0x294>)
 80039fa:	f7ff fde9 	bl	80035d0 <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80039fe:	200c      	movs	r0, #12
 8003a00:	2402      	movs	r4, #2
 8003a02:	2500      	movs	r5, #0
 8003a04:	2302      	movs	r3, #2
 8003a06:	2200      	movs	r2, #0
 8003a08:	2107      	movs	r1, #7
 8003a0a:	9102      	str	r1, [sp, #8]
 8003a0c:	9201      	str	r2, [sp, #4]
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	462b      	mov	r3, r5
 8003a12:	4622      	mov	r2, r4
 8003a14:	4601      	mov	r1, r0
 8003a16:	4838      	ldr	r0, [pc, #224]	@ (8003af8 <PIN_Setup+0x294>)
 8003a18:	f7ff fdda 	bl	80035d0 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003a1c:	e36d      	b.n	80040fa <PIN_Setup+0x896>
				}
		    }
		}
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	7a1b      	ldrb	r3, [r3, #8]
 8003a22:	2206      	movs	r2, #6
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00a      	beq.n	8003a3e <PIN_Setup+0x1da>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7a1b      	ldrb	r3, [r3, #8]
 8003a2c:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d005      	beq.n	8003a3e <PIN_Setup+0x1da>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	7a1b      	ldrb	r3, [r3, #8]
 8003a36:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	f040 8363 	bne.w	8004104 <PIN_Setup+0x8a0>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	7a5b      	ldrb	r3, [r3, #9]
 8003a42:	2209      	movs	r2, #9
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d10e      	bne.n	8003a66 <PIN_Setup+0x202>
 8003a48:	2009      	movs	r0, #9
 8003a4a:	2402      	movs	r4, #2
 8003a4c:	2500      	movs	r5, #0
 8003a4e:	2302      	movs	r3, #2
 8003a50:	2200      	movs	r2, #0
 8003a52:	2107      	movs	r1, #7
 8003a54:	9102      	str	r1, [sp, #8]
 8003a56:	9201      	str	r2, [sp, #4]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	462b      	mov	r3, r5
 8003a5c:	4622      	mov	r2, r4
 8003a5e:	4601      	mov	r1, r0
 8003a60:	4825      	ldr	r0, [pc, #148]	@ (8003af8 <PIN_Setup+0x294>)
 8003a62:	f7ff fdb5 	bl	80035d0 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	7a1b      	ldrb	r3, [r3, #8]
 8003a6a:	2207      	movs	r2, #7
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	f040 8349 	bne.w	8004104 <PIN_Setup+0x8a0>
 8003a72:	2008      	movs	r0, #8
 8003a74:	2402      	movs	r4, #2
 8003a76:	2500      	movs	r5, #0
 8003a78:	2302      	movs	r3, #2
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2107      	movs	r1, #7
 8003a7e:	9102      	str	r1, [sp, #8]
 8003a80:	9201      	str	r2, [sp, #4]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	462b      	mov	r3, r5
 8003a86:	4622      	mov	r2, r4
 8003a88:	4601      	mov	r1, r0
 8003a8a:	481b      	ldr	r0, [pc, #108]	@ (8003af8 <PIN_Setup+0x294>)
 8003a8c:	f7ff fda0 	bl	80035d0 <GPIO_Pin_Init>
//
//		}
//	}


}
 8003a90:	e338      	b.n	8004104 <PIN_Setup+0x8a0>
	else if(config->Port == USART2)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1a      	ldr	r2, [pc, #104]	@ (8003b00 <PIN_Setup+0x29c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	f040 817b 	bne.w	8003d94 <PIN_Setup+0x530>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	7a1b      	ldrb	r3, [r3, #8]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00f      	beq.n	8003ac8 <PIN_Setup+0x264>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	7a1b      	ldrb	r3, [r3, #8]
 8003aac:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00a      	beq.n	8003ac8 <PIN_Setup+0x264>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	7a1b      	ldrb	r3, [r3, #8]
 8003ab6:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d005      	beq.n	8003ac8 <PIN_Setup+0x264>
		   (config->mode == USART_Configuration.Mode.LIN) )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	7a1b      	ldrb	r3, [r3, #8]
 8003ac0:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	f040 80f8 	bne.w	8003cb8 <PIN_Setup+0x454>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	7a5b      	ldrb	r3, [r3, #9]
 8003acc:	2202      	movs	r2, #2
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d118      	bne.n	8003b04 <PIN_Setup+0x2a0>
 8003ad2:	2002      	movs	r0, #2
 8003ad4:	2402      	movs	r4, #2
 8003ad6:	2500      	movs	r5, #0
 8003ad8:	2302      	movs	r3, #2
 8003ada:	2200      	movs	r2, #0
 8003adc:	2107      	movs	r1, #7
 8003ade:	9102      	str	r1, [sp, #8]
 8003ae0:	9201      	str	r2, [sp, #4]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	462b      	mov	r3, r5
 8003ae6:	4622      	mov	r2, r4
 8003ae8:	4601      	mov	r1, r0
 8003aea:	4803      	ldr	r0, [pc, #12]	@ (8003af8 <PIN_Setup+0x294>)
 8003aec:	f7ff fd70 	bl	80035d0 <GPIO_Pin_Init>
 8003af0:	e01c      	b.n	8003b2c <PIN_Setup+0x2c8>
 8003af2:	bf00      	nop
 8003af4:	40011000 	.word	0x40011000
 8003af8:	40020000 	.word	0x40020000
 8003afc:	40020400 	.word	0x40020400
 8003b00:	40004400 	.word	0x40004400
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	7a5b      	ldrb	r3, [r3, #9]
 8003b08:	2205      	movs	r2, #5
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d10e      	bne.n	8003b2c <PIN_Setup+0x2c8>
 8003b0e:	2005      	movs	r0, #5
 8003b10:	2402      	movs	r4, #2
 8003b12:	2500      	movs	r5, #0
 8003b14:	2302      	movs	r3, #2
 8003b16:	2200      	movs	r2, #0
 8003b18:	2107      	movs	r1, #7
 8003b1a:	9102      	str	r1, [sp, #8]
 8003b1c:	9201      	str	r2, [sp, #4]
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	462b      	mov	r3, r5
 8003b22:	4622      	mov	r2, r4
 8003b24:	4601      	mov	r1, r0
 8003b26:	4899      	ldr	r0, [pc, #612]	@ (8003d8c <PIN_Setup+0x528>)
 8003b28:	f7ff fd52 	bl	80035d0 <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	7a9b      	ldrb	r3, [r3, #10]
 8003b30:	2203      	movs	r2, #3
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d10f      	bne.n	8003b56 <PIN_Setup+0x2f2>
 8003b36:	2003      	movs	r0, #3
 8003b38:	2402      	movs	r4, #2
 8003b3a:	2500      	movs	r5, #0
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2107      	movs	r1, #7
 8003b42:	9102      	str	r1, [sp, #8]
 8003b44:	9201      	str	r2, [sp, #4]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	462b      	mov	r3, r5
 8003b4a:	4622      	mov	r2, r4
 8003b4c:	4601      	mov	r1, r0
 8003b4e:	4890      	ldr	r0, [pc, #576]	@ (8003d90 <PIN_Setup+0x52c>)
 8003b50:	f7ff fd3e 	bl	80035d0 <GPIO_Pin_Init>
 8003b54:	e013      	b.n	8003b7e <PIN_Setup+0x31a>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	7a9b      	ldrb	r3, [r3, #10]
 8003b5a:	2206      	movs	r2, #6
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d10e      	bne.n	8003b7e <PIN_Setup+0x31a>
 8003b60:	2006      	movs	r0, #6
 8003b62:	2402      	movs	r4, #2
 8003b64:	2500      	movs	r5, #0
 8003b66:	2302      	movs	r3, #2
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2107      	movs	r1, #7
 8003b6c:	9102      	str	r1, [sp, #8]
 8003b6e:	9201      	str	r2, [sp, #4]
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	462b      	mov	r3, r5
 8003b74:	4622      	mov	r2, r4
 8003b76:	4601      	mov	r1, r0
 8003b78:	4884      	ldr	r0, [pc, #528]	@ (8003d8c <PIN_Setup+0x528>)
 8003b7a:	f7ff fd29 	bl	80035d0 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous)){
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	7a1b      	ldrb	r3, [r3, #8]
 8003b82:	2202      	movs	r2, #2
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d128      	bne.n	8003bda <PIN_Setup+0x376>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	7adb      	ldrb	r3, [r3, #11]
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d10f      	bne.n	8003bb2 <PIN_Setup+0x34e>
 8003b92:	2004      	movs	r0, #4
 8003b94:	2402      	movs	r4, #2
 8003b96:	2500      	movs	r5, #0
 8003b98:	2302      	movs	r3, #2
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2107      	movs	r1, #7
 8003b9e:	9102      	str	r1, [sp, #8]
 8003ba0:	9201      	str	r2, [sp, #4]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	4601      	mov	r1, r0
 8003baa:	4879      	ldr	r0, [pc, #484]	@ (8003d90 <PIN_Setup+0x52c>)
 8003bac:	f7ff fd10 	bl	80035d0 <GPIO_Pin_Init>
 8003bb0:	e013      	b.n	8003bda <PIN_Setup+0x376>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	7adb      	ldrb	r3, [r3, #11]
 8003bb6:	2207      	movs	r2, #7
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d10e      	bne.n	8003bda <PIN_Setup+0x376>
 8003bbc:	2007      	movs	r0, #7
 8003bbe:	2402      	movs	r4, #2
 8003bc0:	2500      	movs	r5, #0
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2107      	movs	r1, #7
 8003bc8:	9102      	str	r1, [sp, #8]
 8003bca:	9201      	str	r2, [sp, #4]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	462b      	mov	r3, r5
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	4601      	mov	r1, r0
 8003bd4:	486e      	ldr	r0, [pc, #440]	@ (8003d90 <PIN_Setup+0x52c>)
 8003bd6:	f7ff fcfb 	bl	80035d0 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	7bdb      	ldrb	r3, [r3, #15]
 8003bde:	2200      	movs	r2, #0
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d105      	bne.n	8003bf0 <PIN_Setup+0x38c>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	7bdb      	ldrb	r3, [r3, #15]
 8003be8:	2203      	movs	r2, #3
 8003bea:	4293      	cmp	r3, r2
 8003bec:	f040 8287 	bne.w	80040fe <PIN_Setup+0x89a>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	7bdb      	ldrb	r3, [r3, #15]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d128      	bne.n	8003c4c <PIN_Setup+0x3e8>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	7adb      	ldrb	r3, [r3, #11]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10f      	bne.n	8003c24 <PIN_Setup+0x3c0>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003c04:	2000      	movs	r0, #0
 8003c06:	2402      	movs	r4, #2
 8003c08:	2500      	movs	r5, #0
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2107      	movs	r1, #7
 8003c10:	9102      	str	r1, [sp, #8]
 8003c12:	9201      	str	r2, [sp, #4]
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	462b      	mov	r3, r5
 8003c18:	4622      	mov	r2, r4
 8003c1a:	4601      	mov	r1, r0
 8003c1c:	485c      	ldr	r0, [pc, #368]	@ (8003d90 <PIN_Setup+0x52c>)
 8003c1e:	f7ff fcd7 	bl	80035d0 <GPIO_Pin_Init>
 8003c22:	e013      	b.n	8003c4c <PIN_Setup+0x3e8>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7adb      	ldrb	r3, [r3, #11]
 8003c28:	2203      	movs	r2, #3
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10e      	bne.n	8003c4c <PIN_Setup+0x3e8>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003c2e:	2003      	movs	r0, #3
 8003c30:	2402      	movs	r4, #2
 8003c32:	2500      	movs	r5, #0
 8003c34:	2302      	movs	r3, #2
 8003c36:	2200      	movs	r2, #0
 8003c38:	2107      	movs	r1, #7
 8003c3a:	9102      	str	r1, [sp, #8]
 8003c3c:	9201      	str	r2, [sp, #4]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	462b      	mov	r3, r5
 8003c42:	4622      	mov	r2, r4
 8003c44:	4601      	mov	r1, r0
 8003c46:	4851      	ldr	r0, [pc, #324]	@ (8003d8c <PIN_Setup+0x528>)
 8003c48:	f7ff fcc2 	bl	80035d0 <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	7bdb      	ldrb	r3, [r3, #15]
 8003c50:	2202      	movs	r2, #2
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d005      	beq.n	8003c62 <PIN_Setup+0x3fe>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	7bdb      	ldrb	r3, [r3, #15]
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	f040 824e 	bne.w	80040fe <PIN_Setup+0x89a>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	7adb      	ldrb	r3, [r3, #11]
 8003c66:	2201      	movs	r2, #1
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d10f      	bne.n	8003c8c <PIN_Setup+0x428>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	2402      	movs	r4, #2
 8003c70:	2500      	movs	r5, #0
 8003c72:	2302      	movs	r3, #2
 8003c74:	2200      	movs	r2, #0
 8003c76:	2107      	movs	r1, #7
 8003c78:	9102      	str	r1, [sp, #8]
 8003c7a:	9201      	str	r2, [sp, #4]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	462b      	mov	r3, r5
 8003c80:	4622      	mov	r2, r4
 8003c82:	4601      	mov	r1, r0
 8003c84:	4842      	ldr	r0, [pc, #264]	@ (8003d90 <PIN_Setup+0x52c>)
 8003c86:	f7ff fca3 	bl	80035d0 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003c8a:	e238      	b.n	80040fe <PIN_Setup+0x89a>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	7adb      	ldrb	r3, [r3, #11]
 8003c90:	2204      	movs	r2, #4
 8003c92:	4293      	cmp	r3, r2
 8003c94:	f040 8233 	bne.w	80040fe <PIN_Setup+0x89a>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003c98:	2004      	movs	r0, #4
 8003c9a:	2402      	movs	r4, #2
 8003c9c:	2500      	movs	r5, #0
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2107      	movs	r1, #7
 8003ca4:	9102      	str	r1, [sp, #8]
 8003ca6:	9201      	str	r2, [sp, #4]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	462b      	mov	r3, r5
 8003cac:	4622      	mov	r2, r4
 8003cae:	4601      	mov	r1, r0
 8003cb0:	4836      	ldr	r0, [pc, #216]	@ (8003d8c <PIN_Setup+0x528>)
 8003cb2:	f7ff fc8d 	bl	80035d0 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003cb6:	e222      	b.n	80040fe <PIN_Setup+0x89a>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	7a1b      	ldrb	r3, [r3, #8]
 8003cbc:	2206      	movs	r2, #6
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00a      	beq.n	8003cd8 <PIN_Setup+0x474>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	7a1b      	ldrb	r3, [r3, #8]
 8003cc6:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d005      	beq.n	8003cd8 <PIN_Setup+0x474>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	7a1b      	ldrb	r3, [r3, #8]
 8003cd0:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	f040 8216 	bne.w	8004104 <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	7a5b      	ldrb	r3, [r3, #9]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10f      	bne.n	8003d02 <PIN_Setup+0x49e>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003ce2:	2002      	movs	r0, #2
 8003ce4:	2402      	movs	r4, #2
 8003ce6:	2500      	movs	r5, #0
 8003ce8:	2302      	movs	r3, #2
 8003cea:	2200      	movs	r2, #0
 8003cec:	2107      	movs	r1, #7
 8003cee:	9102      	str	r1, [sp, #8]
 8003cf0:	9201      	str	r2, [sp, #4]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	462b      	mov	r3, r5
 8003cf6:	4622      	mov	r2, r4
 8003cf8:	4601      	mov	r1, r0
 8003cfa:	4825      	ldr	r0, [pc, #148]	@ (8003d90 <PIN_Setup+0x52c>)
 8003cfc:	f7ff fc68 	bl	80035d0 <GPIO_Pin_Init>
 8003d00:	e013      	b.n	8003d2a <PIN_Setup+0x4c6>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	7a5b      	ldrb	r3, [r3, #9]
 8003d06:	2205      	movs	r2, #5
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d10e      	bne.n	8003d2a <PIN_Setup+0x4c6>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003d0c:	2005      	movs	r0, #5
 8003d0e:	2402      	movs	r4, #2
 8003d10:	2500      	movs	r5, #0
 8003d12:	2302      	movs	r3, #2
 8003d14:	2200      	movs	r2, #0
 8003d16:	2107      	movs	r1, #7
 8003d18:	9102      	str	r1, [sp, #8]
 8003d1a:	9201      	str	r2, [sp, #4]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	462b      	mov	r3, r5
 8003d20:	4622      	mov	r2, r4
 8003d22:	4601      	mov	r1, r0
 8003d24:	4819      	ldr	r0, [pc, #100]	@ (8003d8c <PIN_Setup+0x528>)
 8003d26:	f7ff fc53 	bl	80035d0 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	7a1b      	ldrb	r3, [r3, #8]
 8003d2e:	2207      	movs	r2, #7
 8003d30:	4293      	cmp	r3, r2
 8003d32:	f040 81e7 	bne.w	8004104 <PIN_Setup+0x8a0>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7adb      	ldrb	r3, [r3, #11]
 8003d3a:	2204      	movs	r2, #4
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d10f      	bne.n	8003d60 <PIN_Setup+0x4fc>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003d40:	2004      	movs	r0, #4
 8003d42:	2402      	movs	r4, #2
 8003d44:	2500      	movs	r5, #0
 8003d46:	2302      	movs	r3, #2
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2107      	movs	r1, #7
 8003d4c:	9102      	str	r1, [sp, #8]
 8003d4e:	9201      	str	r2, [sp, #4]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	462b      	mov	r3, r5
 8003d54:	4622      	mov	r2, r4
 8003d56:	4601      	mov	r1, r0
 8003d58:	480d      	ldr	r0, [pc, #52]	@ (8003d90 <PIN_Setup+0x52c>)
 8003d5a:	f7ff fc39 	bl	80035d0 <GPIO_Pin_Init>
}
 8003d5e:	e1d1      	b.n	8004104 <PIN_Setup+0x8a0>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	7adb      	ldrb	r3, [r3, #11]
 8003d64:	2207      	movs	r2, #7
 8003d66:	4293      	cmp	r3, r2
 8003d68:	f040 81cc 	bne.w	8004104 <PIN_Setup+0x8a0>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003d6c:	2007      	movs	r0, #7
 8003d6e:	2402      	movs	r4, #2
 8003d70:	2500      	movs	r5, #0
 8003d72:	2302      	movs	r3, #2
 8003d74:	2200      	movs	r2, #0
 8003d76:	2107      	movs	r1, #7
 8003d78:	9102      	str	r1, [sp, #8]
 8003d7a:	9201      	str	r2, [sp, #4]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	462b      	mov	r3, r5
 8003d80:	4622      	mov	r2, r4
 8003d82:	4601      	mov	r1, r0
 8003d84:	4802      	ldr	r0, [pc, #8]	@ (8003d90 <PIN_Setup+0x52c>)
 8003d86:	f7ff fc23 	bl	80035d0 <GPIO_Pin_Init>
}
 8003d8a:	e1bb      	b.n	8004104 <PIN_Setup+0x8a0>
 8003d8c:	40020c00 	.word	0x40020c00
 8003d90:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4aaa      	ldr	r2, [pc, #680]	@ (8004044 <PIN_Setup+0x7e0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	f040 81b2 	bne.w	8004104 <PIN_Setup+0x8a0>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	7a1b      	ldrb	r3, [r3, #8]
 8003da4:	2201      	movs	r2, #1
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00f      	beq.n	8003dca <PIN_Setup+0x566>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	7a1b      	ldrb	r3, [r3, #8]
 8003dae:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00a      	beq.n	8003dca <PIN_Setup+0x566>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	7a1b      	ldrb	r3, [r3, #8]
 8003db8:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d005      	beq.n	8003dca <PIN_Setup+0x566>
		   (config->mode == USART_Configuration.Mode.LIN) )
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	7a1b      	ldrb	r3, [r3, #8]
 8003dc2:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	f040 8119 	bne.w	8003ffc <PIN_Setup+0x798>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	7a5b      	ldrb	r3, [r3, #9]
 8003dce:	220b      	movs	r2, #11
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d10f      	bne.n	8003df4 <PIN_Setup+0x590>
 8003dd4:	200b      	movs	r0, #11
 8003dd6:	2402      	movs	r4, #2
 8003dd8:	2500      	movs	r5, #0
 8003dda:	2302      	movs	r3, #2
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2107      	movs	r1, #7
 8003de0:	9102      	str	r1, [sp, #8]
 8003de2:	9201      	str	r2, [sp, #4]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	462b      	mov	r3, r5
 8003de8:	4622      	mov	r2, r4
 8003dea:	4601      	mov	r1, r0
 8003dec:	4896      	ldr	r0, [pc, #600]	@ (8004048 <PIN_Setup+0x7e4>)
 8003dee:	f7ff fbef 	bl	80035d0 <GPIO_Pin_Init>
 8003df2:	e028      	b.n	8003e46 <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	7a5b      	ldrb	r3, [r3, #9]
 8003df8:	220a      	movs	r2, #10
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d10f      	bne.n	8003e1e <PIN_Setup+0x5ba>
 8003dfe:	200a      	movs	r0, #10
 8003e00:	2402      	movs	r4, #2
 8003e02:	2500      	movs	r5, #0
 8003e04:	2302      	movs	r3, #2
 8003e06:	2200      	movs	r2, #0
 8003e08:	2107      	movs	r1, #7
 8003e0a:	9102      	str	r1, [sp, #8]
 8003e0c:	9201      	str	r2, [sp, #4]
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	462b      	mov	r3, r5
 8003e12:	4622      	mov	r2, r4
 8003e14:	4601      	mov	r1, r0
 8003e16:	488d      	ldr	r0, [pc, #564]	@ (800404c <PIN_Setup+0x7e8>)
 8003e18:	f7ff fbda 	bl	80035d0 <GPIO_Pin_Init>
 8003e1c:	e013      	b.n	8003e46 <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	7a5b      	ldrb	r3, [r3, #9]
 8003e22:	2208      	movs	r2, #8
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d10e      	bne.n	8003e46 <PIN_Setup+0x5e2>
 8003e28:	2008      	movs	r0, #8
 8003e2a:	2402      	movs	r4, #2
 8003e2c:	2500      	movs	r5, #0
 8003e2e:	2302      	movs	r3, #2
 8003e30:	2200      	movs	r2, #0
 8003e32:	2107      	movs	r1, #7
 8003e34:	9102      	str	r1, [sp, #8]
 8003e36:	9201      	str	r2, [sp, #4]
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	462b      	mov	r3, r5
 8003e3c:	4622      	mov	r2, r4
 8003e3e:	4601      	mov	r1, r0
 8003e40:	4882      	ldr	r0, [pc, #520]	@ (800404c <PIN_Setup+0x7e8>)
 8003e42:	f7ff fbc5 	bl	80035d0 <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	7a9b      	ldrb	r3, [r3, #10]
 8003e4a:	220a      	movs	r2, #10
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d10f      	bne.n	8003e70 <PIN_Setup+0x60c>
 8003e50:	200a      	movs	r0, #10
 8003e52:	2402      	movs	r4, #2
 8003e54:	2500      	movs	r5, #0
 8003e56:	2302      	movs	r3, #2
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2107      	movs	r1, #7
 8003e5c:	9102      	str	r1, [sp, #8]
 8003e5e:	9201      	str	r2, [sp, #4]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	462b      	mov	r3, r5
 8003e64:	4622      	mov	r2, r4
 8003e66:	4601      	mov	r1, r0
 8003e68:	4877      	ldr	r0, [pc, #476]	@ (8004048 <PIN_Setup+0x7e4>)
 8003e6a:	f7ff fbb1 	bl	80035d0 <GPIO_Pin_Init>
 8003e6e:	e028      	b.n	8003ec2 <PIN_Setup+0x65e>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	7a9b      	ldrb	r3, [r3, #10]
 8003e74:	220b      	movs	r2, #11
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10f      	bne.n	8003e9a <PIN_Setup+0x636>
 8003e7a:	200b      	movs	r0, #11
 8003e7c:	2402      	movs	r4, #2
 8003e7e:	2500      	movs	r5, #0
 8003e80:	2302      	movs	r3, #2
 8003e82:	2200      	movs	r2, #0
 8003e84:	2107      	movs	r1, #7
 8003e86:	9102      	str	r1, [sp, #8]
 8003e88:	9201      	str	r2, [sp, #4]
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	462b      	mov	r3, r5
 8003e8e:	4622      	mov	r2, r4
 8003e90:	4601      	mov	r1, r0
 8003e92:	486e      	ldr	r0, [pc, #440]	@ (800404c <PIN_Setup+0x7e8>)
 8003e94:	f7ff fb9c 	bl	80035d0 <GPIO_Pin_Init>
 8003e98:	e013      	b.n	8003ec2 <PIN_Setup+0x65e>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	7a5b      	ldrb	r3, [r3, #9]
 8003e9e:	2208      	movs	r2, #8
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d10e      	bne.n	8003ec2 <PIN_Setup+0x65e>
 8003ea4:	2008      	movs	r0, #8
 8003ea6:	2402      	movs	r4, #2
 8003ea8:	2500      	movs	r5, #0
 8003eaa:	2302      	movs	r3, #2
 8003eac:	2200      	movs	r2, #0
 8003eae:	2107      	movs	r1, #7
 8003eb0:	9102      	str	r1, [sp, #8]
 8003eb2:	9201      	str	r2, [sp, #4]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	462b      	mov	r3, r5
 8003eb8:	4622      	mov	r2, r4
 8003eba:	4601      	mov	r1, r0
 8003ebc:	4863      	ldr	r0, [pc, #396]	@ (800404c <PIN_Setup+0x7e8>)
 8003ebe:	f7ff fb87 	bl	80035d0 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	7a1b      	ldrb	r3, [r3, #8]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d128      	bne.n	8003f1e <PIN_Setup+0x6ba>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	7adb      	ldrb	r3, [r3, #11]
 8003ed0:	220c      	movs	r2, #12
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d10f      	bne.n	8003ef6 <PIN_Setup+0x692>
 8003ed6:	200c      	movs	r0, #12
 8003ed8:	2402      	movs	r4, #2
 8003eda:	2500      	movs	r5, #0
 8003edc:	2302      	movs	r3, #2
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2107      	movs	r1, #7
 8003ee2:	9102      	str	r1, [sp, #8]
 8003ee4:	9201      	str	r2, [sp, #4]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	462b      	mov	r3, r5
 8003eea:	4622      	mov	r2, r4
 8003eec:	4601      	mov	r1, r0
 8003eee:	4857      	ldr	r0, [pc, #348]	@ (800404c <PIN_Setup+0x7e8>)
 8003ef0:	f7ff fb6e 	bl	80035d0 <GPIO_Pin_Init>
 8003ef4:	e013      	b.n	8003f1e <PIN_Setup+0x6ba>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	7adb      	ldrb	r3, [r3, #11]
 8003efa:	220a      	movs	r2, #10
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d10e      	bne.n	8003f1e <PIN_Setup+0x6ba>
 8003f00:	200a      	movs	r0, #10
 8003f02:	2402      	movs	r4, #2
 8003f04:	2500      	movs	r5, #0
 8003f06:	2302      	movs	r3, #2
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2107      	movs	r1, #7
 8003f0c:	9102      	str	r1, [sp, #8]
 8003f0e:	9201      	str	r2, [sp, #4]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	462b      	mov	r3, r5
 8003f14:	4622      	mov	r2, r4
 8003f16:	4601      	mov	r1, r0
 8003f18:	484d      	ldr	r0, [pc, #308]	@ (8004050 <PIN_Setup+0x7ec>)
 8003f1a:	f7ff fb59 	bl	80035d0 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	7bdb      	ldrb	r3, [r3, #15]
 8003f22:	2200      	movs	r2, #0
 8003f24:	4293      	cmp	r3, r2
 8003f26:	f000 80ec 	beq.w	8004102 <PIN_Setup+0x89e>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	7bdb      	ldrb	r3, [r3, #15]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d004      	beq.n	8003f3e <PIN_Setup+0x6da>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	7bdb      	ldrb	r3, [r3, #15]
 8003f38:	2203      	movs	r2, #3
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d128      	bne.n	8003f90 <PIN_Setup+0x72c>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	7adb      	ldrb	r3, [r3, #11]
 8003f42:	2200      	movs	r2, #0
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d10f      	bne.n	8003f68 <PIN_Setup+0x704>
 8003f48:	2000      	movs	r0, #0
 8003f4a:	2402      	movs	r4, #2
 8003f4c:	2500      	movs	r5, #0
 8003f4e:	2302      	movs	r3, #2
 8003f50:	2200      	movs	r2, #0
 8003f52:	2107      	movs	r1, #7
 8003f54:	9102      	str	r1, [sp, #8]
 8003f56:	9201      	str	r2, [sp, #4]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	462b      	mov	r3, r5
 8003f5c:	4622      	mov	r2, r4
 8003f5e:	4601      	mov	r1, r0
 8003f60:	483a      	ldr	r0, [pc, #232]	@ (800404c <PIN_Setup+0x7e8>)
 8003f62:	f7ff fb35 	bl	80035d0 <GPIO_Pin_Init>
 8003f66:	e013      	b.n	8003f90 <PIN_Setup+0x72c>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	7adb      	ldrb	r3, [r3, #11]
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d10e      	bne.n	8003f90 <PIN_Setup+0x72c>
 8003f72:	2003      	movs	r0, #3
 8003f74:	2402      	movs	r4, #2
 8003f76:	2500      	movs	r5, #0
 8003f78:	2302      	movs	r3, #2
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2107      	movs	r1, #7
 8003f7e:	9102      	str	r1, [sp, #8]
 8003f80:	9201      	str	r2, [sp, #4]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	462b      	mov	r3, r5
 8003f86:	4622      	mov	r2, r4
 8003f88:	4601      	mov	r1, r0
 8003f8a:	4831      	ldr	r0, [pc, #196]	@ (8004050 <PIN_Setup+0x7ec>)
 8003f8c:	f7ff fb20 	bl	80035d0 <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	7bdb      	ldrb	r3, [r3, #15]
 8003f94:	2202      	movs	r2, #2
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d005      	beq.n	8003fa6 <PIN_Setup+0x742>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	7bdb      	ldrb	r3, [r3, #15]
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	f040 80ae 	bne.w	8004102 <PIN_Setup+0x89e>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	7adb      	ldrb	r3, [r3, #11]
 8003faa:	2201      	movs	r2, #1
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d10f      	bne.n	8003fd0 <PIN_Setup+0x76c>
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	2402      	movs	r4, #2
 8003fb4:	2500      	movs	r5, #0
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2107      	movs	r1, #7
 8003fbc:	9102      	str	r1, [sp, #8]
 8003fbe:	9201      	str	r2, [sp, #4]
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	462b      	mov	r3, r5
 8003fc4:	4622      	mov	r2, r4
 8003fc6:	4601      	mov	r1, r0
 8003fc8:	4820      	ldr	r0, [pc, #128]	@ (800404c <PIN_Setup+0x7e8>)
 8003fca:	f7ff fb01 	bl	80035d0 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003fce:	e098      	b.n	8004102 <PIN_Setup+0x89e>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	7adb      	ldrb	r3, [r3, #11]
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	f040 8093 	bne.w	8004102 <PIN_Setup+0x89e>
 8003fdc:	2004      	movs	r0, #4
 8003fde:	2402      	movs	r4, #2
 8003fe0:	2500      	movs	r5, #0
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2107      	movs	r1, #7
 8003fe8:	9102      	str	r1, [sp, #8]
 8003fea:	9201      	str	r2, [sp, #4]
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	462b      	mov	r3, r5
 8003ff0:	4622      	mov	r2, r4
 8003ff2:	4601      	mov	r1, r0
 8003ff4:	4816      	ldr	r0, [pc, #88]	@ (8004050 <PIN_Setup+0x7ec>)
 8003ff6:	f7ff faeb 	bl	80035d0 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003ffa:	e082      	b.n	8004102 <PIN_Setup+0x89e>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	7a1b      	ldrb	r3, [r3, #8]
 8004000:	2206      	movs	r2, #6
 8004002:	4293      	cmp	r3, r2
 8004004:	d009      	beq.n	800401a <PIN_Setup+0x7b6>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	7a1b      	ldrb	r3, [r3, #8]
 800400a:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <PIN_Setup+0x7b6>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	7a1b      	ldrb	r3, [r3, #8]
 8004014:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8004016:	4293      	cmp	r3, r2
 8004018:	d174      	bne.n	8004104 <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	7a5b      	ldrb	r3, [r3, #9]
 800401e:	220b      	movs	r2, #11
 8004020:	4293      	cmp	r3, r2
 8004022:	d117      	bne.n	8004054 <PIN_Setup+0x7f0>
 8004024:	200b      	movs	r0, #11
 8004026:	2402      	movs	r4, #2
 8004028:	2500      	movs	r5, #0
 800402a:	2302      	movs	r3, #2
 800402c:	2200      	movs	r2, #0
 800402e:	2107      	movs	r1, #7
 8004030:	9102      	str	r1, [sp, #8]
 8004032:	9201      	str	r2, [sp, #4]
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	462b      	mov	r3, r5
 8004038:	4622      	mov	r2, r4
 800403a:	4601      	mov	r1, r0
 800403c:	4802      	ldr	r0, [pc, #8]	@ (8004048 <PIN_Setup+0x7e4>)
 800403e:	f7ff fac7 	bl	80035d0 <GPIO_Pin_Init>
 8004042:	e030      	b.n	80040a6 <PIN_Setup+0x842>
 8004044:	40004800 	.word	0x40004800
 8004048:	40020000 	.word	0x40020000
 800404c:	40020400 	.word	0x40020400
 8004050:	40020c00 	.word	0x40020c00
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	7a5b      	ldrb	r3, [r3, #9]
 8004058:	220a      	movs	r2, #10
 800405a:	4293      	cmp	r3, r2
 800405c:	d10f      	bne.n	800407e <PIN_Setup+0x81a>
 800405e:	200a      	movs	r0, #10
 8004060:	2402      	movs	r4, #2
 8004062:	2500      	movs	r5, #0
 8004064:	2302      	movs	r3, #2
 8004066:	2200      	movs	r2, #0
 8004068:	2107      	movs	r1, #7
 800406a:	9102      	str	r1, [sp, #8]
 800406c:	9201      	str	r2, [sp, #4]
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	462b      	mov	r3, r5
 8004072:	4622      	mov	r2, r4
 8004074:	4601      	mov	r1, r0
 8004076:	4825      	ldr	r0, [pc, #148]	@ (800410c <PIN_Setup+0x8a8>)
 8004078:	f7ff faaa 	bl	80035d0 <GPIO_Pin_Init>
 800407c:	e013      	b.n	80040a6 <PIN_Setup+0x842>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	7a5b      	ldrb	r3, [r3, #9]
 8004082:	2208      	movs	r2, #8
 8004084:	4293      	cmp	r3, r2
 8004086:	d10e      	bne.n	80040a6 <PIN_Setup+0x842>
 8004088:	2008      	movs	r0, #8
 800408a:	2402      	movs	r4, #2
 800408c:	2500      	movs	r5, #0
 800408e:	2302      	movs	r3, #2
 8004090:	2200      	movs	r2, #0
 8004092:	2107      	movs	r1, #7
 8004094:	9102      	str	r1, [sp, #8]
 8004096:	9201      	str	r2, [sp, #4]
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	462b      	mov	r3, r5
 800409c:	4622      	mov	r2, r4
 800409e:	4601      	mov	r1, r0
 80040a0:	481a      	ldr	r0, [pc, #104]	@ (800410c <PIN_Setup+0x8a8>)
 80040a2:	f7ff fa95 	bl	80035d0 <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	7adb      	ldrb	r3, [r3, #11]
 80040aa:	220c      	movs	r2, #12
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d10f      	bne.n	80040d0 <PIN_Setup+0x86c>
 80040b0:	200c      	movs	r0, #12
 80040b2:	2402      	movs	r4, #2
 80040b4:	2500      	movs	r5, #0
 80040b6:	2302      	movs	r3, #2
 80040b8:	2200      	movs	r2, #0
 80040ba:	2107      	movs	r1, #7
 80040bc:	9102      	str	r1, [sp, #8]
 80040be:	9201      	str	r2, [sp, #4]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	462b      	mov	r3, r5
 80040c4:	4622      	mov	r2, r4
 80040c6:	4601      	mov	r1, r0
 80040c8:	4810      	ldr	r0, [pc, #64]	@ (800410c <PIN_Setup+0x8a8>)
 80040ca:	f7ff fa81 	bl	80035d0 <GPIO_Pin_Init>
}
 80040ce:	e019      	b.n	8004104 <PIN_Setup+0x8a0>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	7adb      	ldrb	r3, [r3, #11]
 80040d4:	220a      	movs	r2, #10
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d114      	bne.n	8004104 <PIN_Setup+0x8a0>
 80040da:	200a      	movs	r0, #10
 80040dc:	2402      	movs	r4, #2
 80040de:	2500      	movs	r5, #0
 80040e0:	2302      	movs	r3, #2
 80040e2:	2200      	movs	r2, #0
 80040e4:	2107      	movs	r1, #7
 80040e6:	9102      	str	r1, [sp, #8]
 80040e8:	9201      	str	r2, [sp, #4]
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	462b      	mov	r3, r5
 80040ee:	4622      	mov	r2, r4
 80040f0:	4601      	mov	r1, r0
 80040f2:	4807      	ldr	r0, [pc, #28]	@ (8004110 <PIN_Setup+0x8ac>)
 80040f4:	f7ff fa6c 	bl	80035d0 <GPIO_Pin_Init>
}
 80040f8:	e004      	b.n	8004104 <PIN_Setup+0x8a0>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80040fa:	bf00      	nop
 80040fc:	e002      	b.n	8004104 <PIN_Setup+0x8a0>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 80040fe:	bf00      	nop
 8004100:	e000      	b.n	8004104 <PIN_Setup+0x8a0>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8004102:	bf00      	nop
}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bdb0      	pop	{r4, r5, r7, pc}
 800410c:	40020400 	.word	0x40020400
 8004110:	40020c00 	.word	0x40020c00
 8004114:	00000000 	.word	0x00000000

08004118 <USART_Init>:

int8_t USART_Init(USART_Config *config)
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b08b      	sub	sp, #44	@ 0x2c
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff fb3b 	bl	800379c <USART_Clock_Enable>
	PIN_Setup(config);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff fb9c 	bl	8003864 <PIN_Setup>

	usart_dma_instance_number = Get_USART_Instance_Number(config);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff fad5 	bl	80036dc <Get_USART_Instance_Number>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	4bb0      	ldr	r3, [pc, #704]	@ (80043f8 <USART_Init+0x2e0>)
 8004138:	701a      	strb	r2, [r3, #0]
	if(usart_dma_instance_number == -1) return -1;
 800413a:	4baf      	ldr	r3, [pc, #700]	@ (80043f8 <USART_Init+0x2e0>)
 800413c:	f993 3000 	ldrsb.w	r3, [r3]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d102      	bne.n	800414c <USART_Init+0x34>
 8004146:	f04f 33ff 	mov.w	r3, #4294967295
 800414a:	e288      	b.n	800465e <USART_Init+0x546>

//	USART1 -> CR1 |= USART_CR1_UE;

	double brr = (168000000.0/ (16.0 * 2.0 * (double)(config->baudrate)));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4618      	mov	r0, r3
 8004152:	f7fc f97b 	bl	800044c <__aeabi_ui2d>
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	4ba8      	ldr	r3, [pc, #672]	@ (80043fc <USART_Init+0x2e4>)
 800415c:	f7fc f9f0 	bl	8000540 <__aeabi_dmul>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	a1a2      	add	r1, pc, #648	@ (adr r1, 80043f0 <USART_Init+0x2d8>)
 8004166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800416a:	f7fc fb13 	bl	8000794 <__aeabi_ddiv>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double div_frac, mantissa;
	separateFractionAndIntegral(brr, &div_frac, &mantissa);
 8004176:	f107 0208 	add.w	r2, r7, #8
 800417a:	f107 0310 	add.w	r3, r7, #16
 800417e:	4611      	mov	r1, r2
 8004180:	4618      	mov	r0, r3
 8004182:	ed97 0b08 	vldr	d0, [r7, #32]
 8004186:	f7ff fa83 	bl	8003690 <separateFractionAndIntegral>

	int div_frac_1 = (int)(ceil(div_frac*16.0));
 800418a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	4b9b      	ldr	r3, [pc, #620]	@ (8004400 <USART_Init+0x2e8>)
 8004194:	f7fc f9d4 	bl	8000540 <__aeabi_dmul>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	ec43 2b17 	vmov	d7, r2, r3
 80041a0:	eeb0 0a47 	vmov.f32	s0, s14
 80041a4:	eef0 0a67 	vmov.f32	s1, s15
 80041a8:	f000 fdf6 	bl	8004d98 <ceil>
 80041ac:	ec53 2b10 	vmov	r2, r3, d0
 80041b0:	4610      	mov	r0, r2
 80041b2:	4619      	mov	r1, r3
 80041b4:	f7fc fc74 	bl	8000aa0 <__aeabi_d2iz>
 80041b8:	4603      	mov	r3, r0
 80041ba:	61fb      	str	r3, [r7, #28]
	int mantissa_1 = (int)(ceil(mantissa));
 80041bc:	ed97 7b02 	vldr	d7, [r7, #8]
 80041c0:	eeb0 0a47 	vmov.f32	s0, s14
 80041c4:	eef0 0a67 	vmov.f32	s1, s15
 80041c8:	f000 fde6 	bl	8004d98 <ceil>
 80041cc:	ec53 2b10 	vmov	r2, r3, d0
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	f7fc fc64 	bl	8000aa0 <__aeabi_d2iz>
 80041d8:	4603      	mov	r3, r0
 80041da:	61bb      	str	r3, [r7, #24]

//	config->Port-> CR1 |= USART_CR1_UE;
	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	011a      	lsls	r2, r3, #4
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity; //Parity
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	7c9b      	ldrb	r3, [r3, #18]
 80041f4:	4619      	mov	r1, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	60da      	str	r2, [r3, #12]
	config->Port->CR1 |= config->interrupt; //interrupt
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	7b9b      	ldrb	r3, [r3, #14]
 8004208:	4619      	mov	r1, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	60da      	str	r2, [r3, #12]
	config->Port->CR2 |= config->stop_bits;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	7c1b      	ldrb	r3, [r3, #16]
 800421c:	4619      	mov	r1, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	611a      	str	r2, [r3, #16]

	if(config->dma_enable == USART_Configuration.DMA_Enable.RX_Enable)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	7c5b      	ldrb	r3, [r3, #17]
 800422a:	2202      	movs	r2, #2
 800422c:	4293      	cmp	r3, r2
 800422e:	f040 80f7 	bne.w	8004420 <USART_Init+0x308>
	{
		config -> Port -> CR3 |= USART_CR3_DMAR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004240:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a6f      	ldr	r2, [pc, #444]	@ (8004404 <USART_Init+0x2ec>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d108      	bne.n	800425e <USART_Init+0x146>
		{
			xUSART_RX[0].Request = DMA_Configuration.Request.USART1_RX;
 800424c:	4a6e      	ldr	r2, [pc, #440]	@ (8004408 <USART_Init+0x2f0>)
 800424e:	4b6f      	ldr	r3, [pc, #444]	@ (800440c <USART_Init+0x2f4>)
 8004250:	4614      	mov	r4, r2
 8004252:	33c0      	adds	r3, #192	@ 0xc0
 8004254:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004258:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800425c:	e03e      	b.n	80042dc <USART_Init+0x1c4>
		}
		else if(config->Port == USART2)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a6b      	ldr	r2, [pc, #428]	@ (8004410 <USART_Init+0x2f8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d107      	bne.n	8004278 <USART_Init+0x160>
		{
			xUSART_RX[1].Request = DMA_Configuration.Request.USART2_RX;
 8004268:	4b67      	ldr	r3, [pc, #412]	@ (8004408 <USART_Init+0x2f0>)
 800426a:	4a68      	ldr	r2, [pc, #416]	@ (800440c <USART_Init+0x2f4>)
 800426c:	3338      	adds	r3, #56	@ 0x38
 800426e:	32d8      	adds	r2, #216	@ 0xd8
 8004270:	ca07      	ldmia	r2, {r0, r1, r2}
 8004272:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004276:	e031      	b.n	80042dc <USART_Init+0x1c4>
		}
		else if(config->Port == USART3)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a65      	ldr	r2, [pc, #404]	@ (8004414 <USART_Init+0x2fc>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d107      	bne.n	8004292 <USART_Init+0x17a>
		{
			xUSART_RX[2].Request = DMA_Configuration.Request.USART3_RX;
 8004282:	4b61      	ldr	r3, [pc, #388]	@ (8004408 <USART_Init+0x2f0>)
 8004284:	4a61      	ldr	r2, [pc, #388]	@ (800440c <USART_Init+0x2f4>)
 8004286:	3370      	adds	r3, #112	@ 0x70
 8004288:	32f0      	adds	r2, #240	@ 0xf0
 800428a:	ca07      	ldmia	r2, {r0, r1, r2}
 800428c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004290:	e024      	b.n	80042dc <USART_Init+0x1c4>
		}
		else if(config->Port == UART4)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a60      	ldr	r2, [pc, #384]	@ (8004418 <USART_Init+0x300>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d108      	bne.n	80042ae <USART_Init+0x196>
		{
			xUSART_RX[3].Request = DMA_Configuration.Request.UART4_RX;
 800429c:	4b5a      	ldr	r3, [pc, #360]	@ (8004408 <USART_Init+0x2f0>)
 800429e:	4a5b      	ldr	r2, [pc, #364]	@ (800440c <USART_Init+0x2f4>)
 80042a0:	33a8      	adds	r3, #168	@ 0xa8
 80042a2:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 80042a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80042a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80042ac:	e016      	b.n	80042dc <USART_Init+0x1c4>
		}
		else if(config->Port == UART5)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a5a      	ldr	r2, [pc, #360]	@ (800441c <USART_Init+0x304>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d108      	bne.n	80042ca <USART_Init+0x1b2>
		{
			xUSART_RX[4].Request = DMA_Configuration.Request.UART5_RX;
 80042b8:	4b53      	ldr	r3, [pc, #332]	@ (8004408 <USART_Init+0x2f0>)
 80042ba:	4a54      	ldr	r2, [pc, #336]	@ (800440c <USART_Init+0x2f4>)
 80042bc:	33e0      	adds	r3, #224	@ 0xe0
 80042be:	f502 7290 	add.w	r2, r2, #288	@ 0x120
 80042c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80042c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80042c8:	e008      	b.n	80042dc <USART_Init+0x1c4>
		}
		else
		{
			xUSART_RX[5].Request = DMA_Configuration.Request.UART6_RX;
 80042ca:	4b4f      	ldr	r3, [pc, #316]	@ (8004408 <USART_Init+0x2f0>)
 80042cc:	4a4f      	ldr	r2, [pc, #316]	@ (800440c <USART_Init+0x2f4>)
 80042ce:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80042d2:	f502 729c 	add.w	r2, r2, #312	@ 0x138
 80042d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80042d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 80042dc:	4b46      	ldr	r3, [pc, #280]	@ (80043f8 <USART_Init+0x2e0>)
 80042de:	f993 3000 	ldrsb.w	r3, [r3]
 80042e2:	4618      	mov	r0, r3
 80042e4:	2200      	movs	r2, #0
 80042e6:	4948      	ldr	r1, [pc, #288]	@ (8004408 <USART_Init+0x2f0>)
 80042e8:	4603      	mov	r3, r0
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	1a1b      	subs	r3, r3, r0
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	440b      	add	r3, r1
 80042f2:	3318      	adds	r3, #24
 80042f4:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 80042f6:	4b40      	ldr	r3, [pc, #256]	@ (80043f8 <USART_Init+0x2e0>)
 80042f8:	f993 3000 	ldrsb.w	r3, [r3]
 80042fc:	4618      	mov	r0, r3
 80042fe:	2200      	movs	r2, #0
 8004300:	4941      	ldr	r1, [pc, #260]	@ (8004408 <USART_Init+0x2f0>)
 8004302:	4603      	mov	r3, r0
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	1a1b      	subs	r3, r3, r0
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	440b      	add	r3, r1
 800430c:	330c      	adds	r3, #12
 800430e:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete | DMA_Configuration.DMA_Interrupts.Transfer_Error;
 8004310:	2210      	movs	r2, #16
 8004312:	2304      	movs	r3, #4
 8004314:	4938      	ldr	r1, [pc, #224]	@ (80043f8 <USART_Init+0x2e0>)
 8004316:	f991 1000 	ldrsb.w	r1, [r1]
 800431a:	4608      	mov	r0, r1
 800431c:	431a      	orrs	r2, r3
 800431e:	493a      	ldr	r1, [pc, #232]	@ (8004408 <USART_Init+0x2f0>)
 8004320:	4603      	mov	r3, r0
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	1a1b      	subs	r3, r3, r0
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	440b      	add	r3, r1
 800432a:	331c      	adds	r3, #28
 800432c:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 800432e:	4b32      	ldr	r3, [pc, #200]	@ (80043f8 <USART_Init+0x2e0>)
 8004330:	f993 3000 	ldrsb.w	r3, [r3]
 8004334:	4618      	mov	r0, r3
 8004336:	2200      	movs	r2, #0
 8004338:	4933      	ldr	r1, [pc, #204]	@ (8004408 <USART_Init+0x2f0>)
 800433a:	4603      	mov	r3, r0
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	1a1b      	subs	r3, r3, r0
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	440b      	add	r3, r1
 8004344:	3328      	adds	r3, #40	@ 0x28
 8004346:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8004348:	4b2b      	ldr	r3, [pc, #172]	@ (80043f8 <USART_Init+0x2e0>)
 800434a:	f993 3000 	ldrsb.w	r3, [r3]
 800434e:	4618      	mov	r0, r3
 8004350:	2200      	movs	r2, #0
 8004352:	492d      	ldr	r1, [pc, #180]	@ (8004408 <USART_Init+0x2f0>)
 8004354:	4603      	mov	r3, r0
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	1a1b      	subs	r3, r3, r0
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	440b      	add	r3, r1
 800435e:	3324      	adds	r3, #36	@ 0x24
 8004360:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8004362:	2200      	movs	r2, #0
 8004364:	4b24      	ldr	r3, [pc, #144]	@ (80043f8 <USART_Init+0x2e0>)
 8004366:	f993 3000 	ldrsb.w	r3, [r3]
 800436a:	4619      	mov	r1, r3
 800436c:	b290      	uxth	r0, r2
 800436e:	4a26      	ldr	r2, [pc, #152]	@ (8004408 <USART_Init+0x2f0>)
 8004370:	460b      	mov	r3, r1
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	1a5b      	subs	r3, r3, r1
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4413      	add	r3, r2
 800437a:	3322      	adds	r3, #34	@ 0x22
 800437c:	4602      	mov	r2, r0
 800437e:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Disable;
 8004380:	2200      	movs	r2, #0
 8004382:	4b1d      	ldr	r3, [pc, #116]	@ (80043f8 <USART_Init+0x2e0>)
 8004384:	f993 3000 	ldrsb.w	r3, [r3]
 8004388:	4619      	mov	r1, r3
 800438a:	b290      	uxth	r0, r2
 800438c:	4a1e      	ldr	r2, [pc, #120]	@ (8004408 <USART_Init+0x2f0>)
 800438e:	460b      	mov	r3, r1
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	1a5b      	subs	r3, r3, r1
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4413      	add	r3, r2
 8004398:	3320      	adds	r3, #32
 800439a:	4602      	mov	r2, r0
 800439c:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.High;
 800439e:	4b16      	ldr	r3, [pc, #88]	@ (80043f8 <USART_Init+0x2e0>)
 80043a0:	f993 3000 	ldrsb.w	r3, [r3]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043aa:	4917      	ldr	r1, [pc, #92]	@ (8004408 <USART_Init+0x2f0>)
 80043ac:	4603      	mov	r3, r0
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	1a1b      	subs	r3, r3, r0
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	440b      	add	r3, r1
 80043b6:	3314      	adds	r3, #20
 80043b8:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 80043ba:	4b0f      	ldr	r3, [pc, #60]	@ (80043f8 <USART_Init+0x2e0>)
 80043bc:	f993 3000 	ldrsb.w	r3, [r3]
 80043c0:	4618      	mov	r0, r3
 80043c2:	2200      	movs	r2, #0
 80043c4:	4910      	ldr	r1, [pc, #64]	@ (8004408 <USART_Init+0x2f0>)
 80043c6:	4603      	mov	r3, r0
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	1a1b      	subs	r3, r3, r0
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	440b      	add	r3, r1
 80043d0:	3310      	adds	r3, #16
 80043d2:	601a      	str	r2, [r3, #0]
		DMA_Init(&xUSART_RX[usart_dma_instance_number]);
 80043d4:	4b08      	ldr	r3, [pc, #32]	@ (80043f8 <USART_Init+0x2e0>)
 80043d6:	f993 3000 	ldrsb.w	r3, [r3]
 80043da:	461a      	mov	r2, r3
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4a08      	ldr	r2, [pc, #32]	@ (8004408 <USART_Init+0x2f0>)
 80043e6:	4413      	add	r3, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fe fe03 	bl	8002ff4 <DMA_Init>
 80043ee:	e01f      	b.n	8004430 <USART_Init+0x318>
 80043f0:	00000000 	.word	0x00000000
 80043f4:	41a406f4 	.word	0x41a406f4
 80043f8:	200005d0 	.word	0x200005d0
 80043fc:	40400000 	.word	0x40400000
 8004400:	40300000 	.word	0x40300000
 8004404:	40011000 	.word	0x40011000
 8004408:	20000330 	.word	0x20000330
 800440c:	08005618 	.word	0x08005618
 8004410:	40004400 	.word	0x40004400
 8004414:	40004800 	.word	0x40004800
 8004418:	40004c00 	.word	0x40004c00
 800441c:	40005000 	.word	0x40005000
	}
	else
	{
		config -> Port  -> CR3 &= ~USART_CR3_DMAR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800442e:	615a      	str	r2, [r3, #20]
	}

	if(config->dma_enable == USART_Configuration.DMA_Enable.TX_Enable)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	7c5b      	ldrb	r3, [r3, #17]
 8004434:	2201      	movs	r2, #1
 8004436:	4293      	cmp	r3, r2
 8004438:	f040 80de 	bne.w	80045f8 <USART_Init+0x4e0>
	{

		config -> Port  -> CR3 |= USART_CR3_DMAT;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800444a:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a85      	ldr	r2, [pc, #532]	@ (8004668 <USART_Init+0x550>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d108      	bne.n	8004468 <USART_Init+0x350>
		{
			xUSART_TX[0].Request = DMA_Configuration.Request.USART1_TX;
 8004456:	4a85      	ldr	r2, [pc, #532]	@ (800466c <USART_Init+0x554>)
 8004458:	4b85      	ldr	r3, [pc, #532]	@ (8004670 <USART_Init+0x558>)
 800445a:	4614      	mov	r4, r2
 800445c:	33cc      	adds	r3, #204	@ 0xcc
 800445e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004462:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004466:	e03e      	b.n	80044e6 <USART_Init+0x3ce>
		}
		else if(config->Port == USART2)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a81      	ldr	r2, [pc, #516]	@ (8004674 <USART_Init+0x55c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d107      	bne.n	8004482 <USART_Init+0x36a>
		{
			xUSART_TX[1].Request = DMA_Configuration.Request.USART2_TX;
 8004472:	4b7e      	ldr	r3, [pc, #504]	@ (800466c <USART_Init+0x554>)
 8004474:	4a7e      	ldr	r2, [pc, #504]	@ (8004670 <USART_Init+0x558>)
 8004476:	3338      	adds	r3, #56	@ 0x38
 8004478:	32e4      	adds	r2, #228	@ 0xe4
 800447a:	ca07      	ldmia	r2, {r0, r1, r2}
 800447c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004480:	e031      	b.n	80044e6 <USART_Init+0x3ce>
		}
		else if(config->Port == USART3)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a7c      	ldr	r2, [pc, #496]	@ (8004678 <USART_Init+0x560>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d107      	bne.n	800449c <USART_Init+0x384>
		{
			xUSART_TX[2].Request = DMA_Configuration.Request.USART3_TX;
 800448c:	4b77      	ldr	r3, [pc, #476]	@ (800466c <USART_Init+0x554>)
 800448e:	4a78      	ldr	r2, [pc, #480]	@ (8004670 <USART_Init+0x558>)
 8004490:	3370      	adds	r3, #112	@ 0x70
 8004492:	32fc      	adds	r2, #252	@ 0xfc
 8004494:	ca07      	ldmia	r2, {r0, r1, r2}
 8004496:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800449a:	e024      	b.n	80044e6 <USART_Init+0x3ce>
		}
		else if(config->Port == UART4)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a76      	ldr	r2, [pc, #472]	@ (800467c <USART_Init+0x564>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d108      	bne.n	80044b8 <USART_Init+0x3a0>
		{
			xUSART_TX[3].Request = DMA_Configuration.Request.UART4_TX;
 80044a6:	4b71      	ldr	r3, [pc, #452]	@ (800466c <USART_Init+0x554>)
 80044a8:	4a71      	ldr	r2, [pc, #452]	@ (8004670 <USART_Init+0x558>)
 80044aa:	33a8      	adds	r3, #168	@ 0xa8
 80044ac:	f502 728a 	add.w	r2, r2, #276	@ 0x114
 80044b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80044b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80044b6:	e016      	b.n	80044e6 <USART_Init+0x3ce>
		}
		else if(config->Port == UART5)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a70      	ldr	r2, [pc, #448]	@ (8004680 <USART_Init+0x568>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d108      	bne.n	80044d4 <USART_Init+0x3bc>
		{
			xUSART_TX[4].Request = DMA_Configuration.Request.UART5_TX;
 80044c2:	4b6a      	ldr	r3, [pc, #424]	@ (800466c <USART_Init+0x554>)
 80044c4:	4a6a      	ldr	r2, [pc, #424]	@ (8004670 <USART_Init+0x558>)
 80044c6:	33e0      	adds	r3, #224	@ 0xe0
 80044c8:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 80044cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80044ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80044d2:	e008      	b.n	80044e6 <USART_Init+0x3ce>
		}
		else
		{
			xUSART_TX[5].Request = DMA_Configuration.Request.UART6_TX;
 80044d4:	4b65      	ldr	r3, [pc, #404]	@ (800466c <USART_Init+0x554>)
 80044d6:	4a66      	ldr	r2, [pc, #408]	@ (8004670 <USART_Init+0x558>)
 80044d8:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80044dc:	f502 72a2 	add.w	r2, r2, #324	@ 0x144
 80044e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80044e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		xUSART_TX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 80044e6:	4b67      	ldr	r3, [pc, #412]	@ (8004684 <USART_Init+0x56c>)
 80044e8:	f993 3000 	ldrsb.w	r3, [r3]
 80044ec:	4618      	mov	r0, r3
 80044ee:	2200      	movs	r2, #0
 80044f0:	495e      	ldr	r1, [pc, #376]	@ (800466c <USART_Init+0x554>)
 80044f2:	4603      	mov	r3, r0
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	1a1b      	subs	r3, r3, r0
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	440b      	add	r3, r1
 80044fc:	3318      	adds	r3, #24
 80044fe:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8004500:	4b60      	ldr	r3, [pc, #384]	@ (8004684 <USART_Init+0x56c>)
 8004502:	f993 3000 	ldrsb.w	r3, [r3]
 8004506:	4618      	mov	r0, r3
 8004508:	2200      	movs	r2, #0
 800450a:	4958      	ldr	r1, [pc, #352]	@ (800466c <USART_Init+0x554>)
 800450c:	4603      	mov	r3, r0
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	1a1b      	subs	r3, r3, r0
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	440b      	add	r3, r1
 8004516:	330c      	adds	r3, #12
 8004518:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete ;
 800451a:	4b5a      	ldr	r3, [pc, #360]	@ (8004684 <USART_Init+0x56c>)
 800451c:	f993 3000 	ldrsb.w	r3, [r3]
 8004520:	4618      	mov	r0, r3
 8004522:	2210      	movs	r2, #16
 8004524:	4951      	ldr	r1, [pc, #324]	@ (800466c <USART_Init+0x554>)
 8004526:	4603      	mov	r3, r0
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	1a1b      	subs	r3, r3, r0
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	440b      	add	r3, r1
 8004530:	331c      	adds	r3, #28
 8004532:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8004534:	4b53      	ldr	r3, [pc, #332]	@ (8004684 <USART_Init+0x56c>)
 8004536:	f993 3000 	ldrsb.w	r3, [r3]
 800453a:	4618      	mov	r0, r3
 800453c:	2200      	movs	r2, #0
 800453e:	494b      	ldr	r1, [pc, #300]	@ (800466c <USART_Init+0x554>)
 8004540:	4603      	mov	r3, r0
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	1a1b      	subs	r3, r3, r0
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	440b      	add	r3, r1
 800454a:	3328      	adds	r3, #40	@ 0x28
 800454c:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 800454e:	4b4d      	ldr	r3, [pc, #308]	@ (8004684 <USART_Init+0x56c>)
 8004550:	f993 3000 	ldrsb.w	r3, [r3]
 8004554:	4618      	mov	r0, r3
 8004556:	2200      	movs	r2, #0
 8004558:	4944      	ldr	r1, [pc, #272]	@ (800466c <USART_Init+0x554>)
 800455a:	4603      	mov	r3, r0
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	1a1b      	subs	r3, r3, r0
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	440b      	add	r3, r1
 8004564:	3324      	adds	r3, #36	@ 0x24
 8004566:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8004568:	2200      	movs	r2, #0
 800456a:	4b46      	ldr	r3, [pc, #280]	@ (8004684 <USART_Init+0x56c>)
 800456c:	f993 3000 	ldrsb.w	r3, [r3]
 8004570:	4619      	mov	r1, r3
 8004572:	b290      	uxth	r0, r2
 8004574:	4a3d      	ldr	r2, [pc, #244]	@ (800466c <USART_Init+0x554>)
 8004576:	460b      	mov	r3, r1
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	1a5b      	subs	r3, r3, r1
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	4413      	add	r3, r2
 8004580:	3322      	adds	r3, #34	@ 0x22
 8004582:	4602      	mov	r2, r0
 8004584:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8004586:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800458a:	4b3e      	ldr	r3, [pc, #248]	@ (8004684 <USART_Init+0x56c>)
 800458c:	f993 3000 	ldrsb.w	r3, [r3]
 8004590:	4619      	mov	r1, r3
 8004592:	b290      	uxth	r0, r2
 8004594:	4a35      	ldr	r2, [pc, #212]	@ (800466c <USART_Init+0x554>)
 8004596:	460b      	mov	r3, r1
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	1a5b      	subs	r3, r3, r1
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	4413      	add	r3, r2
 80045a0:	3320      	adds	r3, #32
 80045a2:	4602      	mov	r2, r0
 80045a4:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.Very_high;
 80045a6:	4b37      	ldr	r3, [pc, #220]	@ (8004684 <USART_Init+0x56c>)
 80045a8:	f993 3000 	ldrsb.w	r3, [r3]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80045b2:	492e      	ldr	r1, [pc, #184]	@ (800466c <USART_Init+0x554>)
 80045b4:	4603      	mov	r3, r0
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	1a1b      	subs	r3, r3, r0
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	440b      	add	r3, r1
 80045be:	3314      	adds	r3, #20
 80045c0:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 80045c2:	4b30      	ldr	r3, [pc, #192]	@ (8004684 <USART_Init+0x56c>)
 80045c4:	f993 3000 	ldrsb.w	r3, [r3]
 80045c8:	4618      	mov	r0, r3
 80045ca:	2240      	movs	r2, #64	@ 0x40
 80045cc:	4927      	ldr	r1, [pc, #156]	@ (800466c <USART_Init+0x554>)
 80045ce:	4603      	mov	r3, r0
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	1a1b      	subs	r3, r3, r0
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	440b      	add	r3, r1
 80045d8:	3310      	adds	r3, #16
 80045da:	601a      	str	r2, [r3, #0]
		DMA_Init(&xUSART_TX[usart_dma_instance_number]);
 80045dc:	4b29      	ldr	r3, [pc, #164]	@ (8004684 <USART_Init+0x56c>)
 80045de:	f993 3000 	ldrsb.w	r3, [r3]
 80045e2:	461a      	mov	r2, r3
 80045e4:	4613      	mov	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4a1f      	ldr	r2, [pc, #124]	@ (800466c <USART_Init+0x554>)
 80045ee:	4413      	add	r3, r2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe fcff 	bl	8002ff4 <DMA_Init>
 80045f6:	e007      	b.n	8004608 <USART_Init+0x4f0>
	}
	else
	{
		config -> Port -> CR3 &= ~USART_CR3_DMAR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695a      	ldr	r2, [r3, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004606:	615a      	str	r2, [r3, #20]
	}

	if(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	7a1b      	ldrb	r3, [r3, #8]
 800460c:	2203      	movs	r2, #3
 800460e:	4293      	cmp	r3, r2
 8004610:	d107      	bne.n	8004622 <USART_Init+0x50a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695a      	ldr	r2, [r3, #20]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0208 	orr.w	r2, r2, #8
 8004620:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Configuration.Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	7a1b      	ldrb	r3, [r3, #8]
 8004626:	2205      	movs	r2, #5
 8004628:	4293      	cmp	r3, r2
 800462a:	d107      	bne.n	800463c <USART_Init+0x524>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800463a:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 020c 	orr.w	r2, r2, #12
 800464a:	60da      	str	r2, [r3, #12]
	config->Port-> CR1 |= USART_CR1_UE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800465a:	60da      	str	r2, [r3, #12]

	return 1;
 800465c:	2301      	movs	r3, #1
}
 800465e:	4618      	mov	r0, r3
 8004660:	372c      	adds	r7, #44	@ 0x2c
 8004662:	46bd      	mov	sp, r7
 8004664:	bd90      	pop	{r4, r7, pc}
 8004666:	bf00      	nop
 8004668:	40011000 	.word	0x40011000
 800466c:	20000480 	.word	0x20000480
 8004670:	08005618 	.word	0x08005618
 8004674:	40004400 	.word	0x40004400
 8004678:	40004800 	.word	0x40004800
 800467c:	40004c00 	.word	0x40004c00
 8004680:	40005000 	.word	0x40005000
 8004684:	200005d0 	.word	0x200005d0

08004688 <__NVIC_EnableIRQ>:
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004696:	2b00      	cmp	r3, #0
 8004698:	db0b      	blt.n	80046b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	f003 021f 	and.w	r2, r3, #31
 80046a0:	4907      	ldr	r1, [pc, #28]	@ (80046c0 <__NVIC_EnableIRQ+0x38>)
 80046a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	2001      	movs	r0, #1
 80046aa:	fa00 f202 	lsl.w	r2, r0, r2
 80046ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	e000e100 	.word	0xe000e100

080046c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	6039      	str	r1, [r7, #0]
 80046ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	db0a      	blt.n	80046ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	490c      	ldr	r1, [pc, #48]	@ (8004710 <__NVIC_SetPriority+0x4c>)
 80046de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e2:	0112      	lsls	r2, r2, #4
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	440b      	add	r3, r1
 80046e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046ec:	e00a      	b.n	8004704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	4908      	ldr	r1, [pc, #32]	@ (8004714 <__NVIC_SetPriority+0x50>)
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	3b04      	subs	r3, #4
 80046fc:	0112      	lsls	r2, r2, #4
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	440b      	add	r3, r1
 8004702:	761a      	strb	r2, [r3, #24]
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	e000e100 	.word	0xe000e100
 8004714:	e000ed00 	.word	0xe000ed00

08004718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3b01      	subs	r3, #1
 8004724:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004728:	d301      	bcc.n	800472e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800472a:	2301      	movs	r3, #1
 800472c:	e00f      	b.n	800474e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800472e:	4a0a      	ldr	r2, [pc, #40]	@ (8004758 <SysTick_Config+0x40>)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3b01      	subs	r3, #1
 8004734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004736:	210f      	movs	r1, #15
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	f7ff ffc2 	bl	80046c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004740:	4b05      	ldr	r3, [pc, #20]	@ (8004758 <SysTick_Config+0x40>)
 8004742:	2200      	movs	r2, #0
 8004744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004746:	4b04      	ldr	r3, [pc, #16]	@ (8004758 <SysTick_Config+0x40>)
 8004748:	2207      	movs	r2, #7
 800474a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	e000e010 	.word	0xe000e010

0800475c <MCU_Clock_Setup>:
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
	SystemInit();
 8004762:	f000 f9eb 	bl	8004b3c <SystemInit>
	uint8_t pll_m = 8;
 8004766:	2308      	movs	r3, #8
 8004768:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 800476a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800476e:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8004774:	2307      	movs	r3, #7
 8004776:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 8004778:	4b3c      	ldr	r3, [pc, #240]	@ (800486c <MCU_Clock_Setup+0x110>)
 800477a:	2200      	movs	r2, #0
 800477c:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 800477e:	4b3b      	ldr	r3, [pc, #236]	@ (800486c <MCU_Clock_Setup+0x110>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a3a      	ldr	r2, [pc, #232]	@ (800486c <MCU_Clock_Setup+0x110>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004788:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 800478a:	bf00      	nop
 800478c:	4b37      	ldr	r3, [pc, #220]	@ (800486c <MCU_Clock_Setup+0x110>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f9      	beq.n	800478c <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8004798:	4b34      	ldr	r3, [pc, #208]	@ (800486c <MCU_Clock_Setup+0x110>)
 800479a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479c:	4a33      	ldr	r2, [pc, #204]	@ (800486c <MCU_Clock_Setup+0x110>)
 800479e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047a2:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 80047a4:	4b32      	ldr	r3, [pc, #200]	@ (8004870 <MCU_Clock_Setup+0x114>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a31      	ldr	r2, [pc, #196]	@ (8004870 <MCU_Clock_Setup+0x114>)
 80047aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047ae:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 80047b0:	4b30      	ldr	r3, [pc, #192]	@ (8004874 <MCU_Clock_Setup+0x118>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004874 <MCU_Clock_Setup+0x118>)
 80047b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047ba:	f043 0305 	orr.w	r3, r3, #5
 80047be:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 80047c0:	4b2a      	ldr	r3, [pc, #168]	@ (800486c <MCU_Clock_Setup+0x110>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	78ba      	ldrb	r2, [r7, #2]
 80047c6:	0611      	lsls	r1, r2, #24
 80047c8:	78fa      	ldrb	r2, [r7, #3]
 80047ca:	0412      	lsls	r2, r2, #16
 80047cc:	4311      	orrs	r1, r2
 80047ce:	88ba      	ldrh	r2, [r7, #4]
 80047d0:	0192      	lsls	r2, r2, #6
 80047d2:	4311      	orrs	r1, r2
 80047d4:	79fa      	ldrb	r2, [r7, #7]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	4611      	mov	r1, r2
 80047da:	4a24      	ldr	r2, [pc, #144]	@ (800486c <MCU_Clock_Setup+0x110>)
 80047dc:	430b      	orrs	r3, r1
 80047de:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 80047e0:	4b22      	ldr	r3, [pc, #136]	@ (800486c <MCU_Clock_Setup+0x110>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	4a21      	ldr	r2, [pc, #132]	@ (800486c <MCU_Clock_Setup+0x110>)
 80047e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047ea:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 80047ec:	4b1f      	ldr	r3, [pc, #124]	@ (800486c <MCU_Clock_Setup+0x110>)
 80047ee:	4a1f      	ldr	r2, [pc, #124]	@ (800486c <MCU_Clock_Setup+0x110>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 80047f4:	4b1d      	ldr	r3, [pc, #116]	@ (800486c <MCU_Clock_Setup+0x110>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a1c      	ldr	r2, [pc, #112]	@ (800486c <MCU_Clock_Setup+0x110>)
 80047fa:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80047fe:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004800:	4b1a      	ldr	r3, [pc, #104]	@ (800486c <MCU_Clock_Setup+0x110>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4a19      	ldr	r2, [pc, #100]	@ (800486c <MCU_Clock_Setup+0x110>)
 8004806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800480a:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 800480c:	4b17      	ldr	r3, [pc, #92]	@ (800486c <MCU_Clock_Setup+0x110>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a16      	ldr	r2, [pc, #88]	@ (800486c <MCU_Clock_Setup+0x110>)
 8004812:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004816:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8004818:	bf00      	nop
 800481a:	4b14      	ldr	r3, [pc, #80]	@ (800486c <MCU_Clock_Setup+0x110>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f9      	beq.n	800481a <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8004826:	4b11      	ldr	r3, [pc, #68]	@ (800486c <MCU_Clock_Setup+0x110>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	4a10      	ldr	r2, [pc, #64]	@ (800486c <MCU_Clock_Setup+0x110>)
 800482c:	f043 0302 	orr.w	r3, r3, #2
 8004830:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8004832:	bf00      	nop
 8004834:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <MCU_Clock_Setup+0x110>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b08      	cmp	r3, #8
 800483e:	d1f9      	bne.n	8004834 <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 8004840:	f000 f98e 	bl	8004b60 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8004844:	4b0c      	ldr	r3, [pc, #48]	@ (8004878 <MCU_Clock_Setup+0x11c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	08db      	lsrs	r3, r3, #3
 800484a:	4a0c      	ldr	r2, [pc, #48]	@ (800487c <MCU_Clock_Setup+0x120>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff ff60 	bl	8004718 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8004858:	4b04      	ldr	r3, [pc, #16]	@ (800486c <MCU_Clock_Setup+0x110>)
 800485a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485c:	4a03      	ldr	r2, [pc, #12]	@ (800486c <MCU_Clock_Setup+0x110>)
 800485e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004862:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004864:	bf00      	nop
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40023800 	.word	0x40023800
 8004870:	40007000 	.word	0x40007000
 8004874:	40023c00 	.word	0x40023c00
 8004878:	20000000 	.word	0x20000000
 800487c:	18618619 	.word	0x18618619

08004880 <Delay_Config>:
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8004884:	4b09      	ldr	r3, [pc, #36]	@ (80048ac <Delay_Config+0x2c>)
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 800488a:	4b08      	ldr	r3, [pc, #32]	@ (80048ac <Delay_Config+0x2c>)
 800488c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8004890:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8004892:	4b06      	ldr	r3, [pc, #24]	@ (80048ac <Delay_Config+0x2c>)
 8004894:	2200      	movs	r2, #0
 8004896:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8004898:	4b04      	ldr	r3, [pc, #16]	@ (80048ac <Delay_Config+0x2c>)
 800489a:	2205      	movs	r2, #5
 800489c:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	e000e010 	.word	0xe000e010

080048b0 <TIM6_DAC_IRQHandler>:
ADC_Config sensor_config;



void TIM6_DAC_IRQHandler(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
	TIM6 -> SR &= ~TIM_SR_UIF;
 80048b4:	4b06      	ldr	r3, [pc, #24]	@ (80048d0 <TIM6_DAC_IRQHandler+0x20>)
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	4a05      	ldr	r2, [pc, #20]	@ (80048d0 <TIM6_DAC_IRQHandler+0x20>)
 80048ba:	f023 0301 	bic.w	r3, r3, #1
 80048be:	6113      	str	r3, [r2, #16]

	Get_Temperature(sensor_buffer[0]);
 80048c0:	4b04      	ldr	r3, [pc, #16]	@ (80048d4 <TIM6_DAC_IRQHandler+0x24>)
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 f88b 	bl	80049e0 <Get_Temperature>



}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40001000 	.word	0x40001000
 80048d4:	200005dc 	.word	0x200005dc

080048d8 <General_Timer_Update_Init>:


void General_Timer_Update_Init(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
	RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
 80048dc:	4b16      	ldr	r3, [pc, #88]	@ (8004938 <General_Timer_Update_Init+0x60>)
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	4a15      	ldr	r2, [pc, #84]	@ (8004938 <General_Timer_Update_Init+0x60>)
 80048e2:	f043 0310 	orr.w	r3, r3, #16
 80048e6:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM6->PSC = 8400-1;
 80048e8:	4b14      	ldr	r3, [pc, #80]	@ (800493c <General_Timer_Update_Init+0x64>)
 80048ea:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80048ee:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 100-1;
 80048f0:	4b12      	ldr	r3, [pc, #72]	@ (800493c <General_Timer_Update_Init+0x64>)
 80048f2:	2263      	movs	r2, #99	@ 0x63
 80048f4:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6 -> EGR |= TIM_EGR_UG;
 80048f6:	4b11      	ldr	r3, [pc, #68]	@ (800493c <General_Timer_Update_Init+0x64>)
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	4a10      	ldr	r2, [pc, #64]	@ (800493c <General_Timer_Update_Init+0x64>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	6153      	str	r3, [r2, #20]
	TIM6->CR1 |= TIM_CR1_URS;
 8004902:	4b0e      	ldr	r3, [pc, #56]	@ (800493c <General_Timer_Update_Init+0x64>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a0d      	ldr	r2, [pc, #52]	@ (800493c <General_Timer_Update_Init+0x64>)
 8004908:	f043 0304 	orr.w	r3, r3, #4
 800490c:	6013      	str	r3, [r2, #0]
	TIM6->DIER |=  TIM_DIER_UIE;
 800490e:	4b0b      	ldr	r3, [pc, #44]	@ (800493c <General_Timer_Update_Init+0x64>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	4a0a      	ldr	r2, [pc, #40]	@ (800493c <General_Timer_Update_Init+0x64>)
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	60d3      	str	r3, [r2, #12]
	TIM6->CR1 |= TIM_CR1_CEN;
 800491a:	4b08      	ldr	r3, [pc, #32]	@ (800493c <General_Timer_Update_Init+0x64>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a07      	ldr	r2, [pc, #28]	@ (800493c <General_Timer_Update_Init+0x64>)
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(TIM6_DAC_IRQn,1);
 8004926:	2101      	movs	r1, #1
 8004928:	2036      	movs	r0, #54	@ 0x36
 800492a:	f7ff fecb 	bl	80046c4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800492e:	2036      	movs	r0, #54	@ 0x36
 8004930:	f7ff feaa 	bl	8004688 <__NVIC_EnableIRQ>
}
 8004934:	bf00      	nop
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40023800 	.word	0x40023800
 800493c:	40001000 	.word	0x40001000

08004940 <main>:

int main(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8004944:	f7ff ff0a 	bl	800475c <MCU_Clock_Setup>
	Delay_Config();
 8004948:	f7ff ff9a 	bl	8004880 <Delay_Config>
	Console_Init(9600); //921600
 800494c:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8004950:	f7fd f93a 	bl	8001bc8 <Console_Init>
	General_Timer_Update_Init();
 8004954:	f7ff ffc0 	bl	80048d8 <General_Timer_Update_Init>


	sensor_config.Channel_0.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004958:	2201      	movs	r2, #1
 800495a:	4b1e      	ldr	r3, [pc, #120]	@ (80049d4 <main+0x94>)
 800495c:	729a      	strb	r2, [r3, #10]
	sensor_config.Channel_0.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 800495e:	2200      	movs	r2, #0
 8004960:	4b1c      	ldr	r3, [pc, #112]	@ (80049d4 <main+0x94>)
 8004962:	731a      	strb	r2, [r3, #12]
	sensor_config.Channel_0.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_1;
 8004964:	2200      	movs	r2, #0
 8004966:	4b1b      	ldr	r3, [pc, #108]	@ (80049d4 <main+0x94>)
 8004968:	72da      	strb	r2, [r3, #11]

	sensor_config.Channel_1.Enable = ADC_Configuration.Channel.Enable.Enable;
 800496a:	2201      	movs	r2, #1
 800496c:	4b19      	ldr	r3, [pc, #100]	@ (80049d4 <main+0x94>)
 800496e:	735a      	strb	r2, [r3, #13]
	sensor_config.Channel_1.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8004970:	2200      	movs	r2, #0
 8004972:	4b18      	ldr	r3, [pc, #96]	@ (80049d4 <main+0x94>)
 8004974:	73da      	strb	r2, [r3, #15]
	sensor_config.Channel_1.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_2;
 8004976:	2201      	movs	r2, #1
 8004978:	4b16      	ldr	r3, [pc, #88]	@ (80049d4 <main+0x94>)
 800497a:	739a      	strb	r2, [r3, #14]

	sensor_config.Port = ADC_Configuration.Port._ADC1_;
 800497c:	4a16      	ldr	r2, [pc, #88]	@ (80049d8 <main+0x98>)
 800497e:	4b15      	ldr	r3, [pc, #84]	@ (80049d4 <main+0x94>)
 8004980:	601a      	str	r2, [r3, #0]
	sensor_config.Channel_Type = ADC_Configuration.Channel_Type.Regular;
 8004982:	2200      	movs	r2, #0
 8004984:	4b13      	ldr	r3, [pc, #76]	@ (80049d4 <main+0x94>)
 8004986:	719a      	strb	r2, [r3, #6]
	sensor_config.Conversion_Mode = ADC_Configuration.Conversion_Mode.Single;
 8004988:	2201      	movs	r2, #1
 800498a:	4b12      	ldr	r3, [pc, #72]	@ (80049d4 <main+0x94>)
 800498c:	715a      	strb	r2, [r3, #5]
	sensor_config.Data_Alignment = ADC_Configuration.Data_Alignment.Left_Justified;
 800498e:	2201      	movs	r2, #1
 8004990:	4b10      	ldr	r3, [pc, #64]	@ (80049d4 <main+0x94>)
 8004992:	711a      	strb	r2, [r3, #4]
	sensor_config.Resolution = ADC_Configuration.Resolution.Bit_12;
 8004994:	2200      	movs	r2, #0
 8004996:	4b0f      	ldr	r3, [pc, #60]	@ (80049d4 <main+0x94>)
 8004998:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	sensor_config.Watchdog_Analog.Enable = ADC_Configuration._Watchdog_Analog_.Disable;
 800499c:	2200      	movs	r2, #0
 800499e:	4b0d      	ldr	r3, [pc, #52]	@ (80049d4 <main+0x94>)
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	sensor_config.External_Trigger.Enable = ADC_Configuration.Regular_External_Trigger_Enable.Trigger_On_Rising_Edge;
 80049a4:	2301      	movs	r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	bf14      	ite	ne
 80049aa:	2301      	movne	r3, #1
 80049ac:	2300      	moveq	r3, #0
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	4b08      	ldr	r3, [pc, #32]	@ (80049d4 <main+0x94>)
 80049b2:	71da      	strb	r2, [r3, #7]
	sensor_config.External_Trigger.Sampling_Frequency = 100;
 80049b4:	4b07      	ldr	r3, [pc, #28]	@ (80049d4 <main+0x94>)
 80049b6:	2264      	movs	r2, #100	@ 0x64
 80049b8:	725a      	strb	r2, [r3, #9]
	sensor_config.External_Trigger.Trigger_Event = ADC_Configuration.Regular_External_Trigger_Event.Timer_2_CC2;
 80049ba:	2203      	movs	r2, #3
 80049bc:	4b05      	ldr	r3, [pc, #20]	@ (80049d4 <main+0x94>)
 80049be:	721a      	strb	r2, [r3, #8]

	ADC_Init(&sensor_config);
 80049c0:	4804      	ldr	r0, [pc, #16]	@ (80049d4 <main+0x94>)
 80049c2:	f7fc ff07 	bl	80017d4 <ADC_Init>
	ADC_Start_Capture(&sensor_config, &sensor_buffer[0]);
 80049c6:	4905      	ldr	r1, [pc, #20]	@ (80049dc <main+0x9c>)
 80049c8:	4802      	ldr	r0, [pc, #8]	@ (80049d4 <main+0x94>)
 80049ca:	f7fd f8bb 	bl	8001b44 <ADC_Start_Capture>



	for(;;)
 80049ce:	bf00      	nop
 80049d0:	e7fd      	b.n	80049ce <main+0x8e>
 80049d2:	bf00      	nop
 80049d4:	200005e0 	.word	0x200005e0
 80049d8:	40012000 	.word	0x40012000
 80049dc:	200005dc 	.word	0x200005dc

080049e0 <Get_Temperature>:
	}
}


void Get_Temperature(uint16_t adc_value)
{
 80049e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80049e4:	b084      	sub	sp, #16
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	4603      	mov	r3, r0
 80049ea:	80fb      	strh	r3, [r7, #6]
	float Vout = 0.0;
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
	float R_thermistor = 0.0;
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	60bb      	str	r3, [r7, #8]


	Vout = (adc_value / 1024.0)*VIN;
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fb fd36 	bl	800046c <__aeabi_i2d>
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	4b44      	ldr	r3, [pc, #272]	@ (8004b18 <Get_Temperature+0x138>)
 8004a06:	f7fb fec5 	bl	8000794 <__aeabi_ddiv>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4614      	mov	r4, r2
 8004a10:	461d      	mov	r5, r3
 8004a12:	4b42      	ldr	r3, [pc, #264]	@ (8004b1c <Get_Temperature+0x13c>)
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fb fd3b 	bl	8000490 <__aeabi_f2d>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4620      	mov	r0, r4
 8004a20:	4629      	mov	r1, r5
 8004a22:	f7fb fd8d 	bl	8000540 <__aeabi_dmul>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	f7fc f85f 	bl	8000af0 <__aeabi_d2f>
 8004a32:	4603      	mov	r3, r0
 8004a34:	60fb      	str	r3, [r7, #12]
	R_thermistor = R_FIXED * (VIN / Vout - 1);
 8004a36:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8004b20 <Get_Temperature+0x140>
 8004a3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a4a:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8004b24 <Get_Temperature+0x144>
 8004a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a52:	edc7 7a02 	vstr	s15, [r7, #8]

	temp_kelvin = 1 / ((1/T0) + (1/BETA) * log(R_thermistor/R0));
 8004a56:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8004b28 <Get_Temperature+0x148>
 8004a5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a62:	ee16 0a90 	vmov	r0, s13
 8004a66:	f7fb fd13 	bl	8000490 <__aeabi_f2d>
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	460d      	mov	r5, r1
 8004a6e:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8004b2c <Get_Temperature+0x14c>
 8004a72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a76:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a7a:	ee16 0a90 	vmov	r0, s13
 8004a7e:	f7fb fd07 	bl	8000490 <__aeabi_f2d>
 8004a82:	4680      	mov	r8, r0
 8004a84:	4689      	mov	r9, r1
 8004a86:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8004b24 <Get_Temperature+0x144>
 8004a8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a92:	ee16 0a90 	vmov	r0, s13
 8004a96:	f7fb fcfb 	bl	8000490 <__aeabi_f2d>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	ec43 2b10 	vmov	d0, r2, r3
 8004aa2:	f000 f931 	bl	8004d08 <log>
 8004aa6:	ec53 2b10 	vmov	r2, r3, d0
 8004aaa:	4640      	mov	r0, r8
 8004aac:	4649      	mov	r1, r9
 8004aae:	f7fb fd47 	bl	8000540 <__aeabi_dmul>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	4629      	mov	r1, r5
 8004aba:	f7fb fb8b 	bl	80001d4 <__adddf3>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	f04f 0000 	mov.w	r0, #0
 8004ac6:	491a      	ldr	r1, [pc, #104]	@ (8004b30 <Get_Temperature+0x150>)
 8004ac8:	f7fb fe64 	bl	8000794 <__aeabi_ddiv>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	f7fc f80c 	bl	8000af0 <__aeabi_d2f>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	4a16      	ldr	r2, [pc, #88]	@ (8004b34 <Get_Temperature+0x154>)
 8004adc:	6013      	str	r3, [r2, #0]
	temp_celsius = temp_kelvin - 273.15;
 8004ade:	4b15      	ldr	r3, [pc, #84]	@ (8004b34 <Get_Temperature+0x154>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fb fcd4 	bl	8000490 <__aeabi_f2d>
 8004ae8:	a309      	add	r3, pc, #36	@ (adr r3, 8004b10 <Get_Temperature+0x130>)
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	f7fb fb6f 	bl	80001d0 <__aeabi_dsub>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4610      	mov	r0, r2
 8004af8:	4619      	mov	r1, r3
 8004afa:	f7fb fff9 	bl	8000af0 <__aeabi_d2f>
 8004afe:	4603      	mov	r3, r0
 8004b00:	4a0d      	ldr	r2, [pc, #52]	@ (8004b38 <Get_Temperature+0x158>)
 8004b02:	6013      	str	r3, [r2, #0]
}
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b0e:	bf00      	nop
 8004b10:	66666666 	.word	0x66666666
 8004b14:	40711266 	.word	0x40711266
 8004b18:	40900000 	.word	0x40900000
 8004b1c:	40533333 	.word	0x40533333
 8004b20:	40533333 	.word	0x40533333
 8004b24:	461c4000 	.word	0x461c4000
 8004b28:	43951333 	.word	0x43951333
 8004b2c:	4576e000 	.word	0x4576e000
 8004b30:	3ff00000 	.word	0x3ff00000
 8004b34:	200005d4 	.word	0x200005d4
 8004b38:	200005d8 	.word	0x200005d8

08004b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b40:	4b06      	ldr	r3, [pc, #24]	@ (8004b5c <SystemInit+0x20>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b46:	4a05      	ldr	r2, [pc, #20]	@ (8004b5c <SystemInit+0x20>)
 8004b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b50:	bf00      	nop
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	e000ed00 	.word	0xe000ed00

08004b60 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004b66:	2300      	movs	r3, #0
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	2302      	movs	r3, #2
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	2300      	movs	r3, #0
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	2302      	movs	r3, #2
 8004b78:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004b7a:	4b34      	ldr	r3, [pc, #208]	@ (8004c4c <SystemCoreClockUpdate+0xec>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 030c 	and.w	r3, r3, #12
 8004b82:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d011      	beq.n	8004bae <SystemCoreClockUpdate+0x4e>
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d844      	bhi.n	8004c1a <SystemCoreClockUpdate+0xba>
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <SystemCoreClockUpdate+0x3e>
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d004      	beq.n	8004ba6 <SystemCoreClockUpdate+0x46>
 8004b9c:	e03d      	b.n	8004c1a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004b9e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c50 <SystemCoreClockUpdate+0xf0>)
 8004ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8004c54 <SystemCoreClockUpdate+0xf4>)
 8004ba2:	601a      	str	r2, [r3, #0]
      break;
 8004ba4:	e03d      	b.n	8004c22 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8004c50 <SystemCoreClockUpdate+0xf0>)
 8004ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8004c58 <SystemCoreClockUpdate+0xf8>)
 8004baa:	601a      	str	r2, [r3, #0]
      break;
 8004bac:	e039      	b.n	8004c22 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004bae:	4b27      	ldr	r3, [pc, #156]	@ (8004c4c <SystemCoreClockUpdate+0xec>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	0d9b      	lsrs	r3, r3, #22
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bba:	4b24      	ldr	r3, [pc, #144]	@ (8004c4c <SystemCoreClockUpdate+0xec>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bc2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00c      	beq.n	8004be4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004bca:	4a23      	ldr	r2, [pc, #140]	@ (8004c58 <SystemCoreClockUpdate+0xf8>)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c4c <SystemCoreClockUpdate+0xec>)
 8004bd4:	6852      	ldr	r2, [r2, #4]
 8004bd6:	0992      	lsrs	r2, r2, #6
 8004bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bdc:	fb02 f303 	mul.w	r3, r2, r3
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	e00b      	b.n	8004bfc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004be4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c54 <SystemCoreClockUpdate+0xf4>)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	4a17      	ldr	r2, [pc, #92]	@ (8004c4c <SystemCoreClockUpdate+0xec>)
 8004bee:	6852      	ldr	r2, [r2, #4]
 8004bf0:	0992      	lsrs	r2, r2, #6
 8004bf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bf6:	fb02 f303 	mul.w	r3, r2, r3
 8004bfa:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004bfc:	4b13      	ldr	r3, [pc, #76]	@ (8004c4c <SystemCoreClockUpdate+0xec>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	0c1b      	lsrs	r3, r3, #16
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	3301      	adds	r3, #1
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	4a0e      	ldr	r2, [pc, #56]	@ (8004c50 <SystemCoreClockUpdate+0xf0>)
 8004c16:	6013      	str	r3, [r2, #0]
      break;
 8004c18:	e003      	b.n	8004c22 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c50 <SystemCoreClockUpdate+0xf0>)
 8004c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8004c54 <SystemCoreClockUpdate+0xf4>)
 8004c1e:	601a      	str	r2, [r3, #0]
      break;
 8004c20:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004c22:	4b0a      	ldr	r3, [pc, #40]	@ (8004c4c <SystemCoreClockUpdate+0xec>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	091b      	lsrs	r3, r3, #4
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c5c <SystemCoreClockUpdate+0xfc>)
 8004c2e:	5cd3      	ldrb	r3, [r2, r3]
 8004c30:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004c32:	4b07      	ldr	r3, [pc, #28]	@ (8004c50 <SystemCoreClockUpdate+0xf0>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3c:	4a04      	ldr	r2, [pc, #16]	@ (8004c50 <SystemCoreClockUpdate+0xf0>)
 8004c3e:	6013      	str	r3, [r2, #0]
}
 8004c40:	bf00      	nop
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	20000000 	.word	0x20000000
 8004c54:	00f42400 	.word	0x00f42400
 8004c58:	017d7840 	.word	0x017d7840
 8004c5c:	08005a14 	.word	0x08005a14

08004c60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004c60:	480d      	ldr	r0, [pc, #52]	@ (8004c98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004c62:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004c64:	f7ff ff6a 	bl	8004b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c68:	480c      	ldr	r0, [pc, #48]	@ (8004c9c <LoopForever+0x6>)
  ldr r1, =_edata
 8004c6a:	490d      	ldr	r1, [pc, #52]	@ (8004ca0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ca4 <LoopForever+0xe>)
  movs r3, #0
 8004c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c70:	e002      	b.n	8004c78 <LoopCopyDataInit>

08004c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c76:	3304      	adds	r3, #4

08004c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c7c:	d3f9      	bcc.n	8004c72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c80:	4c0a      	ldr	r4, [pc, #40]	@ (8004cac <LoopForever+0x16>)
  movs r3, #0
 8004c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c84:	e001      	b.n	8004c8a <LoopFillZerobss>

08004c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c88:	3204      	adds	r2, #4

08004c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c8c:	d3fb      	bcc.n	8004c86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004c8e:	f000 f817 	bl	8004cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c92:	f7ff fe55 	bl	8004940 <main>

08004c96 <LoopForever>:

LoopForever:
  b LoopForever
 8004c96:	e7fe      	b.n	8004c96 <LoopForever>
  ldr   r0, =_estack
 8004c98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ca0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8004ca4:	08005a30 	.word	0x08005a30
  ldr r2, =_sbss
 8004ca8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8004cac:	2000075c 	.word	0x2000075c

08004cb0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004cb0:	e7fe      	b.n	8004cb0 <ADC_IRQHandler>
	...

08004cb4 <__errno>:
 8004cb4:	4b01      	ldr	r3, [pc, #4]	@ (8004cbc <__errno+0x8>)
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000004 	.word	0x20000004

08004cc0 <__libc_init_array>:
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	4d0d      	ldr	r5, [pc, #52]	@ (8004cf8 <__libc_init_array+0x38>)
 8004cc4:	4c0d      	ldr	r4, [pc, #52]	@ (8004cfc <__libc_init_array+0x3c>)
 8004cc6:	1b64      	subs	r4, r4, r5
 8004cc8:	10a4      	asrs	r4, r4, #2
 8004cca:	2600      	movs	r6, #0
 8004ccc:	42a6      	cmp	r6, r4
 8004cce:	d109      	bne.n	8004ce4 <__libc_init_array+0x24>
 8004cd0:	4d0b      	ldr	r5, [pc, #44]	@ (8004d00 <__libc_init_array+0x40>)
 8004cd2:	4c0c      	ldr	r4, [pc, #48]	@ (8004d04 <__libc_init_array+0x44>)
 8004cd4:	f000 fa92 	bl	80051fc <_init>
 8004cd8:	1b64      	subs	r4, r4, r5
 8004cda:	10a4      	asrs	r4, r4, #2
 8004cdc:	2600      	movs	r6, #0
 8004cde:	42a6      	cmp	r6, r4
 8004ce0:	d105      	bne.n	8004cee <__libc_init_array+0x2e>
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}
 8004ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce8:	4798      	blx	r3
 8004cea:	3601      	adds	r6, #1
 8004cec:	e7ee      	b.n	8004ccc <__libc_init_array+0xc>
 8004cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf2:	4798      	blx	r3
 8004cf4:	3601      	adds	r6, #1
 8004cf6:	e7f2      	b.n	8004cde <__libc_init_array+0x1e>
 8004cf8:	08005a28 	.word	0x08005a28
 8004cfc:	08005a28 	.word	0x08005a28
 8004d00:	08005a28 	.word	0x08005a28
 8004d04:	08005a2c 	.word	0x08005a2c

08004d08 <log>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	ed2d 8b02 	vpush	{d8}
 8004d0e:	ec55 4b10 	vmov	r4, r5, d0
 8004d12:	f000 f8bd 	bl	8004e90 <__ieee754_log>
 8004d16:	4622      	mov	r2, r4
 8004d18:	462b      	mov	r3, r5
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	eeb0 8a40 	vmov.f32	s16, s0
 8004d22:	eef0 8a60 	vmov.f32	s17, s1
 8004d26:	f7fb fea5 	bl	8000a74 <__aeabi_dcmpun>
 8004d2a:	b998      	cbnz	r0, 8004d54 <log+0x4c>
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2300      	movs	r3, #0
 8004d30:	4620      	mov	r0, r4
 8004d32:	4629      	mov	r1, r5
 8004d34:	f7fb fe94 	bl	8000a60 <__aeabi_dcmpgt>
 8004d38:	b960      	cbnz	r0, 8004d54 <log+0x4c>
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4620      	mov	r0, r4
 8004d40:	4629      	mov	r1, r5
 8004d42:	f7fb fe65 	bl	8000a10 <__aeabi_dcmpeq>
 8004d46:	b160      	cbz	r0, 8004d62 <log+0x5a>
 8004d48:	f7ff ffb4 	bl	8004cb4 <__errno>
 8004d4c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8004d78 <log+0x70>
 8004d50:	2322      	movs	r3, #34	@ 0x22
 8004d52:	6003      	str	r3, [r0, #0]
 8004d54:	eeb0 0a48 	vmov.f32	s0, s16
 8004d58:	eef0 0a68 	vmov.f32	s1, s17
 8004d5c:	ecbd 8b02 	vpop	{d8}
 8004d60:	bd38      	pop	{r3, r4, r5, pc}
 8004d62:	f7ff ffa7 	bl	8004cb4 <__errno>
 8004d66:	ecbd 8b02 	vpop	{d8}
 8004d6a:	2321      	movs	r3, #33	@ 0x21
 8004d6c:	6003      	str	r3, [r0, #0]
 8004d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d72:	4803      	ldr	r0, [pc, #12]	@ (8004d80 <log+0x78>)
 8004d74:	f000 b808 	b.w	8004d88 <nan>
 8004d78:	00000000 	.word	0x00000000
 8004d7c:	fff00000 	.word	0xfff00000
 8004d80:	08005a24 	.word	0x08005a24
 8004d84:	00000000 	.word	0x00000000

08004d88 <nan>:
 8004d88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004d90 <nan+0x8>
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	00000000 	.word	0x00000000
 8004d94:	7ff80000 	.word	0x7ff80000

08004d98 <ceil>:
 8004d98:	ec51 0b10 	vmov	r0, r1, d0
 8004d9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004da8:	2e13      	cmp	r6, #19
 8004daa:	460c      	mov	r4, r1
 8004dac:	4605      	mov	r5, r0
 8004dae:	4680      	mov	r8, r0
 8004db0:	dc2e      	bgt.n	8004e10 <ceil+0x78>
 8004db2:	2e00      	cmp	r6, #0
 8004db4:	da11      	bge.n	8004dda <ceil+0x42>
 8004db6:	a332      	add	r3, pc, #200	@ (adr r3, 8004e80 <ceil+0xe8>)
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	f7fb fa0a 	bl	80001d4 <__adddf3>
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f7fb fe4c 	bl	8000a60 <__aeabi_dcmpgt>
 8004dc8:	b120      	cbz	r0, 8004dd4 <ceil+0x3c>
 8004dca:	2c00      	cmp	r4, #0
 8004dcc:	db4f      	blt.n	8004e6e <ceil+0xd6>
 8004dce:	4325      	orrs	r5, r4
 8004dd0:	d151      	bne.n	8004e76 <ceil+0xde>
 8004dd2:	462c      	mov	r4, r5
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	e023      	b.n	8004e22 <ceil+0x8a>
 8004dda:	4f2b      	ldr	r7, [pc, #172]	@ (8004e88 <ceil+0xf0>)
 8004ddc:	4137      	asrs	r7, r6
 8004dde:	ea01 0307 	and.w	r3, r1, r7
 8004de2:	4303      	orrs	r3, r0
 8004de4:	d01d      	beq.n	8004e22 <ceil+0x8a>
 8004de6:	a326      	add	r3, pc, #152	@ (adr r3, 8004e80 <ceil+0xe8>)
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	f7fb f9f2 	bl	80001d4 <__adddf3>
 8004df0:	2200      	movs	r2, #0
 8004df2:	2300      	movs	r3, #0
 8004df4:	f7fb fe34 	bl	8000a60 <__aeabi_dcmpgt>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d0eb      	beq.n	8004dd4 <ceil+0x3c>
 8004dfc:	2c00      	cmp	r4, #0
 8004dfe:	bfc2      	ittt	gt
 8004e00:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8004e04:	4133      	asrgt	r3, r6
 8004e06:	18e4      	addgt	r4, r4, r3
 8004e08:	ea24 0407 	bic.w	r4, r4, r7
 8004e0c:	2500      	movs	r5, #0
 8004e0e:	e7e1      	b.n	8004dd4 <ceil+0x3c>
 8004e10:	2e33      	cmp	r6, #51	@ 0x33
 8004e12:	dd0a      	ble.n	8004e2a <ceil+0x92>
 8004e14:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004e18:	d103      	bne.n	8004e22 <ceil+0x8a>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	f7fb f9d9 	bl	80001d4 <__adddf3>
 8004e22:	ec41 0b10 	vmov	d0, r0, r1
 8004e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e2a:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004e2e:	f04f 37ff 	mov.w	r7, #4294967295
 8004e32:	40df      	lsrs	r7, r3
 8004e34:	4238      	tst	r0, r7
 8004e36:	d0f4      	beq.n	8004e22 <ceil+0x8a>
 8004e38:	a311      	add	r3, pc, #68	@ (adr r3, 8004e80 <ceil+0xe8>)
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	f7fb f9c9 	bl	80001d4 <__adddf3>
 8004e42:	2200      	movs	r2, #0
 8004e44:	2300      	movs	r3, #0
 8004e46:	f7fb fe0b 	bl	8000a60 <__aeabi_dcmpgt>
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d0c2      	beq.n	8004dd4 <ceil+0x3c>
 8004e4e:	2c00      	cmp	r4, #0
 8004e50:	dd0a      	ble.n	8004e68 <ceil+0xd0>
 8004e52:	2e14      	cmp	r6, #20
 8004e54:	d101      	bne.n	8004e5a <ceil+0xc2>
 8004e56:	3401      	adds	r4, #1
 8004e58:	e006      	b.n	8004e68 <ceil+0xd0>
 8004e5a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004e5e:	2301      	movs	r3, #1
 8004e60:	40b3      	lsls	r3, r6
 8004e62:	441d      	add	r5, r3
 8004e64:	45a8      	cmp	r8, r5
 8004e66:	d8f6      	bhi.n	8004e56 <ceil+0xbe>
 8004e68:	ea25 0507 	bic.w	r5, r5, r7
 8004e6c:	e7b2      	b.n	8004dd4 <ceil+0x3c>
 8004e6e:	2500      	movs	r5, #0
 8004e70:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8004e74:	e7ae      	b.n	8004dd4 <ceil+0x3c>
 8004e76:	4c05      	ldr	r4, [pc, #20]	@ (8004e8c <ceil+0xf4>)
 8004e78:	2500      	movs	r5, #0
 8004e7a:	e7ab      	b.n	8004dd4 <ceil+0x3c>
 8004e7c:	f3af 8000 	nop.w
 8004e80:	8800759c 	.word	0x8800759c
 8004e84:	7e37e43c 	.word	0x7e37e43c
 8004e88:	000fffff 	.word	0x000fffff
 8004e8c:	3ff00000 	.word	0x3ff00000

08004e90 <__ieee754_log>:
 8004e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e94:	ec51 0b10 	vmov	r0, r1, d0
 8004e98:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004e9c:	b087      	sub	sp, #28
 8004e9e:	460d      	mov	r5, r1
 8004ea0:	da26      	bge.n	8004ef0 <__ieee754_log+0x60>
 8004ea2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004ea6:	4303      	orrs	r3, r0
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	d10a      	bne.n	8004ec2 <__ieee754_log+0x32>
 8004eac:	49ce      	ldr	r1, [pc, #824]	@ (80051e8 <__ieee754_log+0x358>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	f7fb fc6e 	bl	8000794 <__aeabi_ddiv>
 8004eb8:	ec41 0b10 	vmov	d0, r0, r1
 8004ebc:	b007      	add	sp, #28
 8004ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec2:	2900      	cmp	r1, #0
 8004ec4:	da05      	bge.n	8004ed2 <__ieee754_log+0x42>
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	f7fb f982 	bl	80001d0 <__aeabi_dsub>
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e7f0      	b.n	8004eb4 <__ieee754_log+0x24>
 8004ed2:	4bc6      	ldr	r3, [pc, #792]	@ (80051ec <__ieee754_log+0x35c>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f7fb fb33 	bl	8000540 <__aeabi_dmul>
 8004eda:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8004ede:	460d      	mov	r5, r1
 8004ee0:	4ac3      	ldr	r2, [pc, #780]	@ (80051f0 <__ieee754_log+0x360>)
 8004ee2:	4295      	cmp	r5, r2
 8004ee4:	dd06      	ble.n	8004ef4 <__ieee754_log+0x64>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	f7fb f973 	bl	80001d4 <__adddf3>
 8004eee:	e7e3      	b.n	8004eb8 <__ieee754_log+0x28>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e7f5      	b.n	8004ee0 <__ieee754_log+0x50>
 8004ef4:	152c      	asrs	r4, r5, #20
 8004ef6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8004efa:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004efe:	441c      	add	r4, r3
 8004f00:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8004f04:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8004f08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f0c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8004f10:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8004f14:	ea42 0105 	orr.w	r1, r2, r5
 8004f18:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	4bb5      	ldr	r3, [pc, #724]	@ (80051f4 <__ieee754_log+0x364>)
 8004f20:	f7fb f956 	bl	80001d0 <__aeabi_dsub>
 8004f24:	1cab      	adds	r3, r5, #2
 8004f26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	4682      	mov	sl, r0
 8004f2e:	468b      	mov	fp, r1
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	dc53      	bgt.n	8004fde <__ieee754_log+0x14e>
 8004f36:	2300      	movs	r3, #0
 8004f38:	f7fb fd6a 	bl	8000a10 <__aeabi_dcmpeq>
 8004f3c:	b1d0      	cbz	r0, 8004f74 <__ieee754_log+0xe4>
 8004f3e:	2c00      	cmp	r4, #0
 8004f40:	f000 8120 	beq.w	8005184 <__ieee754_log+0x2f4>
 8004f44:	4620      	mov	r0, r4
 8004f46:	f7fb fa91 	bl	800046c <__aeabi_i2d>
 8004f4a:	a391      	add	r3, pc, #580	@ (adr r3, 8005190 <__ieee754_log+0x300>)
 8004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f50:	4606      	mov	r6, r0
 8004f52:	460f      	mov	r7, r1
 8004f54:	f7fb faf4 	bl	8000540 <__aeabi_dmul>
 8004f58:	a38f      	add	r3, pc, #572	@ (adr r3, 8005198 <__ieee754_log+0x308>)
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	4604      	mov	r4, r0
 8004f60:	460d      	mov	r5, r1
 8004f62:	4630      	mov	r0, r6
 8004f64:	4639      	mov	r1, r7
 8004f66:	f7fb faeb 	bl	8000540 <__aeabi_dmul>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4620      	mov	r0, r4
 8004f70:	4629      	mov	r1, r5
 8004f72:	e7ba      	b.n	8004eea <__ieee754_log+0x5a>
 8004f74:	a38a      	add	r3, pc, #552	@ (adr r3, 80051a0 <__ieee754_log+0x310>)
 8004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7a:	4650      	mov	r0, sl
 8004f7c:	4659      	mov	r1, fp
 8004f7e:	f7fb fadf 	bl	8000540 <__aeabi_dmul>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	2000      	movs	r0, #0
 8004f88:	499b      	ldr	r1, [pc, #620]	@ (80051f8 <__ieee754_log+0x368>)
 8004f8a:	f7fb f921 	bl	80001d0 <__aeabi_dsub>
 8004f8e:	4652      	mov	r2, sl
 8004f90:	4606      	mov	r6, r0
 8004f92:	460f      	mov	r7, r1
 8004f94:	465b      	mov	r3, fp
 8004f96:	4650      	mov	r0, sl
 8004f98:	4659      	mov	r1, fp
 8004f9a:	f7fb fad1 	bl	8000540 <__aeabi_dmul>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	4639      	mov	r1, r7
 8004fa6:	f7fb facb 	bl	8000540 <__aeabi_dmul>
 8004faa:	4606      	mov	r6, r0
 8004fac:	460f      	mov	r7, r1
 8004fae:	b914      	cbnz	r4, 8004fb6 <__ieee754_log+0x126>
 8004fb0:	4632      	mov	r2, r6
 8004fb2:	463b      	mov	r3, r7
 8004fb4:	e0a0      	b.n	80050f8 <__ieee754_log+0x268>
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f7fb fa58 	bl	800046c <__aeabi_i2d>
 8004fbc:	a374      	add	r3, pc, #464	@ (adr r3, 8005190 <__ieee754_log+0x300>)
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	4680      	mov	r8, r0
 8004fc4:	4689      	mov	r9, r1
 8004fc6:	f7fb fabb 	bl	8000540 <__aeabi_dmul>
 8004fca:	a373      	add	r3, pc, #460	@ (adr r3, 8005198 <__ieee754_log+0x308>)
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	460d      	mov	r5, r1
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	f7fb fab2 	bl	8000540 <__aeabi_dmul>
 8004fdc:	e0a5      	b.n	800512a <__ieee754_log+0x29a>
 8004fde:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004fe2:	f7fb f8f7 	bl	80001d4 <__adddf3>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4650      	mov	r0, sl
 8004fec:	4659      	mov	r1, fp
 8004fee:	f7fb fbd1 	bl	8000794 <__aeabi_ddiv>
 8004ff2:	e9cd 0100 	strd	r0, r1, [sp]
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f7fb fa38 	bl	800046c <__aeabi_i2d>
 8004ffc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005004:	4610      	mov	r0, r2
 8005006:	4619      	mov	r1, r3
 8005008:	f7fb fa9a 	bl	8000540 <__aeabi_dmul>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005014:	f7fb fa94 	bl	8000540 <__aeabi_dmul>
 8005018:	a363      	add	r3, pc, #396	@ (adr r3, 80051a8 <__ieee754_log+0x318>)
 800501a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501e:	4680      	mov	r8, r0
 8005020:	4689      	mov	r9, r1
 8005022:	f7fb fa8d 	bl	8000540 <__aeabi_dmul>
 8005026:	a362      	add	r3, pc, #392	@ (adr r3, 80051b0 <__ieee754_log+0x320>)
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f7fb f8d2 	bl	80001d4 <__adddf3>
 8005030:	4642      	mov	r2, r8
 8005032:	464b      	mov	r3, r9
 8005034:	f7fb fa84 	bl	8000540 <__aeabi_dmul>
 8005038:	a35f      	add	r3, pc, #380	@ (adr r3, 80051b8 <__ieee754_log+0x328>)
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	f7fb f8c9 	bl	80001d4 <__adddf3>
 8005042:	4642      	mov	r2, r8
 8005044:	464b      	mov	r3, r9
 8005046:	f7fb fa7b 	bl	8000540 <__aeabi_dmul>
 800504a:	a35d      	add	r3, pc, #372	@ (adr r3, 80051c0 <__ieee754_log+0x330>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f7fb f8c0 	bl	80001d4 <__adddf3>
 8005054:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005058:	f7fb fa72 	bl	8000540 <__aeabi_dmul>
 800505c:	a35a      	add	r3, pc, #360	@ (adr r3, 80051c8 <__ieee754_log+0x338>)
 800505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005062:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005066:	4640      	mov	r0, r8
 8005068:	4649      	mov	r1, r9
 800506a:	f7fb fa69 	bl	8000540 <__aeabi_dmul>
 800506e:	a358      	add	r3, pc, #352	@ (adr r3, 80051d0 <__ieee754_log+0x340>)
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	f7fb f8ae 	bl	80001d4 <__adddf3>
 8005078:	4642      	mov	r2, r8
 800507a:	464b      	mov	r3, r9
 800507c:	f7fb fa60 	bl	8000540 <__aeabi_dmul>
 8005080:	a355      	add	r3, pc, #340	@ (adr r3, 80051d8 <__ieee754_log+0x348>)
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	f7fb f8a5 	bl	80001d4 <__adddf3>
 800508a:	4642      	mov	r2, r8
 800508c:	464b      	mov	r3, r9
 800508e:	f7fb fa57 	bl	8000540 <__aeabi_dmul>
 8005092:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800509e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050a2:	f7fb f897 	bl	80001d4 <__adddf3>
 80050a6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80050aa:	3551      	adds	r5, #81	@ 0x51
 80050ac:	4335      	orrs	r5, r6
 80050ae:	2d00      	cmp	r5, #0
 80050b0:	4680      	mov	r8, r0
 80050b2:	4689      	mov	r9, r1
 80050b4:	dd48      	ble.n	8005148 <__ieee754_log+0x2b8>
 80050b6:	4b50      	ldr	r3, [pc, #320]	@ (80051f8 <__ieee754_log+0x368>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	4650      	mov	r0, sl
 80050bc:	4659      	mov	r1, fp
 80050be:	f7fb fa3f 	bl	8000540 <__aeabi_dmul>
 80050c2:	4652      	mov	r2, sl
 80050c4:	465b      	mov	r3, fp
 80050c6:	f7fb fa3b 	bl	8000540 <__aeabi_dmul>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4606      	mov	r6, r0
 80050d0:	460f      	mov	r7, r1
 80050d2:	4640      	mov	r0, r8
 80050d4:	4649      	mov	r1, r9
 80050d6:	f7fb f87d 	bl	80001d4 <__adddf3>
 80050da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050de:	f7fb fa2f 	bl	8000540 <__aeabi_dmul>
 80050e2:	4680      	mov	r8, r0
 80050e4:	4689      	mov	r9, r1
 80050e6:	b964      	cbnz	r4, 8005102 <__ieee754_log+0x272>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	4630      	mov	r0, r6
 80050ee:	4639      	mov	r1, r7
 80050f0:	f7fb f86e 	bl	80001d0 <__aeabi_dsub>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4650      	mov	r0, sl
 80050fa:	4659      	mov	r1, fp
 80050fc:	f7fb f868 	bl	80001d0 <__aeabi_dsub>
 8005100:	e6da      	b.n	8004eb8 <__ieee754_log+0x28>
 8005102:	a323      	add	r3, pc, #140	@ (adr r3, 8005190 <__ieee754_log+0x300>)
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800510c:	f7fb fa18 	bl	8000540 <__aeabi_dmul>
 8005110:	a321      	add	r3, pc, #132	@ (adr r3, 8005198 <__ieee754_log+0x308>)
 8005112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005116:	4604      	mov	r4, r0
 8005118:	460d      	mov	r5, r1
 800511a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800511e:	f7fb fa0f 	bl	8000540 <__aeabi_dmul>
 8005122:	4642      	mov	r2, r8
 8005124:	464b      	mov	r3, r9
 8005126:	f7fb f855 	bl	80001d4 <__adddf3>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4630      	mov	r0, r6
 8005130:	4639      	mov	r1, r7
 8005132:	f7fb f84d 	bl	80001d0 <__aeabi_dsub>
 8005136:	4652      	mov	r2, sl
 8005138:	465b      	mov	r3, fp
 800513a:	f7fb f849 	bl	80001d0 <__aeabi_dsub>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4620      	mov	r0, r4
 8005144:	4629      	mov	r1, r5
 8005146:	e7d9      	b.n	80050fc <__ieee754_log+0x26c>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4650      	mov	r0, sl
 800514e:	4659      	mov	r1, fp
 8005150:	f7fb f83e 	bl	80001d0 <__aeabi_dsub>
 8005154:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005158:	f7fb f9f2 	bl	8000540 <__aeabi_dmul>
 800515c:	4606      	mov	r6, r0
 800515e:	460f      	mov	r7, r1
 8005160:	2c00      	cmp	r4, #0
 8005162:	f43f af25 	beq.w	8004fb0 <__ieee754_log+0x120>
 8005166:	a30a      	add	r3, pc, #40	@ (adr r3, 8005190 <__ieee754_log+0x300>)
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005170:	f7fb f9e6 	bl	8000540 <__aeabi_dmul>
 8005174:	a308      	add	r3, pc, #32	@ (adr r3, 8005198 <__ieee754_log+0x308>)
 8005176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517a:	4604      	mov	r4, r0
 800517c:	460d      	mov	r5, r1
 800517e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005182:	e729      	b.n	8004fd8 <__ieee754_log+0x148>
 8005184:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80051e0 <__ieee754_log+0x350>
 8005188:	e698      	b.n	8004ebc <__ieee754_log+0x2c>
 800518a:	bf00      	nop
 800518c:	f3af 8000 	nop.w
 8005190:	fee00000 	.word	0xfee00000
 8005194:	3fe62e42 	.word	0x3fe62e42
 8005198:	35793c76 	.word	0x35793c76
 800519c:	3dea39ef 	.word	0x3dea39ef
 80051a0:	55555555 	.word	0x55555555
 80051a4:	3fd55555 	.word	0x3fd55555
 80051a8:	df3e5244 	.word	0xdf3e5244
 80051ac:	3fc2f112 	.word	0x3fc2f112
 80051b0:	96cb03de 	.word	0x96cb03de
 80051b4:	3fc74664 	.word	0x3fc74664
 80051b8:	94229359 	.word	0x94229359
 80051bc:	3fd24924 	.word	0x3fd24924
 80051c0:	55555593 	.word	0x55555593
 80051c4:	3fe55555 	.word	0x3fe55555
 80051c8:	d078c69f 	.word	0xd078c69f
 80051cc:	3fc39a09 	.word	0x3fc39a09
 80051d0:	1d8e78af 	.word	0x1d8e78af
 80051d4:	3fcc71c5 	.word	0x3fcc71c5
 80051d8:	9997fa04 	.word	0x9997fa04
 80051dc:	3fd99999 	.word	0x3fd99999
	...
 80051e8:	c3500000 	.word	0xc3500000
 80051ec:	43500000 	.word	0x43500000
 80051f0:	7fefffff 	.word	0x7fefffff
 80051f4:	3ff00000 	.word	0x3ff00000
 80051f8:	3fe00000 	.word	0x3fe00000

080051fc <_init>:
 80051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fe:	bf00      	nop
 8005200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005202:	bc08      	pop	{r3}
 8005204:	469e      	mov	lr, r3
 8005206:	4770      	bx	lr

08005208 <_fini>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	bf00      	nop
 800520c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520e:	bc08      	pop	{r3}
 8005210:	469e      	mov	lr, r3
 8005212:	4770      	bx	lr
