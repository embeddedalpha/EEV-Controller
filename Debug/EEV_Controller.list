
EEV_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001aac  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001c34  08001c34  00002c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c44  08001c44  00003004  2**0
                  CONTENTS
  4 .ARM          00000000  08001c44  08001c44  00003004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c44  08001c44  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c44  08001c44  00002c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c48  08001c48  00002c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001c4c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003004  2**0
                  CONTENTS
 10 .bss          00000448  20000004  20000004  00003004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000044c  2000044c  00003004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006913  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b25  00000000  00000000  00009947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  0000a470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000198  00000000  00000000  0000a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e76  00000000  00000000  0000a828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000382f  00000000  00000000  0002469e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fa8c  00000000  00000000  00027ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b7959  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000738  00000000  00000000  000b799c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000b80d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001c1c 	.word	0x08001c1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001c1c 	.word	0x08001c1c

080001c8 <USART1_IRQHandler>:
// Initialize the state to IDLE
ModbusSlaveState currentSlaveState = MODBUS_SLAVE_IDLE;


void USART1_IRQHandler(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

	if((Modbus_USART.Port  -> SR & USART_SR_RXNE) == USART_SR_RXNE)
 80001cc:	4b21      	ldr	r3, [pc, #132]	@ (8000254 <USART1_IRQHandler+0x8c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f003 0320 	and.w	r3, r3, #32
 80001d6:	2b20      	cmp	r3, #32
 80001d8:	d107      	bne.n	80001ea <USART1_IRQHandler+0x22>
	{
		Modbus_USART.Port  -> SR &= ~USART_SR_RXNE;
 80001da:	4b1e      	ldr	r3, [pc, #120]	@ (8000254 <USART1_IRQHandler+0x8c>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000254 <USART1_IRQHandler+0x8c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f022 0220 	bic.w	r2, r2, #32
 80001e8:	601a      	str	r2, [r3, #0]
	}

	if((Modbus_USART.Port -> SR & USART_SR_IDLE) == USART_SR_IDLE)
 80001ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000254 <USART1_IRQHandler+0x8c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f003 0310 	and.w	r3, r3, #16
 80001f4:	2b10      	cmp	r3, #16
 80001f6:	d128      	bne.n	800024a <USART1_IRQHandler+0x82>
	{
		Modbus_USART.USART_DMA_Instance_RX.Request.Stream -> CR &= ~DMA_SxCR_EN;
 80001f8:	4b16      	ldr	r3, [pc, #88]	@ (8000254 <USART1_IRQHandler+0x8c>)
 80001fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	4b15      	ldr	r3, [pc, #84]	@ (8000254 <USART1_IRQHandler+0x8c>)
 8000200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000202:	f022 0201 	bic.w	r2, r2, #1
 8000206:	601a      	str	r2, [r3, #0]

		if((Modbus_RX_Buffer_1[0] == 0) || (Modbus_RX_Buffer_1[0] == Temp_Modbus_Config->slave_address))
 8000208:	4b13      	ldr	r3, [pc, #76]	@ (8000258 <USART1_IRQHandler+0x90>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d006      	beq.n	800021e <USART1_IRQHandler+0x56>
 8000210:	4b11      	ldr	r3, [pc, #68]	@ (8000258 <USART1_IRQHandler+0x90>)
 8000212:	781a      	ldrb	r2, [r3, #0]
 8000214:	4b11      	ldr	r3, [pc, #68]	@ (800025c <USART1_IRQHandler+0x94>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	429a      	cmp	r2, r3
 800021c:	d10c      	bne.n	8000238 <USART1_IRQHandler+0x70>
		{
			Modbus_Message_length = Modbus_RX_Buffer_Length-Modbus_USART.USART_DMA_Instance_RX.Request.Stream -> NDTR;
 800021e:	4b0d      	ldr	r3, [pc, #52]	@ (8000254 <USART1_IRQHandler+0x8c>)
 8000220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000222:	685b      	ldr	r3, [r3, #4]
 8000224:	b29b      	uxth	r3, r3
 8000226:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 800022a:	b29a      	uxth	r2, r3
 800022c:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <USART1_IRQHandler+0x98>)
 800022e:	801a      	strh	r2, [r3, #0]
			Modbus_Message_Received_Flag = 1;
 8000230:	4b0c      	ldr	r3, [pc, #48]	@ (8000264 <USART1_IRQHandler+0x9c>)
 8000232:	2201      	movs	r2, #1
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	e002      	b.n	800023e <USART1_IRQHandler+0x76>
		}
		else
		{
			Modbus_Message_Received_Flag = 0;
 8000238:	4b0a      	ldr	r3, [pc, #40]	@ (8000264 <USART1_IRQHandler+0x9c>)
 800023a:	2200      	movs	r2, #0
 800023c:	701a      	strb	r2, [r3, #0]
		}


		static int temp = 0;
		temp = Modbus_USART.Port -> SR;
 800023e:	4b05      	ldr	r3, [pc, #20]	@ (8000254 <USART1_IRQHandler+0x8c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	461a      	mov	r2, r3
 8000246:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <USART1_IRQHandler+0xa0>)
 8000248:	601a      	str	r2, [r3, #0]
	}
}
 800024a:	bf00      	nop
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	20000020 	.word	0x20000020
 8000258:	200000a8 	.word	0x200000a8
 800025c:	200000a4 	.word	0x200000a4
 8000260:	200001d4 	.word	0x200001d4
 8000264:	200001d6 	.word	0x200001d6
 8000268:	200001d8 	.word	0x200001d8

0800026c <DMA1_Stream0_IRQHandler>:
 * status flags for FIFO error, direct mode error, transfer error, half
 * transfer complete, and transfer complete, and clears the respective
 * interrupt flag after handling it.
 */
void DMA1_Stream0_IRQHandler(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF0)
 8000270:	4b54      	ldr	r3, [pc, #336]	@ (80003c4 <DMA1_Stream0_IRQHandler+0x158>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f003 0301 	and.w	r3, r3, #1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d01a      	beq.n	80002b2 <DMA1_Stream0_IRQHandler+0x46>
	{
		TIM5_CH3_DMA_Flag.Fifo_Error_Flag = true;
 800027c:	4b52      	ldr	r3, [pc, #328]	@ (80003c8 <DMA1_Stream0_IRQHandler+0x15c>)
 800027e:	2201      	movs	r2, #1
 8000280:	711a      	strb	r2, [r3, #4]
		TIM4_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000282:	4b52      	ldr	r3, [pc, #328]	@ (80003cc <DMA1_Stream0_IRQHandler+0x160>)
 8000284:	2201      	movs	r2, #1
 8000286:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000288:	4b51      	ldr	r3, [pc, #324]	@ (80003d0 <DMA1_Stream0_IRQHandler+0x164>)
 800028a:	2201      	movs	r2, #1
 800028c:	711a      	strb	r2, [r3, #4]
		USART5_RX_DMA_Flag.Fifo_Error_Flag = true;
 800028e:	4b51      	ldr	r3, [pc, #324]	@ (80003d4 <DMA1_Stream0_IRQHandler+0x168>)
 8000290:	2201      	movs	r2, #1
 8000292:	711a      	strb	r2, [r3, #4]
		I2C1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000294:	4b50      	ldr	r3, [pc, #320]	@ (80003d8 <DMA1_Stream0_IRQHandler+0x16c>)
 8000296:	2201      	movs	r2, #1
 8000298:	711a      	strb	r2, [r3, #4]
		SPI3_RX_DMA_Flag.Fifo_Error_Flag = true;
 800029a:	4b50      	ldr	r3, [pc, #320]	@ (80003dc <DMA1_Stream0_IRQHandler+0x170>)
 800029c:	2201      	movs	r2, #1
 800029e:	711a      	strb	r2, [r3, #4]
		DMA1_Stream0_Flag.Fifo_Error_Flag = true;
 80002a0:	4b4f      	ldr	r3, [pc, #316]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x174>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 80002a6:	4b47      	ldr	r3, [pc, #284]	@ (80003c4 <DMA1_Stream0_IRQHandler+0x158>)
 80002a8:	689b      	ldr	r3, [r3, #8]
 80002aa:	4a46      	ldr	r2, [pc, #280]	@ (80003c4 <DMA1_Stream0_IRQHandler+0x158>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF0)
 80002b2:	4b44      	ldr	r3, [pc, #272]	@ (80003c4 <DMA1_Stream0_IRQHandler+0x158>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f003 0304 	and.w	r3, r3, #4
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d01a      	beq.n	80002f4 <DMA1_Stream0_IRQHandler+0x88>
	{
		TIM5_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 80002be:	4b42      	ldr	r3, [pc, #264]	@ (80003c8 <DMA1_Stream0_IRQHandler+0x15c>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	70da      	strb	r2, [r3, #3]
		TIM4_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 80002c4:	4b41      	ldr	r3, [pc, #260]	@ (80003cc <DMA1_Stream0_IRQHandler+0x160>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80002ca:	4b41      	ldr	r3, [pc, #260]	@ (80003d0 <DMA1_Stream0_IRQHandler+0x164>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	70da      	strb	r2, [r3, #3]
		USART5_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80002d0:	4b40      	ldr	r3, [pc, #256]	@ (80003d4 <DMA1_Stream0_IRQHandler+0x168>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	70da      	strb	r2, [r3, #3]
		I2C1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80002d6:	4b40      	ldr	r3, [pc, #256]	@ (80003d8 <DMA1_Stream0_IRQHandler+0x16c>)
 80002d8:	2201      	movs	r2, #1
 80002da:	70da      	strb	r2, [r3, #3]
		SPI3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80002dc:	4b3f      	ldr	r3, [pc, #252]	@ (80003dc <DMA1_Stream0_IRQHandler+0x170>)
 80002de:	2201      	movs	r2, #1
 80002e0:	70da      	strb	r2, [r3, #3]
		DMA1_Stream0_Flag.Direct_Mode_Error_Flag = true;
 80002e2:	4b3f      	ldr	r3, [pc, #252]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x174>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 80002e8:	4b36      	ldr	r3, [pc, #216]	@ (80003c4 <DMA1_Stream0_IRQHandler+0x158>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a35      	ldr	r2, [pc, #212]	@ (80003c4 <DMA1_Stream0_IRQHandler+0x158>)
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF0)
 80002f4:	4b33      	ldr	r3, [pc, #204]	@ (80003c4 <DMA1_Stream0_IRQHandler+0x158>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 0308 	and.w	r3, r3, #8
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d01a      	beq.n	8000336 <DMA1_Stream0_IRQHandler+0xca>
	{
		TIM5_CH3_DMA_Flag.Transfer_Error_Flag= true;
 8000300:	4b31      	ldr	r3, [pc, #196]	@ (80003c8 <DMA1_Stream0_IRQHandler+0x15c>)
 8000302:	2201      	movs	r2, #1
 8000304:	709a      	strb	r2, [r3, #2]
		TIM4_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000306:	4b31      	ldr	r3, [pc, #196]	@ (80003cc <DMA1_Stream0_IRQHandler+0x160>)
 8000308:	2201      	movs	r2, #1
 800030a:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 800030c:	4b30      	ldr	r3, [pc, #192]	@ (80003d0 <DMA1_Stream0_IRQHandler+0x164>)
 800030e:	2201      	movs	r2, #1
 8000310:	709a      	strb	r2, [r3, #2]
		USART5_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000312:	4b30      	ldr	r3, [pc, #192]	@ (80003d4 <DMA1_Stream0_IRQHandler+0x168>)
 8000314:	2201      	movs	r2, #1
 8000316:	709a      	strb	r2, [r3, #2]
		I2C1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000318:	4b2f      	ldr	r3, [pc, #188]	@ (80003d8 <DMA1_Stream0_IRQHandler+0x16c>)
 800031a:	2201      	movs	r2, #1
 800031c:	709a      	strb	r2, [r3, #2]
		SPI3_RX_DMA_Flag.Transfer_Error_Flag = true;
 800031e:	4b2f      	ldr	r3, [pc, #188]	@ (80003dc <DMA1_Stream0_IRQHandler+0x170>)
 8000320:	2201      	movs	r2, #1
 8000322:	709a      	strb	r2, [r3, #2]
		DMA1_Stream0_Flag.Transfer_Error_Flag = true;
 8000324:	4b2e      	ldr	r3, [pc, #184]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x174>)
 8000326:	2201      	movs	r2, #1
 8000328:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 800032a:	4b26      	ldr	r3, [pc, #152]	@ (80003c4 <DMA1_Stream0_IRQHandler+0x158>)
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	4a25      	ldr	r2, [pc, #148]	@ (80003c4 <DMA1_Stream0_IRQHandler+0x158>)
 8000330:	f043 0308 	orr.w	r3, r3, #8
 8000334:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF0)
 8000336:	4b23      	ldr	r3, [pc, #140]	@ (80003c4 <DMA1_Stream0_IRQHandler+0x158>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f003 0310 	and.w	r3, r3, #16
 800033e:	2b00      	cmp	r3, #0
 8000340:	d01a      	beq.n	8000378 <DMA1_Stream0_IRQHandler+0x10c>
	{
		TIM5_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000342:	4b21      	ldr	r3, [pc, #132]	@ (80003c8 <DMA1_Stream0_IRQHandler+0x15c>)
 8000344:	2201      	movs	r2, #1
 8000346:	705a      	strb	r2, [r3, #1]
		TIM4_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000348:	4b20      	ldr	r3, [pc, #128]	@ (80003cc <DMA1_Stream0_IRQHandler+0x160>)
 800034a:	2201      	movs	r2, #1
 800034c:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800034e:	4b20      	ldr	r3, [pc, #128]	@ (80003d0 <DMA1_Stream0_IRQHandler+0x164>)
 8000350:	2201      	movs	r2, #1
 8000352:	705a      	strb	r2, [r3, #1]
		USART5_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000354:	4b1f      	ldr	r3, [pc, #124]	@ (80003d4 <DMA1_Stream0_IRQHandler+0x168>)
 8000356:	2201      	movs	r2, #1
 8000358:	705a      	strb	r2, [r3, #1]
		I2C1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800035a:	4b1f      	ldr	r3, [pc, #124]	@ (80003d8 <DMA1_Stream0_IRQHandler+0x16c>)
 800035c:	2201      	movs	r2, #1
 800035e:	705a      	strb	r2, [r3, #1]
		SPI3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <DMA1_Stream0_IRQHandler+0x170>)
 8000362:	2201      	movs	r2, #1
 8000364:	705a      	strb	r2, [r3, #1]
		DMA1_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8000366:	4b1e      	ldr	r3, [pc, #120]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x174>)
 8000368:	2201      	movs	r2, #1
 800036a:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 800036c:	4b15      	ldr	r3, [pc, #84]	@ (80003c4 <DMA1_Stream0_IRQHandler+0x158>)
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	4a14      	ldr	r2, [pc, #80]	@ (80003c4 <DMA1_Stream0_IRQHandler+0x158>)
 8000372:	f043 0310 	orr.w	r3, r3, #16
 8000376:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF0)
 8000378:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <DMA1_Stream0_IRQHandler+0x158>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f003 0320 	and.w	r3, r3, #32
 8000380:	2b00      	cmp	r3, #0
 8000382:	d01a      	beq.n	80003ba <DMA1_Stream0_IRQHandler+0x14e>
	{
		TIM5_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000384:	4b10      	ldr	r3, [pc, #64]	@ (80003c8 <DMA1_Stream0_IRQHandler+0x15c>)
 8000386:	2201      	movs	r2, #1
 8000388:	701a      	strb	r2, [r3, #0]
		TIM4_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 800038a:	4b10      	ldr	r3, [pc, #64]	@ (80003cc <DMA1_Stream0_IRQHandler+0x160>)
 800038c:	2201      	movs	r2, #1
 800038e:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000390:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <DMA1_Stream0_IRQHandler+0x164>)
 8000392:	2201      	movs	r2, #1
 8000394:	701a      	strb	r2, [r3, #0]
		USART5_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000396:	4b0f      	ldr	r3, [pc, #60]	@ (80003d4 <DMA1_Stream0_IRQHandler+0x168>)
 8000398:	2201      	movs	r2, #1
 800039a:	701a      	strb	r2, [r3, #0]
		I2C1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800039c:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <DMA1_Stream0_IRQHandler+0x16c>)
 800039e:	2201      	movs	r2, #1
 80003a0:	701a      	strb	r2, [r3, #0]
		SPI3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	@ (80003dc <DMA1_Stream0_IRQHandler+0x170>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	701a      	strb	r2, [r3, #0]
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
 80003a8:	4b0d      	ldr	r3, [pc, #52]	@ (80003e0 <DMA1_Stream0_IRQHandler+0x174>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 80003ae:	4b05      	ldr	r3, [pc, #20]	@ (80003c4 <DMA1_Stream0_IRQHandler+0x158>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	4a04      	ldr	r2, [pc, #16]	@ (80003c4 <DMA1_Stream0_IRQHandler+0x158>)
 80003b4:	f043 0320 	orr.w	r3, r3, #32
 80003b8:	6093      	str	r3, [r2, #8]
	}
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	40026000 	.word	0x40026000
 80003c8:	20000384 	.word	0x20000384
 80003cc:	20000364 	.word	0x20000364
 80003d0:	200002a4 	.word	0x200002a4
 80003d4:	2000027c 	.word	0x2000027c
 80003d8:	200001f4 	.word	0x200001f4
 80003dc:	20000224 	.word	0x20000224
 80003e0:	200003cc 	.word	0x200003cc

080003e4 <DMA1_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream1_IRQHandler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF1)
 80003e8:	4b45      	ldr	r3, [pc, #276]	@ (8000500 <DMA1_Stream1_IRQHandler+0x11c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d014      	beq.n	800041e <DMA1_Stream1_IRQHandler+0x3a>
	{
		TIM2_CH3_DMA_Flag.Fifo_Error_Flag = true;
 80003f4:	4b43      	ldr	r3, [pc, #268]	@ (8000504 <DMA1_Stream1_IRQHandler+0x120>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	711a      	strb	r2, [r3, #4]
		TIM6_UP_DMA_Flag.Fifo_Error_Flag = true;
 80003fa:	4b43      	ldr	r3, [pc, #268]	@ (8000508 <DMA1_Stream1_IRQHandler+0x124>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000400:	4b42      	ldr	r3, [pc, #264]	@ (800050c <DMA1_Stream1_IRQHandler+0x128>)
 8000402:	2201      	movs	r2, #1
 8000404:	711a      	strb	r2, [r3, #4]
		USART3_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000406:	4b42      	ldr	r3, [pc, #264]	@ (8000510 <DMA1_Stream1_IRQHandler+0x12c>)
 8000408:	2201      	movs	r2, #1
 800040a:	711a      	strb	r2, [r3, #4]
		DMA1_Stream1_Flag.Fifo_Error_Flag = true;
 800040c:	4b41      	ldr	r3, [pc, #260]	@ (8000514 <DMA1_Stream1_IRQHandler+0x130>)
 800040e:	2201      	movs	r2, #1
 8000410:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000412:	4b3b      	ldr	r3, [pc, #236]	@ (8000500 <DMA1_Stream1_IRQHandler+0x11c>)
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	4a3a      	ldr	r2, [pc, #232]	@ (8000500 <DMA1_Stream1_IRQHandler+0x11c>)
 8000418:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800041c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF1)
 800041e:	4b38      	ldr	r3, [pc, #224]	@ (8000500 <DMA1_Stream1_IRQHandler+0x11c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000426:	2b00      	cmp	r3, #0
 8000428:	d014      	beq.n	8000454 <DMA1_Stream1_IRQHandler+0x70>
	{
		TIM2_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 800042a:	4b36      	ldr	r3, [pc, #216]	@ (8000504 <DMA1_Stream1_IRQHandler+0x120>)
 800042c:	2201      	movs	r2, #1
 800042e:	70da      	strb	r2, [r3, #3]
		TIM6_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000430:	4b35      	ldr	r3, [pc, #212]	@ (8000508 <DMA1_Stream1_IRQHandler+0x124>)
 8000432:	2201      	movs	r2, #1
 8000434:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000436:	4b35      	ldr	r3, [pc, #212]	@ (800050c <DMA1_Stream1_IRQHandler+0x128>)
 8000438:	2201      	movs	r2, #1
 800043a:	70da      	strb	r2, [r3, #3]
		USART3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800043c:	4b34      	ldr	r3, [pc, #208]	@ (8000510 <DMA1_Stream1_IRQHandler+0x12c>)
 800043e:	2201      	movs	r2, #1
 8000440:	70da      	strb	r2, [r3, #3]
		DMA1_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8000442:	4b34      	ldr	r3, [pc, #208]	@ (8000514 <DMA1_Stream1_IRQHandler+0x130>)
 8000444:	2201      	movs	r2, #1
 8000446:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000448:	4b2d      	ldr	r3, [pc, #180]	@ (8000500 <DMA1_Stream1_IRQHandler+0x11c>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	4a2c      	ldr	r2, [pc, #176]	@ (8000500 <DMA1_Stream1_IRQHandler+0x11c>)
 800044e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000452:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF1)
 8000454:	4b2a      	ldr	r3, [pc, #168]	@ (8000500 <DMA1_Stream1_IRQHandler+0x11c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800045c:	2b00      	cmp	r3, #0
 800045e:	d014      	beq.n	800048a <DMA1_Stream1_IRQHandler+0xa6>
	{
		TIM2_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8000460:	4b28      	ldr	r3, [pc, #160]	@ (8000504 <DMA1_Stream1_IRQHandler+0x120>)
 8000462:	2201      	movs	r2, #1
 8000464:	709a      	strb	r2, [r3, #2]
		TIM6_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000466:	4b28      	ldr	r3, [pc, #160]	@ (8000508 <DMA1_Stream1_IRQHandler+0x124>)
 8000468:	2201      	movs	r2, #1
 800046a:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 800046c:	4b27      	ldr	r3, [pc, #156]	@ (800050c <DMA1_Stream1_IRQHandler+0x128>)
 800046e:	2201      	movs	r2, #1
 8000470:	709a      	strb	r2, [r3, #2]
		USART3_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000472:	4b27      	ldr	r3, [pc, #156]	@ (8000510 <DMA1_Stream1_IRQHandler+0x12c>)
 8000474:	2201      	movs	r2, #1
 8000476:	709a      	strb	r2, [r3, #2]
		DMA1_Stream1_Flag.Transfer_Error_Flag = true;
 8000478:	4b26      	ldr	r3, [pc, #152]	@ (8000514 <DMA1_Stream1_IRQHandler+0x130>)
 800047a:	2201      	movs	r2, #1
 800047c:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 800047e:	4b20      	ldr	r3, [pc, #128]	@ (8000500 <DMA1_Stream1_IRQHandler+0x11c>)
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	4a1f      	ldr	r2, [pc, #124]	@ (8000500 <DMA1_Stream1_IRQHandler+0x11c>)
 8000484:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000488:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF1)
 800048a:	4b1d      	ldr	r3, [pc, #116]	@ (8000500 <DMA1_Stream1_IRQHandler+0x11c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000492:	2b00      	cmp	r3, #0
 8000494:	d014      	beq.n	80004c0 <DMA1_Stream1_IRQHandler+0xdc>
	{
		TIM2_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000496:	4b1b      	ldr	r3, [pc, #108]	@ (8000504 <DMA1_Stream1_IRQHandler+0x120>)
 8000498:	2201      	movs	r2, #1
 800049a:	705a      	strb	r2, [r3, #1]
		TIM6_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800049c:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <DMA1_Stream1_IRQHandler+0x124>)
 800049e:	2201      	movs	r2, #1
 80004a0:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80004a2:	4b1a      	ldr	r3, [pc, #104]	@ (800050c <DMA1_Stream1_IRQHandler+0x128>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	705a      	strb	r2, [r3, #1]
		USART3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80004a8:	4b19      	ldr	r3, [pc, #100]	@ (8000510 <DMA1_Stream1_IRQHandler+0x12c>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	705a      	strb	r2, [r3, #1]
		DMA1_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 80004ae:	4b19      	ldr	r3, [pc, #100]	@ (8000514 <DMA1_Stream1_IRQHandler+0x130>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 80004b4:	4b12      	ldr	r3, [pc, #72]	@ (8000500 <DMA1_Stream1_IRQHandler+0x11c>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	4a11      	ldr	r2, [pc, #68]	@ (8000500 <DMA1_Stream1_IRQHandler+0x11c>)
 80004ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004be:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF1)
 80004c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <DMA1_Stream1_IRQHandler+0x11c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d014      	beq.n	80004f6 <DMA1_Stream1_IRQHandler+0x112>
	{
		TIM2_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 80004cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000504 <DMA1_Stream1_IRQHandler+0x120>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	701a      	strb	r2, [r3, #0]
		TIM6_UP_DMA_Flag.Transfer_Complete_Flag = true;
 80004d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000508 <DMA1_Stream1_IRQHandler+0x124>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <DMA1_Stream1_IRQHandler+0x128>)
 80004da:	2201      	movs	r2, #1
 80004dc:	701a      	strb	r2, [r3, #0]
		USART3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <DMA1_Stream1_IRQHandler+0x12c>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	701a      	strb	r2, [r3, #0]
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
 80004e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <DMA1_Stream1_IRQHandler+0x130>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 80004ea:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <DMA1_Stream1_IRQHandler+0x11c>)
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <DMA1_Stream1_IRQHandler+0x11c>)
 80004f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004f4:	6093      	str	r3, [r2, #8]
	}
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	40026000 	.word	0x40026000
 8000504:	20000334 	.word	0x20000334
 8000508:	20000394 	.word	0x20000394
 800050c:	2000029c 	.word	0x2000029c
 8000510:	20000264 	.word	0x20000264
 8000514:	200003d4 	.word	0x200003d4

08000518 <DMA1_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream2_IRQHandler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF2)
 800051c:	4b2f      	ldr	r3, [pc, #188]	@ (80005dc <DMA1_Stream2_IRQHandler+0xc4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000524:	2b00      	cmp	r3, #0
 8000526:	d00b      	beq.n	8000540 <DMA1_Stream2_IRQHandler+0x28>
	{
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000528:	4b2d      	ldr	r3, [pc, #180]	@ (80005e0 <DMA1_Stream2_IRQHandler+0xc8>)
 800052a:	2201      	movs	r2, #1
 800052c:	711a      	strb	r2, [r3, #4]
		DMA1_Stream2_Flag.Fifo_Error_Flag = true;
 800052e:	4b2d      	ldr	r3, [pc, #180]	@ (80005e4 <DMA1_Stream2_IRQHandler+0xcc>)
 8000530:	2201      	movs	r2, #1
 8000532:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000534:	4b29      	ldr	r3, [pc, #164]	@ (80005dc <DMA1_Stream2_IRQHandler+0xc4>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	4a28      	ldr	r2, [pc, #160]	@ (80005dc <DMA1_Stream2_IRQHandler+0xc4>)
 800053a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800053e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF2)
 8000540:	4b26      	ldr	r3, [pc, #152]	@ (80005dc <DMA1_Stream2_IRQHandler+0xc4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000548:	2b00      	cmp	r3, #0
 800054a:	d00b      	beq.n	8000564 <DMA1_Stream2_IRQHandler+0x4c>
	{
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800054c:	4b24      	ldr	r3, [pc, #144]	@ (80005e0 <DMA1_Stream2_IRQHandler+0xc8>)
 800054e:	2201      	movs	r2, #1
 8000550:	70da      	strb	r2, [r3, #3]
		DMA1_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8000552:	4b24      	ldr	r3, [pc, #144]	@ (80005e4 <DMA1_Stream2_IRQHandler+0xcc>)
 8000554:	2201      	movs	r2, #1
 8000556:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8000558:	4b20      	ldr	r3, [pc, #128]	@ (80005dc <DMA1_Stream2_IRQHandler+0xc4>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	4a1f      	ldr	r2, [pc, #124]	@ (80005dc <DMA1_Stream2_IRQHandler+0xc4>)
 800055e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000562:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF2)
 8000564:	4b1d      	ldr	r3, [pc, #116]	@ (80005dc <DMA1_Stream2_IRQHandler+0xc4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800056c:	2b00      	cmp	r3, #0
 800056e:	d00b      	beq.n	8000588 <DMA1_Stream2_IRQHandler+0x70>
	{
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000570:	4b1b      	ldr	r3, [pc, #108]	@ (80005e0 <DMA1_Stream2_IRQHandler+0xc8>)
 8000572:	2201      	movs	r2, #1
 8000574:	709a      	strb	r2, [r3, #2]
		DMA1_Stream2_Flag.Transfer_Error_Flag = true;
 8000576:	4b1b      	ldr	r3, [pc, #108]	@ (80005e4 <DMA1_Stream2_IRQHandler+0xcc>)
 8000578:	2201      	movs	r2, #1
 800057a:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 800057c:	4b17      	ldr	r3, [pc, #92]	@ (80005dc <DMA1_Stream2_IRQHandler+0xc4>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	4a16      	ldr	r2, [pc, #88]	@ (80005dc <DMA1_Stream2_IRQHandler+0xc4>)
 8000582:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000586:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF2)
 8000588:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <DMA1_Stream2_IRQHandler+0xc4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000590:	2b00      	cmp	r3, #0
 8000592:	d00b      	beq.n	80005ac <DMA1_Stream2_IRQHandler+0x94>
	{
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000594:	4b12      	ldr	r3, [pc, #72]	@ (80005e0 <DMA1_Stream2_IRQHandler+0xc8>)
 8000596:	2201      	movs	r2, #1
 8000598:	705a      	strb	r2, [r3, #1]
		DMA1_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 800059a:	4b12      	ldr	r3, [pc, #72]	@ (80005e4 <DMA1_Stream2_IRQHandler+0xcc>)
 800059c:	2201      	movs	r2, #1
 800059e:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 80005a0:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <DMA1_Stream2_IRQHandler+0xc4>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	4a0d      	ldr	r2, [pc, #52]	@ (80005dc <DMA1_Stream2_IRQHandler+0xc4>)
 80005a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005aa:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF2)
 80005ac:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <DMA1_Stream2_IRQHandler+0xc4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00b      	beq.n	80005d0 <DMA1_Stream2_IRQHandler+0xb8>
	{
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80005b8:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <DMA1_Stream2_IRQHandler+0xc8>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
 80005be:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <DMA1_Stream2_IRQHandler+0xcc>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80005c4:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <DMA1_Stream2_IRQHandler+0xc4>)
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	4a04      	ldr	r2, [pc, #16]	@ (80005dc <DMA1_Stream2_IRQHandler+0xc4>)
 80005ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005ce:	6093      	str	r3, [r2, #8]
	}
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40026000 	.word	0x40026000
 80005e0:	2000026c 	.word	0x2000026c
 80005e4:	200003dc 	.word	0x200003dc

080005e8 <DMA1_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream3_IRQHandler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF3)
 80005ec:	4b54      	ldr	r3, [pc, #336]	@ (8000740 <DMA1_Stream3_IRQHandler+0x158>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d01a      	beq.n	800062e <DMA1_Stream3_IRQHandler+0x46>
	{
		TIM5_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 80005f8:	4b52      	ldr	r3, [pc, #328]	@ (8000744 <DMA1_Stream3_IRQHandler+0x15c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	711a      	strb	r2, [r3, #4]
		TIM4_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80005fe:	4b52      	ldr	r3, [pc, #328]	@ (8000748 <DMA1_Stream3_IRQHandler+0x160>)
 8000600:	2201      	movs	r2, #1
 8000602:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000604:	4b51      	ldr	r3, [pc, #324]	@ (800074c <DMA1_Stream3_IRQHandler+0x164>)
 8000606:	2201      	movs	r2, #1
 8000608:	711a      	strb	r2, [r3, #4]
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 800060a:	4b51      	ldr	r3, [pc, #324]	@ (8000750 <DMA1_Stream3_IRQHandler+0x168>)
 800060c:	2201      	movs	r2, #1
 800060e:	711a      	strb	r2, [r3, #4]
		I2S2_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000610:	4b50      	ldr	r3, [pc, #320]	@ (8000754 <DMA1_Stream3_IRQHandler+0x16c>)
 8000612:	2201      	movs	r2, #1
 8000614:	711a      	strb	r2, [r3, #4]
		SPI2_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000616:	4b50      	ldr	r3, [pc, #320]	@ (8000758 <DMA1_Stream3_IRQHandler+0x170>)
 8000618:	2201      	movs	r2, #1
 800061a:	711a      	strb	r2, [r3, #4]
		DMA1_Stream3_Flag.Fifo_Error_Flag = true;
 800061c:	4b4f      	ldr	r3, [pc, #316]	@ (800075c <DMA1_Stream3_IRQHandler+0x174>)
 800061e:	2201      	movs	r2, #1
 8000620:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8000622:	4b47      	ldr	r3, [pc, #284]	@ (8000740 <DMA1_Stream3_IRQHandler+0x158>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	4a46      	ldr	r2, [pc, #280]	@ (8000740 <DMA1_Stream3_IRQHandler+0x158>)
 8000628:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800062c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF3)
 800062e:	4b44      	ldr	r3, [pc, #272]	@ (8000740 <DMA1_Stream3_IRQHandler+0x158>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d01a      	beq.n	8000670 <DMA1_Stream3_IRQHandler+0x88>
	{
		TIM5_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 800063a:	4b42      	ldr	r3, [pc, #264]	@ (8000744 <DMA1_Stream3_IRQHandler+0x15c>)
 800063c:	2201      	movs	r2, #1
 800063e:	70da      	strb	r2, [r3, #3]
		TIM4_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000640:	4b41      	ldr	r3, [pc, #260]	@ (8000748 <DMA1_Stream3_IRQHandler+0x160>)
 8000642:	2201      	movs	r2, #1
 8000644:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000646:	4b41      	ldr	r3, [pc, #260]	@ (800074c <DMA1_Stream3_IRQHandler+0x164>)
 8000648:	2201      	movs	r2, #1
 800064a:	70da      	strb	r2, [r3, #3]
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800064c:	4b40      	ldr	r3, [pc, #256]	@ (8000750 <DMA1_Stream3_IRQHandler+0x168>)
 800064e:	2201      	movs	r2, #1
 8000650:	70da      	strb	r2, [r3, #3]
		I2S2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000652:	4b40      	ldr	r3, [pc, #256]	@ (8000754 <DMA1_Stream3_IRQHandler+0x16c>)
 8000654:	2201      	movs	r2, #1
 8000656:	70da      	strb	r2, [r3, #3]
		SPI2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000658:	4b3f      	ldr	r3, [pc, #252]	@ (8000758 <DMA1_Stream3_IRQHandler+0x170>)
 800065a:	2201      	movs	r2, #1
 800065c:	70da      	strb	r2, [r3, #3]
		DMA1_Stream3_Flag.Direct_Mode_Error_Flag = true;
 800065e:	4b3f      	ldr	r3, [pc, #252]	@ (800075c <DMA1_Stream3_IRQHandler+0x174>)
 8000660:	2201      	movs	r2, #1
 8000662:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8000664:	4b36      	ldr	r3, [pc, #216]	@ (8000740 <DMA1_Stream3_IRQHandler+0x158>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	4a35      	ldr	r2, [pc, #212]	@ (8000740 <DMA1_Stream3_IRQHandler+0x158>)
 800066a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800066e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF3)
 8000670:	4b33      	ldr	r3, [pc, #204]	@ (8000740 <DMA1_Stream3_IRQHandler+0x158>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000678:	2b00      	cmp	r3, #0
 800067a:	d01a      	beq.n	80006b2 <DMA1_Stream3_IRQHandler+0xca>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 800067c:	4b31      	ldr	r3, [pc, #196]	@ (8000744 <DMA1_Stream3_IRQHandler+0x15c>)
 800067e:	2201      	movs	r2, #1
 8000680:	709a      	strb	r2, [r3, #2]
		TIM4_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8000682:	4b31      	ldr	r3, [pc, #196]	@ (8000748 <DMA1_Stream3_IRQHandler+0x160>)
 8000684:	2201      	movs	r2, #1
 8000686:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000688:	4b30      	ldr	r3, [pc, #192]	@ (800074c <DMA1_Stream3_IRQHandler+0x164>)
 800068a:	2201      	movs	r2, #1
 800068c:	709a      	strb	r2, [r3, #2]
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 800068e:	4b30      	ldr	r3, [pc, #192]	@ (8000750 <DMA1_Stream3_IRQHandler+0x168>)
 8000690:	2201      	movs	r2, #1
 8000692:	709a      	strb	r2, [r3, #2]
		I2S2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000694:	4b2f      	ldr	r3, [pc, #188]	@ (8000754 <DMA1_Stream3_IRQHandler+0x16c>)
 8000696:	2201      	movs	r2, #1
 8000698:	709a      	strb	r2, [r3, #2]
		SPI2_RX_DMA_Flag.Transfer_Error_Flag = true;
 800069a:	4b2f      	ldr	r3, [pc, #188]	@ (8000758 <DMA1_Stream3_IRQHandler+0x170>)
 800069c:	2201      	movs	r2, #1
 800069e:	709a      	strb	r2, [r3, #2]
		DMA1_Stream3_Flag.Transfer_Error_Flag = true;
 80006a0:	4b2e      	ldr	r3, [pc, #184]	@ (800075c <DMA1_Stream3_IRQHandler+0x174>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80006a6:	4b26      	ldr	r3, [pc, #152]	@ (8000740 <DMA1_Stream3_IRQHandler+0x158>)
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	4a25      	ldr	r2, [pc, #148]	@ (8000740 <DMA1_Stream3_IRQHandler+0x158>)
 80006ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006b0:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF3)
 80006b2:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <DMA1_Stream3_IRQHandler+0x158>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d01a      	beq.n	80006f4 <DMA1_Stream3_IRQHandler+0x10c>
	{
		TIM5_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80006be:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <DMA1_Stream3_IRQHandler+0x15c>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	705a      	strb	r2, [r3, #1]
		TIM4_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80006c4:	4b20      	ldr	r3, [pc, #128]	@ (8000748 <DMA1_Stream3_IRQHandler+0x160>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80006ca:	4b20      	ldr	r3, [pc, #128]	@ (800074c <DMA1_Stream3_IRQHandler+0x164>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	705a      	strb	r2, [r3, #1]
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <DMA1_Stream3_IRQHandler+0x168>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	705a      	strb	r2, [r3, #1]
		I2S2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80006d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <DMA1_Stream3_IRQHandler+0x16c>)
 80006d8:	2201      	movs	r2, #1
 80006da:	705a      	strb	r2, [r3, #1]
		SPI2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80006dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <DMA1_Stream3_IRQHandler+0x170>)
 80006de:	2201      	movs	r2, #1
 80006e0:	705a      	strb	r2, [r3, #1]
		DMA1_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 80006e2:	4b1e      	ldr	r3, [pc, #120]	@ (800075c <DMA1_Stream3_IRQHandler+0x174>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 80006e8:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <DMA1_Stream3_IRQHandler+0x158>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	4a14      	ldr	r2, [pc, #80]	@ (8000740 <DMA1_Stream3_IRQHandler+0x158>)
 80006ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006f2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF3)
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <DMA1_Stream3_IRQHandler+0x158>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d01a      	beq.n	8000736 <DMA1_Stream3_IRQHandler+0x14e>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000700:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <DMA1_Stream3_IRQHandler+0x15c>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
		TIM4_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <DMA1_Stream3_IRQHandler+0x160>)
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <DMA1_Stream3_IRQHandler+0x164>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <DMA1_Stream3_IRQHandler+0x168>)
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
		I2S2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000718:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <DMA1_Stream3_IRQHandler+0x16c>)
 800071a:	2201      	movs	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
		SPI2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <DMA1_Stream3_IRQHandler+0x170>)
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
 8000724:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <DMA1_Stream3_IRQHandler+0x174>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 800072a:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <DMA1_Stream3_IRQHandler+0x158>)
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	4a04      	ldr	r2, [pc, #16]	@ (8000740 <DMA1_Stream3_IRQHandler+0x158>)
 8000730:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000734:	6093      	str	r3, [r2, #8]
	}
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	40026000 	.word	0x40026000
 8000744:	2000038c 	.word	0x2000038c
 8000748:	2000036c 	.word	0x2000036c
 800074c:	2000029c 	.word	0x2000029c
 8000750:	2000026c 	.word	0x2000026c
 8000754:	200001dc 	.word	0x200001dc
 8000758:	2000021c 	.word	0x2000021c
 800075c:	200003e4 	.word	0x200003e4

08000760 <DMA1_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream4_IRQHandler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF4)
 8000764:	4b54      	ldr	r3, [pc, #336]	@ (80008b8 <DMA1_Stream4_IRQHandler+0x158>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	2b00      	cmp	r3, #0
 800076e:	d01a      	beq.n	80007a6 <DMA1_Stream4_IRQHandler+0x46>
	{
		TIM5_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000770:	4b52      	ldr	r3, [pc, #328]	@ (80008bc <DMA1_Stream4_IRQHandler+0x15c>)
 8000772:	2201      	movs	r2, #1
 8000774:	711a      	strb	r2, [r3, #4]
		TIM3_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000776:	4b52      	ldr	r3, [pc, #328]	@ (80008c0 <DMA1_Stream4_IRQHandler+0x160>)
 8000778:	2201      	movs	r2, #1
 800077a:	711a      	strb	r2, [r3, #4]
		USART4_TX_DMA_Flag.Fifo_Error_Flag = true;
 800077c:	4b51      	ldr	r3, [pc, #324]	@ (80008c4 <DMA1_Stream4_IRQHandler+0x164>)
 800077e:	2201      	movs	r2, #1
 8000780:	711a      	strb	r2, [r3, #4]
		I2C3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000782:	4b51      	ldr	r3, [pc, #324]	@ (80008c8 <DMA1_Stream4_IRQHandler+0x168>)
 8000784:	2201      	movs	r2, #1
 8000786:	711a      	strb	r2, [r3, #4]
		I2S2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000788:	4b50      	ldr	r3, [pc, #320]	@ (80008cc <DMA1_Stream4_IRQHandler+0x16c>)
 800078a:	2201      	movs	r2, #1
 800078c:	711a      	strb	r2, [r3, #4]
		SPI2_TX_DMA_Flag.Fifo_Error_Flag = true;
 800078e:	4b50      	ldr	r3, [pc, #320]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x170>)
 8000790:	2201      	movs	r2, #1
 8000792:	711a      	strb	r2, [r3, #4]
		DMA1_Stream4_Flag.Fifo_Error_Flag = true;
 8000794:	4b4f      	ldr	r3, [pc, #316]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x174>)
 8000796:	2201      	movs	r2, #1
 8000798:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF4;
 800079a:	4b47      	ldr	r3, [pc, #284]	@ (80008b8 <DMA1_Stream4_IRQHandler+0x158>)
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	4a46      	ldr	r2, [pc, #280]	@ (80008b8 <DMA1_Stream4_IRQHandler+0x158>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF4)
 80007a6:	4b44      	ldr	r3, [pc, #272]	@ (80008b8 <DMA1_Stream4_IRQHandler+0x158>)
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d01a      	beq.n	80007e8 <DMA1_Stream4_IRQHandler+0x88>
	{
		TIM5_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80007b2:	4b42      	ldr	r3, [pc, #264]	@ (80008bc <DMA1_Stream4_IRQHandler+0x15c>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	70da      	strb	r2, [r3, #3]
		TIM3_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 80007b8:	4b41      	ldr	r3, [pc, #260]	@ (80008c0 <DMA1_Stream4_IRQHandler+0x160>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	70da      	strb	r2, [r3, #3]
		USART4_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80007be:	4b41      	ldr	r3, [pc, #260]	@ (80008c4 <DMA1_Stream4_IRQHandler+0x164>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	70da      	strb	r2, [r3, #3]
		I2C3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80007c4:	4b40      	ldr	r3, [pc, #256]	@ (80008c8 <DMA1_Stream4_IRQHandler+0x168>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	70da      	strb	r2, [r3, #3]
		I2S2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80007ca:	4b40      	ldr	r3, [pc, #256]	@ (80008cc <DMA1_Stream4_IRQHandler+0x16c>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	70da      	strb	r2, [r3, #3]
		SPI2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80007d0:	4b3f      	ldr	r3, [pc, #252]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x170>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	70da      	strb	r2, [r3, #3]
		DMA1_Stream4_Flag.Direct_Mode_Error_Flag = true;
 80007d6:	4b3f      	ldr	r3, [pc, #252]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x174>)
 80007d8:	2201      	movs	r2, #1
 80007da:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80007dc:	4b36      	ldr	r3, [pc, #216]	@ (80008b8 <DMA1_Stream4_IRQHandler+0x158>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	4a35      	ldr	r2, [pc, #212]	@ (80008b8 <DMA1_Stream4_IRQHandler+0x158>)
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF4)
 80007e8:	4b33      	ldr	r3, [pc, #204]	@ (80008b8 <DMA1_Stream4_IRQHandler+0x158>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f003 0308 	and.w	r3, r3, #8
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d01a      	beq.n	800082a <DMA1_Stream4_IRQHandler+0xca>
	{
		TIM5_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80007f4:	4b31      	ldr	r3, [pc, #196]	@ (80008bc <DMA1_Stream4_IRQHandler+0x15c>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	709a      	strb	r2, [r3, #2]
		TIM3_CH1_DMA_Flag.Transfer_Error_Flag = true;
 80007fa:	4b31      	ldr	r3, [pc, #196]	@ (80008c0 <DMA1_Stream4_IRQHandler+0x160>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	709a      	strb	r2, [r3, #2]
		USART4_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000800:	4b30      	ldr	r3, [pc, #192]	@ (80008c4 <DMA1_Stream4_IRQHandler+0x164>)
 8000802:	2201      	movs	r2, #1
 8000804:	709a      	strb	r2, [r3, #2]
		I2C3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000806:	4b30      	ldr	r3, [pc, #192]	@ (80008c8 <DMA1_Stream4_IRQHandler+0x168>)
 8000808:	2201      	movs	r2, #1
 800080a:	709a      	strb	r2, [r3, #2]
		I2S2_TX_DMA_Flag.Transfer_Error_Flag = true;
 800080c:	4b2f      	ldr	r3, [pc, #188]	@ (80008cc <DMA1_Stream4_IRQHandler+0x16c>)
 800080e:	2201      	movs	r2, #1
 8000810:	709a      	strb	r2, [r3, #2]
		SPI2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000812:	4b2f      	ldr	r3, [pc, #188]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x170>)
 8000814:	2201      	movs	r2, #1
 8000816:	709a      	strb	r2, [r3, #2]
		DMA1_Stream4_Flag.Transfer_Error_Flag = true;
 8000818:	4b2e      	ldr	r3, [pc, #184]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x174>)
 800081a:	2201      	movs	r2, #1
 800081c:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 800081e:	4b26      	ldr	r3, [pc, #152]	@ (80008b8 <DMA1_Stream4_IRQHandler+0x158>)
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	4a25      	ldr	r2, [pc, #148]	@ (80008b8 <DMA1_Stream4_IRQHandler+0x158>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF4)
 800082a:	4b23      	ldr	r3, [pc, #140]	@ (80008b8 <DMA1_Stream4_IRQHandler+0x158>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f003 0310 	and.w	r3, r3, #16
 8000832:	2b00      	cmp	r3, #0
 8000834:	d01a      	beq.n	800086c <DMA1_Stream4_IRQHandler+0x10c>
	{
		TIM5_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000836:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <DMA1_Stream4_IRQHandler+0x15c>)
 8000838:	2201      	movs	r2, #1
 800083a:	705a      	strb	r2, [r3, #1]
		TIM3_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800083c:	4b20      	ldr	r3, [pc, #128]	@ (80008c0 <DMA1_Stream4_IRQHandler+0x160>)
 800083e:	2201      	movs	r2, #1
 8000840:	705a      	strb	r2, [r3, #1]
		USART4_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000842:	4b20      	ldr	r3, [pc, #128]	@ (80008c4 <DMA1_Stream4_IRQHandler+0x164>)
 8000844:	2201      	movs	r2, #1
 8000846:	705a      	strb	r2, [r3, #1]
		I2C3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000848:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <DMA1_Stream4_IRQHandler+0x168>)
 800084a:	2201      	movs	r2, #1
 800084c:	705a      	strb	r2, [r3, #1]
		I2S2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800084e:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <DMA1_Stream4_IRQHandler+0x16c>)
 8000850:	2201      	movs	r2, #1
 8000852:	705a      	strb	r2, [r3, #1]
		SPI2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000854:	4b1e      	ldr	r3, [pc, #120]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x170>)
 8000856:	2201      	movs	r2, #1
 8000858:	705a      	strb	r2, [r3, #1]
		DMA1_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 800085a:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x174>)
 800085c:	2201      	movs	r2, #1
 800085e:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <DMA1_Stream4_IRQHandler+0x158>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	4a14      	ldr	r2, [pc, #80]	@ (80008b8 <DMA1_Stream4_IRQHandler+0x158>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF4)
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <DMA1_Stream4_IRQHandler+0x158>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 0320 	and.w	r3, r3, #32
 8000874:	2b00      	cmp	r3, #0
 8000876:	d01a      	beq.n	80008ae <DMA1_Stream4_IRQHandler+0x14e>
	{
		TIM5_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8000878:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <DMA1_Stream4_IRQHandler+0x15c>)
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]
		TIM3_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <DMA1_Stream4_IRQHandler+0x160>)
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
		USART4_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <DMA1_Stream4_IRQHandler+0x164>)
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
		I2C3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800088a:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <DMA1_Stream4_IRQHandler+0x168>)
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
		I2S2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000890:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <DMA1_Stream4_IRQHandler+0x16c>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
		SPI2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x170>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
 800089c:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x174>)
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80008a2:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <DMA1_Stream4_IRQHandler+0x158>)
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	4a04      	ldr	r2, [pc, #16]	@ (80008b8 <DMA1_Stream4_IRQHandler+0x158>)
 80008a8:	f043 0320 	orr.w	r3, r3, #32
 80008ac:	60d3      	str	r3, [r2, #12]
	}
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	40026000 	.word	0x40026000
 80008bc:	2000037c 	.word	0x2000037c
 80008c0:	20000344 	.word	0x20000344
 80008c4:	20000274 	.word	0x20000274
 80008c8:	2000020c 	.word	0x2000020c
 80008cc:	200001e4 	.word	0x200001e4
 80008d0:	20000234 	.word	0x20000234
 80008d4:	200003ec 	.word	0x200003ec

080008d8 <DMA1_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream5_IRQHandler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF5)
 80008dc:	4b54      	ldr	r3, [pc, #336]	@ (8000a30 <DMA1_Stream5_IRQHandler+0x158>)
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d01a      	beq.n	800091e <DMA1_Stream5_IRQHandler+0x46>
	{
		SPI3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80008e8:	4b52      	ldr	r3, [pc, #328]	@ (8000a34 <DMA1_Stream5_IRQHandler+0x15c>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	711a      	strb	r2, [r3, #4]
		TIM3_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 80008ee:	4b52      	ldr	r3, [pc, #328]	@ (8000a38 <DMA1_Stream5_IRQHandler+0x160>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	711a      	strb	r2, [r3, #4]
		TIM2_CH1_DMA_Flag.Fifo_Error_Flag =  true;
 80008f4:	4b51      	ldr	r3, [pc, #324]	@ (8000a3c <DMA1_Stream5_IRQHandler+0x164>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	711a      	strb	r2, [r3, #4]
		DAC2_DMA_Flag.Fifo_Error_Flag = true;
 80008fa:	4b51      	ldr	r3, [pc, #324]	@ (8000a40 <DMA1_Stream5_IRQHandler+0x168>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	711a      	strb	r2, [r3, #4]
		TIM3_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000900:	4b50      	ldr	r3, [pc, #320]	@ (8000a44 <DMA1_Stream5_IRQHandler+0x16c>)
 8000902:	2201      	movs	r2, #1
 8000904:	711a      	strb	r2, [r3, #4]
		USART2_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000906:	4b50      	ldr	r3, [pc, #320]	@ (8000a48 <DMA1_Stream5_IRQHandler+0x170>)
 8000908:	2201      	movs	r2, #1
 800090a:	711a      	strb	r2, [r3, #4]
		DMA1_Stream5_Flag.Fifo_Error_Flag = true;
 800090c:	4b4f      	ldr	r3, [pc, #316]	@ (8000a4c <DMA1_Stream5_IRQHandler+0x174>)
 800090e:	2201      	movs	r2, #1
 8000910:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8000912:	4b47      	ldr	r3, [pc, #284]	@ (8000a30 <DMA1_Stream5_IRQHandler+0x158>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	4a46      	ldr	r2, [pc, #280]	@ (8000a30 <DMA1_Stream5_IRQHandler+0x158>)
 8000918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800091c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF5)
 800091e:	4b44      	ldr	r3, [pc, #272]	@ (8000a30 <DMA1_Stream5_IRQHandler+0x158>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000926:	2b00      	cmp	r3, #0
 8000928:	d01a      	beq.n	8000960 <DMA1_Stream5_IRQHandler+0x88>
	{
		SPI3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800092a:	4b42      	ldr	r3, [pc, #264]	@ (8000a34 <DMA1_Stream5_IRQHandler+0x15c>)
 800092c:	2201      	movs	r2, #1
 800092e:	70da      	strb	r2, [r3, #3]
		TIM3_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000930:	4b41      	ldr	r3, [pc, #260]	@ (8000a38 <DMA1_Stream5_IRQHandler+0x160>)
 8000932:	2201      	movs	r2, #1
 8000934:	70da      	strb	r2, [r3, #3]
		TIM2_CH1_DMA_Flag.Direct_Mode_Error_Flag =  true;
 8000936:	4b41      	ldr	r3, [pc, #260]	@ (8000a3c <DMA1_Stream5_IRQHandler+0x164>)
 8000938:	2201      	movs	r2, #1
 800093a:	70da      	strb	r2, [r3, #3]
		DAC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800093c:	4b40      	ldr	r3, [pc, #256]	@ (8000a40 <DMA1_Stream5_IRQHandler+0x168>)
 800093e:	2201      	movs	r2, #1
 8000940:	70da      	strb	r2, [r3, #3]
		TIM3_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000942:	4b40      	ldr	r3, [pc, #256]	@ (8000a44 <DMA1_Stream5_IRQHandler+0x16c>)
 8000944:	2201      	movs	r2, #1
 8000946:	70da      	strb	r2, [r3, #3]
		USART2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000948:	4b3f      	ldr	r3, [pc, #252]	@ (8000a48 <DMA1_Stream5_IRQHandler+0x170>)
 800094a:	2201      	movs	r2, #1
 800094c:	70da      	strb	r2, [r3, #3]
		DMA1_Stream5_Flag.Direct_Mode_Error_Flag = true;
 800094e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a4c <DMA1_Stream5_IRQHandler+0x174>)
 8000950:	2201      	movs	r2, #1
 8000952:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8000954:	4b36      	ldr	r3, [pc, #216]	@ (8000a30 <DMA1_Stream5_IRQHandler+0x158>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	4a35      	ldr	r2, [pc, #212]	@ (8000a30 <DMA1_Stream5_IRQHandler+0x158>)
 800095a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800095e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF5)
 8000960:	4b33      	ldr	r3, [pc, #204]	@ (8000a30 <DMA1_Stream5_IRQHandler+0x158>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000968:	2b00      	cmp	r3, #0
 800096a:	d01a      	beq.n	80009a2 <DMA1_Stream5_IRQHandler+0xca>
	{
		SPI3_TX_DMA_Flag.Transfer_Error_Flag = true;
 800096c:	4b31      	ldr	r3, [pc, #196]	@ (8000a34 <DMA1_Stream5_IRQHandler+0x15c>)
 800096e:	2201      	movs	r2, #1
 8000970:	709a      	strb	r2, [r3, #2]
		TIM3_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000972:	4b31      	ldr	r3, [pc, #196]	@ (8000a38 <DMA1_Stream5_IRQHandler+0x160>)
 8000974:	2201      	movs	r2, #1
 8000976:	709a      	strb	r2, [r3, #2]
		TIM2_CH1_DMA_Flag.Transfer_Error_Flag =  true;
 8000978:	4b30      	ldr	r3, [pc, #192]	@ (8000a3c <DMA1_Stream5_IRQHandler+0x164>)
 800097a:	2201      	movs	r2, #1
 800097c:	709a      	strb	r2, [r3, #2]
		DAC2_DMA_Flag.Transfer_Error_Flag = true;
 800097e:	4b30      	ldr	r3, [pc, #192]	@ (8000a40 <DMA1_Stream5_IRQHandler+0x168>)
 8000980:	2201      	movs	r2, #1
 8000982:	709a      	strb	r2, [r3, #2]
		TIM3_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8000984:	4b2f      	ldr	r3, [pc, #188]	@ (8000a44 <DMA1_Stream5_IRQHandler+0x16c>)
 8000986:	2201      	movs	r2, #1
 8000988:	709a      	strb	r2, [r3, #2]
		USART2_RX_DMA_Flag.Transfer_Error_Flag = true;
 800098a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a48 <DMA1_Stream5_IRQHandler+0x170>)
 800098c:	2201      	movs	r2, #1
 800098e:	709a      	strb	r2, [r3, #2]
		DMA1_Stream5_Flag.Transfer_Error_Flag = true;
 8000990:	4b2e      	ldr	r3, [pc, #184]	@ (8000a4c <DMA1_Stream5_IRQHandler+0x174>)
 8000992:	2201      	movs	r2, #1
 8000994:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <DMA1_Stream5_IRQHandler+0x158>)
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	4a25      	ldr	r2, [pc, #148]	@ (8000a30 <DMA1_Stream5_IRQHandler+0x158>)
 800099c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009a0:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF5)
 80009a2:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <DMA1_Stream5_IRQHandler+0x158>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d01a      	beq.n	80009e4 <DMA1_Stream5_IRQHandler+0x10c>
	{
		SPI3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80009ae:	4b21      	ldr	r3, [pc, #132]	@ (8000a34 <DMA1_Stream5_IRQHandler+0x15c>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	705a      	strb	r2, [r3, #1]
		TIM3_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80009b4:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <DMA1_Stream5_IRQHandler+0x160>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	705a      	strb	r2, [r3, #1]
		TIM2_CH1_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 80009ba:	4b20      	ldr	r3, [pc, #128]	@ (8000a3c <DMA1_Stream5_IRQHandler+0x164>)
 80009bc:	2201      	movs	r2, #1
 80009be:	705a      	strb	r2, [r3, #1]
		DAC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <DMA1_Stream5_IRQHandler+0x168>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	705a      	strb	r2, [r3, #1]
		TIM3_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80009c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a44 <DMA1_Stream5_IRQHandler+0x16c>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	705a      	strb	r2, [r3, #1]
		USART2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a48 <DMA1_Stream5_IRQHandler+0x170>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	705a      	strb	r2, [r3, #1]
		DMA1_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a4c <DMA1_Stream5_IRQHandler+0x174>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80009d8:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <DMA1_Stream5_IRQHandler+0x158>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	4a14      	ldr	r2, [pc, #80]	@ (8000a30 <DMA1_Stream5_IRQHandler+0x158>)
 80009de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009e2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF5)
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <DMA1_Stream5_IRQHandler+0x158>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d01a      	beq.n	8000a26 <DMA1_Stream5_IRQHandler+0x14e>
	{
		SPI3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80009f0:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <DMA1_Stream5_IRQHandler+0x15c>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]
		TIM3_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <DMA1_Stream5_IRQHandler+0x160>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
		TIM2_CH1_DMA_Flag.Transfer_Complete_Flag =  true;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <DMA1_Stream5_IRQHandler+0x164>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
		DAC2_DMA_Flag.Transfer_Complete_Flag = true;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <DMA1_Stream5_IRQHandler+0x168>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
		TIM3_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8000a08:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <DMA1_Stream5_IRQHandler+0x16c>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
		USART2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <DMA1_Stream5_IRQHandler+0x170>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <DMA1_Stream5_IRQHandler+0x174>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8000a1a:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <DMA1_Stream5_IRQHandler+0x158>)
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	4a04      	ldr	r2, [pc, #16]	@ (8000a30 <DMA1_Stream5_IRQHandler+0x158>)
 8000a20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a24:	60d3      	str	r3, [r2, #12]
	}
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40026000 	.word	0x40026000
 8000a34:	2000023c 	.word	0x2000023c
 8000a38:	2000035c 	.word	0x2000035c
 8000a3c:	20000324 	.word	0x20000324
 8000a40:	2000039c 	.word	0x2000039c
 8000a44:	2000034c 	.word	0x2000034c
 8000a48:	20000254 	.word	0x20000254
 8000a4c:	200003f4 	.word	0x200003f4

08000a50 <DMA1_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream6_IRQHandler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF6)
 8000a54:	4b47      	ldr	r3, [pc, #284]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x124>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d017      	beq.n	8000a90 <DMA1_Stream6_IRQHandler+0x40>
	{
		TIM3_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000a60:	4b45      	ldr	r3, [pc, #276]	@ (8000b78 <DMA1_Stream6_IRQHandler+0x128>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	711a      	strb	r2, [r3, #4]
		TIM2_UP_DMA_Flag.Fifo_Error_Flag = true;
 8000a66:	4b45      	ldr	r3, [pc, #276]	@ (8000b7c <DMA1_Stream6_IRQHandler+0x12c>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000a6c:	4b44      	ldr	r3, [pc, #272]	@ (8000b80 <DMA1_Stream6_IRQHandler+0x130>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	711a      	strb	r2, [r3, #4]
		USART2_TX_DMA_Flag.Fifo_Error_Flag =  true;
 8000a72:	4b44      	ldr	r3, [pc, #272]	@ (8000b84 <DMA1_Stream6_IRQHandler+0x134>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	711a      	strb	r2, [r3, #4]
		I2C1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000a78:	4b43      	ldr	r3, [pc, #268]	@ (8000b88 <DMA1_Stream6_IRQHandler+0x138>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	711a      	strb	r2, [r3, #4]
		DMA1_Stream6_Flag.Fifo_Error_Flag = true;
 8000a7e:	4b43      	ldr	r3, [pc, #268]	@ (8000b8c <DMA1_Stream6_IRQHandler+0x13c>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8000a84:	4b3b      	ldr	r3, [pc, #236]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x124>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	4a3a      	ldr	r2, [pc, #232]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x124>)
 8000a8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a8e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF6)
 8000a90:	4b38      	ldr	r3, [pc, #224]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x124>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d014      	beq.n	8000ac6 <DMA1_Stream6_IRQHandler+0x76>
	{
		TIM2_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000a9c:	4b37      	ldr	r3, [pc, #220]	@ (8000b7c <DMA1_Stream6_IRQHandler+0x12c>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000aa2:	4b37      	ldr	r3, [pc, #220]	@ (8000b80 <DMA1_Stream6_IRQHandler+0x130>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	70da      	strb	r2, [r3, #3]
		USART2_TX_DMA_Flag.Direct_Mode_Error_Flag =  true;
 8000aa8:	4b36      	ldr	r3, [pc, #216]	@ (8000b84 <DMA1_Stream6_IRQHandler+0x134>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	70da      	strb	r2, [r3, #3]
		I2C1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000aae:	4b36      	ldr	r3, [pc, #216]	@ (8000b88 <DMA1_Stream6_IRQHandler+0x138>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	70da      	strb	r2, [r3, #3]
		DMA1_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8000ab4:	4b35      	ldr	r3, [pc, #212]	@ (8000b8c <DMA1_Stream6_IRQHandler+0x13c>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8000aba:	4b2e      	ldr	r3, [pc, #184]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x124>)
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	4a2d      	ldr	r2, [pc, #180]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x124>)
 8000ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ac4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF6)
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x124>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d014      	beq.n	8000afc <DMA1_Stream6_IRQHandler+0xac>
	{
		TIM2_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b7c <DMA1_Stream6_IRQHandler+0x12c>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000ad8:	4b29      	ldr	r3, [pc, #164]	@ (8000b80 <DMA1_Stream6_IRQHandler+0x130>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	709a      	strb	r2, [r3, #2]
		USART2_TX_DMA_Flag.Transfer_Error_Flag =  true;
 8000ade:	4b29      	ldr	r3, [pc, #164]	@ (8000b84 <DMA1_Stream6_IRQHandler+0x134>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	709a      	strb	r2, [r3, #2]
		I2C1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000ae4:	4b28      	ldr	r3, [pc, #160]	@ (8000b88 <DMA1_Stream6_IRQHandler+0x138>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	709a      	strb	r2, [r3, #2]
		DMA1_Stream6_Flag.Transfer_Error_Flag = true;
 8000aea:	4b28      	ldr	r3, [pc, #160]	@ (8000b8c <DMA1_Stream6_IRQHandler+0x13c>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8000af0:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x124>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x124>)
 8000af6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000afa:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF6)
 8000afc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x124>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d014      	beq.n	8000b32 <DMA1_Stream6_IRQHandler+0xe2>
	{
		TIM2_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <DMA1_Stream6_IRQHandler+0x12c>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <DMA1_Stream6_IRQHandler+0x130>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	705a      	strb	r2, [r3, #1]
		USART2_TX_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	@ (8000b84 <DMA1_Stream6_IRQHandler+0x134>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	705a      	strb	r2, [r3, #1]
		I2C1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <DMA1_Stream6_IRQHandler+0x138>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	705a      	strb	r2, [r3, #1]
		DMA1_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <DMA1_Stream6_IRQHandler+0x13c>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8000b26:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x124>)
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x124>)
 8000b2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000b30:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF6)
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x124>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d014      	beq.n	8000b68 <DMA1_Stream6_IRQHandler+0x118>
	{
		TIM2_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <DMA1_Stream6_IRQHandler+0x12c>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <DMA1_Stream6_IRQHandler+0x130>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
		USART2_TX_DMA_Flag.Transfer_Complete_Flag =  true;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <DMA1_Stream6_IRQHandler+0x134>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
		I2C1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000b50:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <DMA1_Stream6_IRQHandler+0x138>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
 8000b56:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <DMA1_Stream6_IRQHandler+0x13c>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x124>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x124>)
 8000b62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b66:	60d3      	str	r3, [r2, #12]
	}
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40026000 	.word	0x40026000
 8000b78:	20000354 	.word	0x20000354
 8000b7c:	2000031c 	.word	0x2000031c
 8000b80:	200002a4 	.word	0x200002a4
 8000b84:	2000025c 	.word	0x2000025c
 8000b88:	200001fc 	.word	0x200001fc
 8000b8c:	200003fc 	.word	0x200003fc

08000b90 <DMA1_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream7_IRQHandler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF7)
 8000b94:	4b54      	ldr	r3, [pc, #336]	@ (8000ce8 <DMA1_Stream7_IRQHandler+0x158>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d01a      	beq.n	8000bd6 <DMA1_Stream7_IRQHandler+0x46>
	{
		I2S3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000ba0:	4b52      	ldr	r3, [pc, #328]	@ (8000cec <DMA1_Stream7_IRQHandler+0x15c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	711a      	strb	r2, [r3, #4]
		I2C2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000ba6:	4b52      	ldr	r3, [pc, #328]	@ (8000cf0 <DMA1_Stream7_IRQHandler+0x160>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	711a      	strb	r2, [r3, #4]
		USART5_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000bac:	4b51      	ldr	r3, [pc, #324]	@ (8000cf4 <DMA1_Stream7_IRQHandler+0x164>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	711a      	strb	r2, [r3, #4]
		TIM4_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000bb2:	4b51      	ldr	r3, [pc, #324]	@ (8000cf8 <DMA1_Stream7_IRQHandler+0x168>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	711a      	strb	r2, [r3, #4]
		TIM2_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000bb8:	4b50      	ldr	r3, [pc, #320]	@ (8000cfc <DMA1_Stream7_IRQHandler+0x16c>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	711a      	strb	r2, [r3, #4]
		TIM2_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8000bbe:	4b50      	ldr	r3, [pc, #320]	@ (8000d00 <DMA1_Stream7_IRQHandler+0x170>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	711a      	strb	r2, [r3, #4]

		DMA1_Stream7_Flag.Fifo_Error_Flag = true;
 8000bc4:	4b4f      	ldr	r3, [pc, #316]	@ (8000d04 <DMA1_Stream7_IRQHandler+0x174>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8000bca:	4b47      	ldr	r3, [pc, #284]	@ (8000ce8 <DMA1_Stream7_IRQHandler+0x158>)
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	4a46      	ldr	r2, [pc, #280]	@ (8000ce8 <DMA1_Stream7_IRQHandler+0x158>)
 8000bd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bd4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF7)
 8000bd6:	4b44      	ldr	r3, [pc, #272]	@ (8000ce8 <DMA1_Stream7_IRQHandler+0x158>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d01a      	beq.n	8000c18 <DMA1_Stream7_IRQHandler+0x88>
	{
		I2S3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000be2:	4b42      	ldr	r3, [pc, #264]	@ (8000cec <DMA1_Stream7_IRQHandler+0x15c>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	70da      	strb	r2, [r3, #3]
		I2C2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000be8:	4b41      	ldr	r3, [pc, #260]	@ (8000cf0 <DMA1_Stream7_IRQHandler+0x160>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	70da      	strb	r2, [r3, #3]
		USART5_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000bee:	4b41      	ldr	r3, [pc, #260]	@ (8000cf4 <DMA1_Stream7_IRQHandler+0x164>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	70da      	strb	r2, [r3, #3]
		TIM4_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000bf4:	4b40      	ldr	r3, [pc, #256]	@ (8000cf8 <DMA1_Stream7_IRQHandler+0x168>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	70da      	strb	r2, [r3, #3]
		TIM2_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000bfa:	4b40      	ldr	r3, [pc, #256]	@ (8000cfc <DMA1_Stream7_IRQHandler+0x16c>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	70da      	strb	r2, [r3, #3]
		TIM2_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000c00:	4b3f      	ldr	r3, [pc, #252]	@ (8000d00 <DMA1_Stream7_IRQHandler+0x170>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	70da      	strb	r2, [r3, #3]
		DMA1_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8000c06:	4b3f      	ldr	r3, [pc, #252]	@ (8000d04 <DMA1_Stream7_IRQHandler+0x174>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8000c0c:	4b36      	ldr	r3, [pc, #216]	@ (8000ce8 <DMA1_Stream7_IRQHandler+0x158>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	4a35      	ldr	r2, [pc, #212]	@ (8000ce8 <DMA1_Stream7_IRQHandler+0x158>)
 8000c12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c16:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF7)
 8000c18:	4b33      	ldr	r3, [pc, #204]	@ (8000ce8 <DMA1_Stream7_IRQHandler+0x158>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d01a      	beq.n	8000c5a <DMA1_Stream7_IRQHandler+0xca>
	{
		I2S3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000c24:	4b31      	ldr	r3, [pc, #196]	@ (8000cec <DMA1_Stream7_IRQHandler+0x15c>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	709a      	strb	r2, [r3, #2]
		I2C2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000c2a:	4b31      	ldr	r3, [pc, #196]	@ (8000cf0 <DMA1_Stream7_IRQHandler+0x160>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	709a      	strb	r2, [r3, #2]
		USART5_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000c30:	4b30      	ldr	r3, [pc, #192]	@ (8000cf4 <DMA1_Stream7_IRQHandler+0x164>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	709a      	strb	r2, [r3, #2]
		TIM4_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8000c36:	4b30      	ldr	r3, [pc, #192]	@ (8000cf8 <DMA1_Stream7_IRQHandler+0x168>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	709a      	strb	r2, [r3, #2]
		TIM2_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8000c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000cfc <DMA1_Stream7_IRQHandler+0x16c>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	709a      	strb	r2, [r3, #2]
		TIM2_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8000c42:	4b2f      	ldr	r3, [pc, #188]	@ (8000d00 <DMA1_Stream7_IRQHandler+0x170>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	709a      	strb	r2, [r3, #2]
		DMA1_Stream7_Flag.Transfer_Error_Flag = true;
 8000c48:	4b2e      	ldr	r3, [pc, #184]	@ (8000d04 <DMA1_Stream7_IRQHandler+0x174>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8000c4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ce8 <DMA1_Stream7_IRQHandler+0x158>)
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	4a25      	ldr	r2, [pc, #148]	@ (8000ce8 <DMA1_Stream7_IRQHandler+0x158>)
 8000c54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c58:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF7)
 8000c5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ce8 <DMA1_Stream7_IRQHandler+0x158>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d01a      	beq.n	8000c9c <DMA1_Stream7_IRQHandler+0x10c>
	{
		I2S3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c66:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <DMA1_Stream7_IRQHandler+0x15c>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	705a      	strb	r2, [r3, #1]
		I2C2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c6c:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <DMA1_Stream7_IRQHandler+0x160>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	705a      	strb	r2, [r3, #1]
		USART5_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c72:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <DMA1_Stream7_IRQHandler+0x164>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	705a      	strb	r2, [r3, #1]
		TIM4_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c78:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <DMA1_Stream7_IRQHandler+0x168>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	705a      	strb	r2, [r3, #1]
		TIM2_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cfc <DMA1_Stream7_IRQHandler+0x16c>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	705a      	strb	r2, [r3, #1]
		TIM2_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	@ (8000d00 <DMA1_Stream7_IRQHandler+0x170>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	705a      	strb	r2, [r3, #1]
		DMA1_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <DMA1_Stream7_IRQHandler+0x174>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <DMA1_Stream7_IRQHandler+0x158>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	4a14      	ldr	r2, [pc, #80]	@ (8000ce8 <DMA1_Stream7_IRQHandler+0x158>)
 8000c96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c9a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF7)
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <DMA1_Stream7_IRQHandler+0x158>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d01a      	beq.n	8000cde <DMA1_Stream7_IRQHandler+0x14e>
	{
		I2S3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <DMA1_Stream7_IRQHandler+0x15c>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
		I2C2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <DMA1_Stream7_IRQHandler+0x160>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
		USART5_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <DMA1_Stream7_IRQHandler+0x164>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
		TIM4_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000cba:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <DMA1_Stream7_IRQHandler+0x168>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
		TIM2_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <DMA1_Stream7_IRQHandler+0x16c>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
		TIM2_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <DMA1_Stream7_IRQHandler+0x170>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <DMA1_Stream7_IRQHandler+0x174>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8000cd2:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <DMA1_Stream7_IRQHandler+0x158>)
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <DMA1_Stream7_IRQHandler+0x158>)
 8000cd8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000cdc:	60d3      	str	r3, [r2, #12]
	}
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	40026000 	.word	0x40026000
 8000cec:	200001ec 	.word	0x200001ec
 8000cf0:	20000204 	.word	0x20000204
 8000cf4:	20000284 	.word	0x20000284
 8000cf8:	20000374 	.word	0x20000374
 8000cfc:	2000032c 	.word	0x2000032c
 8000d00:	2000033c 	.word	0x2000033c
 8000d04:	20000404 	.word	0x20000404

08000d08 <DMA2_Stream0_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream0_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream0_IRQHandler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF0)
 8000d0c:	4b45      	ldr	r3, [pc, #276]	@ (8000e24 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d014      	beq.n	8000d42 <DMA2_Stream0_IRQHandler+0x3a>
	{
		SPI1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000d18:	4b43      	ldr	r3, [pc, #268]	@ (8000e28 <DMA2_Stream0_IRQHandler+0x120>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	711a      	strb	r2, [r3, #4]
		ADC1_DMA_Flag.Fifo_Error_Flag = true;
 8000d1e:	4b43      	ldr	r3, [pc, #268]	@ (8000e2c <DMA2_Stream0_IRQHandler+0x124>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	711a      	strb	r2, [r3, #4]
		TIM1_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000d24:	4b42      	ldr	r3, [pc, #264]	@ (8000e30 <DMA2_Stream0_IRQHandler+0x128>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	711a      	strb	r2, [r3, #4]
		TIM1_COM_DMA_Flag.Fifo_Error_Flag = true;
 8000d2a:	4b42      	ldr	r3, [pc, #264]	@ (8000e34 <DMA2_Stream0_IRQHandler+0x12c>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	711a      	strb	r2, [r3, #4]
		DMA2_Stream0_Flag.Fifo_Error_Flag = true;
 8000d30:	4b41      	ldr	r3, [pc, #260]	@ (8000e38 <DMA2_Stream0_IRQHandler+0x130>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000d36:	4b3b      	ldr	r3, [pc, #236]	@ (8000e24 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	4a3a      	ldr	r2, [pc, #232]	@ (8000e24 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF0)
 8000d42:	4b38      	ldr	r3, [pc, #224]	@ (8000e24 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d014      	beq.n	8000d78 <DMA2_Stream0_IRQHandler+0x70>
	{
		SPI1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d4e:	4b36      	ldr	r3, [pc, #216]	@ (8000e28 <DMA2_Stream0_IRQHandler+0x120>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	70da      	strb	r2, [r3, #3]
		ADC1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d54:	4b35      	ldr	r3, [pc, #212]	@ (8000e2c <DMA2_Stream0_IRQHandler+0x124>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	70da      	strb	r2, [r3, #3]
		TIM1_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d5a:	4b35      	ldr	r3, [pc, #212]	@ (8000e30 <DMA2_Stream0_IRQHandler+0x128>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	70da      	strb	r2, [r3, #3]
		TIM1_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d60:	4b34      	ldr	r3, [pc, #208]	@ (8000e34 <DMA2_Stream0_IRQHandler+0x12c>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	70da      	strb	r2, [r3, #3]
		DMA2_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8000d66:	4b34      	ldr	r3, [pc, #208]	@ (8000e38 <DMA2_Stream0_IRQHandler+0x130>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e24 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	4a2c      	ldr	r2, [pc, #176]	@ (8000e24 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF0)
 8000d78:	4b2a      	ldr	r3, [pc, #168]	@ (8000e24 <DMA2_Stream0_IRQHandler+0x11c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d014      	beq.n	8000dae <DMA2_Stream0_IRQHandler+0xa6>
	{
		SPI1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000d84:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <DMA2_Stream0_IRQHandler+0x120>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	709a      	strb	r2, [r3, #2]
		ADC1_DMA_Flag.Transfer_Error_Flag = true;
 8000d8a:	4b28      	ldr	r3, [pc, #160]	@ (8000e2c <DMA2_Stream0_IRQHandler+0x124>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	709a      	strb	r2, [r3, #2]
		TIM1_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000d90:	4b27      	ldr	r3, [pc, #156]	@ (8000e30 <DMA2_Stream0_IRQHandler+0x128>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	709a      	strb	r2, [r3, #2]
		TIM1_COM_DMA_Flag.Transfer_Error_Flag = true;
 8000d96:	4b27      	ldr	r3, [pc, #156]	@ (8000e34 <DMA2_Stream0_IRQHandler+0x12c>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	709a      	strb	r2, [r3, #2]
		DMA2_Stream0_Flag.Transfer_Error_Flag = true;
 8000d9c:	4b26      	ldr	r3, [pc, #152]	@ (8000e38 <DMA2_Stream0_IRQHandler+0x130>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000da2:	4b20      	ldr	r3, [pc, #128]	@ (8000e24 <DMA2_Stream0_IRQHandler+0x11c>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	4a1f      	ldr	r2, [pc, #124]	@ (8000e24 <DMA2_Stream0_IRQHandler+0x11c>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF0)
 8000dae:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <DMA2_Stream0_IRQHandler+0x11c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0310 	and.w	r3, r3, #16
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d014      	beq.n	8000de4 <DMA2_Stream0_IRQHandler+0xdc>
	{
		SPI1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000dba:	4b1b      	ldr	r3, [pc, #108]	@ (8000e28 <DMA2_Stream0_IRQHandler+0x120>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	705a      	strb	r2, [r3, #1]
		ADC1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <DMA2_Stream0_IRQHandler+0x124>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	705a      	strb	r2, [r3, #1]
		TIM1_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <DMA2_Stream0_IRQHandler+0x128>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	705a      	strb	r2, [r3, #1]
		TIM1_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000dcc:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <DMA2_Stream0_IRQHandler+0x12c>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	705a      	strb	r2, [r3, #1]
		DMA2_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8000dd2:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <DMA2_Stream0_IRQHandler+0x130>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <DMA2_Stream0_IRQHandler+0x11c>)
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	4a11      	ldr	r2, [pc, #68]	@ (8000e24 <DMA2_Stream0_IRQHandler+0x11c>)
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF0)
 8000de4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <DMA2_Stream0_IRQHandler+0x11c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0320 	and.w	r3, r3, #32
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d014      	beq.n	8000e1a <DMA2_Stream0_IRQHandler+0x112>
	{
		SPI1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000df0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <DMA2_Stream0_IRQHandler+0x120>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
		ADC1_DMA_Flag.Transfer_Complete_Flag = true;
 8000df6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <DMA2_Stream0_IRQHandler+0x124>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
		TIM1_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <DMA2_Stream0_IRQHandler+0x128>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
		TIM1_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <DMA2_Stream0_IRQHandler+0x12c>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <DMA2_Stream0_IRQHandler+0x130>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000e0e:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <DMA2_Stream0_IRQHandler+0x11c>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <DMA2_Stream0_IRQHandler+0x11c>)
 8000e14:	f043 0320 	orr.w	r3, r3, #32
 8000e18:	6093      	str	r3, [r2, #8]
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40026400 	.word	0x40026400
 8000e28:	20000214 	.word	0x20000214
 8000e2c:	200003b4 	.word	0x200003b4
 8000e30:	200002d4 	.word	0x200002d4
 8000e34:	200002dc 	.word	0x200002dc
 8000e38:	2000040c 	.word	0x2000040c

08000e3c <DMA2_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream1_IRQHandler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF1)
 8000e40:	4b5c      	ldr	r3, [pc, #368]	@ (8000fb4 <DMA2_Stream1_IRQHandler+0x178>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d01d      	beq.n	8000e88 <DMA2_Stream1_IRQHandler+0x4c>
	{
		ADC3_DMA_Flag.Fifo_Error_Flag = true;
 8000e4c:	4b5a      	ldr	r3, [pc, #360]	@ (8000fb8 <DMA2_Stream1_IRQHandler+0x17c>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	711a      	strb	r2, [r3, #4]
		TIM1_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000e52:	4b5a      	ldr	r3, [pc, #360]	@ (8000fbc <DMA2_Stream1_IRQHandler+0x180>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	711a      	strb	r2, [r3, #4]
		TIM8_UP_DMA_Flag.Fifo_Error_Flag = true;
 8000e58:	4b59      	ldr	r3, [pc, #356]	@ (8000fc0 <DMA2_Stream1_IRQHandler+0x184>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	711a      	strb	r2, [r3, #4]
		TIM8_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000e5e:	4b59      	ldr	r3, [pc, #356]	@ (8000fc4 <DMA2_Stream1_IRQHandler+0x188>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	711a      	strb	r2, [r3, #4]
		TIM8_COM_DMA_Flag.Fifo_Error_Flag = true;
 8000e64:	4b58      	ldr	r3, [pc, #352]	@ (8000fc8 <DMA2_Stream1_IRQHandler+0x18c>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	711a      	strb	r2, [r3, #4]
		DCMI_DMA_Flag.Fifo_Error_Flag = true;
 8000e6a:	4b58      	ldr	r3, [pc, #352]	@ (8000fcc <DMA2_Stream1_IRQHandler+0x190>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	711a      	strb	r2, [r3, #4]
		USART6_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000e70:	4b57      	ldr	r3, [pc, #348]	@ (8000fd0 <DMA2_Stream1_IRQHandler+0x194>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	711a      	strb	r2, [r3, #4]
		DMA2_Stream1_Flag.Fifo_Error_Flag = true;
 8000e76:	4b57      	ldr	r3, [pc, #348]	@ (8000fd4 <DMA2_Stream1_IRQHandler+0x198>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000e7c:	4b4d      	ldr	r3, [pc, #308]	@ (8000fb4 <DMA2_Stream1_IRQHandler+0x178>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	4a4c      	ldr	r2, [pc, #304]	@ (8000fb4 <DMA2_Stream1_IRQHandler+0x178>)
 8000e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e86:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF1)
 8000e88:	4b4a      	ldr	r3, [pc, #296]	@ (8000fb4 <DMA2_Stream1_IRQHandler+0x178>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d01d      	beq.n	8000ed0 <DMA2_Stream1_IRQHandler+0x94>
	{
		ADC3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e94:	4b48      	ldr	r3, [pc, #288]	@ (8000fb8 <DMA2_Stream1_IRQHandler+0x17c>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	70da      	strb	r2, [r3, #3]
		TIM1_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e9a:	4b48      	ldr	r3, [pc, #288]	@ (8000fbc <DMA2_Stream1_IRQHandler+0x180>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	70da      	strb	r2, [r3, #3]
		TIM8_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000ea0:	4b47      	ldr	r3, [pc, #284]	@ (8000fc0 <DMA2_Stream1_IRQHandler+0x184>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	70da      	strb	r2, [r3, #3]
		TIM8_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000ea6:	4b47      	ldr	r3, [pc, #284]	@ (8000fc4 <DMA2_Stream1_IRQHandler+0x188>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	70da      	strb	r2, [r3, #3]
		TIM8_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000eac:	4b46      	ldr	r3, [pc, #280]	@ (8000fc8 <DMA2_Stream1_IRQHandler+0x18c>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	70da      	strb	r2, [r3, #3]
		DCMI_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000eb2:	4b46      	ldr	r3, [pc, #280]	@ (8000fcc <DMA2_Stream1_IRQHandler+0x190>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	70da      	strb	r2, [r3, #3]
		USART6_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000eb8:	4b45      	ldr	r3, [pc, #276]	@ (8000fd0 <DMA2_Stream1_IRQHandler+0x194>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	70da      	strb	r2, [r3, #3]
		DMA2_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8000ebe:	4b45      	ldr	r3, [pc, #276]	@ (8000fd4 <DMA2_Stream1_IRQHandler+0x198>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb4 <DMA2_Stream1_IRQHandler+0x178>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	4a3a      	ldr	r2, [pc, #232]	@ (8000fb4 <DMA2_Stream1_IRQHandler+0x178>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ece:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF1)
 8000ed0:	4b38      	ldr	r3, [pc, #224]	@ (8000fb4 <DMA2_Stream1_IRQHandler+0x178>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d01d      	beq.n	8000f18 <DMA2_Stream1_IRQHandler+0xdc>
	{
		ADC3_DMA_Flag.Transfer_Error_Flag = true;
 8000edc:	4b36      	ldr	r3, [pc, #216]	@ (8000fb8 <DMA2_Stream1_IRQHandler+0x17c>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	709a      	strb	r2, [r3, #2]
		TIM1_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000ee2:	4b36      	ldr	r3, [pc, #216]	@ (8000fbc <DMA2_Stream1_IRQHandler+0x180>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	709a      	strb	r2, [r3, #2]
		TIM8_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000ee8:	4b35      	ldr	r3, [pc, #212]	@ (8000fc0 <DMA2_Stream1_IRQHandler+0x184>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	709a      	strb	r2, [r3, #2]
		TIM8_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000eee:	4b35      	ldr	r3, [pc, #212]	@ (8000fc4 <DMA2_Stream1_IRQHandler+0x188>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	709a      	strb	r2, [r3, #2]
		TIM8_COM_DMA_Flag.Transfer_Error_Flag = true;
 8000ef4:	4b34      	ldr	r3, [pc, #208]	@ (8000fc8 <DMA2_Stream1_IRQHandler+0x18c>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	709a      	strb	r2, [r3, #2]
		DCMI_DMA_Flag.Transfer_Error_Flag = true;
 8000efa:	4b34      	ldr	r3, [pc, #208]	@ (8000fcc <DMA2_Stream1_IRQHandler+0x190>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	709a      	strb	r2, [r3, #2]
		USART6_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000f00:	4b33      	ldr	r3, [pc, #204]	@ (8000fd0 <DMA2_Stream1_IRQHandler+0x194>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	709a      	strb	r2, [r3, #2]
		DMA2_Stream1_Flag.Transfer_Error_Flag = true;
 8000f06:	4b33      	ldr	r3, [pc, #204]	@ (8000fd4 <DMA2_Stream1_IRQHandler+0x198>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000f0c:	4b29      	ldr	r3, [pc, #164]	@ (8000fb4 <DMA2_Stream1_IRQHandler+0x178>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	4a28      	ldr	r2, [pc, #160]	@ (8000fb4 <DMA2_Stream1_IRQHandler+0x178>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f16:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF1)
 8000f18:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <DMA2_Stream1_IRQHandler+0x178>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d01d      	beq.n	8000f60 <DMA2_Stream1_IRQHandler+0x124>
	{
		ADC3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f24:	4b24      	ldr	r3, [pc, #144]	@ (8000fb8 <DMA2_Stream1_IRQHandler+0x17c>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	705a      	strb	r2, [r3, #1]
		TIM1_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f2a:	4b24      	ldr	r3, [pc, #144]	@ (8000fbc <DMA2_Stream1_IRQHandler+0x180>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	705a      	strb	r2, [r3, #1]
		TIM8_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f30:	4b23      	ldr	r3, [pc, #140]	@ (8000fc0 <DMA2_Stream1_IRQHandler+0x184>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	705a      	strb	r2, [r3, #1]
		TIM8_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f36:	4b23      	ldr	r3, [pc, #140]	@ (8000fc4 <DMA2_Stream1_IRQHandler+0x188>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	705a      	strb	r2, [r3, #1]
		TIM8_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	@ (8000fc8 <DMA2_Stream1_IRQHandler+0x18c>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	705a      	strb	r2, [r3, #1]
		DCMI_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f42:	4b22      	ldr	r3, [pc, #136]	@ (8000fcc <DMA2_Stream1_IRQHandler+0x190>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	705a      	strb	r2, [r3, #1]
		USART6_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f48:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <DMA2_Stream1_IRQHandler+0x194>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	705a      	strb	r2, [r3, #1]
		DMA2_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <DMA2_Stream1_IRQHandler+0x198>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000f54:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <DMA2_Stream1_IRQHandler+0x178>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	4a16      	ldr	r2, [pc, #88]	@ (8000fb4 <DMA2_Stream1_IRQHandler+0x178>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f5e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF1)
 8000f60:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <DMA2_Stream1_IRQHandler+0x178>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d01d      	beq.n	8000fa8 <DMA2_Stream1_IRQHandler+0x16c>
	{
		ADC3_DMA_Flag.Transfer_Complete_Flag = true;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <DMA2_Stream1_IRQHandler+0x17c>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
		TIM1_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <DMA2_Stream1_IRQHandler+0x180>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
		TIM8_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <DMA2_Stream1_IRQHandler+0x184>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
		TIM8_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <DMA2_Stream1_IRQHandler+0x188>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
		TIM8_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8000f84:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <DMA2_Stream1_IRQHandler+0x18c>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
		DCMI_DMA_Flag.Transfer_Complete_Flag = true;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <DMA2_Stream1_IRQHandler+0x190>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
		USART6_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <DMA2_Stream1_IRQHandler+0x194>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <DMA2_Stream1_IRQHandler+0x198>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <DMA2_Stream1_IRQHandler+0x178>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <DMA2_Stream1_IRQHandler+0x178>)
 8000fa2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fa6:	6093      	str	r3, [r2, #8]
	}
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40026400 	.word	0x40026400
 8000fb8:	200003c4 	.word	0x200003c4
 8000fbc:	200002b4 	.word	0x200002b4
 8000fc0:	200002e4 	.word	0x200002e4
 8000fc4:	2000030c 	.word	0x2000030c
 8000fc8:	20000314 	.word	0x20000314
 8000fcc:	200003ac 	.word	0x200003ac
 8000fd0:	2000028c 	.word	0x2000028c
 8000fd4:	20000414 	.word	0x20000414

08000fd8 <DMA2_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream2_IRQHandler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF2)
 8000fdc:	4b3e      	ldr	r3, [pc, #248]	@ (80010d8 <DMA2_Stream2_IRQHandler+0x100>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d011      	beq.n	800100c <DMA2_Stream2_IRQHandler+0x34>
	{
		TIM8_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000fe8:	4b3c      	ldr	r3, [pc, #240]	@ (80010dc <DMA2_Stream2_IRQHandler+0x104>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	711a      	strb	r2, [r3, #4]
		USART1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000fee:	4b3c      	ldr	r3, [pc, #240]	@ (80010e0 <DMA2_Stream2_IRQHandler+0x108>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	711a      	strb	r2, [r3, #4]
		ADC2_DMA_Flag.Fifo_Error_Flag = true;
 8000ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80010e4 <DMA2_Stream2_IRQHandler+0x10c>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	711a      	strb	r2, [r3, #4]
		DMA2_Stream2_Flag.Fifo_Error_Flag = true;
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80010e8 <DMA2_Stream2_IRQHandler+0x110>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001000:	4b35      	ldr	r3, [pc, #212]	@ (80010d8 <DMA2_Stream2_IRQHandler+0x100>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	4a34      	ldr	r2, [pc, #208]	@ (80010d8 <DMA2_Stream2_IRQHandler+0x100>)
 8001006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800100a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF2)
 800100c:	4b32      	ldr	r3, [pc, #200]	@ (80010d8 <DMA2_Stream2_IRQHandler+0x100>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d011      	beq.n	800103c <DMA2_Stream2_IRQHandler+0x64>
	{
		TIM8_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001018:	4b30      	ldr	r3, [pc, #192]	@ (80010dc <DMA2_Stream2_IRQHandler+0x104>)
 800101a:	2201      	movs	r2, #1
 800101c:	70da      	strb	r2, [r3, #3]
		USART1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800101e:	4b30      	ldr	r3, [pc, #192]	@ (80010e0 <DMA2_Stream2_IRQHandler+0x108>)
 8001020:	2201      	movs	r2, #1
 8001022:	70da      	strb	r2, [r3, #3]
		ADC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001024:	4b2f      	ldr	r3, [pc, #188]	@ (80010e4 <DMA2_Stream2_IRQHandler+0x10c>)
 8001026:	2201      	movs	r2, #1
 8001028:	70da      	strb	r2, [r3, #3]
		DMA2_Stream2_Flag.Direct_Mode_Error_Flag = true;
 800102a:	4b2f      	ldr	r3, [pc, #188]	@ (80010e8 <DMA2_Stream2_IRQHandler+0x110>)
 800102c:	2201      	movs	r2, #1
 800102e:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001030:	4b29      	ldr	r3, [pc, #164]	@ (80010d8 <DMA2_Stream2_IRQHandler+0x100>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	4a28      	ldr	r2, [pc, #160]	@ (80010d8 <DMA2_Stream2_IRQHandler+0x100>)
 8001036:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800103a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF2)
 800103c:	4b26      	ldr	r3, [pc, #152]	@ (80010d8 <DMA2_Stream2_IRQHandler+0x100>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d011      	beq.n	800106c <DMA2_Stream2_IRQHandler+0x94>
	{
		TIM8_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8001048:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <DMA2_Stream2_IRQHandler+0x104>)
 800104a:	2201      	movs	r2, #1
 800104c:	709a      	strb	r2, [r3, #2]
		USART1_RX_DMA_Flag.Transfer_Error_Flag = true;
 800104e:	4b24      	ldr	r3, [pc, #144]	@ (80010e0 <DMA2_Stream2_IRQHandler+0x108>)
 8001050:	2201      	movs	r2, #1
 8001052:	709a      	strb	r2, [r3, #2]
		ADC2_DMA_Flag.Transfer_Error_Flag = true;
 8001054:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <DMA2_Stream2_IRQHandler+0x10c>)
 8001056:	2201      	movs	r2, #1
 8001058:	709a      	strb	r2, [r3, #2]
		DMA2_Stream2_Flag.Transfer_Error_Flag = true;
 800105a:	4b23      	ldr	r3, [pc, #140]	@ (80010e8 <DMA2_Stream2_IRQHandler+0x110>)
 800105c:	2201      	movs	r2, #1
 800105e:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001060:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <DMA2_Stream2_IRQHandler+0x100>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	4a1c      	ldr	r2, [pc, #112]	@ (80010d8 <DMA2_Stream2_IRQHandler+0x100>)
 8001066:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800106a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF2)
 800106c:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <DMA2_Stream2_IRQHandler+0x100>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d011      	beq.n	800109c <DMA2_Stream2_IRQHandler+0xc4>
	{
		TIM8_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001078:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <DMA2_Stream2_IRQHandler+0x104>)
 800107a:	2201      	movs	r2, #1
 800107c:	705a      	strb	r2, [r3, #1]
		USART1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <DMA2_Stream2_IRQHandler+0x108>)
 8001080:	2201      	movs	r2, #1
 8001082:	705a      	strb	r2, [r3, #1]
		ADC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001084:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <DMA2_Stream2_IRQHandler+0x10c>)
 8001086:	2201      	movs	r2, #1
 8001088:	705a      	strb	r2, [r3, #1]
		DMA2_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 800108a:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <DMA2_Stream2_IRQHandler+0x110>)
 800108c:	2201      	movs	r2, #1
 800108e:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <DMA2_Stream2_IRQHandler+0x100>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	4a10      	ldr	r2, [pc, #64]	@ (80010d8 <DMA2_Stream2_IRQHandler+0x100>)
 8001096:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800109a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF2)
 800109c:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <DMA2_Stream2_IRQHandler+0x100>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d011      	beq.n	80010cc <DMA2_Stream2_IRQHandler+0xf4>
	{
		TIM8_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <DMA2_Stream2_IRQHandler+0x104>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
		USART1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <DMA2_Stream2_IRQHandler+0x108>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
		ADC2_DMA_Flag.Transfer_Complete_Flag = true;
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <DMA2_Stream2_IRQHandler+0x10c>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <DMA2_Stream2_IRQHandler+0x110>)
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <DMA2_Stream2_IRQHandler+0x100>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <DMA2_Stream2_IRQHandler+0x100>)
 80010c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010ca:	6093      	str	r3, [r2, #8]
	}
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40026400 	.word	0x40026400
 80010dc:	200002ec 	.word	0x200002ec
 80010e0:	20000244 	.word	0x20000244
 80010e4:	200003bc 	.word	0x200003bc
 80010e8:	2000041c 	.word	0x2000041c

080010ec <DMA2_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream3_IRQHandler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF3)
 80010f0:	4b36      	ldr	r3, [pc, #216]	@ (80011cc <DMA2_Stream3_IRQHandler+0xe0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00e      	beq.n	800111a <DMA2_Stream3_IRQHandler+0x2e>
	{
		SDIO_RXTX_DMA_Flag.Fifo_Error_Flag = true;
 80010fc:	4b34      	ldr	r3, [pc, #208]	@ (80011d0 <DMA2_Stream3_IRQHandler+0xe4>)
 80010fe:	2201      	movs	r2, #1
 8001100:	711a      	strb	r2, [r3, #4]
		SPI1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001102:	4b34      	ldr	r3, [pc, #208]	@ (80011d4 <DMA2_Stream3_IRQHandler+0xe8>)
 8001104:	2201      	movs	r2, #1
 8001106:	711a      	strb	r2, [r3, #4]
		DMA2_Stream3_Flag.Fifo_Error_Flag = true;
 8001108:	4b33      	ldr	r3, [pc, #204]	@ (80011d8 <DMA2_Stream3_IRQHandler+0xec>)
 800110a:	2201      	movs	r2, #1
 800110c:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 800110e:	4b2f      	ldr	r3, [pc, #188]	@ (80011cc <DMA2_Stream3_IRQHandler+0xe0>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	4a2e      	ldr	r2, [pc, #184]	@ (80011cc <DMA2_Stream3_IRQHandler+0xe0>)
 8001114:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001118:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF3)
 800111a:	4b2c      	ldr	r3, [pc, #176]	@ (80011cc <DMA2_Stream3_IRQHandler+0xe0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00e      	beq.n	8001144 <DMA2_Stream3_IRQHandler+0x58>
	{
		SDIO_RXTX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001126:	4b2a      	ldr	r3, [pc, #168]	@ (80011d0 <DMA2_Stream3_IRQHandler+0xe4>)
 8001128:	2201      	movs	r2, #1
 800112a:	70da      	strb	r2, [r3, #3]
		SPI1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800112c:	4b29      	ldr	r3, [pc, #164]	@ (80011d4 <DMA2_Stream3_IRQHandler+0xe8>)
 800112e:	2201      	movs	r2, #1
 8001130:	70da      	strb	r2, [r3, #3]
		DMA2_Stream3_Flag.Direct_Mode_Error_Flag = true;
 8001132:	4b29      	ldr	r3, [pc, #164]	@ (80011d8 <DMA2_Stream3_IRQHandler+0xec>)
 8001134:	2201      	movs	r2, #1
 8001136:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001138:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <DMA2_Stream3_IRQHandler+0xe0>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	4a23      	ldr	r2, [pc, #140]	@ (80011cc <DMA2_Stream3_IRQHandler+0xe0>)
 800113e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001142:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF3)
 8001144:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <DMA2_Stream3_IRQHandler+0xe0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00e      	beq.n	800116e <DMA2_Stream3_IRQHandler+0x82>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Error_Flag = true;
 8001150:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <DMA2_Stream3_IRQHandler+0xe4>)
 8001152:	2201      	movs	r2, #1
 8001154:	709a      	strb	r2, [r3, #2]
		SPI1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001156:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <DMA2_Stream3_IRQHandler+0xe8>)
 8001158:	2201      	movs	r2, #1
 800115a:	709a      	strb	r2, [r3, #2]
		DMA2_Stream3_Flag.Transfer_Error_Flag = true;
 800115c:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <DMA2_Stream3_IRQHandler+0xec>)
 800115e:	2201      	movs	r2, #1
 8001160:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001162:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <DMA2_Stream3_IRQHandler+0xe0>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	4a19      	ldr	r2, [pc, #100]	@ (80011cc <DMA2_Stream3_IRQHandler+0xe0>)
 8001168:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800116c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF3)
 800116e:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <DMA2_Stream3_IRQHandler+0xe0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00e      	beq.n	8001198 <DMA2_Stream3_IRQHandler+0xac>
	{
		SDIO_RXTX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800117a:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <DMA2_Stream3_IRQHandler+0xe4>)
 800117c:	2201      	movs	r2, #1
 800117e:	705a      	strb	r2, [r3, #1]
		SPI1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <DMA2_Stream3_IRQHandler+0xe8>)
 8001182:	2201      	movs	r2, #1
 8001184:	705a      	strb	r2, [r3, #1]
		DMA2_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <DMA2_Stream3_IRQHandler+0xec>)
 8001188:	2201      	movs	r2, #1
 800118a:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 800118c:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <DMA2_Stream3_IRQHandler+0xe0>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	4a0e      	ldr	r2, [pc, #56]	@ (80011cc <DMA2_Stream3_IRQHandler+0xe0>)
 8001192:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001196:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF3)
 8001198:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <DMA2_Stream3_IRQHandler+0xe0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00e      	beq.n	80011c2 <DMA2_Stream3_IRQHandler+0xd6>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Complete_Flag = true;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <DMA2_Stream3_IRQHandler+0xe4>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
		SPI1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80011aa:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <DMA2_Stream3_IRQHandler+0xe8>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
 80011b0:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <DMA2_Stream3_IRQHandler+0xec>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 80011b6:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <DMA2_Stream3_IRQHandler+0xe0>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <DMA2_Stream3_IRQHandler+0xe0>)
 80011bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80011c0:	6093      	str	r3, [r2, #8]
	}
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40026400 	.word	0x40026400
 80011d0:	200003a4 	.word	0x200003a4
 80011d4:	2000022c 	.word	0x2000022c
 80011d8:	20000424 	.word	0x20000424

080011dc <DMA2_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream4_IRQHandler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF4)
 80011e0:	4b36      	ldr	r3, [pc, #216]	@ (80012bc <DMA2_Stream4_IRQHandler+0xe0>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00e      	beq.n	800120a <DMA2_Stream4_IRQHandler+0x2e>
	{
		TIM1_CH4_DMA_Flag.Fifo_Error_Flag = true;
 80011ec:	4b34      	ldr	r3, [pc, #208]	@ (80012c0 <DMA2_Stream4_IRQHandler+0xe4>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	711a      	strb	r2, [r3, #4]
		TIM8_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80011f2:	4b34      	ldr	r3, [pc, #208]	@ (80012c4 <DMA2_Stream4_IRQHandler+0xe8>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	711a      	strb	r2, [r3, #4]
		DMA2_Stream4_Flag.Fifo_Error_Flag = true;
 80011f8:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <DMA2_Stream4_IRQHandler+0xec>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF4;
 80011fe:	4b2f      	ldr	r3, [pc, #188]	@ (80012bc <DMA2_Stream4_IRQHandler+0xe0>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	4a2e      	ldr	r2, [pc, #184]	@ (80012bc <DMA2_Stream4_IRQHandler+0xe0>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF4)
 800120a:	4b2c      	ldr	r3, [pc, #176]	@ (80012bc <DMA2_Stream4_IRQHandler+0xe0>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00e      	beq.n	8001234 <DMA2_Stream4_IRQHandler+0x58>
	{
		TIM1_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001216:	4b2a      	ldr	r3, [pc, #168]	@ (80012c0 <DMA2_Stream4_IRQHandler+0xe4>)
 8001218:	2201      	movs	r2, #1
 800121a:	70da      	strb	r2, [r3, #3]
		TIM8_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800121c:	4b29      	ldr	r3, [pc, #164]	@ (80012c4 <DMA2_Stream4_IRQHandler+0xe8>)
 800121e:	2201      	movs	r2, #1
 8001220:	70da      	strb	r2, [r3, #3]
		DMA2_Stream4_Flag.Direct_Mode_Error_Flag = true;
 8001222:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <DMA2_Stream4_IRQHandler+0xec>)
 8001224:	2201      	movs	r2, #1
 8001226:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001228:	4b24      	ldr	r3, [pc, #144]	@ (80012bc <DMA2_Stream4_IRQHandler+0xe0>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	4a23      	ldr	r2, [pc, #140]	@ (80012bc <DMA2_Stream4_IRQHandler+0xe0>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF4)
 8001234:	4b21      	ldr	r3, [pc, #132]	@ (80012bc <DMA2_Stream4_IRQHandler+0xe0>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00e      	beq.n	800125e <DMA2_Stream4_IRQHandler+0x82>
	{
		TIM1_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8001240:	4b1f      	ldr	r3, [pc, #124]	@ (80012c0 <DMA2_Stream4_IRQHandler+0xe4>)
 8001242:	2201      	movs	r2, #1
 8001244:	709a      	strb	r2, [r3, #2]
		TIM8_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001246:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <DMA2_Stream4_IRQHandler+0xe8>)
 8001248:	2201      	movs	r2, #1
 800124a:	709a      	strb	r2, [r3, #2]
		DMA2_Stream4_Flag.Transfer_Error_Flag = true;
 800124c:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <DMA2_Stream4_IRQHandler+0xec>)
 800124e:	2201      	movs	r2, #1
 8001250:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8001252:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <DMA2_Stream4_IRQHandler+0xe0>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	4a19      	ldr	r2, [pc, #100]	@ (80012bc <DMA2_Stream4_IRQHandler+0xe0>)
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF4)
 800125e:	4b17      	ldr	r3, [pc, #92]	@ (80012bc <DMA2_Stream4_IRQHandler+0xe0>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00e      	beq.n	8001288 <DMA2_Stream4_IRQHandler+0xac>
	{
		TIM1_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <DMA2_Stream4_IRQHandler+0xe4>)
 800126c:	2201      	movs	r2, #1
 800126e:	705a      	strb	r2, [r3, #1]
		TIM8_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001270:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <DMA2_Stream4_IRQHandler+0xe8>)
 8001272:	2201      	movs	r2, #1
 8001274:	705a      	strb	r2, [r3, #1]
		DMA2_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 8001276:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <DMA2_Stream4_IRQHandler+0xec>)
 8001278:	2201      	movs	r2, #1
 800127a:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <DMA2_Stream4_IRQHandler+0xe0>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	4a0e      	ldr	r2, [pc, #56]	@ (80012bc <DMA2_Stream4_IRQHandler+0xe0>)
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF4)
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <DMA2_Stream4_IRQHandler+0xe0>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0320 	and.w	r3, r3, #32
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00e      	beq.n	80012b2 <DMA2_Stream4_IRQHandler+0xd6>
	{
		TIM1_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8001294:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <DMA2_Stream4_IRQHandler+0xe4>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
		TIM8_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 800129a:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <DMA2_Stream4_IRQHandler+0xe8>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
 80012a0:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <DMA2_Stream4_IRQHandler+0xec>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80012a6:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <DMA2_Stream4_IRQHandler+0xe0>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <DMA2_Stream4_IRQHandler+0xe0>)
 80012ac:	f043 0320 	orr.w	r3, r3, #32
 80012b0:	60d3      	str	r3, [r2, #12]
	}
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40026400 	.word	0x40026400
 80012c0:	200002cc 	.word	0x200002cc
 80012c4:	200002f4 	.word	0x200002f4
 80012c8:	2000042c 	.word	0x2000042c

080012cc <DMA2_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream5_IRQHandler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF5)
 80012d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <DMA2_Stream5_IRQHandler+0xc4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00b      	beq.n	80012f4 <DMA2_Stream5_IRQHandler+0x28>
	{
		TIM1_UP_DMA_Flag.Fifo_Error_Flag = true;
 80012dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001394 <DMA2_Stream5_IRQHandler+0xc8>)
 80012de:	2201      	movs	r2, #1
 80012e0:	711a      	strb	r2, [r3, #4]
		DMA2_Stream5_Flag.Fifo_Error_Flag = true;
 80012e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001398 <DMA2_Stream5_IRQHandler+0xcc>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 80012e8:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <DMA2_Stream5_IRQHandler+0xc4>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4a28      	ldr	r2, [pc, #160]	@ (8001390 <DMA2_Stream5_IRQHandler+0xc4>)
 80012ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012f2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF5)
 80012f4:	4b26      	ldr	r3, [pc, #152]	@ (8001390 <DMA2_Stream5_IRQHandler+0xc4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00b      	beq.n	8001318 <DMA2_Stream5_IRQHandler+0x4c>
	{
		TIM1_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001300:	4b24      	ldr	r3, [pc, #144]	@ (8001394 <DMA2_Stream5_IRQHandler+0xc8>)
 8001302:	2201      	movs	r2, #1
 8001304:	70da      	strb	r2, [r3, #3]
		DMA2_Stream5_Flag.Direct_Mode_Error_Flag = true;
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <DMA2_Stream5_IRQHandler+0xcc>)
 8001308:	2201      	movs	r2, #1
 800130a:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 800130c:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <DMA2_Stream5_IRQHandler+0xc4>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4a1f      	ldr	r2, [pc, #124]	@ (8001390 <DMA2_Stream5_IRQHandler+0xc4>)
 8001312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001316:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF5)
 8001318:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <DMA2_Stream5_IRQHandler+0xc4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00b      	beq.n	800133c <DMA2_Stream5_IRQHandler+0x70>
	{
		TIM1_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001324:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <DMA2_Stream5_IRQHandler+0xc8>)
 8001326:	2201      	movs	r2, #1
 8001328:	709a      	strb	r2, [r3, #2]
		DMA2_Stream5_Flag.Transfer_Error_Flag = true;
 800132a:	4b1b      	ldr	r3, [pc, #108]	@ (8001398 <DMA2_Stream5_IRQHandler+0xcc>)
 800132c:	2201      	movs	r2, #1
 800132e:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <DMA2_Stream5_IRQHandler+0xc4>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4a16      	ldr	r2, [pc, #88]	@ (8001390 <DMA2_Stream5_IRQHandler+0xc4>)
 8001336:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800133a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF5)
 800133c:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <DMA2_Stream5_IRQHandler+0xc4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00b      	beq.n	8001360 <DMA2_Stream5_IRQHandler+0x94>
	{
		TIM1_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001348:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <DMA2_Stream5_IRQHandler+0xc8>)
 800134a:	2201      	movs	r2, #1
 800134c:	705a      	strb	r2, [r3, #1]
		DMA2_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 800134e:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <DMA2_Stream5_IRQHandler+0xcc>)
 8001350:	2201      	movs	r2, #1
 8001352:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001354:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <DMA2_Stream5_IRQHandler+0xc4>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <DMA2_Stream5_IRQHandler+0xc4>)
 800135a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800135e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF5)
 8001360:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <DMA2_Stream5_IRQHandler+0xc4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00b      	beq.n	8001384 <DMA2_Stream5_IRQHandler+0xb8>
	{
		TIM1_UP_DMA_Flag.Transfer_Complete_Flag = true;
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <DMA2_Stream5_IRQHandler+0xc8>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <DMA2_Stream5_IRQHandler+0xcc>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8001378:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <DMA2_Stream5_IRQHandler+0xc4>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <DMA2_Stream5_IRQHandler+0xc4>)
 800137e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001382:	60d3      	str	r3, [r2, #12]
	}
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40026400 	.word	0x40026400
 8001394:	200002ac 	.word	0x200002ac
 8001398:	20000434 	.word	0x20000434

0800139c <DMA2_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream6_IRQHandler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF6)
 80013a0:	4b45      	ldr	r3, [pc, #276]	@ (80014b8 <DMA2_Stream6_IRQHandler+0x11c>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d014      	beq.n	80013d6 <DMA2_Stream6_IRQHandler+0x3a>
	{
		TIM1_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80013ac:	4b43      	ldr	r3, [pc, #268]	@ (80014bc <DMA2_Stream6_IRQHandler+0x120>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	711a      	strb	r2, [r3, #4]
		TIM1_CH3_DMA_Flag.Fifo_Error_Flag = true;
 80013b2:	4b43      	ldr	r3, [pc, #268]	@ (80014c0 <DMA2_Stream6_IRQHandler+0x124>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	711a      	strb	r2, [r3, #4]
		TIM8_CH3_DMA_Flag.Fifo_Error_Flag = true;
 80013b8:	4b42      	ldr	r3, [pc, #264]	@ (80014c4 <DMA2_Stream6_IRQHandler+0x128>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	711a      	strb	r2, [r3, #4]
		USART6_TX_DMA_Flag.Fifo_Error_Flag = true;
 80013be:	4b42      	ldr	r3, [pc, #264]	@ (80014c8 <DMA2_Stream6_IRQHandler+0x12c>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	711a      	strb	r2, [r3, #4]
		DMA2_Stream6_Flag.Fifo_Error_Flag = true;
 80013c4:	4b41      	ldr	r3, [pc, #260]	@ (80014cc <DMA2_Stream6_IRQHandler+0x130>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 80013ca:	4b3b      	ldr	r3, [pc, #236]	@ (80014b8 <DMA2_Stream6_IRQHandler+0x11c>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	4a3a      	ldr	r2, [pc, #232]	@ (80014b8 <DMA2_Stream6_IRQHandler+0x11c>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF6)
 80013d6:	4b38      	ldr	r3, [pc, #224]	@ (80014b8 <DMA2_Stream6_IRQHandler+0x11c>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d014      	beq.n	800140c <DMA2_Stream6_IRQHandler+0x70>
	{
		TIM1_CH2_DMA_Flag.Direct_Mode_Error_Flag= true;
 80013e2:	4b36      	ldr	r3, [pc, #216]	@ (80014bc <DMA2_Stream6_IRQHandler+0x120>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	70da      	strb	r2, [r3, #3]
		TIM1_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013e8:	4b35      	ldr	r3, [pc, #212]	@ (80014c0 <DMA2_Stream6_IRQHandler+0x124>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	70da      	strb	r2, [r3, #3]
		TIM8_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013ee:	4b35      	ldr	r3, [pc, #212]	@ (80014c4 <DMA2_Stream6_IRQHandler+0x128>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	70da      	strb	r2, [r3, #3]
		USART6_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013f4:	4b34      	ldr	r3, [pc, #208]	@ (80014c8 <DMA2_Stream6_IRQHandler+0x12c>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	70da      	strb	r2, [r3, #3]
		DMA2_Stream6_Flag.Direct_Mode_Error_Flag = true;
 80013fa:	4b34      	ldr	r3, [pc, #208]	@ (80014cc <DMA2_Stream6_IRQHandler+0x130>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001400:	4b2d      	ldr	r3, [pc, #180]	@ (80014b8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	4a2c      	ldr	r2, [pc, #176]	@ (80014b8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001406:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800140a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF6)
 800140c:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <DMA2_Stream6_IRQHandler+0x11c>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d014      	beq.n	8001442 <DMA2_Stream6_IRQHandler+0xa6>
	{
		TIM1_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001418:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <DMA2_Stream6_IRQHandler+0x120>)
 800141a:	2201      	movs	r2, #1
 800141c:	709a      	strb	r2, [r3, #2]
		TIM1_CH3_DMA_Flag.Transfer_Error_Flag = true;
 800141e:	4b28      	ldr	r3, [pc, #160]	@ (80014c0 <DMA2_Stream6_IRQHandler+0x124>)
 8001420:	2201      	movs	r2, #1
 8001422:	709a      	strb	r2, [r3, #2]
		TIM8_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8001424:	4b27      	ldr	r3, [pc, #156]	@ (80014c4 <DMA2_Stream6_IRQHandler+0x128>)
 8001426:	2201      	movs	r2, #1
 8001428:	709a      	strb	r2, [r3, #2]
		USART6_TX_DMA_Flag.Transfer_Error_Flag = true;
 800142a:	4b27      	ldr	r3, [pc, #156]	@ (80014c8 <DMA2_Stream6_IRQHandler+0x12c>)
 800142c:	2201      	movs	r2, #1
 800142e:	709a      	strb	r2, [r3, #2]
		DMA2_Stream6_Flag.Transfer_Error_Flag = true;
 8001430:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <DMA2_Stream6_IRQHandler+0x130>)
 8001432:	2201      	movs	r2, #1
 8001434:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	4a1f      	ldr	r2, [pc, #124]	@ (80014b8 <DMA2_Stream6_IRQHandler+0x11c>)
 800143c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001440:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF6)
 8001442:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d014      	beq.n	8001478 <DMA2_Stream6_IRQHandler+0xdc>
	{
		TIM1_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800144e:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <DMA2_Stream6_IRQHandler+0x120>)
 8001450:	2201      	movs	r2, #1
 8001452:	705a      	strb	r2, [r3, #1]
		TIM1_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001454:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <DMA2_Stream6_IRQHandler+0x124>)
 8001456:	2201      	movs	r2, #1
 8001458:	705a      	strb	r2, [r3, #1]
		TIM8_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <DMA2_Stream6_IRQHandler+0x128>)
 800145c:	2201      	movs	r2, #1
 800145e:	705a      	strb	r2, [r3, #1]
		USART6_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001460:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <DMA2_Stream6_IRQHandler+0x12c>)
 8001462:	2201      	movs	r2, #1
 8001464:	705a      	strb	r2, [r3, #1]
		DMA2_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8001466:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <DMA2_Stream6_IRQHandler+0x130>)
 8001468:	2201      	movs	r2, #1
 800146a:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <DMA2_Stream6_IRQHandler+0x11c>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	4a11      	ldr	r2, [pc, #68]	@ (80014b8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001472:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001476:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF6)
 8001478:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <DMA2_Stream6_IRQHandler+0x11c>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d014      	beq.n	80014ae <DMA2_Stream6_IRQHandler+0x112>
	{
		TIM1_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001484:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <DMA2_Stream6_IRQHandler+0x120>)
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
		TIM1_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 800148a:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <DMA2_Stream6_IRQHandler+0x124>)
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
		TIM8_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <DMA2_Stream6_IRQHandler+0x128>)
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
		USART6_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001496:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <DMA2_Stream6_IRQHandler+0x12c>)
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
 800149c:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <DMA2_Stream6_IRQHandler+0x130>)
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 80014a2:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <DMA2_Stream6_IRQHandler+0x11c>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <DMA2_Stream6_IRQHandler+0x11c>)
 80014a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ac:	60d3      	str	r3, [r2, #12]
	}
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	40026400 	.word	0x40026400
 80014bc:	200002bc 	.word	0x200002bc
 80014c0:	200002c4 	.word	0x200002c4
 80014c4:	200002fc 	.word	0x200002fc
 80014c8:	20000294 	.word	0x20000294
 80014cc:	2000043c 	.word	0x2000043c

080014d0 <DMA2_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream7_IRQHandler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF7)
 80014d4:	4b36      	ldr	r3, [pc, #216]	@ (80015b0 <DMA2_Stream7_IRQHandler+0xe0>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00e      	beq.n	80014fe <DMA2_Stream7_IRQHandler+0x2e>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80014e0:	4b33      	ldr	r3, [pc, #204]	@ (80015b0 <DMA2_Stream7_IRQHandler+0xe0>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4a32      	ldr	r2, [pc, #200]	@ (80015b0 <DMA2_Stream7_IRQHandler+0xe0>)
 80014e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014ea:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Fifo_Error_Flag = true;
 80014ec:	4b31      	ldr	r3, [pc, #196]	@ (80015b4 <DMA2_Stream7_IRQHandler+0xe4>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	711a      	strb	r2, [r3, #4]
		USART1_TX_DMA_Flag.Fifo_Error_Flag = true;
 80014f2:	4b31      	ldr	r3, [pc, #196]	@ (80015b8 <DMA2_Stream7_IRQHandler+0xe8>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	711a      	strb	r2, [r3, #4]
		DMA2_Stream7_Flag.Fifo_Error_Flag = true;
 80014f8:	4b30      	ldr	r3, [pc, #192]	@ (80015bc <DMA2_Stream7_IRQHandler+0xec>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	711a      	strb	r2, [r3, #4]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF7)
 80014fe:	4b2c      	ldr	r3, [pc, #176]	@ (80015b0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00e      	beq.n	8001528 <DMA2_Stream7_IRQHandler+0x58>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 800150a:	4b29      	ldr	r3, [pc, #164]	@ (80015b0 <DMA2_Stream7_IRQHandler+0xe0>)
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	4a28      	ldr	r2, [pc, #160]	@ (80015b0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001510:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001514:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001516:	4b27      	ldr	r3, [pc, #156]	@ (80015b4 <DMA2_Stream7_IRQHandler+0xe4>)
 8001518:	2201      	movs	r2, #1
 800151a:	70da      	strb	r2, [r3, #3]
		USART1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800151c:	4b26      	ldr	r3, [pc, #152]	@ (80015b8 <DMA2_Stream7_IRQHandler+0xe8>)
 800151e:	2201      	movs	r2, #1
 8001520:	70da      	strb	r2, [r3, #3]
		DMA2_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8001522:	4b26      	ldr	r3, [pc, #152]	@ (80015bc <DMA2_Stream7_IRQHandler+0xec>)
 8001524:	2201      	movs	r2, #1
 8001526:	70da      	strb	r2, [r3, #3]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF7)
 8001528:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <DMA2_Stream7_IRQHandler+0xe0>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00e      	beq.n	8001552 <DMA2_Stream7_IRQHandler+0x82>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8001534:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4a1d      	ldr	r2, [pc, #116]	@ (80015b0 <DMA2_Stream7_IRQHandler+0xe0>)
 800153a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800153e:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8001540:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <DMA2_Stream7_IRQHandler+0xe4>)
 8001542:	2201      	movs	r2, #1
 8001544:	709a      	strb	r2, [r3, #2]
		USART1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001546:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <DMA2_Stream7_IRQHandler+0xe8>)
 8001548:	2201      	movs	r2, #1
 800154a:	709a      	strb	r2, [r3, #2]
		DMA2_Stream7_Flag.Transfer_Error_Flag = true;
 800154c:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <DMA2_Stream7_IRQHandler+0xec>)
 800154e:	2201      	movs	r2, #1
 8001550:	709a      	strb	r2, [r3, #2]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF7)
 8001552:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00e      	beq.n	800157c <DMA2_Stream7_IRQHandler+0xac>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 800155e:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	4a13      	ldr	r2, [pc, #76]	@ (80015b0 <DMA2_Stream7_IRQHandler+0xe0>)
 8001564:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001568:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800156a:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <DMA2_Stream7_IRQHandler+0xe4>)
 800156c:	2201      	movs	r2, #1
 800156e:	705a      	strb	r2, [r3, #1]
		USART1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <DMA2_Stream7_IRQHandler+0xe8>)
 8001572:	2201      	movs	r2, #1
 8001574:	705a      	strb	r2, [r3, #1]
		DMA2_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8001576:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <DMA2_Stream7_IRQHandler+0xec>)
 8001578:	2201      	movs	r2, #1
 800157a:	705a      	strb	r2, [r3, #1]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF7)
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <DMA2_Stream7_IRQHandler+0xe0>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00e      	beq.n	80015a6 <DMA2_Stream7_IRQHandler+0xd6>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <DMA2_Stream7_IRQHandler+0xe0>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4a08      	ldr	r2, [pc, #32]	@ (80015b0 <DMA2_Stream7_IRQHandler+0xe0>)
 800158e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001592:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8001594:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <DMA2_Stream7_IRQHandler+0xe4>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
		USART1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800159a:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <DMA2_Stream7_IRQHandler+0xe8>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <DMA2_Stream7_IRQHandler+0xec>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]

	}
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40026400 	.word	0x40026400
 80015b4:	20000304 	.word	0x20000304
 80015b8:	2000024c 	.word	0x2000024c
 80015bc:	20000444 	.word	0x20000444

080015c0 <GPIO_Clock_Enable>:
 * @brief  Enables the clock for a specific GPIO port.
 * @param  PORT: Pointer to GPIO port base address.
 * @retval 0 on success, -1 on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a25      	ldr	r2, [pc, #148]	@ (8001660 <GPIO_Clock_Enable+0xa0>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d106      	bne.n	80015de <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 80015d0:	4b24      	ldr	r3, [pc, #144]	@ (8001664 <GPIO_Clock_Enable+0xa4>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d4:	4a23      	ldr	r2, [pc, #140]	@ (8001664 <GPIO_Clock_Enable+0xa4>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6313      	str	r3, [r2, #48]	@ 0x30
 80015dc:	e039      	b.n	8001652 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a21      	ldr	r2, [pc, #132]	@ (8001668 <GPIO_Clock_Enable+0xa8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d106      	bne.n	80015f4 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <GPIO_Clock_Enable+0xa4>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001664 <GPIO_Clock_Enable+0xa4>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	e02e      	b.n	8001652 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a1d      	ldr	r2, [pc, #116]	@ (800166c <GPIO_Clock_Enable+0xac>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d106      	bne.n	800160a <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 80015fc:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <GPIO_Clock_Enable+0xa4>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001600:	4a18      	ldr	r2, [pc, #96]	@ (8001664 <GPIO_Clock_Enable+0xa4>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6313      	str	r3, [r2, #48]	@ 0x30
 8001608:	e023      	b.n	8001652 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a18      	ldr	r2, [pc, #96]	@ (8001670 <GPIO_Clock_Enable+0xb0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d106      	bne.n	8001620 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8001612:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <GPIO_Clock_Enable+0xa4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a13      	ldr	r2, [pc, #76]	@ (8001664 <GPIO_Clock_Enable+0xa4>)
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	e018      	b.n	8001652 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a14      	ldr	r2, [pc, #80]	@ (8001674 <GPIO_Clock_Enable+0xb4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d106      	bne.n	8001636 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8001628:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <GPIO_Clock_Enable+0xa4>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162c:	4a0d      	ldr	r2, [pc, #52]	@ (8001664 <GPIO_Clock_Enable+0xa4>)
 800162e:	f043 0310 	orr.w	r3, r3, #16
 8001632:	6313      	str	r3, [r2, #48]	@ 0x30
 8001634:	e00d      	b.n	8001652 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a0f      	ldr	r2, [pc, #60]	@ (8001678 <GPIO_Clock_Enable+0xb8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d106      	bne.n	800164c <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <GPIO_Clock_Enable+0xa4>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a08      	ldr	r2, [pc, #32]	@ (8001664 <GPIO_Clock_Enable+0xa4>)
 8001644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	e002      	b.n	8001652 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	e000      	b.n	8001654 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40020000 	.word	0x40020000
 8001664:	40023800 	.word	0x40023800
 8001668:	40020400 	.word	0x40020400
 800166c:	40020800 	.word	0x40020800
 8001670:	40020c00 	.word	0x40020c00
 8001674:	40021000 	.word	0x40021000
 8001678:	40021c00 	.word	0x40021c00

0800167c <GPIO_Pin_Init>:
 * @param  speed: Speed level (low, medium, high, very high).
 * @param  pull: Pull-up/pull-down configuration (none, pull-up, pull-down).
 * @param  alternate_function: Alternate function selection (0-15).
 */
void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	4608      	mov	r0, r1
 8001686:	4611      	mov	r1, r2
 8001688:	461a      	mov	r2, r3
 800168a:	4603      	mov	r3, r0
 800168c:	70fb      	strb	r3, [r7, #3]
 800168e:	460b      	mov	r3, r1
 8001690:	70bb      	strb	r3, [r7, #2]
 8001692:	4613      	mov	r3, r2
 8001694:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ff92 	bl	80015c0 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	78b9      	ldrb	r1, [r7, #2]
 80016a2:	78fa      	ldrb	r2, [r7, #3]
 80016a4:	0052      	lsls	r2, r2, #1
 80016a6:	fa01 f202 	lsl.w	r2, r1, r2
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	601a      	str	r2, [r3, #0]

	if(output_type != GPIO_Configuration.Output_Type.None) Port -> OTYPER |= output_type << pin;
 80016b0:	2202      	movs	r2, #2
 80016b2:	787b      	ldrb	r3, [r7, #1]
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d008      	beq.n	80016ca <GPIO_Pin_Init+0x4e>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	7879      	ldrb	r1, [r7, #1]
 80016be:	78fa      	ldrb	r2, [r7, #3]
 80016c0:	fa01 f202 	lsl.w	r2, r1, r2
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	605a      	str	r2, [r3, #4]
	if(speed != GPIO_Configuration.Speed.None) Port -> OSPEEDR |= speed << (pin*2);
 80016ca:	2204      	movs	r2, #4
 80016cc:	7c3b      	ldrb	r3, [r7, #16]
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d009      	beq.n	80016e6 <GPIO_Pin_Init+0x6a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	7c39      	ldrb	r1, [r7, #16]
 80016d8:	78fa      	ldrb	r2, [r7, #3]
 80016da:	0052      	lsls	r2, r2, #1
 80016dc:	fa01 f202 	lsl.w	r2, r1, r2
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	609a      	str	r2, [r3, #8]
	if(pull != GPIO_Configuration.Pull.None) Port -> PUPDR |= pull << (pin*2);
 80016e6:	2204      	movs	r2, #4
 80016e8:	7d3b      	ldrb	r3, [r7, #20]
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d009      	beq.n	8001702 <GPIO_Pin_Init+0x86>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	7d39      	ldrb	r1, [r7, #20]
 80016f4:	78fa      	ldrb	r2, [r7, #3]
 80016f6:	0052      	lsls	r2, r2, #1
 80016f8:	fa01 f202 	lsl.w	r2, r1, r2
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	2b07      	cmp	r3, #7
 8001706:	d80a      	bhi.n	800171e <GPIO_Pin_Init+0xa2>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	7e39      	ldrb	r1, [r7, #24]
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	fa01 f202 	lsl.w	r2, r1, r2
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 800171c:	e00a      	b.n	8001734 <GPIO_Pin_Init+0xb8>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001722:	7e39      	ldrb	r1, [r7, #24]
 8001724:	78fa      	ldrb	r2, [r7, #3]
 8001726:	3a08      	subs	r2, #8
 8001728:	0092      	lsls	r2, r2, #2
 800172a:	fa01 f202 	lsl.w	r2, r1, r2
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	db0a      	blt.n	8001766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	490c      	ldr	r1, [pc, #48]	@ (8001788 <__NVIC_SetPriority+0x4c>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	440b      	add	r3, r1
 8001760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001764:	e00a      	b.n	800177c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4908      	ldr	r1, [pc, #32]	@ (800178c <__NVIC_SetPriority+0x50>)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	3b04      	subs	r3, #4
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	440b      	add	r3, r1
 800177a:	761a      	strb	r2, [r3, #24]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000e100 	.word	0xe000e100
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ffc2 	bl	800173c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
//	uint8_t pll_m = 4;
//	uint8_t pll_n = 168; //192
//	uint8_t pll_p = 0;
//	uint8_t pll_q = 7;

	SystemInit();
 80017da:	f000 f93f 	bl	8001a5c <SystemInit>

	uint8_t pll_m = 8;
 80017de:	2308      	movs	r3, #8
 80017e0:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 80017e2:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80017e6:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 80017ec:	2307      	movs	r3, #7
 80017ee:	70bb      	strb	r3, [r7, #2]

	RCC->PLLCFGR = 0x00000000;
 80017f0:	4b3c      	ldr	r3, [pc, #240]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 80017f6:	4b3b      	ldr	r3, [pc, #236]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a3a      	ldr	r2, [pc, #232]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 80017fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001800:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8001802:	bf00      	nop
 8001804:	4b37      	ldr	r3, [pc, #220]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f9      	beq.n	8001804 <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8001810:	4b34      	ldr	r3, [pc, #208]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	4a33      	ldr	r2, [pc, #204]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181a:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 800181c:	4b32      	ldr	r3, [pc, #200]	@ (80018e8 <MCU_Clock_Setup+0x114>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a31      	ldr	r2, [pc, #196]	@ (80018e8 <MCU_Clock_Setup+0x114>)
 8001822:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001826:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8001828:	4b30      	ldr	r3, [pc, #192]	@ (80018ec <MCU_Clock_Setup+0x118>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a2f      	ldr	r2, [pc, #188]	@ (80018ec <MCU_Clock_Setup+0x118>)
 800182e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001832:	f043 0305 	orr.w	r3, r3, #5
 8001836:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8001838:	4b2a      	ldr	r3, [pc, #168]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	78ba      	ldrb	r2, [r7, #2]
 800183e:	0611      	lsls	r1, r2, #24
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	0412      	lsls	r2, r2, #16
 8001844:	4311      	orrs	r1, r2
 8001846:	88ba      	ldrh	r2, [r7, #4]
 8001848:	0192      	lsls	r2, r2, #6
 800184a:	4311      	orrs	r1, r2
 800184c:	79fa      	ldrb	r2, [r7, #7]
 800184e:	430a      	orrs	r2, r1
 8001850:	4611      	mov	r1, r2
 8001852:	4a24      	ldr	r2, [pc, #144]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 8001854:	430b      	orrs	r3, r1
 8001856:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8001858:	4b22      	ldr	r3, [pc, #136]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4a21      	ldr	r2, [pc, #132]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 800185e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001862:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8001864:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 8001866:	4a1f      	ldr	r2, [pc, #124]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 800186c:	4b1d      	ldr	r3, [pc, #116]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	4a1c      	ldr	r2, [pc, #112]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 8001872:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8001876:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001878:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4a19      	ldr	r2, [pc, #100]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 800187e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001882:	6093      	str	r3, [r2, #8]




	RCC -> CR |= RCC_CR_PLLON;
 8001884:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a16      	ldr	r2, [pc, #88]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 800188a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800188e:	6013      	str	r3, [r2, #0]



	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8001890:	bf00      	nop
 8001892:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f9      	beq.n	8001892 <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 800189e:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4a10      	ldr	r2, [pc, #64]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80018aa:	bf00      	nop
 80018ac:	4b0d      	ldr	r3, [pc, #52]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d1f9      	bne.n	80018ac <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 80018b8:	f000 f8e2 	bl	8001a80 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MCU_Clock_Setup+0x11c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	08db      	lsrs	r3, r3, #3
 80018c2:	4a0c      	ldr	r2, [pc, #48]	@ (80018f4 <MCU_Clock_Setup+0x120>)
 80018c4:	fba2 2303 	umull	r2, r3, r2, r3
 80018c8:	085b      	lsrs	r3, r3, #1
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff60 	bl	8001790 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80018d0:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 80018d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d4:	4a03      	ldr	r2, [pc, #12]	@ (80018e4 <MCU_Clock_Setup+0x110>)
 80018d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018da:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40007000 	.word	0x40007000
 80018ec:	40023c00 	.word	0x40023c00
 80018f0:	20000000 	.word	0x20000000
 80018f4:	18618619 	.word	0x18618619

080018f8 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 80018fc:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <Delay_Config+0x2c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8001902:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <Delay_Config+0x2c>)
 8001904:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001908:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <Delay_Config+0x2c>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8001910:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <Delay_Config+0x2c>)
 8001912:	2205      	movs	r2, #5
 8001914:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8001932:	edd7 7a01 	vldr	s15, [r7, #4]
 8001936:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800197c <Delay_ms+0x54>
 800193a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001942:	ee17 3a90 	vmov	r3, s15
 8001946:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8001948:	4a0d      	ldr	r2, [pc, #52]	@ (8001980 <Delay_ms+0x58>)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 800194e:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <Delay_ms+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8001954:	4b0a      	ldr	r3, [pc, #40]	@ (8001980 <Delay_ms+0x58>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a09      	ldr	r2, [pc, #36]	@ (8001980 <Delay_ms+0x58>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8001960:	bf00      	nop
 8001962:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <Delay_ms+0x58>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f9      	beq.n	8001962 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	48241000 	.word	0x48241000
 8001980:	e000e010 	.word	0xe000e010

08001984 <Delay_s>:
	return ms;
}


__STATIC_INLINE uint32_t Delay_s(unsigned long s)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	s = s * 1000;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	607b      	str	r3, [r7, #4]
	for (; s>0; s--)
 8001998:	e006      	b.n	80019a8 <Delay_s+0x24>
	{
		Delay_ms(1);
 800199a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800199e:	f7ff ffc3 	bl	8001928 <Delay_ms>
	for (; s>0; s--)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f5      	bne.n	800199a <Delay_s+0x16>
	}
	return (0UL);
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <GPIO_Pin_Low>:
 * @brief  Sets a specific pin low.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set low (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	2101      	movs	r1, #1
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	fa01 f202 	lsl.w	r2, r1, r2
 80019ce:	43d2      	mvns	r2, r2
 80019d0:	401a      	ands	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	615a      	str	r2, [r3, #20]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <GPIO_Pin_High>:
 * @brief  Sets a specific pin high.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set high (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
	Port -> ODR |= 1 << pin;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	2101      	movs	r1, #1
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	fa01 f202 	lsl.w	r2, r1, r2
 80019f8:	431a      	orrs	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	615a      	str	r2, [r3, #20]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <main>:




int main(void)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af04      	add	r7, sp, #16
	MCU_Clock_Setup();
 8001a12:	f7ff fedf 	bl	80017d4 <MCU_Clock_Setup>
	Delay_Config();
 8001a16:	f7ff ff6f 	bl	80018f8 <Delay_Config>
//	Console_Init(9600);



	GPIO_Pin_Init(GPIOD, 12, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull,
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	2400      	movs	r4, #0
			                 GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);
 8001a1e:	2303      	movs	r3, #3
 8001a20:	2200      	movs	r2, #0
 8001a22:	2100      	movs	r1, #0
	GPIO_Pin_Init(GPIOD, 12, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull,
 8001a24:	9102      	str	r1, [sp, #8]
 8001a26:	9201      	str	r2, [sp, #4]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	210c      	movs	r1, #12
 8001a30:	4809      	ldr	r0, [pc, #36]	@ (8001a58 <main+0x4c>)
 8001a32:	f7ff fe23 	bl	800167c <GPIO_Pin_Init>

	for(;;)
	{


		GPIO_Pin_High(GPIOD, 12);
 8001a36:	210c      	movs	r1, #12
 8001a38:	4807      	ldr	r0, [pc, #28]	@ (8001a58 <main+0x4c>)
 8001a3a:	f7ff ffd2 	bl	80019e2 <GPIO_Pin_High>
		Delay_s(1);
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f7ff ffa0 	bl	8001984 <Delay_s>
		GPIO_Pin_Low(GPIOD, 12);
 8001a44:	210c      	movs	r1, #12
 8001a46:	4804      	ldr	r0, [pc, #16]	@ (8001a58 <main+0x4c>)
 8001a48:	f7ff ffb6 	bl	80019b8 <GPIO_Pin_Low>
		Delay_s(1);
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f7ff ff99 	bl	8001984 <Delay_s>
		GPIO_Pin_High(GPIOD, 12);
 8001a52:	bf00      	nop
 8001a54:	e7ef      	b.n	8001a36 <main+0x2a>
 8001a56:	bf00      	nop
 8001a58:	40020c00 	.word	0x40020c00

08001a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <SystemInit+0x20>)
 8001a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a66:	4a05      	ldr	r2, [pc, #20]	@ (8001a7c <SystemInit+0x20>)
 8001a68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	2302      	movs	r3, #2
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	2302      	movs	r3, #2
 8001a98:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001a9a:	4b34      	ldr	r3, [pc, #208]	@ (8001b6c <SystemCoreClockUpdate+0xec>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d011      	beq.n	8001ace <SystemCoreClockUpdate+0x4e>
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d844      	bhi.n	8001b3a <SystemCoreClockUpdate+0xba>
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <SystemCoreClockUpdate+0x3e>
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d004      	beq.n	8001ac6 <SystemCoreClockUpdate+0x46>
 8001abc:	e03d      	b.n	8001b3a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001abe:	4b2c      	ldr	r3, [pc, #176]	@ (8001b70 <SystemCoreClockUpdate+0xf0>)
 8001ac0:	4a2c      	ldr	r2, [pc, #176]	@ (8001b74 <SystemCoreClockUpdate+0xf4>)
 8001ac2:	601a      	str	r2, [r3, #0]
      break;
 8001ac4:	e03d      	b.n	8001b42 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b70 <SystemCoreClockUpdate+0xf0>)
 8001ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8001b78 <SystemCoreClockUpdate+0xf8>)
 8001aca:	601a      	str	r2, [r3, #0]
      break;
 8001acc:	e039      	b.n	8001b42 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001ace:	4b27      	ldr	r3, [pc, #156]	@ (8001b6c <SystemCoreClockUpdate+0xec>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	0d9b      	lsrs	r3, r3, #22
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ada:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <SystemCoreClockUpdate+0xec>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ae2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00c      	beq.n	8001b04 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001aea:	4a23      	ldr	r2, [pc, #140]	@ (8001b78 <SystemCoreClockUpdate+0xf8>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b6c <SystemCoreClockUpdate+0xec>)
 8001af4:	6852      	ldr	r2, [r2, #4]
 8001af6:	0992      	lsrs	r2, r2, #6
 8001af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e00b      	b.n	8001b1c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001b04:	4a1b      	ldr	r2, [pc, #108]	@ (8001b74 <SystemCoreClockUpdate+0xf4>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	4a17      	ldr	r2, [pc, #92]	@ (8001b6c <SystemCoreClockUpdate+0xec>)
 8001b0e:	6852      	ldr	r2, [r2, #4]
 8001b10:	0992      	lsrs	r2, r2, #6
 8001b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b16:	fb02 f303 	mul.w	r3, r2, r3
 8001b1a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001b1c:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <SystemCoreClockUpdate+0xec>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	0c1b      	lsrs	r3, r3, #16
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	3301      	adds	r3, #1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	4a0e      	ldr	r2, [pc, #56]	@ (8001b70 <SystemCoreClockUpdate+0xf0>)
 8001b36:	6013      	str	r3, [r2, #0]
      break;
 8001b38:	e003      	b.n	8001b42 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <SystemCoreClockUpdate+0xf0>)
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <SystemCoreClockUpdate+0xf4>)
 8001b3e:	601a      	str	r2, [r3, #0]
      break;
 8001b40:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001b42:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <SystemCoreClockUpdate+0xec>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b7c <SystemCoreClockUpdate+0xfc>)
 8001b4e:	5cd3      	ldrb	r3, [r2, r3]
 8001b50:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001b52:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <SystemCoreClockUpdate+0xf0>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5c:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <SystemCoreClockUpdate+0xf0>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	20000000 	.word	0x20000000
 8001b74:	00f42400 	.word	0x00f42400
 8001b78:	017d7840 	.word	0x017d7840
 8001b7c:	08001c34 	.word	0x08001c34

08001b80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b80:	480d      	ldr	r0, [pc, #52]	@ (8001bb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b82:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b84:	f7ff ff6a 	bl	8001a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b88:	480c      	ldr	r0, [pc, #48]	@ (8001bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001b8a:	490d      	ldr	r1, [pc, #52]	@ (8001bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc4 <LoopForever+0xe>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b90:	e002      	b.n	8001b98 <LoopCopyDataInit>

08001b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b96:	3304      	adds	r3, #4

08001b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b9c:	d3f9      	bcc.n	8001b92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bcc <LoopForever+0x16>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba4:	e001      	b.n	8001baa <LoopFillZerobss>

08001ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba8:	3204      	adds	r2, #4

08001baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bac:	d3fb      	bcc.n	8001ba6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bae:	f000 f811 	bl	8001bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bb2:	f7ff ff2b 	bl	8001a0c <main>

08001bb6 <LoopForever>:

LoopForever:
  b LoopForever
 8001bb6:	e7fe      	b.n	8001bb6 <LoopForever>
  ldr   r0, =_estack
 8001bb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001bc4:	08001c4c 	.word	0x08001c4c
  ldr r2, =_sbss
 8001bc8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001bcc:	2000044c 	.word	0x2000044c

08001bd0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC_IRQHandler>
	...

08001bd4 <__libc_init_array>:
 8001bd4:	b570      	push	{r4, r5, r6, lr}
 8001bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8001c0c <__libc_init_array+0x38>)
 8001bd8:	4c0d      	ldr	r4, [pc, #52]	@ (8001c10 <__libc_init_array+0x3c>)
 8001bda:	1b64      	subs	r4, r4, r5
 8001bdc:	10a4      	asrs	r4, r4, #2
 8001bde:	2600      	movs	r6, #0
 8001be0:	42a6      	cmp	r6, r4
 8001be2:	d109      	bne.n	8001bf8 <__libc_init_array+0x24>
 8001be4:	4d0b      	ldr	r5, [pc, #44]	@ (8001c14 <__libc_init_array+0x40>)
 8001be6:	4c0c      	ldr	r4, [pc, #48]	@ (8001c18 <__libc_init_array+0x44>)
 8001be8:	f000 f818 	bl	8001c1c <_init>
 8001bec:	1b64      	subs	r4, r4, r5
 8001bee:	10a4      	asrs	r4, r4, #2
 8001bf0:	2600      	movs	r6, #0
 8001bf2:	42a6      	cmp	r6, r4
 8001bf4:	d105      	bne.n	8001c02 <__libc_init_array+0x2e>
 8001bf6:	bd70      	pop	{r4, r5, r6, pc}
 8001bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bfc:	4798      	blx	r3
 8001bfe:	3601      	adds	r6, #1
 8001c00:	e7ee      	b.n	8001be0 <__libc_init_array+0xc>
 8001c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c06:	4798      	blx	r3
 8001c08:	3601      	adds	r6, #1
 8001c0a:	e7f2      	b.n	8001bf2 <__libc_init_array+0x1e>
 8001c0c:	08001c44 	.word	0x08001c44
 8001c10:	08001c44 	.word	0x08001c44
 8001c14:	08001c44 	.word	0x08001c44
 8001c18:	08001c48 	.word	0x08001c48

08001c1c <_init>:
 8001c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1e:	bf00      	nop
 8001c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c22:	bc08      	pop	{r3}
 8001c24:	469e      	mov	lr, r3
 8001c26:	4770      	bx	lr

08001c28 <_fini>:
 8001c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c2a:	bf00      	nop
 8001c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c2e:	bc08      	pop	{r3}
 8001c30:	469e      	mov	lr, r3
 8001c32:	4770      	bx	lr
