
EEV_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003078  08003078  00004078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f4  080030f4  0000506c  2**0
                  CONTENTS
  4 .ARM          00000008  080030f4  080030f4  000040f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030fc  080030fc  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030fc  080030fc  000040fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003100  08003100  00004100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003104  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000506c  2**0
                  CONTENTS
 10 .bss          000004a8  2000006c  2000006c  0000506c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000514  20000514  0000506c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007701  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010e3  00000000  00000000  0000c79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000330  00000000  00000000  0000d880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000025b  00000000  00000000  0000dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000014b4  00000000  00000000  0000de0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005263  00000000  00000000  0000f2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000910a4  00000000  00000000  00014522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a55c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001044  00000000  00000000  000a560c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000a6650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003060 	.word	0x08003060

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08003060 	.word	0x08003060

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <UART4_IRQHandler>:
char TRX_Buffer[RX_Buffer_Length];

USART_Config serial;

void UART4_IRQHandler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
	if(rx_get_flag == 1)
 8000286:	4b19      	ldr	r3, [pc, #100]	@ (80002ec <UART4_IRQHandler+0x6c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d128      	bne.n	80002e0 <UART4_IRQHandler+0x60>
	{
		volatile uint32_t temp;

		temp = UART4 -> SR;
 800028e:	4b18      	ldr	r3, [pc, #96]	@ (80002f0 <UART4_IRQHandler+0x70>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	607b      	str	r3, [r7, #4]
		temp = UART4 -> DR;
 8000294:	4b16      	ldr	r3, [pc, #88]	@ (80002f0 <UART4_IRQHandler+0x70>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	607b      	str	r3, [r7, #4]

		serial.USART_DMA_Instance_RX.Request.Stream->CR &= ~DMA_SxCR_EN;
 800029a:	4b16      	ldr	r3, [pc, #88]	@ (80002f4 <UART4_IRQHandler+0x74>)
 800029c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b14      	ldr	r3, [pc, #80]	@ (80002f4 <UART4_IRQHandler+0x74>)
 80002a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80002a4:	f022 0201 	bic.w	r2, r2, #1
 80002a8:	601a      	str	r2, [r3, #0]

		RX_Length = RX_Buffer_Length - serial.USART_DMA_Instance_RX.Request.Stream->NDTR;
 80002aa:	4b12      	ldr	r3, [pc, #72]	@ (80002f4 <UART4_IRQHandler+0x74>)
 80002ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80002b4:	461a      	mov	r2, r3
 80002b6:	4b10      	ldr	r3, [pc, #64]	@ (80002f8 <UART4_IRQHandler+0x78>)
 80002b8:	601a      	str	r2, [r3, #0]

		serial.USART_DMA_Instance_RX.Request.Stream -> NDTR &= RX_Buffer_Length;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	@ (80002f4 <UART4_IRQHandler+0x74>)
 80002bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <UART4_IRQHandler+0x74>)
 80002c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80002c4:	f002 0264 	and.w	r2, r2, #100	@ 0x64
 80002c8:	605a      	str	r2, [r3, #4]
		serial.USART_DMA_Instance_RX.Request.Stream -> CR |= DMA_SxCR_EN;
 80002ca:	4b0a      	ldr	r3, [pc, #40]	@ (80002f4 <UART4_IRQHandler+0x74>)
 80002cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	4b08      	ldr	r3, [pc, #32]	@ (80002f4 <UART4_IRQHandler+0x74>)
 80002d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80002d4:	f042 0201 	orr.w	r2, r2, #1
 80002d8:	601a      	str	r2, [r3, #0]

		rx_flag = 1;
 80002da:	4b08      	ldr	r3, [pc, #32]	@ (80002fc <UART4_IRQHandler+0x7c>)
 80002dc:	2201      	movs	r2, #1
 80002de:	601a      	str	r2, [r3, #0]
	}

}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	20000088 	.word	0x20000088
 80002f0:	40004c00 	.word	0x40004c00
 80002f4:	20000094 	.word	0x20000094
 80002f8:	20000090 	.word	0x20000090
 80002fc:	2000008c 	.word	0x2000008c

08000300 <DMA1_Stream0_IRQHandler>:
 * status flags for FIFO error, direct mode error, transfer error, half
 * transfer complete, and transfer complete, and clears the respective
 * interrupt flag after handling it.
 */
void DMA1_Stream0_IRQHandler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF0)
 8000304:	4b54      	ldr	r3, [pc, #336]	@ (8000458 <DMA1_Stream0_IRQHandler+0x158>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d01a      	beq.n	8000346 <DMA1_Stream0_IRQHandler+0x46>
	{
		TIM5_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000310:	4b52      	ldr	r3, [pc, #328]	@ (800045c <DMA1_Stream0_IRQHandler+0x15c>)
 8000312:	2201      	movs	r2, #1
 8000314:	715a      	strb	r2, [r3, #5]
		TIM4_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000316:	4b52      	ldr	r3, [pc, #328]	@ (8000460 <DMA1_Stream0_IRQHandler+0x160>)
 8000318:	2201      	movs	r2, #1
 800031a:	715a      	strb	r2, [r3, #5]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 800031c:	4b51      	ldr	r3, [pc, #324]	@ (8000464 <DMA1_Stream0_IRQHandler+0x164>)
 800031e:	2201      	movs	r2, #1
 8000320:	715a      	strb	r2, [r3, #5]
		USART5_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000322:	4b51      	ldr	r3, [pc, #324]	@ (8000468 <DMA1_Stream0_IRQHandler+0x168>)
 8000324:	2201      	movs	r2, #1
 8000326:	715a      	strb	r2, [r3, #5]
		I2C1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000328:	4b50      	ldr	r3, [pc, #320]	@ (800046c <DMA1_Stream0_IRQHandler+0x16c>)
 800032a:	2201      	movs	r2, #1
 800032c:	715a      	strb	r2, [r3, #5]
		SPI3_RX_DMA_Flag.Fifo_Error_Flag = true;
 800032e:	4b50      	ldr	r3, [pc, #320]	@ (8000470 <DMA1_Stream0_IRQHandler+0x170>)
 8000330:	2201      	movs	r2, #1
 8000332:	715a      	strb	r2, [r3, #5]
		DMA1_Stream0_Flag.Fifo_Error_Flag = true;
 8000334:	4b4f      	ldr	r3, [pc, #316]	@ (8000474 <DMA1_Stream0_IRQHandler+0x174>)
 8000336:	2201      	movs	r2, #1
 8000338:	715a      	strb	r2, [r3, #5]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 800033a:	4b47      	ldr	r3, [pc, #284]	@ (8000458 <DMA1_Stream0_IRQHandler+0x158>)
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	4a46      	ldr	r2, [pc, #280]	@ (8000458 <DMA1_Stream0_IRQHandler+0x158>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF0)
 8000346:	4b44      	ldr	r3, [pc, #272]	@ (8000458 <DMA1_Stream0_IRQHandler+0x158>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f003 0304 	and.w	r3, r3, #4
 800034e:	2b00      	cmp	r3, #0
 8000350:	d01a      	beq.n	8000388 <DMA1_Stream0_IRQHandler+0x88>
	{
		TIM5_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000352:	4b42      	ldr	r3, [pc, #264]	@ (800045c <DMA1_Stream0_IRQHandler+0x15c>)
 8000354:	2201      	movs	r2, #1
 8000356:	711a      	strb	r2, [r3, #4]
		TIM4_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000358:	4b41      	ldr	r3, [pc, #260]	@ (8000460 <DMA1_Stream0_IRQHandler+0x160>)
 800035a:	2201      	movs	r2, #1
 800035c:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800035e:	4b41      	ldr	r3, [pc, #260]	@ (8000464 <DMA1_Stream0_IRQHandler+0x164>)
 8000360:	2201      	movs	r2, #1
 8000362:	711a      	strb	r2, [r3, #4]
		USART5_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000364:	4b40      	ldr	r3, [pc, #256]	@ (8000468 <DMA1_Stream0_IRQHandler+0x168>)
 8000366:	2201      	movs	r2, #1
 8000368:	711a      	strb	r2, [r3, #4]
		I2C1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800036a:	4b40      	ldr	r3, [pc, #256]	@ (800046c <DMA1_Stream0_IRQHandler+0x16c>)
 800036c:	2201      	movs	r2, #1
 800036e:	711a      	strb	r2, [r3, #4]
		SPI3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000370:	4b3f      	ldr	r3, [pc, #252]	@ (8000470 <DMA1_Stream0_IRQHandler+0x170>)
 8000372:	2201      	movs	r2, #1
 8000374:	711a      	strb	r2, [r3, #4]
		DMA1_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8000376:	4b3f      	ldr	r3, [pc, #252]	@ (8000474 <DMA1_Stream0_IRQHandler+0x174>)
 8000378:	2201      	movs	r2, #1
 800037a:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 800037c:	4b36      	ldr	r3, [pc, #216]	@ (8000458 <DMA1_Stream0_IRQHandler+0x158>)
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	4a35      	ldr	r2, [pc, #212]	@ (8000458 <DMA1_Stream0_IRQHandler+0x158>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF0)
 8000388:	4b33      	ldr	r3, [pc, #204]	@ (8000458 <DMA1_Stream0_IRQHandler+0x158>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f003 0308 	and.w	r3, r3, #8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d01a      	beq.n	80003ca <DMA1_Stream0_IRQHandler+0xca>
	{
		TIM5_CH3_DMA_Flag.Transfer_Error_Flag= true;
 8000394:	4b31      	ldr	r3, [pc, #196]	@ (800045c <DMA1_Stream0_IRQHandler+0x15c>)
 8000396:	2201      	movs	r2, #1
 8000398:	70da      	strb	r2, [r3, #3]
		TIM4_CH1_DMA_Flag.Transfer_Error_Flag = true;
 800039a:	4b31      	ldr	r3, [pc, #196]	@ (8000460 <DMA1_Stream0_IRQHandler+0x160>)
 800039c:	2201      	movs	r2, #1
 800039e:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 80003a0:	4b30      	ldr	r3, [pc, #192]	@ (8000464 <DMA1_Stream0_IRQHandler+0x164>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	70da      	strb	r2, [r3, #3]
		USART5_RX_DMA_Flag.Transfer_Error_Flag = true;
 80003a6:	4b30      	ldr	r3, [pc, #192]	@ (8000468 <DMA1_Stream0_IRQHandler+0x168>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	70da      	strb	r2, [r3, #3]
		I2C1_RX_DMA_Flag.Transfer_Error_Flag = true;
 80003ac:	4b2f      	ldr	r3, [pc, #188]	@ (800046c <DMA1_Stream0_IRQHandler+0x16c>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	70da      	strb	r2, [r3, #3]
		SPI3_RX_DMA_Flag.Transfer_Error_Flag = true;
 80003b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000470 <DMA1_Stream0_IRQHandler+0x170>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	70da      	strb	r2, [r3, #3]
		DMA1_Stream0_Flag.Transfer_Error_Flag = true;
 80003b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000474 <DMA1_Stream0_IRQHandler+0x174>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 80003be:	4b26      	ldr	r3, [pc, #152]	@ (8000458 <DMA1_Stream0_IRQHandler+0x158>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	4a25      	ldr	r2, [pc, #148]	@ (8000458 <DMA1_Stream0_IRQHandler+0x158>)
 80003c4:	f043 0308 	orr.w	r3, r3, #8
 80003c8:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF0)
 80003ca:	4b23      	ldr	r3, [pc, #140]	@ (8000458 <DMA1_Stream0_IRQHandler+0x158>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f003 0310 	and.w	r3, r3, #16
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d01a      	beq.n	800040c <DMA1_Stream0_IRQHandler+0x10c>
	{
		TIM5_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80003d6:	4b21      	ldr	r3, [pc, #132]	@ (800045c <DMA1_Stream0_IRQHandler+0x15c>)
 80003d8:	2201      	movs	r2, #1
 80003da:	709a      	strb	r2, [r3, #2]
		TIM4_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80003dc:	4b20      	ldr	r3, [pc, #128]	@ (8000460 <DMA1_Stream0_IRQHandler+0x160>)
 80003de:	2201      	movs	r2, #1
 80003e0:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80003e2:	4b20      	ldr	r3, [pc, #128]	@ (8000464 <DMA1_Stream0_IRQHandler+0x164>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	709a      	strb	r2, [r3, #2]
		USART5_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80003e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000468 <DMA1_Stream0_IRQHandler+0x168>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	709a      	strb	r2, [r3, #2]
		I2C1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80003ee:	4b1f      	ldr	r3, [pc, #124]	@ (800046c <DMA1_Stream0_IRQHandler+0x16c>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	709a      	strb	r2, [r3, #2]
		SPI3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80003f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000470 <DMA1_Stream0_IRQHandler+0x170>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	709a      	strb	r2, [r3, #2]
		DMA1_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 80003fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000474 <DMA1_Stream0_IRQHandler+0x174>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000400:	4b15      	ldr	r3, [pc, #84]	@ (8000458 <DMA1_Stream0_IRQHandler+0x158>)
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	4a14      	ldr	r2, [pc, #80]	@ (8000458 <DMA1_Stream0_IRQHandler+0x158>)
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF0)
 800040c:	4b12      	ldr	r3, [pc, #72]	@ (8000458 <DMA1_Stream0_IRQHandler+0x158>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f003 0320 	and.w	r3, r3, #32
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01a      	beq.n	800044e <DMA1_Stream0_IRQHandler+0x14e>
	{
		TIM5_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000418:	4b10      	ldr	r3, [pc, #64]	@ (800045c <DMA1_Stream0_IRQHandler+0x15c>)
 800041a:	2201      	movs	r2, #1
 800041c:	705a      	strb	r2, [r3, #1]
		TIM4_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 800041e:	4b10      	ldr	r3, [pc, #64]	@ (8000460 <DMA1_Stream0_IRQHandler+0x160>)
 8000420:	2201      	movs	r2, #1
 8000422:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000424:	4b0f      	ldr	r3, [pc, #60]	@ (8000464 <DMA1_Stream0_IRQHandler+0x164>)
 8000426:	2201      	movs	r2, #1
 8000428:	705a      	strb	r2, [r3, #1]
		USART5_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800042a:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <DMA1_Stream0_IRQHandler+0x168>)
 800042c:	2201      	movs	r2, #1
 800042e:	705a      	strb	r2, [r3, #1]
		I2C1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000430:	4b0e      	ldr	r3, [pc, #56]	@ (800046c <DMA1_Stream0_IRQHandler+0x16c>)
 8000432:	2201      	movs	r2, #1
 8000434:	705a      	strb	r2, [r3, #1]
		SPI3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000436:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <DMA1_Stream0_IRQHandler+0x170>)
 8000438:	2201      	movs	r2, #1
 800043a:	705a      	strb	r2, [r3, #1]
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
 800043c:	4b0d      	ldr	r3, [pc, #52]	@ (8000474 <DMA1_Stream0_IRQHandler+0x174>)
 800043e:	2201      	movs	r2, #1
 8000440:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000442:	4b05      	ldr	r3, [pc, #20]	@ (8000458 <DMA1_Stream0_IRQHandler+0x158>)
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	4a04      	ldr	r2, [pc, #16]	@ (8000458 <DMA1_Stream0_IRQHandler+0x158>)
 8000448:	f043 0320 	orr.w	r3, r3, #32
 800044c:	6093      	str	r3, [r2, #8]
	}
}
 800044e:	bf00      	nop
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	40026000 	.word	0x40026000
 800045c:	200002c0 	.word	0x200002c0
 8000460:	200002a0 	.word	0x200002a0
 8000464:	200001e0 	.word	0x200001e0
 8000468:	200001b8 	.word	0x200001b8
 800046c:	20000130 	.word	0x20000130
 8000470:	20000160 	.word	0x20000160
 8000474:	20000308 	.word	0x20000308

08000478 <DMA1_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream1_IRQHandler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF1)
 800047c:	4b45      	ldr	r3, [pc, #276]	@ (8000594 <DMA1_Stream1_IRQHandler+0x11c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000484:	2b00      	cmp	r3, #0
 8000486:	d014      	beq.n	80004b2 <DMA1_Stream1_IRQHandler+0x3a>
	{
		TIM2_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000488:	4b43      	ldr	r3, [pc, #268]	@ (8000598 <DMA1_Stream1_IRQHandler+0x120>)
 800048a:	2201      	movs	r2, #1
 800048c:	715a      	strb	r2, [r3, #5]
		TIM6_UP_DMA_Flag.Fifo_Error_Flag = true;
 800048e:	4b43      	ldr	r3, [pc, #268]	@ (800059c <DMA1_Stream1_IRQHandler+0x124>)
 8000490:	2201      	movs	r2, #1
 8000492:	715a      	strb	r2, [r3, #5]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000494:	4b42      	ldr	r3, [pc, #264]	@ (80005a0 <DMA1_Stream1_IRQHandler+0x128>)
 8000496:	2201      	movs	r2, #1
 8000498:	715a      	strb	r2, [r3, #5]
		USART3_RX_DMA_Flag.Fifo_Error_Flag = true;
 800049a:	4b42      	ldr	r3, [pc, #264]	@ (80005a4 <DMA1_Stream1_IRQHandler+0x12c>)
 800049c:	2201      	movs	r2, #1
 800049e:	715a      	strb	r2, [r3, #5]
		DMA1_Stream1_Flag.Fifo_Error_Flag = true;
 80004a0:	4b41      	ldr	r3, [pc, #260]	@ (80005a8 <DMA1_Stream1_IRQHandler+0x130>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	715a      	strb	r2, [r3, #5]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80004a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000594 <DMA1_Stream1_IRQHandler+0x11c>)
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	4a3a      	ldr	r2, [pc, #232]	@ (8000594 <DMA1_Stream1_IRQHandler+0x11c>)
 80004ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004b0:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF1)
 80004b2:	4b38      	ldr	r3, [pc, #224]	@ (8000594 <DMA1_Stream1_IRQHandler+0x11c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d014      	beq.n	80004e8 <DMA1_Stream1_IRQHandler+0x70>
	{
		TIM2_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 80004be:	4b36      	ldr	r3, [pc, #216]	@ (8000598 <DMA1_Stream1_IRQHandler+0x120>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	711a      	strb	r2, [r3, #4]
		TIM6_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 80004c4:	4b35      	ldr	r3, [pc, #212]	@ (800059c <DMA1_Stream1_IRQHandler+0x124>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80004ca:	4b35      	ldr	r3, [pc, #212]	@ (80005a0 <DMA1_Stream1_IRQHandler+0x128>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	711a      	strb	r2, [r3, #4]
		USART3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80004d0:	4b34      	ldr	r3, [pc, #208]	@ (80005a4 <DMA1_Stream1_IRQHandler+0x12c>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	711a      	strb	r2, [r3, #4]
		DMA1_Stream1_Flag.Direct_Mode_Error_Flag = true;
 80004d6:	4b34      	ldr	r3, [pc, #208]	@ (80005a8 <DMA1_Stream1_IRQHandler+0x130>)
 80004d8:	2201      	movs	r2, #1
 80004da:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80004dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000594 <DMA1_Stream1_IRQHandler+0x11c>)
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	4a2c      	ldr	r2, [pc, #176]	@ (8000594 <DMA1_Stream1_IRQHandler+0x11c>)
 80004e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004e6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF1)
 80004e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000594 <DMA1_Stream1_IRQHandler+0x11c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d014      	beq.n	800051e <DMA1_Stream1_IRQHandler+0xa6>
	{
		TIM2_CH3_DMA_Flag.Transfer_Error_Flag = true;
 80004f4:	4b28      	ldr	r3, [pc, #160]	@ (8000598 <DMA1_Stream1_IRQHandler+0x120>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	70da      	strb	r2, [r3, #3]
		TIM6_UP_DMA_Flag.Transfer_Error_Flag = true;
 80004fa:	4b28      	ldr	r3, [pc, #160]	@ (800059c <DMA1_Stream1_IRQHandler+0x124>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000500:	4b27      	ldr	r3, [pc, #156]	@ (80005a0 <DMA1_Stream1_IRQHandler+0x128>)
 8000502:	2201      	movs	r2, #1
 8000504:	70da      	strb	r2, [r3, #3]
		USART3_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000506:	4b27      	ldr	r3, [pc, #156]	@ (80005a4 <DMA1_Stream1_IRQHandler+0x12c>)
 8000508:	2201      	movs	r2, #1
 800050a:	70da      	strb	r2, [r3, #3]
		DMA1_Stream1_Flag.Transfer_Error_Flag = true;
 800050c:	4b26      	ldr	r3, [pc, #152]	@ (80005a8 <DMA1_Stream1_IRQHandler+0x130>)
 800050e:	2201      	movs	r2, #1
 8000510:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000512:	4b20      	ldr	r3, [pc, #128]	@ (8000594 <DMA1_Stream1_IRQHandler+0x11c>)
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	4a1f      	ldr	r2, [pc, #124]	@ (8000594 <DMA1_Stream1_IRQHandler+0x11c>)
 8000518:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800051c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF1)
 800051e:	4b1d      	ldr	r3, [pc, #116]	@ (8000594 <DMA1_Stream1_IRQHandler+0x11c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000526:	2b00      	cmp	r3, #0
 8000528:	d014      	beq.n	8000554 <DMA1_Stream1_IRQHandler+0xdc>
	{
		TIM2_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800052a:	4b1b      	ldr	r3, [pc, #108]	@ (8000598 <DMA1_Stream1_IRQHandler+0x120>)
 800052c:	2201      	movs	r2, #1
 800052e:	709a      	strb	r2, [r3, #2]
		TIM6_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000530:	4b1a      	ldr	r3, [pc, #104]	@ (800059c <DMA1_Stream1_IRQHandler+0x124>)
 8000532:	2201      	movs	r2, #1
 8000534:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000536:	4b1a      	ldr	r3, [pc, #104]	@ (80005a0 <DMA1_Stream1_IRQHandler+0x128>)
 8000538:	2201      	movs	r2, #1
 800053a:	709a      	strb	r2, [r3, #2]
		USART3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800053c:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <DMA1_Stream1_IRQHandler+0x12c>)
 800053e:	2201      	movs	r2, #1
 8000540:	709a      	strb	r2, [r3, #2]
		DMA1_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8000542:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <DMA1_Stream1_IRQHandler+0x130>)
 8000544:	2201      	movs	r2, #1
 8000546:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000548:	4b12      	ldr	r3, [pc, #72]	@ (8000594 <DMA1_Stream1_IRQHandler+0x11c>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	4a11      	ldr	r2, [pc, #68]	@ (8000594 <DMA1_Stream1_IRQHandler+0x11c>)
 800054e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000552:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF1)
 8000554:	4b0f      	ldr	r3, [pc, #60]	@ (8000594 <DMA1_Stream1_IRQHandler+0x11c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800055c:	2b00      	cmp	r3, #0
 800055e:	d014      	beq.n	800058a <DMA1_Stream1_IRQHandler+0x112>
	{
		TIM2_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000560:	4b0d      	ldr	r3, [pc, #52]	@ (8000598 <DMA1_Stream1_IRQHandler+0x120>)
 8000562:	2201      	movs	r2, #1
 8000564:	705a      	strb	r2, [r3, #1]
		TIM6_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8000566:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <DMA1_Stream1_IRQHandler+0x124>)
 8000568:	2201      	movs	r2, #1
 800056a:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800056c:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <DMA1_Stream1_IRQHandler+0x128>)
 800056e:	2201      	movs	r2, #1
 8000570:	705a      	strb	r2, [r3, #1]
		USART3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <DMA1_Stream1_IRQHandler+0x12c>)
 8000574:	2201      	movs	r2, #1
 8000576:	705a      	strb	r2, [r3, #1]
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <DMA1_Stream1_IRQHandler+0x130>)
 800057a:	2201      	movs	r2, #1
 800057c:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 800057e:	4b05      	ldr	r3, [pc, #20]	@ (8000594 <DMA1_Stream1_IRQHandler+0x11c>)
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	4a04      	ldr	r2, [pc, #16]	@ (8000594 <DMA1_Stream1_IRQHandler+0x11c>)
 8000584:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000588:	6093      	str	r3, [r2, #8]
	}
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40026000 	.word	0x40026000
 8000598:	20000270 	.word	0x20000270
 800059c:	200002d0 	.word	0x200002d0
 80005a0:	200001d8 	.word	0x200001d8
 80005a4:	200001a0 	.word	0x200001a0
 80005a8:	20000310 	.word	0x20000310

080005ac <DMA1_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream2_IRQHandler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF2)
 80005b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000670 <DMA1_Stream2_IRQHandler+0xc4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00b      	beq.n	80005d4 <DMA1_Stream2_IRQHandler+0x28>
	{
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80005bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000674 <DMA1_Stream2_IRQHandler+0xc8>)
 80005be:	2201      	movs	r2, #1
 80005c0:	715a      	strb	r2, [r3, #5]
		DMA1_Stream2_Flag.Fifo_Error_Flag = true;
 80005c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000678 <DMA1_Stream2_IRQHandler+0xcc>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	715a      	strb	r2, [r3, #5]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80005c8:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <DMA1_Stream2_IRQHandler+0xc4>)
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	4a28      	ldr	r2, [pc, #160]	@ (8000670 <DMA1_Stream2_IRQHandler+0xc4>)
 80005ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005d2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF2)
 80005d4:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <DMA1_Stream2_IRQHandler+0xc4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00b      	beq.n	80005f8 <DMA1_Stream2_IRQHandler+0x4c>
	{
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005e0:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <DMA1_Stream2_IRQHandler+0xc8>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	711a      	strb	r2, [r3, #4]
		DMA1_Stream2_Flag.Direct_Mode_Error_Flag = true;
 80005e6:	4b24      	ldr	r3, [pc, #144]	@ (8000678 <DMA1_Stream2_IRQHandler+0xcc>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 80005ec:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <DMA1_Stream2_IRQHandler+0xc4>)
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	4a1f      	ldr	r2, [pc, #124]	@ (8000670 <DMA1_Stream2_IRQHandler+0xc4>)
 80005f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005f6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF2)
 80005f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <DMA1_Stream2_IRQHandler+0xc4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <DMA1_Stream2_IRQHandler+0x70>
	{
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000604:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <DMA1_Stream2_IRQHandler+0xc8>)
 8000606:	2201      	movs	r2, #1
 8000608:	70da      	strb	r2, [r3, #3]
		DMA1_Stream2_Flag.Transfer_Error_Flag = true;
 800060a:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <DMA1_Stream2_IRQHandler+0xcc>)
 800060c:	2201      	movs	r2, #1
 800060e:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8000610:	4b17      	ldr	r3, [pc, #92]	@ (8000670 <DMA1_Stream2_IRQHandler+0xc4>)
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	4a16      	ldr	r2, [pc, #88]	@ (8000670 <DMA1_Stream2_IRQHandler+0xc4>)
 8000616:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800061a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF2)
 800061c:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <DMA1_Stream2_IRQHandler+0xc4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00b      	beq.n	8000640 <DMA1_Stream2_IRQHandler+0x94>
	{
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <DMA1_Stream2_IRQHandler+0xc8>)
 800062a:	2201      	movs	r2, #1
 800062c:	709a      	strb	r2, [r3, #2]
		DMA1_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 800062e:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <DMA1_Stream2_IRQHandler+0xcc>)
 8000630:	2201      	movs	r2, #1
 8000632:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8000634:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <DMA1_Stream2_IRQHandler+0xc4>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a0d      	ldr	r2, [pc, #52]	@ (8000670 <DMA1_Stream2_IRQHandler+0xc4>)
 800063a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800063e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF2)
 8000640:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <DMA1_Stream2_IRQHandler+0xc4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000648:	2b00      	cmp	r3, #0
 800064a:	d00b      	beq.n	8000664 <DMA1_Stream2_IRQHandler+0xb8>
	{
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <DMA1_Stream2_IRQHandler+0xc8>)
 800064e:	2201      	movs	r2, #1
 8000650:	705a      	strb	r2, [r3, #1]
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <DMA1_Stream2_IRQHandler+0xcc>)
 8000654:	2201      	movs	r2, #1
 8000656:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <DMA1_Stream2_IRQHandler+0xc4>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <DMA1_Stream2_IRQHandler+0xc4>)
 800065e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000662:	6093      	str	r3, [r2, #8]
	}
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40026000 	.word	0x40026000
 8000674:	200001a8 	.word	0x200001a8
 8000678:	20000318 	.word	0x20000318

0800067c <DMA1_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream3_IRQHandler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF3)
 8000680:	4b54      	ldr	r3, [pc, #336]	@ (80007d4 <DMA1_Stream3_IRQHandler+0x158>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000688:	2b00      	cmp	r3, #0
 800068a:	d01a      	beq.n	80006c2 <DMA1_Stream3_IRQHandler+0x46>
	{
		TIM5_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 800068c:	4b52      	ldr	r3, [pc, #328]	@ (80007d8 <DMA1_Stream3_IRQHandler+0x15c>)
 800068e:	2201      	movs	r2, #1
 8000690:	715a      	strb	r2, [r3, #5]
		TIM4_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000692:	4b52      	ldr	r3, [pc, #328]	@ (80007dc <DMA1_Stream3_IRQHandler+0x160>)
 8000694:	2201      	movs	r2, #1
 8000696:	715a      	strb	r2, [r3, #5]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000698:	4b51      	ldr	r3, [pc, #324]	@ (80007e0 <DMA1_Stream3_IRQHandler+0x164>)
 800069a:	2201      	movs	r2, #1
 800069c:	715a      	strb	r2, [r3, #5]
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 800069e:	4b51      	ldr	r3, [pc, #324]	@ (80007e4 <DMA1_Stream3_IRQHandler+0x168>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	715a      	strb	r2, [r3, #5]
		I2S2_RX_DMA_Flag.Fifo_Error_Flag = true;
 80006a4:	4b50      	ldr	r3, [pc, #320]	@ (80007e8 <DMA1_Stream3_IRQHandler+0x16c>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	715a      	strb	r2, [r3, #5]
		SPI2_RX_DMA_Flag.Fifo_Error_Flag = true;
 80006aa:	4b50      	ldr	r3, [pc, #320]	@ (80007ec <DMA1_Stream3_IRQHandler+0x170>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	715a      	strb	r2, [r3, #5]
		DMA1_Stream3_Flag.Fifo_Error_Flag = true;
 80006b0:	4b4f      	ldr	r3, [pc, #316]	@ (80007f0 <DMA1_Stream3_IRQHandler+0x174>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	715a      	strb	r2, [r3, #5]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80006b6:	4b47      	ldr	r3, [pc, #284]	@ (80007d4 <DMA1_Stream3_IRQHandler+0x158>)
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	4a46      	ldr	r2, [pc, #280]	@ (80007d4 <DMA1_Stream3_IRQHandler+0x158>)
 80006bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006c0:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF3)
 80006c2:	4b44      	ldr	r3, [pc, #272]	@ (80007d4 <DMA1_Stream3_IRQHandler+0x158>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d01a      	beq.n	8000704 <DMA1_Stream3_IRQHandler+0x88>
	{
		TIM5_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 80006ce:	4b42      	ldr	r3, [pc, #264]	@ (80007d8 <DMA1_Stream3_IRQHandler+0x15c>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	711a      	strb	r2, [r3, #4]
		TIM4_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80006d4:	4b41      	ldr	r3, [pc, #260]	@ (80007dc <DMA1_Stream3_IRQHandler+0x160>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80006da:	4b41      	ldr	r3, [pc, #260]	@ (80007e0 <DMA1_Stream3_IRQHandler+0x164>)
 80006dc:	2201      	movs	r2, #1
 80006de:	711a      	strb	r2, [r3, #4]
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80006e0:	4b40      	ldr	r3, [pc, #256]	@ (80007e4 <DMA1_Stream3_IRQHandler+0x168>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	711a      	strb	r2, [r3, #4]
		I2S2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80006e6:	4b40      	ldr	r3, [pc, #256]	@ (80007e8 <DMA1_Stream3_IRQHandler+0x16c>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	711a      	strb	r2, [r3, #4]
		SPI2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80006ec:	4b3f      	ldr	r3, [pc, #252]	@ (80007ec <DMA1_Stream3_IRQHandler+0x170>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	711a      	strb	r2, [r3, #4]
		DMA1_Stream3_Flag.Direct_Mode_Error_Flag = true;
 80006f2:	4b3f      	ldr	r3, [pc, #252]	@ (80007f0 <DMA1_Stream3_IRQHandler+0x174>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80006f8:	4b36      	ldr	r3, [pc, #216]	@ (80007d4 <DMA1_Stream3_IRQHandler+0x158>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	4a35      	ldr	r2, [pc, #212]	@ (80007d4 <DMA1_Stream3_IRQHandler+0x158>)
 80006fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000702:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF3)
 8000704:	4b33      	ldr	r3, [pc, #204]	@ (80007d4 <DMA1_Stream3_IRQHandler+0x158>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800070c:	2b00      	cmp	r3, #0
 800070e:	d01a      	beq.n	8000746 <DMA1_Stream3_IRQHandler+0xca>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000710:	4b31      	ldr	r3, [pc, #196]	@ (80007d8 <DMA1_Stream3_IRQHandler+0x15c>)
 8000712:	2201      	movs	r2, #1
 8000714:	70da      	strb	r2, [r3, #3]
		TIM4_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8000716:	4b31      	ldr	r3, [pc, #196]	@ (80007dc <DMA1_Stream3_IRQHandler+0x160>)
 8000718:	2201      	movs	r2, #1
 800071a:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 800071c:	4b30      	ldr	r3, [pc, #192]	@ (80007e0 <DMA1_Stream3_IRQHandler+0x164>)
 800071e:	2201      	movs	r2, #1
 8000720:	70da      	strb	r2, [r3, #3]
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000722:	4b30      	ldr	r3, [pc, #192]	@ (80007e4 <DMA1_Stream3_IRQHandler+0x168>)
 8000724:	2201      	movs	r2, #1
 8000726:	70da      	strb	r2, [r3, #3]
		I2S2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000728:	4b2f      	ldr	r3, [pc, #188]	@ (80007e8 <DMA1_Stream3_IRQHandler+0x16c>)
 800072a:	2201      	movs	r2, #1
 800072c:	70da      	strb	r2, [r3, #3]
		SPI2_RX_DMA_Flag.Transfer_Error_Flag = true;
 800072e:	4b2f      	ldr	r3, [pc, #188]	@ (80007ec <DMA1_Stream3_IRQHandler+0x170>)
 8000730:	2201      	movs	r2, #1
 8000732:	70da      	strb	r2, [r3, #3]
		DMA1_Stream3_Flag.Transfer_Error_Flag = true;
 8000734:	4b2e      	ldr	r3, [pc, #184]	@ (80007f0 <DMA1_Stream3_IRQHandler+0x174>)
 8000736:	2201      	movs	r2, #1
 8000738:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 800073a:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <DMA1_Stream3_IRQHandler+0x158>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	4a25      	ldr	r2, [pc, #148]	@ (80007d4 <DMA1_Stream3_IRQHandler+0x158>)
 8000740:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000744:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF3)
 8000746:	4b23      	ldr	r3, [pc, #140]	@ (80007d4 <DMA1_Stream3_IRQHandler+0x158>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800074e:	2b00      	cmp	r3, #0
 8000750:	d01a      	beq.n	8000788 <DMA1_Stream3_IRQHandler+0x10c>
	{
		TIM5_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000752:	4b21      	ldr	r3, [pc, #132]	@ (80007d8 <DMA1_Stream3_IRQHandler+0x15c>)
 8000754:	2201      	movs	r2, #1
 8000756:	709a      	strb	r2, [r3, #2]
		TIM4_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000758:	4b20      	ldr	r3, [pc, #128]	@ (80007dc <DMA1_Stream3_IRQHandler+0x160>)
 800075a:	2201      	movs	r2, #1
 800075c:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <DMA1_Stream3_IRQHandler+0x164>)
 8000760:	2201      	movs	r2, #1
 8000762:	709a      	strb	r2, [r3, #2]
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000764:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <DMA1_Stream3_IRQHandler+0x168>)
 8000766:	2201      	movs	r2, #1
 8000768:	709a      	strb	r2, [r3, #2]
		I2S2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <DMA1_Stream3_IRQHandler+0x16c>)
 800076c:	2201      	movs	r2, #1
 800076e:	709a      	strb	r2, [r3, #2]
		SPI2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000770:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <DMA1_Stream3_IRQHandler+0x170>)
 8000772:	2201      	movs	r2, #1
 8000774:	709a      	strb	r2, [r3, #2]
		DMA1_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8000776:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <DMA1_Stream3_IRQHandler+0x174>)
 8000778:	2201      	movs	r2, #1
 800077a:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 800077c:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <DMA1_Stream3_IRQHandler+0x158>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	4a14      	ldr	r2, [pc, #80]	@ (80007d4 <DMA1_Stream3_IRQHandler+0x158>)
 8000782:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000786:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF3)
 8000788:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <DMA1_Stream3_IRQHandler+0x158>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000790:	2b00      	cmp	r3, #0
 8000792:	d01a      	beq.n	80007ca <DMA1_Stream3_IRQHandler+0x14e>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000794:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <DMA1_Stream3_IRQHandler+0x15c>)
 8000796:	2201      	movs	r2, #1
 8000798:	705a      	strb	r2, [r3, #1]
		TIM4_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <DMA1_Stream3_IRQHandler+0x160>)
 800079c:	2201      	movs	r2, #1
 800079e:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <DMA1_Stream3_IRQHandler+0x164>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	705a      	strb	r2, [r3, #1]
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <DMA1_Stream3_IRQHandler+0x168>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	705a      	strb	r2, [r3, #1]
		I2S2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <DMA1_Stream3_IRQHandler+0x16c>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	705a      	strb	r2, [r3, #1]
		SPI2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <DMA1_Stream3_IRQHandler+0x170>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	705a      	strb	r2, [r3, #1]
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <DMA1_Stream3_IRQHandler+0x174>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 80007be:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <DMA1_Stream3_IRQHandler+0x158>)
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	4a04      	ldr	r2, [pc, #16]	@ (80007d4 <DMA1_Stream3_IRQHandler+0x158>)
 80007c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80007c8:	6093      	str	r3, [r2, #8]
	}
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	40026000 	.word	0x40026000
 80007d8:	200002c8 	.word	0x200002c8
 80007dc:	200002a8 	.word	0x200002a8
 80007e0:	200001d8 	.word	0x200001d8
 80007e4:	200001a8 	.word	0x200001a8
 80007e8:	20000118 	.word	0x20000118
 80007ec:	20000158 	.word	0x20000158
 80007f0:	20000320 	.word	0x20000320

080007f4 <DMA1_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream4_IRQHandler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF4)
 80007f8:	4b54      	ldr	r3, [pc, #336]	@ (800094c <DMA1_Stream4_IRQHandler+0x158>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d01a      	beq.n	800083a <DMA1_Stream4_IRQHandler+0x46>
	{
		TIM5_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000804:	4b52      	ldr	r3, [pc, #328]	@ (8000950 <DMA1_Stream4_IRQHandler+0x15c>)
 8000806:	2201      	movs	r2, #1
 8000808:	715a      	strb	r2, [r3, #5]
		TIM3_CH1_DMA_Flag.Fifo_Error_Flag = true;
 800080a:	4b52      	ldr	r3, [pc, #328]	@ (8000954 <DMA1_Stream4_IRQHandler+0x160>)
 800080c:	2201      	movs	r2, #1
 800080e:	715a      	strb	r2, [r3, #5]
		USART4_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000810:	4b51      	ldr	r3, [pc, #324]	@ (8000958 <DMA1_Stream4_IRQHandler+0x164>)
 8000812:	2201      	movs	r2, #1
 8000814:	715a      	strb	r2, [r3, #5]
		I2C3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000816:	4b51      	ldr	r3, [pc, #324]	@ (800095c <DMA1_Stream4_IRQHandler+0x168>)
 8000818:	2201      	movs	r2, #1
 800081a:	715a      	strb	r2, [r3, #5]
		I2S2_TX_DMA_Flag.Fifo_Error_Flag = true;
 800081c:	4b50      	ldr	r3, [pc, #320]	@ (8000960 <DMA1_Stream4_IRQHandler+0x16c>)
 800081e:	2201      	movs	r2, #1
 8000820:	715a      	strb	r2, [r3, #5]
		SPI2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000822:	4b50      	ldr	r3, [pc, #320]	@ (8000964 <DMA1_Stream4_IRQHandler+0x170>)
 8000824:	2201      	movs	r2, #1
 8000826:	715a      	strb	r2, [r3, #5]
		DMA1_Stream4_Flag.Fifo_Error_Flag = true;
 8000828:	4b4f      	ldr	r3, [pc, #316]	@ (8000968 <DMA1_Stream4_IRQHandler+0x174>)
 800082a:	2201      	movs	r2, #1
 800082c:	715a      	strb	r2, [r3, #5]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF4;
 800082e:	4b47      	ldr	r3, [pc, #284]	@ (800094c <DMA1_Stream4_IRQHandler+0x158>)
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	4a46      	ldr	r2, [pc, #280]	@ (800094c <DMA1_Stream4_IRQHandler+0x158>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF4)
 800083a:	4b44      	ldr	r3, [pc, #272]	@ (800094c <DMA1_Stream4_IRQHandler+0x158>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	2b00      	cmp	r3, #0
 8000844:	d01a      	beq.n	800087c <DMA1_Stream4_IRQHandler+0x88>
	{
		TIM5_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000846:	4b42      	ldr	r3, [pc, #264]	@ (8000950 <DMA1_Stream4_IRQHandler+0x15c>)
 8000848:	2201      	movs	r2, #1
 800084a:	711a      	strb	r2, [r3, #4]
		TIM3_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 800084c:	4b41      	ldr	r3, [pc, #260]	@ (8000954 <DMA1_Stream4_IRQHandler+0x160>)
 800084e:	2201      	movs	r2, #1
 8000850:	711a      	strb	r2, [r3, #4]
		USART4_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000852:	4b41      	ldr	r3, [pc, #260]	@ (8000958 <DMA1_Stream4_IRQHandler+0x164>)
 8000854:	2201      	movs	r2, #1
 8000856:	711a      	strb	r2, [r3, #4]
		I2C3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000858:	4b40      	ldr	r3, [pc, #256]	@ (800095c <DMA1_Stream4_IRQHandler+0x168>)
 800085a:	2201      	movs	r2, #1
 800085c:	711a      	strb	r2, [r3, #4]
		I2S2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800085e:	4b40      	ldr	r3, [pc, #256]	@ (8000960 <DMA1_Stream4_IRQHandler+0x16c>)
 8000860:	2201      	movs	r2, #1
 8000862:	711a      	strb	r2, [r3, #4]
		SPI2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000864:	4b3f      	ldr	r3, [pc, #252]	@ (8000964 <DMA1_Stream4_IRQHandler+0x170>)
 8000866:	2201      	movs	r2, #1
 8000868:	711a      	strb	r2, [r3, #4]
		DMA1_Stream4_Flag.Direct_Mode_Error_Flag = true;
 800086a:	4b3f      	ldr	r3, [pc, #252]	@ (8000968 <DMA1_Stream4_IRQHandler+0x174>)
 800086c:	2201      	movs	r2, #1
 800086e:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8000870:	4b36      	ldr	r3, [pc, #216]	@ (800094c <DMA1_Stream4_IRQHandler+0x158>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	4a35      	ldr	r2, [pc, #212]	@ (800094c <DMA1_Stream4_IRQHandler+0x158>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF4)
 800087c:	4b33      	ldr	r3, [pc, #204]	@ (800094c <DMA1_Stream4_IRQHandler+0x158>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	2b00      	cmp	r3, #0
 8000886:	d01a      	beq.n	80008be <DMA1_Stream4_IRQHandler+0xca>
	{
		TIM5_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8000888:	4b31      	ldr	r3, [pc, #196]	@ (8000950 <DMA1_Stream4_IRQHandler+0x15c>)
 800088a:	2201      	movs	r2, #1
 800088c:	70da      	strb	r2, [r3, #3]
		TIM3_CH1_DMA_Flag.Transfer_Error_Flag = true;
 800088e:	4b31      	ldr	r3, [pc, #196]	@ (8000954 <DMA1_Stream4_IRQHandler+0x160>)
 8000890:	2201      	movs	r2, #1
 8000892:	70da      	strb	r2, [r3, #3]
		USART4_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000894:	4b30      	ldr	r3, [pc, #192]	@ (8000958 <DMA1_Stream4_IRQHandler+0x164>)
 8000896:	2201      	movs	r2, #1
 8000898:	70da      	strb	r2, [r3, #3]
		I2C3_TX_DMA_Flag.Transfer_Error_Flag = true;
 800089a:	4b30      	ldr	r3, [pc, #192]	@ (800095c <DMA1_Stream4_IRQHandler+0x168>)
 800089c:	2201      	movs	r2, #1
 800089e:	70da      	strb	r2, [r3, #3]
		I2S2_TX_DMA_Flag.Transfer_Error_Flag = true;
 80008a0:	4b2f      	ldr	r3, [pc, #188]	@ (8000960 <DMA1_Stream4_IRQHandler+0x16c>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	70da      	strb	r2, [r3, #3]
		SPI2_TX_DMA_Flag.Transfer_Error_Flag = true;
 80008a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000964 <DMA1_Stream4_IRQHandler+0x170>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	70da      	strb	r2, [r3, #3]
		DMA1_Stream4_Flag.Transfer_Error_Flag = true;
 80008ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000968 <DMA1_Stream4_IRQHandler+0x174>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80008b2:	4b26      	ldr	r3, [pc, #152]	@ (800094c <DMA1_Stream4_IRQHandler+0x158>)
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	4a25      	ldr	r2, [pc, #148]	@ (800094c <DMA1_Stream4_IRQHandler+0x158>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF4)
 80008be:	4b23      	ldr	r3, [pc, #140]	@ (800094c <DMA1_Stream4_IRQHandler+0x158>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 0310 	and.w	r3, r3, #16
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d01a      	beq.n	8000900 <DMA1_Stream4_IRQHandler+0x10c>
	{
		TIM5_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80008ca:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <DMA1_Stream4_IRQHandler+0x15c>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	709a      	strb	r2, [r3, #2]
		TIM3_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80008d0:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <DMA1_Stream4_IRQHandler+0x160>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	709a      	strb	r2, [r3, #2]
		USART4_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80008d6:	4b20      	ldr	r3, [pc, #128]	@ (8000958 <DMA1_Stream4_IRQHandler+0x164>)
 80008d8:	2201      	movs	r2, #1
 80008da:	709a      	strb	r2, [r3, #2]
		I2C3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <DMA1_Stream4_IRQHandler+0x168>)
 80008de:	2201      	movs	r2, #1
 80008e0:	709a      	strb	r2, [r3, #2]
		I2S2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <DMA1_Stream4_IRQHandler+0x16c>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	709a      	strb	r2, [r3, #2]
		SPI2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80008e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <DMA1_Stream4_IRQHandler+0x170>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	709a      	strb	r2, [r3, #2]
		DMA1_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 80008ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <DMA1_Stream4_IRQHandler+0x174>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80008f4:	4b15      	ldr	r3, [pc, #84]	@ (800094c <DMA1_Stream4_IRQHandler+0x158>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	4a14      	ldr	r2, [pc, #80]	@ (800094c <DMA1_Stream4_IRQHandler+0x158>)
 80008fa:	f043 0310 	orr.w	r3, r3, #16
 80008fe:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF4)
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <DMA1_Stream4_IRQHandler+0x158>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f003 0320 	and.w	r3, r3, #32
 8000908:	2b00      	cmp	r3, #0
 800090a:	d01a      	beq.n	8000942 <DMA1_Stream4_IRQHandler+0x14e>
	{
		TIM5_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 800090c:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <DMA1_Stream4_IRQHandler+0x15c>)
 800090e:	2201      	movs	r2, #1
 8000910:	705a      	strb	r2, [r3, #1]
		TIM3_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <DMA1_Stream4_IRQHandler+0x160>)
 8000914:	2201      	movs	r2, #1
 8000916:	705a      	strb	r2, [r3, #1]
		USART4_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <DMA1_Stream4_IRQHandler+0x164>)
 800091a:	2201      	movs	r2, #1
 800091c:	705a      	strb	r2, [r3, #1]
		I2C3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <DMA1_Stream4_IRQHandler+0x168>)
 8000920:	2201      	movs	r2, #1
 8000922:	705a      	strb	r2, [r3, #1]
		I2S2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000924:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <DMA1_Stream4_IRQHandler+0x16c>)
 8000926:	2201      	movs	r2, #1
 8000928:	705a      	strb	r2, [r3, #1]
		SPI2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <DMA1_Stream4_IRQHandler+0x170>)
 800092c:	2201      	movs	r2, #1
 800092e:	705a      	strb	r2, [r3, #1]
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
 8000930:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <DMA1_Stream4_IRQHandler+0x174>)
 8000932:	2201      	movs	r2, #1
 8000934:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8000936:	4b05      	ldr	r3, [pc, #20]	@ (800094c <DMA1_Stream4_IRQHandler+0x158>)
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	4a04      	ldr	r2, [pc, #16]	@ (800094c <DMA1_Stream4_IRQHandler+0x158>)
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	60d3      	str	r3, [r2, #12]
	}
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	40026000 	.word	0x40026000
 8000950:	200002b8 	.word	0x200002b8
 8000954:	20000280 	.word	0x20000280
 8000958:	200001b0 	.word	0x200001b0
 800095c:	20000148 	.word	0x20000148
 8000960:	20000120 	.word	0x20000120
 8000964:	20000170 	.word	0x20000170
 8000968:	20000328 	.word	0x20000328

0800096c <DMA1_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream5_IRQHandler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF5)
 8000970:	4b54      	ldr	r3, [pc, #336]	@ (8000ac4 <DMA1_Stream5_IRQHandler+0x158>)
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000978:	2b00      	cmp	r3, #0
 800097a:	d01a      	beq.n	80009b2 <DMA1_Stream5_IRQHandler+0x46>
	{
		SPI3_TX_DMA_Flag.Fifo_Error_Flag = true;
 800097c:	4b52      	ldr	r3, [pc, #328]	@ (8000ac8 <DMA1_Stream5_IRQHandler+0x15c>)
 800097e:	2201      	movs	r2, #1
 8000980:	715a      	strb	r2, [r3, #5]
		TIM3_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000982:	4b52      	ldr	r3, [pc, #328]	@ (8000acc <DMA1_Stream5_IRQHandler+0x160>)
 8000984:	2201      	movs	r2, #1
 8000986:	715a      	strb	r2, [r3, #5]
		TIM2_CH1_DMA_Flag.Fifo_Error_Flag =  true;
 8000988:	4b51      	ldr	r3, [pc, #324]	@ (8000ad0 <DMA1_Stream5_IRQHandler+0x164>)
 800098a:	2201      	movs	r2, #1
 800098c:	715a      	strb	r2, [r3, #5]
		DAC2_DMA_Flag.Fifo_Error_Flag = true;
 800098e:	4b51      	ldr	r3, [pc, #324]	@ (8000ad4 <DMA1_Stream5_IRQHandler+0x168>)
 8000990:	2201      	movs	r2, #1
 8000992:	715a      	strb	r2, [r3, #5]
		TIM3_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000994:	4b50      	ldr	r3, [pc, #320]	@ (8000ad8 <DMA1_Stream5_IRQHandler+0x16c>)
 8000996:	2201      	movs	r2, #1
 8000998:	715a      	strb	r2, [r3, #5]
		USART2_RX_DMA_Flag.Fifo_Error_Flag = true;
 800099a:	4b50      	ldr	r3, [pc, #320]	@ (8000adc <DMA1_Stream5_IRQHandler+0x170>)
 800099c:	2201      	movs	r2, #1
 800099e:	715a      	strb	r2, [r3, #5]
		DMA1_Stream5_Flag.Fifo_Error_Flag = true;
 80009a0:	4b4f      	ldr	r3, [pc, #316]	@ (8000ae0 <DMA1_Stream5_IRQHandler+0x174>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	715a      	strb	r2, [r3, #5]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 80009a6:	4b47      	ldr	r3, [pc, #284]	@ (8000ac4 <DMA1_Stream5_IRQHandler+0x158>)
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	4a46      	ldr	r2, [pc, #280]	@ (8000ac4 <DMA1_Stream5_IRQHandler+0x158>)
 80009ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009b0:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF5)
 80009b2:	4b44      	ldr	r3, [pc, #272]	@ (8000ac4 <DMA1_Stream5_IRQHandler+0x158>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d01a      	beq.n	80009f4 <DMA1_Stream5_IRQHandler+0x88>
	{
		SPI3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80009be:	4b42      	ldr	r3, [pc, #264]	@ (8000ac8 <DMA1_Stream5_IRQHandler+0x15c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	711a      	strb	r2, [r3, #4]
		TIM3_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 80009c4:	4b41      	ldr	r3, [pc, #260]	@ (8000acc <DMA1_Stream5_IRQHandler+0x160>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	711a      	strb	r2, [r3, #4]
		TIM2_CH1_DMA_Flag.Direct_Mode_Error_Flag =  true;
 80009ca:	4b41      	ldr	r3, [pc, #260]	@ (8000ad0 <DMA1_Stream5_IRQHandler+0x164>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	711a      	strb	r2, [r3, #4]
		DAC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80009d0:	4b40      	ldr	r3, [pc, #256]	@ (8000ad4 <DMA1_Stream5_IRQHandler+0x168>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	711a      	strb	r2, [r3, #4]
		TIM3_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80009d6:	4b40      	ldr	r3, [pc, #256]	@ (8000ad8 <DMA1_Stream5_IRQHandler+0x16c>)
 80009d8:	2201      	movs	r2, #1
 80009da:	711a      	strb	r2, [r3, #4]
		USART2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80009dc:	4b3f      	ldr	r3, [pc, #252]	@ (8000adc <DMA1_Stream5_IRQHandler+0x170>)
 80009de:	2201      	movs	r2, #1
 80009e0:	711a      	strb	r2, [r3, #4]
		DMA1_Stream5_Flag.Direct_Mode_Error_Flag = true;
 80009e2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae0 <DMA1_Stream5_IRQHandler+0x174>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80009e8:	4b36      	ldr	r3, [pc, #216]	@ (8000ac4 <DMA1_Stream5_IRQHandler+0x158>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	4a35      	ldr	r2, [pc, #212]	@ (8000ac4 <DMA1_Stream5_IRQHandler+0x158>)
 80009ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009f2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF5)
 80009f4:	4b33      	ldr	r3, [pc, #204]	@ (8000ac4 <DMA1_Stream5_IRQHandler+0x158>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d01a      	beq.n	8000a36 <DMA1_Stream5_IRQHandler+0xca>
	{
		SPI3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000a00:	4b31      	ldr	r3, [pc, #196]	@ (8000ac8 <DMA1_Stream5_IRQHandler+0x15c>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	70da      	strb	r2, [r3, #3]
		TIM3_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000a06:	4b31      	ldr	r3, [pc, #196]	@ (8000acc <DMA1_Stream5_IRQHandler+0x160>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	70da      	strb	r2, [r3, #3]
		TIM2_CH1_DMA_Flag.Transfer_Error_Flag =  true;
 8000a0c:	4b30      	ldr	r3, [pc, #192]	@ (8000ad0 <DMA1_Stream5_IRQHandler+0x164>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	70da      	strb	r2, [r3, #3]
		DAC2_DMA_Flag.Transfer_Error_Flag = true;
 8000a12:	4b30      	ldr	r3, [pc, #192]	@ (8000ad4 <DMA1_Stream5_IRQHandler+0x168>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	70da      	strb	r2, [r3, #3]
		TIM3_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8000a18:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad8 <DMA1_Stream5_IRQHandler+0x16c>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	70da      	strb	r2, [r3, #3]
		USART2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000a1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000adc <DMA1_Stream5_IRQHandler+0x170>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	70da      	strb	r2, [r3, #3]
		DMA1_Stream5_Flag.Transfer_Error_Flag = true;
 8000a24:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae0 <DMA1_Stream5_IRQHandler+0x174>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8000a2a:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <DMA1_Stream5_IRQHandler+0x158>)
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	4a25      	ldr	r2, [pc, #148]	@ (8000ac4 <DMA1_Stream5_IRQHandler+0x158>)
 8000a30:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a34:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF5)
 8000a36:	4b23      	ldr	r3, [pc, #140]	@ (8000ac4 <DMA1_Stream5_IRQHandler+0x158>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d01a      	beq.n	8000a78 <DMA1_Stream5_IRQHandler+0x10c>
	{
		SPI3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000a42:	4b21      	ldr	r3, [pc, #132]	@ (8000ac8 <DMA1_Stream5_IRQHandler+0x15c>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	709a      	strb	r2, [r3, #2]
		TIM3_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000a48:	4b20      	ldr	r3, [pc, #128]	@ (8000acc <DMA1_Stream5_IRQHandler+0x160>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	709a      	strb	r2, [r3, #2]
		TIM2_CH1_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8000a4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <DMA1_Stream5_IRQHandler+0x164>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	709a      	strb	r2, [r3, #2]
		DAC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000a54:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <DMA1_Stream5_IRQHandler+0x168>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	709a      	strb	r2, [r3, #2]
		TIM3_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <DMA1_Stream5_IRQHandler+0x16c>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	709a      	strb	r2, [r3, #2]
		USART2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <DMA1_Stream5_IRQHandler+0x170>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	709a      	strb	r2, [r3, #2]
		DMA1_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 8000a66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <DMA1_Stream5_IRQHandler+0x174>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8000a6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <DMA1_Stream5_IRQHandler+0x158>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	4a14      	ldr	r2, [pc, #80]	@ (8000ac4 <DMA1_Stream5_IRQHandler+0x158>)
 8000a72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a76:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF5)
 8000a78:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <DMA1_Stream5_IRQHandler+0x158>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d01a      	beq.n	8000aba <DMA1_Stream5_IRQHandler+0x14e>
	{
		SPI3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000a84:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <DMA1_Stream5_IRQHandler+0x15c>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	705a      	strb	r2, [r3, #1]
		TIM3_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <DMA1_Stream5_IRQHandler+0x160>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	705a      	strb	r2, [r3, #1]
		TIM2_CH1_DMA_Flag.Transfer_Complete_Flag =  true;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <DMA1_Stream5_IRQHandler+0x164>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	705a      	strb	r2, [r3, #1]
		DAC2_DMA_Flag.Transfer_Complete_Flag = true;
 8000a96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <DMA1_Stream5_IRQHandler+0x168>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	705a      	strb	r2, [r3, #1]
		TIM3_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <DMA1_Stream5_IRQHandler+0x16c>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	705a      	strb	r2, [r3, #1]
		USART2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <DMA1_Stream5_IRQHandler+0x170>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	705a      	strb	r2, [r3, #1]
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae0 <DMA1_Stream5_IRQHandler+0x174>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8000aae:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <DMA1_Stream5_IRQHandler+0x158>)
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <DMA1_Stream5_IRQHandler+0x158>)
 8000ab4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ab8:	60d3      	str	r3, [r2, #12]
	}
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40026000 	.word	0x40026000
 8000ac8:	20000178 	.word	0x20000178
 8000acc:	20000298 	.word	0x20000298
 8000ad0:	20000260 	.word	0x20000260
 8000ad4:	200002d8 	.word	0x200002d8
 8000ad8:	20000288 	.word	0x20000288
 8000adc:	20000190 	.word	0x20000190
 8000ae0:	20000330 	.word	0x20000330

08000ae4 <DMA1_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream6_IRQHandler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF6)
 8000ae8:	4b47      	ldr	r3, [pc, #284]	@ (8000c08 <DMA1_Stream6_IRQHandler+0x124>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d017      	beq.n	8000b24 <DMA1_Stream6_IRQHandler+0x40>
	{
		TIM3_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000af4:	4b45      	ldr	r3, [pc, #276]	@ (8000c0c <DMA1_Stream6_IRQHandler+0x128>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	715a      	strb	r2, [r3, #5]
		TIM2_UP_DMA_Flag.Fifo_Error_Flag = true;
 8000afa:	4b45      	ldr	r3, [pc, #276]	@ (8000c10 <DMA1_Stream6_IRQHandler+0x12c>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	715a      	strb	r2, [r3, #5]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000b00:	4b44      	ldr	r3, [pc, #272]	@ (8000c14 <DMA1_Stream6_IRQHandler+0x130>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	715a      	strb	r2, [r3, #5]
		USART2_TX_DMA_Flag.Fifo_Error_Flag =  true;
 8000b06:	4b44      	ldr	r3, [pc, #272]	@ (8000c18 <DMA1_Stream6_IRQHandler+0x134>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	715a      	strb	r2, [r3, #5]
		I2C1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000b0c:	4b43      	ldr	r3, [pc, #268]	@ (8000c1c <DMA1_Stream6_IRQHandler+0x138>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	715a      	strb	r2, [r3, #5]
		DMA1_Stream6_Flag.Fifo_Error_Flag = true;
 8000b12:	4b43      	ldr	r3, [pc, #268]	@ (8000c20 <DMA1_Stream6_IRQHandler+0x13c>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	715a      	strb	r2, [r3, #5]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8000b18:	4b3b      	ldr	r3, [pc, #236]	@ (8000c08 <DMA1_Stream6_IRQHandler+0x124>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	4a3a      	ldr	r2, [pc, #232]	@ (8000c08 <DMA1_Stream6_IRQHandler+0x124>)
 8000b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b22:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF6)
 8000b24:	4b38      	ldr	r3, [pc, #224]	@ (8000c08 <DMA1_Stream6_IRQHandler+0x124>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d014      	beq.n	8000b5a <DMA1_Stream6_IRQHandler+0x76>
	{
		TIM2_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b30:	4b37      	ldr	r3, [pc, #220]	@ (8000c10 <DMA1_Stream6_IRQHandler+0x12c>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b36:	4b37      	ldr	r3, [pc, #220]	@ (8000c14 <DMA1_Stream6_IRQHandler+0x130>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	711a      	strb	r2, [r3, #4]
		USART2_TX_DMA_Flag.Direct_Mode_Error_Flag =  true;
 8000b3c:	4b36      	ldr	r3, [pc, #216]	@ (8000c18 <DMA1_Stream6_IRQHandler+0x134>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	711a      	strb	r2, [r3, #4]
		I2C1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b42:	4b36      	ldr	r3, [pc, #216]	@ (8000c1c <DMA1_Stream6_IRQHandler+0x138>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	711a      	strb	r2, [r3, #4]
		DMA1_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8000b48:	4b35      	ldr	r3, [pc, #212]	@ (8000c20 <DMA1_Stream6_IRQHandler+0x13c>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c08 <DMA1_Stream6_IRQHandler+0x124>)
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	4a2d      	ldr	r2, [pc, #180]	@ (8000c08 <DMA1_Stream6_IRQHandler+0x124>)
 8000b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b58:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF6)
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <DMA1_Stream6_IRQHandler+0x124>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d014      	beq.n	8000b90 <DMA1_Stream6_IRQHandler+0xac>
	{
		TIM2_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000b66:	4b2a      	ldr	r3, [pc, #168]	@ (8000c10 <DMA1_Stream6_IRQHandler+0x12c>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000b6c:	4b29      	ldr	r3, [pc, #164]	@ (8000c14 <DMA1_Stream6_IRQHandler+0x130>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	70da      	strb	r2, [r3, #3]
		USART2_TX_DMA_Flag.Transfer_Error_Flag =  true;
 8000b72:	4b29      	ldr	r3, [pc, #164]	@ (8000c18 <DMA1_Stream6_IRQHandler+0x134>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	70da      	strb	r2, [r3, #3]
		I2C1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000b78:	4b28      	ldr	r3, [pc, #160]	@ (8000c1c <DMA1_Stream6_IRQHandler+0x138>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	70da      	strb	r2, [r3, #3]
		DMA1_Stream6_Flag.Transfer_Error_Flag = true;
 8000b7e:	4b28      	ldr	r3, [pc, #160]	@ (8000c20 <DMA1_Stream6_IRQHandler+0x13c>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8000b84:	4b20      	ldr	r3, [pc, #128]	@ (8000c08 <DMA1_Stream6_IRQHandler+0x124>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	4a1f      	ldr	r2, [pc, #124]	@ (8000c08 <DMA1_Stream6_IRQHandler+0x124>)
 8000b8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b8e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF6)
 8000b90:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <DMA1_Stream6_IRQHandler+0x124>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d014      	beq.n	8000bc6 <DMA1_Stream6_IRQHandler+0xe2>
	{
		TIM2_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <DMA1_Stream6_IRQHandler+0x12c>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <DMA1_Stream6_IRQHandler+0x130>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	709a      	strb	r2, [r3, #2]
		USART2_TX_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <DMA1_Stream6_IRQHandler+0x134>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	709a      	strb	r2, [r3, #2]
		I2C1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000bae:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <DMA1_Stream6_IRQHandler+0x138>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	709a      	strb	r2, [r3, #2]
		DMA1_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <DMA1_Stream6_IRQHandler+0x13c>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8000bba:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <DMA1_Stream6_IRQHandler+0x124>)
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	4a12      	ldr	r2, [pc, #72]	@ (8000c08 <DMA1_Stream6_IRQHandler+0x124>)
 8000bc0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bc4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF6)
 8000bc6:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <DMA1_Stream6_IRQHandler+0x124>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d014      	beq.n	8000bfc <DMA1_Stream6_IRQHandler+0x118>
	{
		TIM2_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <DMA1_Stream6_IRQHandler+0x12c>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <DMA1_Stream6_IRQHandler+0x130>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	705a      	strb	r2, [r3, #1]
		USART2_TX_DMA_Flag.Transfer_Complete_Flag =  true;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <DMA1_Stream6_IRQHandler+0x134>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	705a      	strb	r2, [r3, #1]
		I2C1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <DMA1_Stream6_IRQHandler+0x138>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	705a      	strb	r2, [r3, #1]
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <DMA1_Stream6_IRQHandler+0x13c>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <DMA1_Stream6_IRQHandler+0x124>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <DMA1_Stream6_IRQHandler+0x124>)
 8000bf6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bfa:	60d3      	str	r3, [r2, #12]
	}
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40026000 	.word	0x40026000
 8000c0c:	20000290 	.word	0x20000290
 8000c10:	20000258 	.word	0x20000258
 8000c14:	200001e0 	.word	0x200001e0
 8000c18:	20000198 	.word	0x20000198
 8000c1c:	20000138 	.word	0x20000138
 8000c20:	20000338 	.word	0x20000338

08000c24 <DMA1_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream7_IRQHandler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF7)
 8000c28:	4b54      	ldr	r3, [pc, #336]	@ (8000d7c <DMA1_Stream7_IRQHandler+0x158>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d01a      	beq.n	8000c6a <DMA1_Stream7_IRQHandler+0x46>
	{
		I2S3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000c34:	4b52      	ldr	r3, [pc, #328]	@ (8000d80 <DMA1_Stream7_IRQHandler+0x15c>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	715a      	strb	r2, [r3, #5]
		I2C2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000c3a:	4b52      	ldr	r3, [pc, #328]	@ (8000d84 <DMA1_Stream7_IRQHandler+0x160>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	715a      	strb	r2, [r3, #5]
		USART5_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000c40:	4b51      	ldr	r3, [pc, #324]	@ (8000d88 <DMA1_Stream7_IRQHandler+0x164>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	715a      	strb	r2, [r3, #5]
		TIM4_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000c46:	4b51      	ldr	r3, [pc, #324]	@ (8000d8c <DMA1_Stream7_IRQHandler+0x168>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	715a      	strb	r2, [r3, #5]
		TIM2_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000c4c:	4b50      	ldr	r3, [pc, #320]	@ (8000d90 <DMA1_Stream7_IRQHandler+0x16c>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	715a      	strb	r2, [r3, #5]
		TIM2_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8000c52:	4b50      	ldr	r3, [pc, #320]	@ (8000d94 <DMA1_Stream7_IRQHandler+0x170>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	715a      	strb	r2, [r3, #5]

		DMA1_Stream7_Flag.Fifo_Error_Flag = true;
 8000c58:	4b4f      	ldr	r3, [pc, #316]	@ (8000d98 <DMA1_Stream7_IRQHandler+0x174>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	715a      	strb	r2, [r3, #5]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8000c5e:	4b47      	ldr	r3, [pc, #284]	@ (8000d7c <DMA1_Stream7_IRQHandler+0x158>)
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	4a46      	ldr	r2, [pc, #280]	@ (8000d7c <DMA1_Stream7_IRQHandler+0x158>)
 8000c64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c68:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF7)
 8000c6a:	4b44      	ldr	r3, [pc, #272]	@ (8000d7c <DMA1_Stream7_IRQHandler+0x158>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d01a      	beq.n	8000cac <DMA1_Stream7_IRQHandler+0x88>
	{
		I2S3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000c76:	4b42      	ldr	r3, [pc, #264]	@ (8000d80 <DMA1_Stream7_IRQHandler+0x15c>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	711a      	strb	r2, [r3, #4]
		I2C2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000c7c:	4b41      	ldr	r3, [pc, #260]	@ (8000d84 <DMA1_Stream7_IRQHandler+0x160>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	711a      	strb	r2, [r3, #4]
		USART5_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000c82:	4b41      	ldr	r3, [pc, #260]	@ (8000d88 <DMA1_Stream7_IRQHandler+0x164>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	711a      	strb	r2, [r3, #4]
		TIM4_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000c88:	4b40      	ldr	r3, [pc, #256]	@ (8000d8c <DMA1_Stream7_IRQHandler+0x168>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	711a      	strb	r2, [r3, #4]
		TIM2_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000c8e:	4b40      	ldr	r3, [pc, #256]	@ (8000d90 <DMA1_Stream7_IRQHandler+0x16c>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	711a      	strb	r2, [r3, #4]
		TIM2_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000c94:	4b3f      	ldr	r3, [pc, #252]	@ (8000d94 <DMA1_Stream7_IRQHandler+0x170>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	711a      	strb	r2, [r3, #4]
		DMA1_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8000c9a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d98 <DMA1_Stream7_IRQHandler+0x174>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8000ca0:	4b36      	ldr	r3, [pc, #216]	@ (8000d7c <DMA1_Stream7_IRQHandler+0x158>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	4a35      	ldr	r2, [pc, #212]	@ (8000d7c <DMA1_Stream7_IRQHandler+0x158>)
 8000ca6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000caa:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF7)
 8000cac:	4b33      	ldr	r3, [pc, #204]	@ (8000d7c <DMA1_Stream7_IRQHandler+0x158>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d01a      	beq.n	8000cee <DMA1_Stream7_IRQHandler+0xca>
	{
		I2S3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000cb8:	4b31      	ldr	r3, [pc, #196]	@ (8000d80 <DMA1_Stream7_IRQHandler+0x15c>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	70da      	strb	r2, [r3, #3]
		I2C2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000cbe:	4b31      	ldr	r3, [pc, #196]	@ (8000d84 <DMA1_Stream7_IRQHandler+0x160>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	70da      	strb	r2, [r3, #3]
		USART5_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000cc4:	4b30      	ldr	r3, [pc, #192]	@ (8000d88 <DMA1_Stream7_IRQHandler+0x164>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	70da      	strb	r2, [r3, #3]
		TIM4_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8000cca:	4b30      	ldr	r3, [pc, #192]	@ (8000d8c <DMA1_Stream7_IRQHandler+0x168>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	70da      	strb	r2, [r3, #3]
		TIM2_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8000cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d90 <DMA1_Stream7_IRQHandler+0x16c>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	70da      	strb	r2, [r3, #3]
		TIM2_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8000cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d94 <DMA1_Stream7_IRQHandler+0x170>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	70da      	strb	r2, [r3, #3]
		DMA1_Stream7_Flag.Transfer_Error_Flag = true;
 8000cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8000d98 <DMA1_Stream7_IRQHandler+0x174>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8000ce2:	4b26      	ldr	r3, [pc, #152]	@ (8000d7c <DMA1_Stream7_IRQHandler+0x158>)
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	4a25      	ldr	r2, [pc, #148]	@ (8000d7c <DMA1_Stream7_IRQHandler+0x158>)
 8000ce8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cec:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF7)
 8000cee:	4b23      	ldr	r3, [pc, #140]	@ (8000d7c <DMA1_Stream7_IRQHandler+0x158>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d01a      	beq.n	8000d30 <DMA1_Stream7_IRQHandler+0x10c>
	{
		I2S3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	@ (8000d80 <DMA1_Stream7_IRQHandler+0x15c>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	709a      	strb	r2, [r3, #2]
		I2C2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d00:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <DMA1_Stream7_IRQHandler+0x160>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	709a      	strb	r2, [r3, #2]
		USART5_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d06:	4b20      	ldr	r3, [pc, #128]	@ (8000d88 <DMA1_Stream7_IRQHandler+0x164>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	709a      	strb	r2, [r3, #2]
		TIM4_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <DMA1_Stream7_IRQHandler+0x168>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	709a      	strb	r2, [r3, #2]
		TIM2_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d12:	4b1f      	ldr	r3, [pc, #124]	@ (8000d90 <DMA1_Stream7_IRQHandler+0x16c>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	709a      	strb	r2, [r3, #2]
		TIM2_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d18:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <DMA1_Stream7_IRQHandler+0x170>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	709a      	strb	r2, [r3, #2]
		DMA1_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d98 <DMA1_Stream7_IRQHandler+0x174>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8000d24:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <DMA1_Stream7_IRQHandler+0x158>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	4a14      	ldr	r2, [pc, #80]	@ (8000d7c <DMA1_Stream7_IRQHandler+0x158>)
 8000d2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d2e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF7)
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <DMA1_Stream7_IRQHandler+0x158>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d01a      	beq.n	8000d72 <DMA1_Stream7_IRQHandler+0x14e>
	{
		I2S3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000d3c:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <DMA1_Stream7_IRQHandler+0x15c>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	705a      	strb	r2, [r3, #1]
		I2C2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <DMA1_Stream7_IRQHandler+0x160>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	705a      	strb	r2, [r3, #1]
		USART5_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <DMA1_Stream7_IRQHandler+0x164>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	705a      	strb	r2, [r3, #1]
		TIM4_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <DMA1_Stream7_IRQHandler+0x168>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	705a      	strb	r2, [r3, #1]
		TIM2_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <DMA1_Stream7_IRQHandler+0x16c>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	705a      	strb	r2, [r3, #1]
		TIM2_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <DMA1_Stream7_IRQHandler+0x170>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	705a      	strb	r2, [r3, #1]
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
 8000d60:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <DMA1_Stream7_IRQHandler+0x174>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8000d66:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <DMA1_Stream7_IRQHandler+0x158>)
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <DMA1_Stream7_IRQHandler+0x158>)
 8000d6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000d70:	60d3      	str	r3, [r2, #12]
	}
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	40026000 	.word	0x40026000
 8000d80:	20000128 	.word	0x20000128
 8000d84:	20000140 	.word	0x20000140
 8000d88:	200001c0 	.word	0x200001c0
 8000d8c:	200002b0 	.word	0x200002b0
 8000d90:	20000268 	.word	0x20000268
 8000d94:	20000278 	.word	0x20000278
 8000d98:	20000340 	.word	0x20000340

08000d9c <DMA2_Stream0_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream0_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream0_IRQHandler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF0)
 8000da0:	4b45      	ldr	r3, [pc, #276]	@ (8000eb8 <DMA2_Stream0_IRQHandler+0x11c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d014      	beq.n	8000dd6 <DMA2_Stream0_IRQHandler+0x3a>
	{
		SPI1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000dac:	4b43      	ldr	r3, [pc, #268]	@ (8000ebc <DMA2_Stream0_IRQHandler+0x120>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	715a      	strb	r2, [r3, #5]
		ADC1_DMA_Flag.Fifo_Error_Flag = true;
 8000db2:	4b43      	ldr	r3, [pc, #268]	@ (8000ec0 <DMA2_Stream0_IRQHandler+0x124>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	715a      	strb	r2, [r3, #5]
		TIM1_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000db8:	4b42      	ldr	r3, [pc, #264]	@ (8000ec4 <DMA2_Stream0_IRQHandler+0x128>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	715a      	strb	r2, [r3, #5]
		TIM1_COM_DMA_Flag.Fifo_Error_Flag = true;
 8000dbe:	4b42      	ldr	r3, [pc, #264]	@ (8000ec8 <DMA2_Stream0_IRQHandler+0x12c>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	715a      	strb	r2, [r3, #5]
		DMA2_Stream0_Flag.Fifo_Error_Flag = true;
 8000dc4:	4b41      	ldr	r3, [pc, #260]	@ (8000ecc <DMA2_Stream0_IRQHandler+0x130>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	715a      	strb	r2, [r3, #5]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000dca:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb8 <DMA2_Stream0_IRQHandler+0x11c>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	4a3a      	ldr	r2, [pc, #232]	@ (8000eb8 <DMA2_Stream0_IRQHandler+0x11c>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF0)
 8000dd6:	4b38      	ldr	r3, [pc, #224]	@ (8000eb8 <DMA2_Stream0_IRQHandler+0x11c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d014      	beq.n	8000e0c <DMA2_Stream0_IRQHandler+0x70>
	{
		SPI1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000de2:	4b36      	ldr	r3, [pc, #216]	@ (8000ebc <DMA2_Stream0_IRQHandler+0x120>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	711a      	strb	r2, [r3, #4]
		ADC1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000de8:	4b35      	ldr	r3, [pc, #212]	@ (8000ec0 <DMA2_Stream0_IRQHandler+0x124>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	711a      	strb	r2, [r3, #4]
		TIM1_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000dee:	4b35      	ldr	r3, [pc, #212]	@ (8000ec4 <DMA2_Stream0_IRQHandler+0x128>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	711a      	strb	r2, [r3, #4]
		TIM1_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000df4:	4b34      	ldr	r3, [pc, #208]	@ (8000ec8 <DMA2_Stream0_IRQHandler+0x12c>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	711a      	strb	r2, [r3, #4]
		DMA2_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8000dfa:	4b34      	ldr	r3, [pc, #208]	@ (8000ecc <DMA2_Stream0_IRQHandler+0x130>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000e00:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb8 <DMA2_Stream0_IRQHandler+0x11c>)
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb8 <DMA2_Stream0_IRQHandler+0x11c>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF0)
 8000e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb8 <DMA2_Stream0_IRQHandler+0x11c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0308 	and.w	r3, r3, #8
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d014      	beq.n	8000e42 <DMA2_Stream0_IRQHandler+0xa6>
	{
		SPI1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000e18:	4b28      	ldr	r3, [pc, #160]	@ (8000ebc <DMA2_Stream0_IRQHandler+0x120>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	70da      	strb	r2, [r3, #3]
		ADC1_DMA_Flag.Transfer_Error_Flag = true;
 8000e1e:	4b28      	ldr	r3, [pc, #160]	@ (8000ec0 <DMA2_Stream0_IRQHandler+0x124>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	70da      	strb	r2, [r3, #3]
		TIM1_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000e24:	4b27      	ldr	r3, [pc, #156]	@ (8000ec4 <DMA2_Stream0_IRQHandler+0x128>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	70da      	strb	r2, [r3, #3]
		TIM1_COM_DMA_Flag.Transfer_Error_Flag = true;
 8000e2a:	4b27      	ldr	r3, [pc, #156]	@ (8000ec8 <DMA2_Stream0_IRQHandler+0x12c>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	70da      	strb	r2, [r3, #3]
		DMA2_Stream0_Flag.Transfer_Error_Flag = true;
 8000e30:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <DMA2_Stream0_IRQHandler+0x130>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000e36:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <DMA2_Stream0_IRQHandler+0x11c>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000eb8 <DMA2_Stream0_IRQHandler+0x11c>)
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF0)
 8000e42:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <DMA2_Stream0_IRQHandler+0x11c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d014      	beq.n	8000e78 <DMA2_Stream0_IRQHandler+0xdc>
	{
		SPI1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <DMA2_Stream0_IRQHandler+0x120>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	709a      	strb	r2, [r3, #2]
		ADC1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000e54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <DMA2_Stream0_IRQHandler+0x124>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	709a      	strb	r2, [r3, #2]
		TIM1_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <DMA2_Stream0_IRQHandler+0x128>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	709a      	strb	r2, [r3, #2]
		TIM1_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000e60:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <DMA2_Stream0_IRQHandler+0x12c>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	709a      	strb	r2, [r3, #2]
		DMA2_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8000e66:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <DMA2_Stream0_IRQHandler+0x130>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <DMA2_Stream0_IRQHandler+0x11c>)
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	4a11      	ldr	r2, [pc, #68]	@ (8000eb8 <DMA2_Stream0_IRQHandler+0x11c>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF0)
 8000e78:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <DMA2_Stream0_IRQHandler+0x11c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0320 	and.w	r3, r3, #32
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d014      	beq.n	8000eae <DMA2_Stream0_IRQHandler+0x112>
	{
		SPI1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000e84:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <DMA2_Stream0_IRQHandler+0x120>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	705a      	strb	r2, [r3, #1]
		ADC1_DMA_Flag.Transfer_Complete_Flag = true;
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <DMA2_Stream0_IRQHandler+0x124>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	705a      	strb	r2, [r3, #1]
		TIM1_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <DMA2_Stream0_IRQHandler+0x128>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	705a      	strb	r2, [r3, #1]
		TIM1_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <DMA2_Stream0_IRQHandler+0x12c>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	705a      	strb	r2, [r3, #1]
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <DMA2_Stream0_IRQHandler+0x130>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <DMA2_Stream0_IRQHandler+0x11c>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <DMA2_Stream0_IRQHandler+0x11c>)
 8000ea8:	f043 0320 	orr.w	r3, r3, #32
 8000eac:	6093      	str	r3, [r2, #8]
	}
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	40026400 	.word	0x40026400
 8000ebc:	20000150 	.word	0x20000150
 8000ec0:	200002f0 	.word	0x200002f0
 8000ec4:	20000210 	.word	0x20000210
 8000ec8:	20000218 	.word	0x20000218
 8000ecc:	20000348 	.word	0x20000348

08000ed0 <DMA2_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream1_IRQHandler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF1)
 8000ed4:	4b5c      	ldr	r3, [pc, #368]	@ (8001048 <DMA2_Stream1_IRQHandler+0x178>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d01d      	beq.n	8000f1c <DMA2_Stream1_IRQHandler+0x4c>
	{
		ADC3_DMA_Flag.Fifo_Error_Flag = true;
 8000ee0:	4b5a      	ldr	r3, [pc, #360]	@ (800104c <DMA2_Stream1_IRQHandler+0x17c>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	715a      	strb	r2, [r3, #5]
		TIM1_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000ee6:	4b5a      	ldr	r3, [pc, #360]	@ (8001050 <DMA2_Stream1_IRQHandler+0x180>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	715a      	strb	r2, [r3, #5]
		TIM8_UP_DMA_Flag.Fifo_Error_Flag = true;
 8000eec:	4b59      	ldr	r3, [pc, #356]	@ (8001054 <DMA2_Stream1_IRQHandler+0x184>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	715a      	strb	r2, [r3, #5]
		TIM8_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000ef2:	4b59      	ldr	r3, [pc, #356]	@ (8001058 <DMA2_Stream1_IRQHandler+0x188>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	715a      	strb	r2, [r3, #5]
		TIM8_COM_DMA_Flag.Fifo_Error_Flag = true;
 8000ef8:	4b58      	ldr	r3, [pc, #352]	@ (800105c <DMA2_Stream1_IRQHandler+0x18c>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	715a      	strb	r2, [r3, #5]
		DCMI_DMA_Flag.Fifo_Error_Flag = true;
 8000efe:	4b58      	ldr	r3, [pc, #352]	@ (8001060 <DMA2_Stream1_IRQHandler+0x190>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	715a      	strb	r2, [r3, #5]
		USART6_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000f04:	4b57      	ldr	r3, [pc, #348]	@ (8001064 <DMA2_Stream1_IRQHandler+0x194>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	715a      	strb	r2, [r3, #5]
		DMA2_Stream1_Flag.Fifo_Error_Flag = true;
 8000f0a:	4b57      	ldr	r3, [pc, #348]	@ (8001068 <DMA2_Stream1_IRQHandler+0x198>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	715a      	strb	r2, [r3, #5]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000f10:	4b4d      	ldr	r3, [pc, #308]	@ (8001048 <DMA2_Stream1_IRQHandler+0x178>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	4a4c      	ldr	r2, [pc, #304]	@ (8001048 <DMA2_Stream1_IRQHandler+0x178>)
 8000f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f1a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF1)
 8000f1c:	4b4a      	ldr	r3, [pc, #296]	@ (8001048 <DMA2_Stream1_IRQHandler+0x178>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d01d      	beq.n	8000f64 <DMA2_Stream1_IRQHandler+0x94>
	{
		ADC3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f28:	4b48      	ldr	r3, [pc, #288]	@ (800104c <DMA2_Stream1_IRQHandler+0x17c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	711a      	strb	r2, [r3, #4]
		TIM1_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f2e:	4b48      	ldr	r3, [pc, #288]	@ (8001050 <DMA2_Stream1_IRQHandler+0x180>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	711a      	strb	r2, [r3, #4]
		TIM8_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f34:	4b47      	ldr	r3, [pc, #284]	@ (8001054 <DMA2_Stream1_IRQHandler+0x184>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	711a      	strb	r2, [r3, #4]
		TIM8_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f3a:	4b47      	ldr	r3, [pc, #284]	@ (8001058 <DMA2_Stream1_IRQHandler+0x188>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	711a      	strb	r2, [r3, #4]
		TIM8_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f40:	4b46      	ldr	r3, [pc, #280]	@ (800105c <DMA2_Stream1_IRQHandler+0x18c>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	711a      	strb	r2, [r3, #4]
		DCMI_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f46:	4b46      	ldr	r3, [pc, #280]	@ (8001060 <DMA2_Stream1_IRQHandler+0x190>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	711a      	strb	r2, [r3, #4]
		USART6_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f4c:	4b45      	ldr	r3, [pc, #276]	@ (8001064 <DMA2_Stream1_IRQHandler+0x194>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	711a      	strb	r2, [r3, #4]
		DMA2_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8000f52:	4b45      	ldr	r3, [pc, #276]	@ (8001068 <DMA2_Stream1_IRQHandler+0x198>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000f58:	4b3b      	ldr	r3, [pc, #236]	@ (8001048 <DMA2_Stream1_IRQHandler+0x178>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	4a3a      	ldr	r2, [pc, #232]	@ (8001048 <DMA2_Stream1_IRQHandler+0x178>)
 8000f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f62:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF1)
 8000f64:	4b38      	ldr	r3, [pc, #224]	@ (8001048 <DMA2_Stream1_IRQHandler+0x178>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d01d      	beq.n	8000fac <DMA2_Stream1_IRQHandler+0xdc>
	{
		ADC3_DMA_Flag.Transfer_Error_Flag = true;
 8000f70:	4b36      	ldr	r3, [pc, #216]	@ (800104c <DMA2_Stream1_IRQHandler+0x17c>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	70da      	strb	r2, [r3, #3]
		TIM1_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000f76:	4b36      	ldr	r3, [pc, #216]	@ (8001050 <DMA2_Stream1_IRQHandler+0x180>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	70da      	strb	r2, [r3, #3]
		TIM8_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000f7c:	4b35      	ldr	r3, [pc, #212]	@ (8001054 <DMA2_Stream1_IRQHandler+0x184>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	70da      	strb	r2, [r3, #3]
		TIM8_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000f82:	4b35      	ldr	r3, [pc, #212]	@ (8001058 <DMA2_Stream1_IRQHandler+0x188>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	70da      	strb	r2, [r3, #3]
		TIM8_COM_DMA_Flag.Transfer_Error_Flag = true;
 8000f88:	4b34      	ldr	r3, [pc, #208]	@ (800105c <DMA2_Stream1_IRQHandler+0x18c>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	70da      	strb	r2, [r3, #3]
		DCMI_DMA_Flag.Transfer_Error_Flag = true;
 8000f8e:	4b34      	ldr	r3, [pc, #208]	@ (8001060 <DMA2_Stream1_IRQHandler+0x190>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	70da      	strb	r2, [r3, #3]
		USART6_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000f94:	4b33      	ldr	r3, [pc, #204]	@ (8001064 <DMA2_Stream1_IRQHandler+0x194>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	70da      	strb	r2, [r3, #3]
		DMA2_Stream1_Flag.Transfer_Error_Flag = true;
 8000f9a:	4b33      	ldr	r3, [pc, #204]	@ (8001068 <DMA2_Stream1_IRQHandler+0x198>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000fa0:	4b29      	ldr	r3, [pc, #164]	@ (8001048 <DMA2_Stream1_IRQHandler+0x178>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	4a28      	ldr	r2, [pc, #160]	@ (8001048 <DMA2_Stream1_IRQHandler+0x178>)
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000faa:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF1)
 8000fac:	4b26      	ldr	r3, [pc, #152]	@ (8001048 <DMA2_Stream1_IRQHandler+0x178>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d01d      	beq.n	8000ff4 <DMA2_Stream1_IRQHandler+0x124>
	{
		ADC3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000fb8:	4b24      	ldr	r3, [pc, #144]	@ (800104c <DMA2_Stream1_IRQHandler+0x17c>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	709a      	strb	r2, [r3, #2]
		TIM1_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000fbe:	4b24      	ldr	r3, [pc, #144]	@ (8001050 <DMA2_Stream1_IRQHandler+0x180>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	709a      	strb	r2, [r3, #2]
		TIM8_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <DMA2_Stream1_IRQHandler+0x184>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	709a      	strb	r2, [r3, #2]
		TIM8_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000fca:	4b23      	ldr	r3, [pc, #140]	@ (8001058 <DMA2_Stream1_IRQHandler+0x188>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	709a      	strb	r2, [r3, #2]
		TIM8_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000fd0:	4b22      	ldr	r3, [pc, #136]	@ (800105c <DMA2_Stream1_IRQHandler+0x18c>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	709a      	strb	r2, [r3, #2]
		DCMI_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000fd6:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <DMA2_Stream1_IRQHandler+0x190>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	709a      	strb	r2, [r3, #2]
		USART6_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000fdc:	4b21      	ldr	r3, [pc, #132]	@ (8001064 <DMA2_Stream1_IRQHandler+0x194>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	709a      	strb	r2, [r3, #2]
		DMA2_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	@ (8001068 <DMA2_Stream1_IRQHandler+0x198>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <DMA2_Stream1_IRQHandler+0x178>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4a16      	ldr	r2, [pc, #88]	@ (8001048 <DMA2_Stream1_IRQHandler+0x178>)
 8000fee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ff2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF1)
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <DMA2_Stream1_IRQHandler+0x178>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d01d      	beq.n	800103c <DMA2_Stream1_IRQHandler+0x16c>
	{
		ADC3_DMA_Flag.Transfer_Complete_Flag = true;
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <DMA2_Stream1_IRQHandler+0x17c>)
 8001002:	2201      	movs	r2, #1
 8001004:	705a      	strb	r2, [r3, #1]
		TIM1_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8001006:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <DMA2_Stream1_IRQHandler+0x180>)
 8001008:	2201      	movs	r2, #1
 800100a:	705a      	strb	r2, [r3, #1]
		TIM8_UP_DMA_Flag.Transfer_Complete_Flag = true;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <DMA2_Stream1_IRQHandler+0x184>)
 800100e:	2201      	movs	r2, #1
 8001010:	705a      	strb	r2, [r3, #1]
		TIM8_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <DMA2_Stream1_IRQHandler+0x188>)
 8001014:	2201      	movs	r2, #1
 8001016:	705a      	strb	r2, [r3, #1]
		TIM8_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8001018:	4b10      	ldr	r3, [pc, #64]	@ (800105c <DMA2_Stream1_IRQHandler+0x18c>)
 800101a:	2201      	movs	r2, #1
 800101c:	705a      	strb	r2, [r3, #1]
		DCMI_DMA_Flag.Transfer_Complete_Flag = true;
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <DMA2_Stream1_IRQHandler+0x190>)
 8001020:	2201      	movs	r2, #1
 8001022:	705a      	strb	r2, [r3, #1]
		USART6_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001024:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <DMA2_Stream1_IRQHandler+0x194>)
 8001026:	2201      	movs	r2, #1
 8001028:	705a      	strb	r2, [r3, #1]
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
 800102a:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <DMA2_Stream1_IRQHandler+0x198>)
 800102c:	2201      	movs	r2, #1
 800102e:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <DMA2_Stream1_IRQHandler+0x178>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	4a04      	ldr	r2, [pc, #16]	@ (8001048 <DMA2_Stream1_IRQHandler+0x178>)
 8001036:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800103a:	6093      	str	r3, [r2, #8]
	}
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40026400 	.word	0x40026400
 800104c:	20000300 	.word	0x20000300
 8001050:	200001f0 	.word	0x200001f0
 8001054:	20000220 	.word	0x20000220
 8001058:	20000248 	.word	0x20000248
 800105c:	20000250 	.word	0x20000250
 8001060:	200002e8 	.word	0x200002e8
 8001064:	200001c8 	.word	0x200001c8
 8001068:	20000350 	.word	0x20000350

0800106c <DMA2_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream2_IRQHandler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF2)
 8001070:	4b3e      	ldr	r3, [pc, #248]	@ (800116c <DMA2_Stream2_IRQHandler+0x100>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d011      	beq.n	80010a0 <DMA2_Stream2_IRQHandler+0x34>
	{
		TIM8_CH1_DMA_Flag.Fifo_Error_Flag = true;
 800107c:	4b3c      	ldr	r3, [pc, #240]	@ (8001170 <DMA2_Stream2_IRQHandler+0x104>)
 800107e:	2201      	movs	r2, #1
 8001080:	715a      	strb	r2, [r3, #5]
		USART1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001082:	4b3c      	ldr	r3, [pc, #240]	@ (8001174 <DMA2_Stream2_IRQHandler+0x108>)
 8001084:	2201      	movs	r2, #1
 8001086:	715a      	strb	r2, [r3, #5]
		ADC2_DMA_Flag.Fifo_Error_Flag = true;
 8001088:	4b3b      	ldr	r3, [pc, #236]	@ (8001178 <DMA2_Stream2_IRQHandler+0x10c>)
 800108a:	2201      	movs	r2, #1
 800108c:	715a      	strb	r2, [r3, #5]
		DMA2_Stream2_Flag.Fifo_Error_Flag = true;
 800108e:	4b3b      	ldr	r3, [pc, #236]	@ (800117c <DMA2_Stream2_IRQHandler+0x110>)
 8001090:	2201      	movs	r2, #1
 8001092:	715a      	strb	r2, [r3, #5]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001094:	4b35      	ldr	r3, [pc, #212]	@ (800116c <DMA2_Stream2_IRQHandler+0x100>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	4a34      	ldr	r2, [pc, #208]	@ (800116c <DMA2_Stream2_IRQHandler+0x100>)
 800109a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800109e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF2)
 80010a0:	4b32      	ldr	r3, [pc, #200]	@ (800116c <DMA2_Stream2_IRQHandler+0x100>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d011      	beq.n	80010d0 <DMA2_Stream2_IRQHandler+0x64>
	{
		TIM8_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010ac:	4b30      	ldr	r3, [pc, #192]	@ (8001170 <DMA2_Stream2_IRQHandler+0x104>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	711a      	strb	r2, [r3, #4]
		USART1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010b2:	4b30      	ldr	r3, [pc, #192]	@ (8001174 <DMA2_Stream2_IRQHandler+0x108>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	711a      	strb	r2, [r3, #4]
		ADC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001178 <DMA2_Stream2_IRQHandler+0x10c>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	711a      	strb	r2, [r3, #4]
		DMA2_Stream2_Flag.Direct_Mode_Error_Flag = true;
 80010be:	4b2f      	ldr	r3, [pc, #188]	@ (800117c <DMA2_Stream2_IRQHandler+0x110>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 80010c4:	4b29      	ldr	r3, [pc, #164]	@ (800116c <DMA2_Stream2_IRQHandler+0x100>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	4a28      	ldr	r2, [pc, #160]	@ (800116c <DMA2_Stream2_IRQHandler+0x100>)
 80010ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010ce:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF2)
 80010d0:	4b26      	ldr	r3, [pc, #152]	@ (800116c <DMA2_Stream2_IRQHandler+0x100>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d011      	beq.n	8001100 <DMA2_Stream2_IRQHandler+0x94>
	{
		TIM8_CH1_DMA_Flag.Transfer_Error_Flag = true;
 80010dc:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <DMA2_Stream2_IRQHandler+0x104>)
 80010de:	2201      	movs	r2, #1
 80010e0:	70da      	strb	r2, [r3, #3]
		USART1_RX_DMA_Flag.Transfer_Error_Flag = true;
 80010e2:	4b24      	ldr	r3, [pc, #144]	@ (8001174 <DMA2_Stream2_IRQHandler+0x108>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	70da      	strb	r2, [r3, #3]
		ADC2_DMA_Flag.Transfer_Error_Flag = true;
 80010e8:	4b23      	ldr	r3, [pc, #140]	@ (8001178 <DMA2_Stream2_IRQHandler+0x10c>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	70da      	strb	r2, [r3, #3]
		DMA2_Stream2_Flag.Transfer_Error_Flag = true;
 80010ee:	4b23      	ldr	r3, [pc, #140]	@ (800117c <DMA2_Stream2_IRQHandler+0x110>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	@ (800116c <DMA2_Stream2_IRQHandler+0x100>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4a1c      	ldr	r2, [pc, #112]	@ (800116c <DMA2_Stream2_IRQHandler+0x100>)
 80010fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010fe:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF2)
 8001100:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <DMA2_Stream2_IRQHandler+0x100>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d011      	beq.n	8001130 <DMA2_Stream2_IRQHandler+0xc4>
	{
		TIM8_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800110c:	4b18      	ldr	r3, [pc, #96]	@ (8001170 <DMA2_Stream2_IRQHandler+0x104>)
 800110e:	2201      	movs	r2, #1
 8001110:	709a      	strb	r2, [r3, #2]
		USART1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001112:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <DMA2_Stream2_IRQHandler+0x108>)
 8001114:	2201      	movs	r2, #1
 8001116:	709a      	strb	r2, [r3, #2]
		ADC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001118:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <DMA2_Stream2_IRQHandler+0x10c>)
 800111a:	2201      	movs	r2, #1
 800111c:	709a      	strb	r2, [r3, #2]
		DMA2_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 800111e:	4b17      	ldr	r3, [pc, #92]	@ (800117c <DMA2_Stream2_IRQHandler+0x110>)
 8001120:	2201      	movs	r2, #1
 8001122:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001124:	4b11      	ldr	r3, [pc, #68]	@ (800116c <DMA2_Stream2_IRQHandler+0x100>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	4a10      	ldr	r2, [pc, #64]	@ (800116c <DMA2_Stream2_IRQHandler+0x100>)
 800112a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800112e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF2)
 8001130:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <DMA2_Stream2_IRQHandler+0x100>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d011      	beq.n	8001160 <DMA2_Stream2_IRQHandler+0xf4>
	{
		TIM8_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <DMA2_Stream2_IRQHandler+0x104>)
 800113e:	2201      	movs	r2, #1
 8001140:	705a      	strb	r2, [r3, #1]
		USART1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001142:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <DMA2_Stream2_IRQHandler+0x108>)
 8001144:	2201      	movs	r2, #1
 8001146:	705a      	strb	r2, [r3, #1]
		ADC2_DMA_Flag.Transfer_Complete_Flag = true;
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <DMA2_Stream2_IRQHandler+0x10c>)
 800114a:	2201      	movs	r2, #1
 800114c:	705a      	strb	r2, [r3, #1]
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <DMA2_Stream2_IRQHandler+0x110>)
 8001150:	2201      	movs	r2, #1
 8001152:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <DMA2_Stream2_IRQHandler+0x100>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4a04      	ldr	r2, [pc, #16]	@ (800116c <DMA2_Stream2_IRQHandler+0x100>)
 800115a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800115e:	6093      	str	r3, [r2, #8]
	}
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40026400 	.word	0x40026400
 8001170:	20000228 	.word	0x20000228
 8001174:	20000180 	.word	0x20000180
 8001178:	200002f8 	.word	0x200002f8
 800117c:	20000358 	.word	0x20000358

08001180 <DMA2_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream3_IRQHandler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF3)
 8001184:	4b36      	ldr	r3, [pc, #216]	@ (8001260 <DMA2_Stream3_IRQHandler+0xe0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00e      	beq.n	80011ae <DMA2_Stream3_IRQHandler+0x2e>
	{
		SDIO_RXTX_DMA_Flag.Fifo_Error_Flag = true;
 8001190:	4b34      	ldr	r3, [pc, #208]	@ (8001264 <DMA2_Stream3_IRQHandler+0xe4>)
 8001192:	2201      	movs	r2, #1
 8001194:	715a      	strb	r2, [r3, #5]
		SPI1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001196:	4b34      	ldr	r3, [pc, #208]	@ (8001268 <DMA2_Stream3_IRQHandler+0xe8>)
 8001198:	2201      	movs	r2, #1
 800119a:	715a      	strb	r2, [r3, #5]
		DMA2_Stream3_Flag.Fifo_Error_Flag = true;
 800119c:	4b33      	ldr	r3, [pc, #204]	@ (800126c <DMA2_Stream3_IRQHandler+0xec>)
 800119e:	2201      	movs	r2, #1
 80011a0:	715a      	strb	r2, [r3, #5]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80011a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001260 <DMA2_Stream3_IRQHandler+0xe0>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001260 <DMA2_Stream3_IRQHandler+0xe0>)
 80011a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011ac:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF3)
 80011ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001260 <DMA2_Stream3_IRQHandler+0xe0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00e      	beq.n	80011d8 <DMA2_Stream3_IRQHandler+0x58>
	{
		SDIO_RXTX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001264 <DMA2_Stream3_IRQHandler+0xe4>)
 80011bc:	2201      	movs	r2, #1
 80011be:	711a      	strb	r2, [r3, #4]
		SPI1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011c0:	4b29      	ldr	r3, [pc, #164]	@ (8001268 <DMA2_Stream3_IRQHandler+0xe8>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	711a      	strb	r2, [r3, #4]
		DMA2_Stream3_Flag.Direct_Mode_Error_Flag = true;
 80011c6:	4b29      	ldr	r3, [pc, #164]	@ (800126c <DMA2_Stream3_IRQHandler+0xec>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80011cc:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <DMA2_Stream3_IRQHandler+0xe0>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	4a23      	ldr	r2, [pc, #140]	@ (8001260 <DMA2_Stream3_IRQHandler+0xe0>)
 80011d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80011d6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF3)
 80011d8:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <DMA2_Stream3_IRQHandler+0xe0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00e      	beq.n	8001202 <DMA2_Stream3_IRQHandler+0x82>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Error_Flag = true;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <DMA2_Stream3_IRQHandler+0xe4>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	70da      	strb	r2, [r3, #3]
		SPI1_TX_DMA_Flag.Transfer_Error_Flag = true;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <DMA2_Stream3_IRQHandler+0xe8>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	70da      	strb	r2, [r3, #3]
		DMA2_Stream3_Flag.Transfer_Error_Flag = true;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <DMA2_Stream3_IRQHandler+0xec>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <DMA2_Stream3_IRQHandler+0xe0>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	4a19      	ldr	r2, [pc, #100]	@ (8001260 <DMA2_Stream3_IRQHandler+0xe0>)
 80011fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001200:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF3)
 8001202:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <DMA2_Stream3_IRQHandler+0xe0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00e      	beq.n	800122c <DMA2_Stream3_IRQHandler+0xac>
	{
		SDIO_RXTX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <DMA2_Stream3_IRQHandler+0xe4>)
 8001210:	2201      	movs	r2, #1
 8001212:	709a      	strb	r2, [r3, #2]
		SPI1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001214:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <DMA2_Stream3_IRQHandler+0xe8>)
 8001216:	2201      	movs	r2, #1
 8001218:	709a      	strb	r2, [r3, #2]
		DMA2_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 800121a:	4b14      	ldr	r3, [pc, #80]	@ (800126c <DMA2_Stream3_IRQHandler+0xec>)
 800121c:	2201      	movs	r2, #1
 800121e:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <DMA2_Stream3_IRQHandler+0xe0>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	4a0e      	ldr	r2, [pc, #56]	@ (8001260 <DMA2_Stream3_IRQHandler+0xe0>)
 8001226:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800122a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF3)
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <DMA2_Stream3_IRQHandler+0xe0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00e      	beq.n	8001256 <DMA2_Stream3_IRQHandler+0xd6>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Complete_Flag = true;
 8001238:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <DMA2_Stream3_IRQHandler+0xe4>)
 800123a:	2201      	movs	r2, #1
 800123c:	705a      	strb	r2, [r3, #1]
		SPI1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <DMA2_Stream3_IRQHandler+0xe8>)
 8001240:	2201      	movs	r2, #1
 8001242:	705a      	strb	r2, [r3, #1]
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
 8001244:	4b09      	ldr	r3, [pc, #36]	@ (800126c <DMA2_Stream3_IRQHandler+0xec>)
 8001246:	2201      	movs	r2, #1
 8001248:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 800124a:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <DMA2_Stream3_IRQHandler+0xe0>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <DMA2_Stream3_IRQHandler+0xe0>)
 8001250:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001254:	6093      	str	r3, [r2, #8]
	}
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	40026400 	.word	0x40026400
 8001264:	200002e0 	.word	0x200002e0
 8001268:	20000168 	.word	0x20000168
 800126c:	20000360 	.word	0x20000360

08001270 <DMA2_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream4_IRQHandler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF4)
 8001274:	4b36      	ldr	r3, [pc, #216]	@ (8001350 <DMA2_Stream4_IRQHandler+0xe0>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00e      	beq.n	800129e <DMA2_Stream4_IRQHandler+0x2e>
	{
		TIM1_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8001280:	4b34      	ldr	r3, [pc, #208]	@ (8001354 <DMA2_Stream4_IRQHandler+0xe4>)
 8001282:	2201      	movs	r2, #1
 8001284:	715a      	strb	r2, [r3, #5]
		TIM8_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001286:	4b34      	ldr	r3, [pc, #208]	@ (8001358 <DMA2_Stream4_IRQHandler+0xe8>)
 8001288:	2201      	movs	r2, #1
 800128a:	715a      	strb	r2, [r3, #5]
		DMA2_Stream4_Flag.Fifo_Error_Flag = true;
 800128c:	4b33      	ldr	r3, [pc, #204]	@ (800135c <DMA2_Stream4_IRQHandler+0xec>)
 800128e:	2201      	movs	r2, #1
 8001290:	715a      	strb	r2, [r3, #5]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF4;
 8001292:	4b2f      	ldr	r3, [pc, #188]	@ (8001350 <DMA2_Stream4_IRQHandler+0xe0>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	4a2e      	ldr	r2, [pc, #184]	@ (8001350 <DMA2_Stream4_IRQHandler+0xe0>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF4)
 800129e:	4b2c      	ldr	r3, [pc, #176]	@ (8001350 <DMA2_Stream4_IRQHandler+0xe0>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00e      	beq.n	80012c8 <DMA2_Stream4_IRQHandler+0x58>
	{
		TIM1_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 80012aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <DMA2_Stream4_IRQHandler+0xe4>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	711a      	strb	r2, [r3, #4]
		TIM8_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80012b0:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <DMA2_Stream4_IRQHandler+0xe8>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	711a      	strb	r2, [r3, #4]
		DMA2_Stream4_Flag.Direct_Mode_Error_Flag = true;
 80012b6:	4b29      	ldr	r3, [pc, #164]	@ (800135c <DMA2_Stream4_IRQHandler+0xec>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80012bc:	4b24      	ldr	r3, [pc, #144]	@ (8001350 <DMA2_Stream4_IRQHandler+0xe0>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4a23      	ldr	r2, [pc, #140]	@ (8001350 <DMA2_Stream4_IRQHandler+0xe0>)
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF4)
 80012c8:	4b21      	ldr	r3, [pc, #132]	@ (8001350 <DMA2_Stream4_IRQHandler+0xe0>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00e      	beq.n	80012f2 <DMA2_Stream4_IRQHandler+0x82>
	{
		TIM1_CH4_DMA_Flag.Transfer_Error_Flag = true;
 80012d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <DMA2_Stream4_IRQHandler+0xe4>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	70da      	strb	r2, [r3, #3]
		TIM8_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80012da:	4b1f      	ldr	r3, [pc, #124]	@ (8001358 <DMA2_Stream4_IRQHandler+0xe8>)
 80012dc:	2201      	movs	r2, #1
 80012de:	70da      	strb	r2, [r3, #3]
		DMA2_Stream4_Flag.Transfer_Error_Flag = true;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <DMA2_Stream4_IRQHandler+0xec>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <DMA2_Stream4_IRQHandler+0xe0>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	4a19      	ldr	r2, [pc, #100]	@ (8001350 <DMA2_Stream4_IRQHandler+0xe0>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF4)
 80012f2:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <DMA2_Stream4_IRQHandler+0xe0>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00e      	beq.n	800131c <DMA2_Stream4_IRQHandler+0xac>
	{
		TIM1_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <DMA2_Stream4_IRQHandler+0xe4>)
 8001300:	2201      	movs	r2, #1
 8001302:	709a      	strb	r2, [r3, #2]
		TIM8_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001304:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <DMA2_Stream4_IRQHandler+0xe8>)
 8001306:	2201      	movs	r2, #1
 8001308:	709a      	strb	r2, [r3, #2]
		DMA2_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <DMA2_Stream4_IRQHandler+0xec>)
 800130c:	2201      	movs	r2, #1
 800130e:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001310:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <DMA2_Stream4_IRQHandler+0xe0>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4a0e      	ldr	r2, [pc, #56]	@ (8001350 <DMA2_Stream4_IRQHandler+0xe0>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF4)
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <DMA2_Stream4_IRQHandler+0xe0>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0320 	and.w	r3, r3, #32
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00e      	beq.n	8001346 <DMA2_Stream4_IRQHandler+0xd6>
	{
		TIM1_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8001328:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <DMA2_Stream4_IRQHandler+0xe4>)
 800132a:	2201      	movs	r2, #1
 800132c:	705a      	strb	r2, [r3, #1]
		TIM8_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <DMA2_Stream4_IRQHandler+0xe8>)
 8001330:	2201      	movs	r2, #1
 8001332:	705a      	strb	r2, [r3, #1]
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
 8001334:	4b09      	ldr	r3, [pc, #36]	@ (800135c <DMA2_Stream4_IRQHandler+0xec>)
 8001336:	2201      	movs	r2, #1
 8001338:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800133a:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <DMA2_Stream4_IRQHandler+0xe0>)
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <DMA2_Stream4_IRQHandler+0xe0>)
 8001340:	f043 0320 	orr.w	r3, r3, #32
 8001344:	60d3      	str	r3, [r2, #12]
	}
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40026400 	.word	0x40026400
 8001354:	20000208 	.word	0x20000208
 8001358:	20000230 	.word	0x20000230
 800135c:	20000368 	.word	0x20000368

08001360 <DMA2_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream5_IRQHandler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF5)
 8001364:	4b2f      	ldr	r3, [pc, #188]	@ (8001424 <DMA2_Stream5_IRQHandler+0xc4>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00b      	beq.n	8001388 <DMA2_Stream5_IRQHandler+0x28>
	{
		TIM1_UP_DMA_Flag.Fifo_Error_Flag = true;
 8001370:	4b2d      	ldr	r3, [pc, #180]	@ (8001428 <DMA2_Stream5_IRQHandler+0xc8>)
 8001372:	2201      	movs	r2, #1
 8001374:	715a      	strb	r2, [r3, #5]
		DMA2_Stream5_Flag.Fifo_Error_Flag = true;
 8001376:	4b2d      	ldr	r3, [pc, #180]	@ (800142c <DMA2_Stream5_IRQHandler+0xcc>)
 8001378:	2201      	movs	r2, #1
 800137a:	715a      	strb	r2, [r3, #5]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 800137c:	4b29      	ldr	r3, [pc, #164]	@ (8001424 <DMA2_Stream5_IRQHandler+0xc4>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	4a28      	ldr	r2, [pc, #160]	@ (8001424 <DMA2_Stream5_IRQHandler+0xc4>)
 8001382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001386:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF5)
 8001388:	4b26      	ldr	r3, [pc, #152]	@ (8001424 <DMA2_Stream5_IRQHandler+0xc4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00b      	beq.n	80013ac <DMA2_Stream5_IRQHandler+0x4c>
	{
		TIM1_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001394:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <DMA2_Stream5_IRQHandler+0xc8>)
 8001396:	2201      	movs	r2, #1
 8001398:	711a      	strb	r2, [r3, #4]
		DMA2_Stream5_Flag.Direct_Mode_Error_Flag = true;
 800139a:	4b24      	ldr	r3, [pc, #144]	@ (800142c <DMA2_Stream5_IRQHandler+0xcc>)
 800139c:	2201      	movs	r2, #1
 800139e:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80013a0:	4b20      	ldr	r3, [pc, #128]	@ (8001424 <DMA2_Stream5_IRQHandler+0xc4>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001424 <DMA2_Stream5_IRQHandler+0xc4>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013aa:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF5)
 80013ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <DMA2_Stream5_IRQHandler+0xc4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00b      	beq.n	80013d0 <DMA2_Stream5_IRQHandler+0x70>
	{
		TIM1_UP_DMA_Flag.Transfer_Error_Flag = true;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <DMA2_Stream5_IRQHandler+0xc8>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	70da      	strb	r2, [r3, #3]
		DMA2_Stream5_Flag.Transfer_Error_Flag = true;
 80013be:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <DMA2_Stream5_IRQHandler+0xcc>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80013c4:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <DMA2_Stream5_IRQHandler+0xc4>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	4a16      	ldr	r2, [pc, #88]	@ (8001424 <DMA2_Stream5_IRQHandler+0xc4>)
 80013ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ce:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF5)
 80013d0:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <DMA2_Stream5_IRQHandler+0xc4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00b      	beq.n	80013f4 <DMA2_Stream5_IRQHandler+0x94>
	{
		TIM1_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <DMA2_Stream5_IRQHandler+0xc8>)
 80013de:	2201      	movs	r2, #1
 80013e0:	709a      	strb	r2, [r3, #2]
		DMA2_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 80013e2:	4b12      	ldr	r3, [pc, #72]	@ (800142c <DMA2_Stream5_IRQHandler+0xcc>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <DMA2_Stream5_IRQHandler+0xc4>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <DMA2_Stream5_IRQHandler+0xc4>)
 80013ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013f2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF5)
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <DMA2_Stream5_IRQHandler+0xc4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00b      	beq.n	8001418 <DMA2_Stream5_IRQHandler+0xb8>
	{
		TIM1_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8001400:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <DMA2_Stream5_IRQHandler+0xc8>)
 8001402:	2201      	movs	r2, #1
 8001404:	705a      	strb	r2, [r3, #1]
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <DMA2_Stream5_IRQHandler+0xcc>)
 8001408:	2201      	movs	r2, #1
 800140a:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 800140c:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <DMA2_Stream5_IRQHandler+0xc4>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4a04      	ldr	r2, [pc, #16]	@ (8001424 <DMA2_Stream5_IRQHandler+0xc4>)
 8001412:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001416:	60d3      	str	r3, [r2, #12]
	}
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40026400 	.word	0x40026400
 8001428:	200001e8 	.word	0x200001e8
 800142c:	20000370 	.word	0x20000370

08001430 <DMA2_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream6_IRQHandler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF6)
 8001434:	4b45      	ldr	r3, [pc, #276]	@ (800154c <DMA2_Stream6_IRQHandler+0x11c>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d014      	beq.n	800146a <DMA2_Stream6_IRQHandler+0x3a>
	{
		TIM1_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001440:	4b43      	ldr	r3, [pc, #268]	@ (8001550 <DMA2_Stream6_IRQHandler+0x120>)
 8001442:	2201      	movs	r2, #1
 8001444:	715a      	strb	r2, [r3, #5]
		TIM1_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001446:	4b43      	ldr	r3, [pc, #268]	@ (8001554 <DMA2_Stream6_IRQHandler+0x124>)
 8001448:	2201      	movs	r2, #1
 800144a:	715a      	strb	r2, [r3, #5]
		TIM8_CH3_DMA_Flag.Fifo_Error_Flag = true;
 800144c:	4b42      	ldr	r3, [pc, #264]	@ (8001558 <DMA2_Stream6_IRQHandler+0x128>)
 800144e:	2201      	movs	r2, #1
 8001450:	715a      	strb	r2, [r3, #5]
		USART6_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001452:	4b42      	ldr	r3, [pc, #264]	@ (800155c <DMA2_Stream6_IRQHandler+0x12c>)
 8001454:	2201      	movs	r2, #1
 8001456:	715a      	strb	r2, [r3, #5]
		DMA2_Stream6_Flag.Fifo_Error_Flag = true;
 8001458:	4b41      	ldr	r3, [pc, #260]	@ (8001560 <DMA2_Stream6_IRQHandler+0x130>)
 800145a:	2201      	movs	r2, #1
 800145c:	715a      	strb	r2, [r3, #5]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 800145e:	4b3b      	ldr	r3, [pc, #236]	@ (800154c <DMA2_Stream6_IRQHandler+0x11c>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	4a3a      	ldr	r2, [pc, #232]	@ (800154c <DMA2_Stream6_IRQHandler+0x11c>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001468:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF6)
 800146a:	4b38      	ldr	r3, [pc, #224]	@ (800154c <DMA2_Stream6_IRQHandler+0x11c>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d014      	beq.n	80014a0 <DMA2_Stream6_IRQHandler+0x70>
	{
		TIM1_CH2_DMA_Flag.Direct_Mode_Error_Flag= true;
 8001476:	4b36      	ldr	r3, [pc, #216]	@ (8001550 <DMA2_Stream6_IRQHandler+0x120>)
 8001478:	2201      	movs	r2, #1
 800147a:	711a      	strb	r2, [r3, #4]
		TIM1_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 800147c:	4b35      	ldr	r3, [pc, #212]	@ (8001554 <DMA2_Stream6_IRQHandler+0x124>)
 800147e:	2201      	movs	r2, #1
 8001480:	711a      	strb	r2, [r3, #4]
		TIM8_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001482:	4b35      	ldr	r3, [pc, #212]	@ (8001558 <DMA2_Stream6_IRQHandler+0x128>)
 8001484:	2201      	movs	r2, #1
 8001486:	711a      	strb	r2, [r3, #4]
		USART6_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001488:	4b34      	ldr	r3, [pc, #208]	@ (800155c <DMA2_Stream6_IRQHandler+0x12c>)
 800148a:	2201      	movs	r2, #1
 800148c:	711a      	strb	r2, [r3, #4]
		DMA2_Stream6_Flag.Direct_Mode_Error_Flag = true;
 800148e:	4b34      	ldr	r3, [pc, #208]	@ (8001560 <DMA2_Stream6_IRQHandler+0x130>)
 8001490:	2201      	movs	r2, #1
 8001492:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001494:	4b2d      	ldr	r3, [pc, #180]	@ (800154c <DMA2_Stream6_IRQHandler+0x11c>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	4a2c      	ldr	r2, [pc, #176]	@ (800154c <DMA2_Stream6_IRQHandler+0x11c>)
 800149a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800149e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF6)
 80014a0:	4b2a      	ldr	r3, [pc, #168]	@ (800154c <DMA2_Stream6_IRQHandler+0x11c>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d014      	beq.n	80014d6 <DMA2_Stream6_IRQHandler+0xa6>
	{
		TIM1_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80014ac:	4b28      	ldr	r3, [pc, #160]	@ (8001550 <DMA2_Stream6_IRQHandler+0x120>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	70da      	strb	r2, [r3, #3]
		TIM1_CH3_DMA_Flag.Transfer_Error_Flag = true;
 80014b2:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <DMA2_Stream6_IRQHandler+0x124>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	70da      	strb	r2, [r3, #3]
		TIM8_CH3_DMA_Flag.Transfer_Error_Flag = true;
 80014b8:	4b27      	ldr	r3, [pc, #156]	@ (8001558 <DMA2_Stream6_IRQHandler+0x128>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	70da      	strb	r2, [r3, #3]
		USART6_TX_DMA_Flag.Transfer_Error_Flag = true;
 80014be:	4b27      	ldr	r3, [pc, #156]	@ (800155c <DMA2_Stream6_IRQHandler+0x12c>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	70da      	strb	r2, [r3, #3]
		DMA2_Stream6_Flag.Transfer_Error_Flag = true;
 80014c4:	4b26      	ldr	r3, [pc, #152]	@ (8001560 <DMA2_Stream6_IRQHandler+0x130>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 80014ca:	4b20      	ldr	r3, [pc, #128]	@ (800154c <DMA2_Stream6_IRQHandler+0x11c>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	4a1f      	ldr	r2, [pc, #124]	@ (800154c <DMA2_Stream6_IRQHandler+0x11c>)
 80014d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014d4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF6)
 80014d6:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <DMA2_Stream6_IRQHandler+0x11c>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d014      	beq.n	800150c <DMA2_Stream6_IRQHandler+0xdc>
	{
		TIM1_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80014e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <DMA2_Stream6_IRQHandler+0x120>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	709a      	strb	r2, [r3, #2]
		TIM1_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <DMA2_Stream6_IRQHandler+0x124>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	709a      	strb	r2, [r3, #2]
		TIM8_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <DMA2_Stream6_IRQHandler+0x128>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	709a      	strb	r2, [r3, #2]
		USART6_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80014f4:	4b19      	ldr	r3, [pc, #100]	@ (800155c <DMA2_Stream6_IRQHandler+0x12c>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	709a      	strb	r2, [r3, #2]
		DMA2_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 80014fa:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <DMA2_Stream6_IRQHandler+0x130>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <DMA2_Stream6_IRQHandler+0x11c>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4a11      	ldr	r2, [pc, #68]	@ (800154c <DMA2_Stream6_IRQHandler+0x11c>)
 8001506:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800150a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF6)
 800150c:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <DMA2_Stream6_IRQHandler+0x11c>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d014      	beq.n	8001542 <DMA2_Stream6_IRQHandler+0x112>
	{
		TIM1_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001518:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <DMA2_Stream6_IRQHandler+0x120>)
 800151a:	2201      	movs	r2, #1
 800151c:	705a      	strb	r2, [r3, #1]
		TIM1_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 800151e:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <DMA2_Stream6_IRQHandler+0x124>)
 8001520:	2201      	movs	r2, #1
 8001522:	705a      	strb	r2, [r3, #1]
		TIM8_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <DMA2_Stream6_IRQHandler+0x128>)
 8001526:	2201      	movs	r2, #1
 8001528:	705a      	strb	r2, [r3, #1]
		USART6_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800152a:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <DMA2_Stream6_IRQHandler+0x12c>)
 800152c:	2201      	movs	r2, #1
 800152e:	705a      	strb	r2, [r3, #1]
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
 8001530:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <DMA2_Stream6_IRQHandler+0x130>)
 8001532:	2201      	movs	r2, #1
 8001534:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8001536:	4b05      	ldr	r3, [pc, #20]	@ (800154c <DMA2_Stream6_IRQHandler+0x11c>)
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	4a04      	ldr	r2, [pc, #16]	@ (800154c <DMA2_Stream6_IRQHandler+0x11c>)
 800153c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001540:	60d3      	str	r3, [r2, #12]
	}
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	40026400 	.word	0x40026400
 8001550:	200001f8 	.word	0x200001f8
 8001554:	20000200 	.word	0x20000200
 8001558:	20000238 	.word	0x20000238
 800155c:	200001d0 	.word	0x200001d0
 8001560:	20000378 	.word	0x20000378

08001564 <DMA2_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream7_IRQHandler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF7)
 8001568:	4b3e      	ldr	r3, [pc, #248]	@ (8001664 <DMA2_Stream7_IRQHandler+0x100>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d011      	beq.n	8001598 <DMA2_Stream7_IRQHandler+0x34>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 8001574:	4b3c      	ldr	r3, [pc, #240]	@ (8001668 <DMA2_Stream7_IRQHandler+0x104>)
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 800157a:	4b3a      	ldr	r3, [pc, #232]	@ (8001664 <DMA2_Stream7_IRQHandler+0x100>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	4a39      	ldr	r2, [pc, #228]	@ (8001664 <DMA2_Stream7_IRQHandler+0x100>)
 8001580:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001584:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8001586:	4b39      	ldr	r3, [pc, #228]	@ (800166c <DMA2_Stream7_IRQHandler+0x108>)
 8001588:	2201      	movs	r2, #1
 800158a:	715a      	strb	r2, [r3, #5]
		USART1_TX_DMA_Flag.Fifo_Error_Flag = true;
 800158c:	4b36      	ldr	r3, [pc, #216]	@ (8001668 <DMA2_Stream7_IRQHandler+0x104>)
 800158e:	2201      	movs	r2, #1
 8001590:	715a      	strb	r2, [r3, #5]
		DMA2_Stream7_Flag.Fifo_Error_Flag = true;
 8001592:	4b37      	ldr	r3, [pc, #220]	@ (8001670 <DMA2_Stream7_IRQHandler+0x10c>)
 8001594:	2201      	movs	r2, #1
 8001596:	715a      	strb	r2, [r3, #5]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF7)
 8001598:	4b32      	ldr	r3, [pc, #200]	@ (8001664 <DMA2_Stream7_IRQHandler+0x100>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d011      	beq.n	80015c8 <DMA2_Stream7_IRQHandler+0x64>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 80015a4:	4b30      	ldr	r3, [pc, #192]	@ (8001668 <DMA2_Stream7_IRQHandler+0x104>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80015aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001664 <DMA2_Stream7_IRQHandler+0x100>)
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	4a2d      	ldr	r2, [pc, #180]	@ (8001664 <DMA2_Stream7_IRQHandler+0x100>)
 80015b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015b4:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 80015b6:	4b2d      	ldr	r3, [pc, #180]	@ (800166c <DMA2_Stream7_IRQHandler+0x108>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	711a      	strb	r2, [r3, #4]
		USART1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80015bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <DMA2_Stream7_IRQHandler+0x104>)
 80015be:	2201      	movs	r2, #1
 80015c0:	711a      	strb	r2, [r3, #4]
		DMA2_Stream7_Flag.Direct_Mode_Error_Flag = true;
 80015c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001670 <DMA2_Stream7_IRQHandler+0x10c>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	711a      	strb	r2, [r3, #4]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF7)
 80015c8:	4b26      	ldr	r3, [pc, #152]	@ (8001664 <DMA2_Stream7_IRQHandler+0x100>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d011      	beq.n	80015f8 <DMA2_Stream7_IRQHandler+0x94>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 80015d4:	4b24      	ldr	r3, [pc, #144]	@ (8001668 <DMA2_Stream7_IRQHandler+0x104>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 80015da:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <DMA2_Stream7_IRQHandler+0x100>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	4a21      	ldr	r2, [pc, #132]	@ (8001664 <DMA2_Stream7_IRQHandler+0x100>)
 80015e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015e4:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Error_Flag = true;
 80015e6:	4b21      	ldr	r3, [pc, #132]	@ (800166c <DMA2_Stream7_IRQHandler+0x108>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	70da      	strb	r2, [r3, #3]
		USART1_TX_DMA_Flag.Transfer_Error_Flag = true;
 80015ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001668 <DMA2_Stream7_IRQHandler+0x104>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	70da      	strb	r2, [r3, #3]
		DMA2_Stream7_Flag.Transfer_Error_Flag = true;
 80015f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001670 <DMA2_Stream7_IRQHandler+0x10c>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	70da      	strb	r2, [r3, #3]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF7)
 80015f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <DMA2_Stream7_IRQHandler+0x100>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d011      	beq.n	8001628 <DMA2_Stream7_IRQHandler+0xc4>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 8001604:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <DMA2_Stream7_IRQHandler+0x104>)
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 800160a:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <DMA2_Stream7_IRQHandler+0x100>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	4a15      	ldr	r2, [pc, #84]	@ (8001664 <DMA2_Stream7_IRQHandler+0x100>)
 8001610:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001614:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <DMA2_Stream7_IRQHandler+0x108>)
 8001618:	2201      	movs	r2, #1
 800161a:	709a      	strb	r2, [r3, #2]
		USART1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <DMA2_Stream7_IRQHandler+0x104>)
 800161e:	2201      	movs	r2, #1
 8001620:	709a      	strb	r2, [r3, #2]
		DMA2_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8001622:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <DMA2_Stream7_IRQHandler+0x10c>)
 8001624:	2201      	movs	r2, #1
 8001626:	709a      	strb	r2, [r3, #2]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF7)
 8001628:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <DMA2_Stream7_IRQHandler+0x100>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d011      	beq.n	8001658 <DMA2_Stream7_IRQHandler+0xf4>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <DMA2_Stream7_IRQHandler+0x104>)
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 800163a:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <DMA2_Stream7_IRQHandler+0x100>)
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	4a09      	ldr	r2, [pc, #36]	@ (8001664 <DMA2_Stream7_IRQHandler+0x100>)
 8001640:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001644:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <DMA2_Stream7_IRQHandler+0x108>)
 8001648:	2201      	movs	r2, #1
 800164a:	705a      	strb	r2, [r3, #1]
		USART1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <DMA2_Stream7_IRQHandler+0x104>)
 800164e:	2201      	movs	r2, #1
 8001650:	705a      	strb	r2, [r3, #1]
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
 8001652:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <DMA2_Stream7_IRQHandler+0x10c>)
 8001654:	2201      	movs	r2, #1
 8001656:	705a      	strb	r2, [r3, #1]

	}
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40026400 	.word	0x40026400
 8001668:	20000188 	.word	0x20000188
 800166c:	20000240 	.word	0x20000240
 8001670:	20000380 	.word	0x20000380

08001674 <GPIO_Clock_Enable>:
 * @brief  Enables the clock for a specific GPIO port.
 * @param  PORT: Pointer to GPIO port base address.
 * @retval 0 on success, -1 on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a25      	ldr	r2, [pc, #148]	@ (8001714 <GPIO_Clock_Enable+0xa0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d106      	bne.n	8001692 <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8001684:	4b24      	ldr	r3, [pc, #144]	@ (8001718 <GPIO_Clock_Enable+0xa4>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	4a23      	ldr	r2, [pc, #140]	@ (8001718 <GPIO_Clock_Enable+0xa4>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001690:	e039      	b.n	8001706 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a21      	ldr	r2, [pc, #132]	@ (800171c <GPIO_Clock_Enable+0xa8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d106      	bne.n	80016a8 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 800169a:	4b1f      	ldr	r3, [pc, #124]	@ (8001718 <GPIO_Clock_Enable+0xa4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	4a1e      	ldr	r2, [pc, #120]	@ (8001718 <GPIO_Clock_Enable+0xa4>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a6:	e02e      	b.n	8001706 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001720 <GPIO_Clock_Enable+0xac>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d106      	bne.n	80016be <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 80016b0:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <GPIO_Clock_Enable+0xa4>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b4:	4a18      	ldr	r2, [pc, #96]	@ (8001718 <GPIO_Clock_Enable+0xa4>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80016bc:	e023      	b.n	8001706 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a18      	ldr	r2, [pc, #96]	@ (8001724 <GPIO_Clock_Enable+0xb0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d106      	bne.n	80016d4 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 80016c6:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <GPIO_Clock_Enable+0xa4>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a13      	ldr	r2, [pc, #76]	@ (8001718 <GPIO_Clock_Enable+0xa4>)
 80016cc:	f043 0308 	orr.w	r3, r3, #8
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	e018      	b.n	8001706 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a14      	ldr	r2, [pc, #80]	@ (8001728 <GPIO_Clock_Enable+0xb4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d106      	bne.n	80016ea <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 80016dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <GPIO_Clock_Enable+0xa4>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001718 <GPIO_Clock_Enable+0xa4>)
 80016e2:	f043 0310 	orr.w	r3, r3, #16
 80016e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e8:	e00d      	b.n	8001706 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a0f      	ldr	r2, [pc, #60]	@ (800172c <GPIO_Clock_Enable+0xb8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d106      	bne.n	8001700 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <GPIO_Clock_Enable+0xa4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a08      	ldr	r2, [pc, #32]	@ (8001718 <GPIO_Clock_Enable+0xa4>)
 80016f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	e002      	b.n	8001706 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
 8001704:	e000      	b.n	8001708 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40020000 	.word	0x40020000
 8001718:	40023800 	.word	0x40023800
 800171c:	40020400 	.word	0x40020400
 8001720:	40020800 	.word	0x40020800
 8001724:	40020c00 	.word	0x40020c00
 8001728:	40021000 	.word	0x40021000
 800172c:	40021c00 	.word	0x40021c00

08001730 <GPIO_Pin_Init>:
 * @param  speed: Speed level (low, medium, high, very high).
 * @param  pull: Pull-up/pull-down configuration (none, pull-up, pull-down).
 * @param  alternate_function: Alternate function selection (0-15).
 */
void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	4608      	mov	r0, r1
 800173a:	4611      	mov	r1, r2
 800173c:	461a      	mov	r2, r3
 800173e:	4603      	mov	r3, r0
 8001740:	70fb      	strb	r3, [r7, #3]
 8001742:	460b      	mov	r3, r1
 8001744:	70bb      	strb	r3, [r7, #2]
 8001746:	4613      	mov	r3, r2
 8001748:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ff92 	bl	8001674 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	78b9      	ldrb	r1, [r7, #2]
 8001756:	78fa      	ldrb	r2, [r7, #3]
 8001758:	0052      	lsls	r2, r2, #1
 800175a:	fa01 f202 	lsl.w	r2, r1, r2
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	601a      	str	r2, [r3, #0]

	if(output_type != GPIO_Configuration.Output_Type.None) Port -> OTYPER |= output_type << pin;
 8001764:	2202      	movs	r2, #2
 8001766:	787b      	ldrb	r3, [r7, #1]
 8001768:	4293      	cmp	r3, r2
 800176a:	d008      	beq.n	800177e <GPIO_Pin_Init+0x4e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	7879      	ldrb	r1, [r7, #1]
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	fa01 f202 	lsl.w	r2, r1, r2
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	605a      	str	r2, [r3, #4]
	if(speed != GPIO_Configuration.Speed.None) Port -> OSPEEDR |= speed << (pin*2);
 800177e:	2204      	movs	r2, #4
 8001780:	7c3b      	ldrb	r3, [r7, #16]
 8001782:	4293      	cmp	r3, r2
 8001784:	d009      	beq.n	800179a <GPIO_Pin_Init+0x6a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	7c39      	ldrb	r1, [r7, #16]
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	0052      	lsls	r2, r2, #1
 8001790:	fa01 f202 	lsl.w	r2, r1, r2
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	609a      	str	r2, [r3, #8]
	if(pull != GPIO_Configuration.Pull.None) Port -> PUPDR |= pull << (pin*2);
 800179a:	2204      	movs	r2, #4
 800179c:	7d3b      	ldrb	r3, [r7, #20]
 800179e:	4293      	cmp	r3, r2
 80017a0:	d009      	beq.n	80017b6 <GPIO_Pin_Init+0x86>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	7d39      	ldrb	r1, [r7, #20]
 80017a8:	78fa      	ldrb	r2, [r7, #3]
 80017aa:	0052      	lsls	r2, r2, #1
 80017ac:	fa01 f202 	lsl.w	r2, r1, r2
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	2b07      	cmp	r3, #7
 80017ba:	d80a      	bhi.n	80017d2 <GPIO_Pin_Init+0xa2>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	7e39      	ldrb	r1, [r7, #24]
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 80017d0:	e00a      	b.n	80017e8 <GPIO_Pin_Init+0xb8>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	7e39      	ldrb	r1, [r7, #24]
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	3a08      	subs	r2, #8
 80017dc:	0092      	lsls	r2, r2, #2
 80017de:	fa01 f202 	lsl.w	r2, r1, r2
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <IN_Endpoint>:
USB_FS_Config *dummyUSB;



inline static USB_OTG_INEndpointTypeDef * IN_Endpoint(uint8_t endpoint_number)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
	return (USB_OTG_INEndpointTypeDef *)(USB_OTG_FS_PERIPH_BASE + USB_OTG_IN_ENDPOINT_BASE + (endpoint_number * 0x20));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	015b      	lsls	r3, r3, #5
 80017fe:	f103 43a0 	add.w	r3, r3, #1342177280	@ 0x50000000
 8001802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <OUT_Endpoint>:

inline static USB_OTG_OUTEndpointTypeDef * OUT_Endpoint(uint8_t endpoint_number)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	71fb      	strb	r3, [r7, #7]
	return (USB_OTG_OUTEndpointTypeDef *)(USB_OTG_FS_PERIPH_BASE + USB_OTG_OUT_ENDPOINT_BASE + (endpoint_number * 0x20));
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	015b      	lsls	r3, r3, #5
 8001820:	f103 43a0 	add.w	r3, r3, #1342177280	@ 0x50000000
 8001824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <FIFO_Address>:

inline static __IO uint32_t *FIFO_Address(uint8_t endPointNumber)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
	return (__IO uint32_t *)(USB_OTG_FS_PERIPH_BASE + USB_OTG_FIFO_BASE + (endPointNumber * 0x1000));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	031b      	lsls	r3, r3, #12
 8001842:	f103 43a0 	add.w	r3, r3, #1342177280	@ 0x50000000
 8001846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <USB_FS_Write_Packet>:

static void USB_FS_Write_Packet(uint8_t endPointNumber, void const *buffer, uint16_t size)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	6039      	str	r1, [r7, #0]
 8001860:	71fb      	strb	r3, [r7, #7]
 8001862:	4613      	mov	r3, r2
 8001864:	80bb      	strh	r3, [r7, #4]
	uint32_t *fifo = FIFO_Address(endPointNumber);
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ffe3 	bl	8001834 <FIFO_Address>
 800186e:	60f8      	str	r0, [r7, #12]

	USB_OTG_INEndpointTypeDef *in_endpoint = IN_Endpoint(endPointNumber);
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ffbc 	bl	80017f0 <IN_Endpoint>
 8001878:	60b8      	str	r0, [r7, #8]

	in_endpoint->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT | USB_OTG_DIEPTSIZ_XFRSIZ);
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	611a      	str	r2, [r3, #16]
	in_endpoint->DIEPTSIZ |= (1 << USB_OTG_DIEPTSIZ_PKTCNT_Pos);
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	611a      	str	r2, [r3, #16]
	in_endpoint->DIEPTSIZ |= (size << USB_OTG_DIEPTSIZ_XFRSIZ_Pos);
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	88bb      	ldrh	r3, [r7, #4]
 8001898:	431a      	orrs	r2, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	611a      	str	r2, [r3, #16]

	in_endpoint->DIEPCTL &= ~(USB_OTG_DIEPCTL_STALL);
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	601a      	str	r2, [r3, #0]
	in_endpoint->DIEPCTL |=  USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f043 4204 	orr.w	r2, r3, #2214592512	@ 0x84000000
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	601a      	str	r2, [r3, #0]

	size = (size + 3)/4;
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	3303      	adds	r3, #3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	da00      	bge.n	80018c0 <USB_FS_Write_Packet+0x6a>
 80018be:	3303      	adds	r3, #3
 80018c0:	109b      	asrs	r3, r3, #2
 80018c2:	80bb      	strh	r3, [r7, #4]

	for(; size > 0; size--, buffer += 4)
 80018c4:	e009      	b.n	80018da <USB_FS_Write_Packet+0x84>
	{
		*fifo = *((uint32_t *)buffer);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	601a      	str	r2, [r3, #0]
	for(; size > 0; size--, buffer += 4)
 80018ce:	88bb      	ldrh	r3, [r7, #4]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	80bb      	strh	r3, [r7, #4]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	3304      	adds	r3, #4
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	88bb      	ldrh	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f2      	bne.n	80018c6 <USB_FS_Write_Packet+0x70>
	}


}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <USB_FS_Read_Packet>:

static void USB_FS_Read_Packet(void *buffer, uint16_t size)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	807b      	strh	r3, [r7, #2]
	uint32_t *fifo = FIFO_Address(0);
 80018f6:	2000      	movs	r0, #0
 80018f8:	f7ff ff9c 	bl	8001834 <FIFO_Address>
 80018fc:	6138      	str	r0, [r7, #16]

	for(; size >= 4; size -= 4, buffer += 4)
 80018fe:	e00b      	b.n	8001918 <USB_FS_Read_Packet+0x2e>
	{
		uint32_t data = *fifo;
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60fb      	str	r3, [r7, #12]
		*((uint32_t *)buffer) = data;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	601a      	str	r2, [r3, #0]
	for(; size >= 4; size -= 4, buffer += 4)
 800190c:	887b      	ldrh	r3, [r7, #2]
 800190e:	3b04      	subs	r3, #4
 8001910:	807b      	strh	r3, [r7, #2]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3304      	adds	r3, #4
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	887b      	ldrh	r3, [r7, #2]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d8f0      	bhi.n	8001900 <USB_FS_Read_Packet+0x16>
	}

	if(size > 0)
 800191e:	887b      	ldrh	r3, [r7, #2]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d016      	beq.n	8001952 <USB_FS_Read_Packet+0x68>
	{
		uint32_t data = *FIFO_Address(0);
 8001924:	2000      	movs	r0, #0
 8001926:	f7ff ff85 	bl	8001834 <FIFO_Address>
 800192a:	4603      	mov	r3, r0
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	617b      	str	r3, [r7, #20]

		for(; size > 0; size--, buffer++, data >>= 8)
 8001930:	e00c      	b.n	800194c <USB_FS_Read_Packet+0x62>
		{
			*((uint8_t*)buffer) = 0xFF & data;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	701a      	strb	r2, [r3, #0]
		for(; size > 0; size--, buffer++, data >>= 8)
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	3b01      	subs	r3, #1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3301      	adds	r3, #1
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	887b      	ldrh	r3, [r7, #2]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1ef      	bne.n	8001932 <USB_FS_Read_Packet+0x48>
		}
	}
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <USB_FS_Flush_RX_FIFO>:

static void USB_FS_Flush_RX_FIFO(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
	USB_OTG_FS -> GRSTCTL |= USB_OTG_GRSTCTL_RXFFLSH;
 800195e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001968:	f043 0310 	orr.w	r3, r3, #16
 800196c:	6113      	str	r3, [r2, #16]
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <USB_FS_Flush_TX_FIFO>:

static void USB_FS_Flush_TX_FIFO(uint8_t endPointNumber)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
	USB_OTG_FS -> GRSTCTL &= ~USB_OTG_GRSTCTL_TXFNUM;
 8001982:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800198c:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 8001990:	6113      	str	r3, [r2, #16]
	USB_OTG_FS -> GRSTCTL |= (endPointNumber << USB_OTG_GRSTCTL_TXFNUM_Pos) & USB_OTG_GRSTCTL_TXFNUM_Msk;
 8001992:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	019b      	lsls	r3, r3, #6
 800199c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80019a0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 80019a4:	4313      	orrs	r3, r2
 80019a6:	610b      	str	r3, [r1, #16]
	USB_OTG_FS -> GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 80019a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80019b2:	f043 0320 	orr.w	r3, r3, #32
 80019b6:	6113      	str	r3, [r2, #16]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <USB_FS_Refresh_FIFO_Start_Address>:


static void USB_FS_Refresh_FIFO_Start_Address(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0

	uint16_t start_address = ((USB_OTG_FS -> GRXFSIZ & USB_OTG_GRXFSIZ_RXFD_Msk)>>USB_OTG_GRXFSIZ_RXFD_Pos) * 4;
 80019ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	80fb      	strh	r3, [r7, #6]

	USB_OTG_FS -> DIEPTXF0_HNPTXFSIZ |= (start_address << USB_OTG_TX0FSA_Pos) & USB_OTG_TX0FSA_Msk;
 80019d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 80019e2:	4313      	orrs	r3, r2
 80019e4:	628b      	str	r3, [r1, #40]	@ 0x28

	start_address += ((USB_OTG_FS -> DIEPTXF0_HNPTXFSIZ  & USB_OTG_TX0FD_Msk) >> USB_OTG_TX0FD_Pos) * 4;
 80019e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ec:	0c1b      	lsrs	r3, r3, #16
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	4413      	add	r3, r2
 80019f8:	80fb      	strh	r3, [r7, #6]

	for(uint8_t txFIFONumber = 0; txFIFONumber < USB_FS_In_Endpoint_Quantity -1; txFIFONumber++ )
 80019fa:	2300      	movs	r3, #0
 80019fc:	717b      	strb	r3, [r7, #5]
 80019fe:	e020      	b.n	8001a42 <USB_FS_Refresh_FIFO_Start_Address+0x7e>
	{
		USB_OTG_FS -> DIEPTXF[txFIFONumber] |= USB_OTG_NPTXFSA_Msk & (start_address << USB_OTG_NPTXFSA_Pos) ;
 8001a00:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001a04:	797b      	ldrb	r3, [r7, #5]
 8001a06:	3340      	adds	r3, #64	@ 0x40
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	6859      	ldr	r1, [r3, #4]
 8001a0e:	88fa      	ldrh	r2, [r7, #6]
 8001a10:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001a14:	797b      	ldrb	r3, [r7, #5]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	3340      	adds	r3, #64	@ 0x40
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4403      	add	r3, r0
 8001a1e:	605a      	str	r2, [r3, #4]

		start_address += ((USB_OTG_FS -> DIEPTXF[txFIFONumber] & USB_OTG_NPTXFD_Msk) >> USB_OTG_NPTXFD_Pos) * 4;
 8001a20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001a24:	797b      	ldrb	r3, [r7, #5]
 8001a26:	3340      	adds	r3, #64	@ 0x40
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	0c1b      	lsrs	r3, r3, #16
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	4413      	add	r3, r2
 8001a3a:	80fb      	strh	r3, [r7, #6]
	for(uint8_t txFIFONumber = 0; txFIFONumber < USB_FS_In_Endpoint_Quantity -1; txFIFONumber++ )
 8001a3c:	797b      	ldrb	r3, [r7, #5]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	717b      	strb	r3, [r7, #5]
 8001a42:	797b      	ldrb	r3, [r7, #5]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d9db      	bls.n	8001a00 <USB_FS_Refresh_FIFO_Start_Address+0x3c>
	}
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <USB_FS_Configure_RXFIFO_Size>:

static void USB_FS_Configure_RXFIFO_Size(uint16_t size)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	80fb      	strh	r3, [r7, #6]
	size = 10 + (2 * (size / 4)+1);
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	330b      	adds	r3, #11
 8001a6c:	80fb      	strh	r3, [r7, #6]
	USB_OTG_FS ->GRXFSIZ |= USB_OTG_GRXFSIZ_RXFD_Msk & (size <<  USB_OTG_GRXFSIZ_RXFD_Pos);
 8001a6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	624b      	str	r3, [r1, #36]	@ 0x24

	USB_FS_Refresh_FIFO_Start_Address();
 8001a7e:	f7ff ffa1 	bl	80019c4 <USB_FS_Refresh_FIFO_Start_Address>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <USB_FS_Configure_TXFIFO_Size>:

static void USB_FS_Configure_TXFIFO_Size(uint8_t endPointNumber,uint16_t size)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	460a      	mov	r2, r1
 8001a94:	71fb      	strb	r3, [r7, #7]
 8001a96:	4613      	mov	r3, r2
 8001a98:	80bb      	strh	r3, [r7, #4]
	size = (size + 3)/4;
 8001a9a:	88bb      	ldrh	r3, [r7, #4]
 8001a9c:	3303      	adds	r3, #3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	da00      	bge.n	8001aa4 <USB_FS_Configure_TXFIFO_Size+0x1a>
 8001aa2:	3303      	adds	r3, #3
 8001aa4:	109b      	asrs	r3, r3, #2
 8001aa6:	80bb      	strh	r3, [r7, #4]

	if(endPointNumber == 0)
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <USB_FS_Configure_TXFIFO_Size+0x38>
	{
		USB_OTG_FS ->DIEPTXF0_HNPTXFSIZ |= USB_OTG_TX0FD_Msk & (size << USB_OTG_TX0FD_Pos);
 8001aae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ab2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ab4:	88bb      	ldrh	r3, [r7, #4]
 8001ab6:	041b      	lsls	r3, r3, #16
 8001ab8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8001abc:	4313      	orrs	r3, r2
 8001abe:	628b      	str	r3, [r1, #40]	@ 0x28
 8001ac0:	e012      	b.n	8001ae8 <USB_FS_Configure_TXFIFO_Size+0x5e>
	}
	else
	{
		USB_OTG_FS -> DIEPTXF[endPointNumber - 1] |= USB_OTG_NPTXFD_Msk & (size << USB_OTG_NPTXFD_Pos);
 8001ac2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	3340      	adds	r3, #64	@ 0x40
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	6859      	ldr	r1, [r3, #4]
 8001ad2:	88bb      	ldrh	r3, [r7, #4]
 8001ad4:	041a      	lsls	r2, r3, #16
 8001ad6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	3340      	adds	r3, #64	@ 0x40
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4403      	add	r3, r0
 8001ae6:	605a      	str	r2, [r3, #4]
	}
	USB_FS_Refresh_FIFO_Start_Address();
 8001ae8:	f7ff ff6c 	bl	80019c4 <USB_FS_Refresh_FIFO_Start_Address>

}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <USB_FS_Pins_Init>:




static void USB_FS_Pins_Init(bool id_pin_enable, bool sof_pin_enable, bool vbus_pin_enable)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af04      	add	r7, sp, #16
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
 8001afe:	460b      	mov	r3, r1
 8001b00:	71bb      	strb	r3, [r7, #6]
 8001b02:	4613      	mov	r3, r2
 8001b04:	717b      	strb	r3, [r7, #5]
	// D+
	GPIO_Pin_Init(GPIOA, 11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.OTG_FS_1);
 8001b06:	2002      	movs	r0, #2
 8001b08:	2400      	movs	r4, #0
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	210a      	movs	r1, #10
 8001b10:	9102      	str	r1, [sp, #8]
 8001b12:	9201      	str	r2, [sp, #4]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	4623      	mov	r3, r4
 8001b18:	4602      	mov	r2, r0
 8001b1a:	210b      	movs	r1, #11
 8001b1c:	4823      	ldr	r0, [pc, #140]	@ (8001bac <USB_FS_Pins_Init+0xb8>)
 8001b1e:	f7ff fe07 	bl	8001730 <GPIO_Pin_Init>

	// D-
	GPIO_Pin_Init(GPIOA, 12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.OTG_FS_1);
 8001b22:	2002      	movs	r0, #2
 8001b24:	2400      	movs	r4, #0
 8001b26:	2303      	movs	r3, #3
 8001b28:	2200      	movs	r2, #0
 8001b2a:	210a      	movs	r1, #10
 8001b2c:	9102      	str	r1, [sp, #8]
 8001b2e:	9201      	str	r2, [sp, #4]
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	4623      	mov	r3, r4
 8001b34:	4602      	mov	r2, r0
 8001b36:	210c      	movs	r1, #12
 8001b38:	481c      	ldr	r0, [pc, #112]	@ (8001bac <USB_FS_Pins_Init+0xb8>)
 8001b3a:	f7ff fdf9 	bl	8001730 <GPIO_Pin_Init>

	if(id_pin_enable)
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00d      	beq.n	8001b60 <USB_FS_Pins_Init+0x6c>
	{
		GPIO_Pin_Init(GPIOA, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.OTG_FS_1);
 8001b44:	2002      	movs	r0, #2
 8001b46:	2400      	movs	r4, #0
 8001b48:	2303      	movs	r3, #3
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	210a      	movs	r1, #10
 8001b4e:	9102      	str	r1, [sp, #8]
 8001b50:	9201      	str	r2, [sp, #4]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4623      	mov	r3, r4
 8001b56:	4602      	mov	r2, r0
 8001b58:	210a      	movs	r1, #10
 8001b5a:	4814      	ldr	r0, [pc, #80]	@ (8001bac <USB_FS_Pins_Init+0xb8>)
 8001b5c:	f7ff fde8 	bl	8001730 <GPIO_Pin_Init>
	}

	if(sof_pin_enable)
 8001b60:	79bb      	ldrb	r3, [r7, #6]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00d      	beq.n	8001b82 <USB_FS_Pins_Init+0x8e>
	{
		GPIO_Pin_Init(GPIOA, 8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.OTG_FS_1);
 8001b66:	2002      	movs	r0, #2
 8001b68:	2400      	movs	r4, #0
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	210a      	movs	r1, #10
 8001b70:	9102      	str	r1, [sp, #8]
 8001b72:	9201      	str	r2, [sp, #4]
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	4623      	mov	r3, r4
 8001b78:	4602      	mov	r2, r0
 8001b7a:	2108      	movs	r1, #8
 8001b7c:	480b      	ldr	r0, [pc, #44]	@ (8001bac <USB_FS_Pins_Init+0xb8>)
 8001b7e:	f7ff fdd7 	bl	8001730 <GPIO_Pin_Init>
	}

	if(vbus_pin_enable)
 8001b82:	797b      	ldrb	r3, [r7, #5]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00d      	beq.n	8001ba4 <USB_FS_Pins_Init+0xb0>
	{
		GPIO_Pin_Init(GPIOA, 9, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	2402      	movs	r4, #2
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	9102      	str	r1, [sp, #8]
 8001b94:	9201      	str	r2, [sp, #4]
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	4623      	mov	r3, r4
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	2109      	movs	r1, #9
 8001b9e:	4803      	ldr	r0, [pc, #12]	@ (8001bac <USB_FS_Pins_Init+0xb8>)
 8001ba0:	f7ff fdc6 	bl	8001730 <GPIO_Pin_Init>
	}
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd90      	pop	{r4, r7, pc}
 8001bac:	40020000 	.word	0x40020000

08001bb0 <USB_FS_Configure_Endpoint_0>:


static void USB_FS_Configure_Endpoint_0( uint16_t endpointSize)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	80fb      	strh	r3, [r7, #6]
	USB_OTG_FS_DEVICE -> DAINTMSK |= (1 << 0 | 1 << 16);
 8001bba:	4b1a      	ldr	r3, [pc, #104]	@ (8001c24 <USB_FS_Configure_Endpoint_0+0x74>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4a19      	ldr	r2, [pc, #100]	@ (8001c24 <USB_FS_Configure_Endpoint_0+0x74>)
 8001bc0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001bc4:	61d3      	str	r3, [r2, #28]

	IN_Endpoint(0) -> DIEPCTL &= ~(USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_USBAEP | USB_OTG_DIEPCTL_SNAK);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f7ff fe12 	bl	80017f0 <IN_Endpoint>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	6811      	ldr	r1, [r2, #0]
 8001bd0:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <USB_FS_Configure_Endpoint_0+0x78>)
 8001bd2:	400b      	ands	r3, r1
 8001bd4:	6013      	str	r3, [r2, #0]
	IN_Endpoint(0) -> DIEPCTL |= USB_OTG_DIEPCTL_USBAEP | USB_OTG_DIEPCTL_SNAK;
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff fe0a 	bl	80017f0 <IN_Endpoint>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	6813      	ldr	r3, [r2, #0]
 8001be0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001be4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001be8:	6013      	str	r3, [r2, #0]
	IN_Endpoint(0) -> DIEPCTL |= endpointSize << USB_OTG_DIEPCTL_MPSIZ_Pos;
 8001bea:	2000      	movs	r0, #0
 8001bec:	f7ff fe00 	bl	80017f0 <IN_Endpoint>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	6819      	ldr	r1, [r3, #0]
 8001bf4:	88fa      	ldrh	r2, [r7, #6]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
	OUT_Endpoint(0) -> DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7ff fe09 	bl	8001812 <OUT_Endpoint>
 8001c00:	4603      	mov	r3, r0
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8001c08:	601a      	str	r2, [r3, #0]

	USB_FS_Configure_RXFIFO_Size(64);
 8001c0a:	2040      	movs	r0, #64	@ 0x40
 8001c0c:	f7ff ff23 	bl	8001a56 <USB_FS_Configure_RXFIFO_Size>
	USB_FS_Configure_TXFIFO_Size(0, endpointSize);
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	4619      	mov	r1, r3
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7ff ff38 	bl	8001a8a <USB_FS_Configure_TXFIFO_Size>

}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	50000800 	.word	0x50000800
 8001c28:	f7ff7800 	.word	0xf7ff7800

08001c2c <USB_FS_Configure_In_Endpoints>:

static void USB_FS_Configure_In_Endpoints(uint8_t endPointNumber, USB_EndpointType endPointType, uint16_t endPointSize)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
 8001c36:	460b      	mov	r3, r1
 8001c38:	71bb      	strb	r3, [r7, #6]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	80bb      	strh	r3, [r7, #4]
	USB_OTG_FS_DEVICE -> DAINTMSK |= (1 << endPointNumber);
 8001c3e:	4b22      	ldr	r3, [pc, #136]	@ (8001cc8 <USB_FS_Configure_In_Endpoints+0x9c>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	79fa      	ldrb	r2, [r7, #7]
 8001c44:	2101      	movs	r1, #1
 8001c46:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc8 <USB_FS_Configure_In_Endpoints+0x9c>)
 8001c4e:	430b      	orrs	r3, r1
 8001c50:	61d3      	str	r3, [r2, #28]
	IN_Endpoint(endPointNumber) -> DIEPCTL &= ~(USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_USBAEP | USB_OTG_DIEPCTL_SNAK | USB_OTG_DIEPCTL_EPTYP | USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DIEPCTL_TXFNUM);
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fdcb 	bl	80017f0 <IN_Endpoint>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	6811      	ldr	r1, [r2, #0]
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <USB_FS_Configure_In_Endpoints+0xa0>)
 8001c60:	400b      	ands	r3, r1
 8001c62:	6013      	str	r3, [r2, #0]
	IN_Endpoint(endPointNumber) -> DIEPCTL |= USB_OTG_DIEPCTL_USBAEP | USB_OTG_DIEPCTL_SNAK  | USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fdc2 	bl	80017f0 <IN_Endpoint>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	6813      	ldr	r3, [r2, #0]
 8001c70:	f043 53c0 	orr.w	r3, r3, #402653184	@ 0x18000000
 8001c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c78:	6013      	str	r3, [r2, #0]
	IN_Endpoint(endPointNumber) -> DIEPCTL |= endPointSize << USB_OTG_DIEPCTL_MPSIZ_Pos;
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fdb7 	bl	80017f0 <IN_Endpoint>
 8001c82:	4603      	mov	r3, r0
 8001c84:	6819      	ldr	r1, [r3, #0]
 8001c86:	88ba      	ldrh	r2, [r7, #4]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]
	IN_Endpoint(endPointNumber) -> DIEPCTL |= endPointType << USB_OTG_DIEPCTL_EPTYP_Pos;
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fdae 	bl	80017f0 <IN_Endpoint>
 8001c94:	4603      	mov	r3, r0
 8001c96:	6819      	ldr	r1, [r3, #0]
 8001c98:	79ba      	ldrb	r2, [r7, #6]
 8001c9a:	0492      	lsls	r2, r2, #18
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]
	IN_Endpoint(endPointNumber) -> DIEPCTL |= endPointNumber << USB_OTG_DIEPCTL_TXFNUM_Pos;
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fda4 	bl	80017f0 <IN_Endpoint>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	6819      	ldr	r1, [r3, #0]
 8001cac:	79fa      	ldrb	r2, [r7, #7]
 8001cae:	0592      	lsls	r2, r2, #22
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]
	USB_FS_Configure_TXFIFO_Size(endPointNumber, endPointSize);
 8001cb4:	88ba      	ldrh	r2, [r7, #4]
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fee5 	bl	8001a8a <USB_FS_Configure_TXFIFO_Size>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	50000800 	.word	0x50000800
 8001ccc:	e4337800 	.word	0xe4337800

08001cd0 <USB_FS_Deconfigure_In_Endpoints>:

static void USB_FS_Deconfigure_In_Endpoints(uint8_t endPointNumber)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_Endpoint(endPointNumber);
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fd87 	bl	80017f0 <IN_Endpoint>
 8001ce2:	60f8      	str	r0, [r7, #12]
	USB_OTG_OUTEndpointTypeDef *out_endpoint = OUT_Endpoint(endPointNumber);
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fd93 	bl	8001812 <OUT_Endpoint>
 8001cec:	60b8      	str	r0, [r7, #8]
	USB_OTG_FS_DEVICE -> DAINTMSK &= ~(1 << endPointNumber | 1 << endPointNumber);
 8001cee:	4b20      	ldr	r3, [pc, #128]	@ (8001d70 <USB_FS_Deconfigure_In_Endpoints+0xa0>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	79fa      	ldrb	r2, [r7, #7]
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfa:	43d2      	mvns	r2, r2
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8001d70 <USB_FS_Deconfigure_In_Endpoints+0xa0>)
 8001d00:	400b      	ands	r3, r1
 8001d02:	61d3      	str	r3, [r2, #28]

	in_endpoint -> DIEPINT = 0x29FF;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f642 12ff 	movw	r2, #10751	@ 0x29ff
 8001d0a:	609a      	str	r2, [r3, #8]
	out_endpoint -> DOEPINT = 0x71FF;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f247 12ff 	movw	r2, #29183	@ 0x71ff
 8001d12:	609a      	str	r2, [r3, #8]

	if(in_endpoint -> DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	da05      	bge.n	8001d28 <USB_FS_Deconfigure_In_Endpoints+0x58>
	{
		in_endpoint -> DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	601a      	str	r2, [r3, #0]
	}

	in_endpoint -> DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	601a      	str	r2, [r3, #0]

	if(endPointNumber != 0)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00f      	beq.n	8001d5a <USB_FS_Deconfigure_In_Endpoints+0x8a>
	{
		if(out_endpoint -> DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	da05      	bge.n	8001d4e <USB_FS_Deconfigure_In_Endpoints+0x7e>
		{
			out_endpoint -> DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	601a      	str	r2, [r3, #0]
		}

		out_endpoint -> DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	601a      	str	r2, [r3, #0]
	}

	USB_FS_Flush_TX_FIFO(endPointNumber);
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fe0b 	bl	8001978 <USB_FS_Flush_TX_FIFO>
	USB_FS_Flush_RX_FIFO();
 8001d62:	f7ff fdfa 	bl	800195a <USB_FS_Flush_RX_FIFO>

}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	50000800 	.word	0x50000800

08001d74 <USB_FS_Init>:


static void USB_FS_Init(USB_FS_Config *config)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	dummyUSB = config;
 8001d7c:	4a69      	ldr	r2, [pc, #420]	@ (8001f24 <USB_FS_Init+0x1b0>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6013      	str	r3, [r2, #0]

	if((config->Mode == USB_FS_Configurations.Modes.Device) || (config->Mode == USB_FS_Configurations.Modes.Host))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2204      	movs	r2, #4
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d004      	beq.n	8001d96 <USB_FS_Init+0x22>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2203      	movs	r2, #3
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d11a      	bne.n	8001dcc <USB_FS_Init+0x58>
	{
		RCC -> AHB2ENR |= RCC_AHB2ENR_OTGFSEN;
 8001d96:	4b64      	ldr	r3, [pc, #400]	@ (8001f28 <USB_FS_Init+0x1b4>)
 8001d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d9a:	4a63      	ldr	r2, [pc, #396]	@ (8001f28 <USB_FS_Init+0x1b4>)
 8001d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001da0:	6353      	str	r3, [r2, #52]	@ 0x34
		while(!(RCC -> AHB2ENR & RCC_AHB2ENR_OTGFSEN)){}
 8001da2:	bf00      	nop
 8001da4:	4b60      	ldr	r3, [pc, #384]	@ (8001f28 <USB_FS_Init+0x1b4>)
 8001da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f9      	beq.n	8001da4 <USB_FS_Init+0x30>
		USB_FS_Pins_Init(0, config->SOF_Pin_Enable, config->VBUS_Pin_Enable);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7859      	ldrb	r1, [r3, #1]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	789b      	ldrb	r3, [r3, #2]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf14      	ite	ne
 8001dbc:	2301      	movne	r3, #1
 8001dbe:	2300      	moveq	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f7ff fe95 	bl	8001af4 <USB_FS_Pins_Init>
 8001dca:	e01e      	b.n	8001e0a <USB_FS_Init+0x96>
	}
	else if(config->Mode == USB_FS_Configurations.Modes.Dual_Role_Device)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d119      	bne.n	8001e0a <USB_FS_Init+0x96>
	{
		RCC -> AHB1ENR |= RCC_AHB2ENR_OTGFSEN;
 8001dd6:	4b54      	ldr	r3, [pc, #336]	@ (8001f28 <USB_FS_Init+0x1b4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	4a53      	ldr	r2, [pc, #332]	@ (8001f28 <USB_FS_Init+0x1b4>)
 8001ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001de0:	6313      	str	r3, [r2, #48]	@ 0x30
		while(!(RCC -> AHB2ENR & RCC_AHB2ENR_OTGFSEN)){}
 8001de2:	bf00      	nop
 8001de4:	4b50      	ldr	r3, [pc, #320]	@ (8001f28 <USB_FS_Init+0x1b4>)
 8001de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f9      	beq.n	8001de4 <USB_FS_Init+0x70>
		USB_FS_Pins_Init(1, config->SOF_Pin_Enable, config->VBUS_Pin_Enable);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7859      	ldrb	r1, [r3, #1]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	789b      	ldrb	r3, [r3, #2]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	bf14      	ite	ne
 8001dfc:	2301      	movne	r3, #1
 8001dfe:	2300      	moveq	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	2001      	movs	r0, #1
 8001e06:	f7ff fe75 	bl	8001af4 <USB_FS_Pins_Init>
	}

	USB_OTG_FS -> GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT_Msk;
 8001e0a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e14:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8001e18:	60d3      	str	r3, [r2, #12]
	USB_OTG_FS -> GUSBCFG |= (0x06 << USB_OTG_GUSBCFG_TRDT_Pos) && USB_OTG_GUSBCFG_TRDT_Msk ;
 8001e1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	60d3      	str	r3, [r2, #12]

	USB_OTG_FS -> GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001e2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e38:	60d3      	str	r3, [r2, #12]

	if(config->Mode == USB_FS_Configurations.Modes.Device)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2204      	movs	r2, #4
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d110      	bne.n	8001e66 <USB_FS_Init+0xf2>
	{
		USB_OTG_FS -> GUSBCFG &= ~USB_OTG_GUSBCFG_FDMOD_Msk;
 8001e44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e4e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001e52:	60d3      	str	r3, [r2, #12]
		USB_OTG_FS -> GUSBCFG |=  USB_OTG_GUSBCFG_FDMOD;
 8001e54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e62:	60d3      	str	r3, [r2, #12]
 8001e64:	e014      	b.n	8001e90 <USB_FS_Init+0x11c>
	}
	else if(config->Mode == USB_FS_Configurations.Modes.Host)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d10f      	bne.n	8001e90 <USB_FS_Init+0x11c>
	{
		USB_OTG_FS -> GUSBCFG &= ~USB_OTG_GUSBCFG_FHMOD_Msk;
 8001e70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001e7e:	60d3      	str	r3, [r2, #12]
		USB_OTG_FS -> GUSBCFG |=  USB_OTG_GUSBCFG_FHMOD;
 8001e80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001e8e:	60d3      	str	r3, [r2, #12]
	}


	USB_OTG_FS_DEVICE -> DCFG &= ~USB_OTG_DCFG_DSPD;
 8001e90:	4b26      	ldr	r3, [pc, #152]	@ (8001f2c <USB_FS_Init+0x1b8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a25      	ldr	r2, [pc, #148]	@ (8001f2c <USB_FS_Init+0x1b8>)
 8001e96:	f023 0303 	bic.w	r3, r3, #3
 8001e9a:	6013      	str	r3, [r2, #0]
	USB_OTG_FS_DEVICE -> DCFG |=  USB_OTG_DCFG_DSPD;
 8001e9c:	4b23      	ldr	r3, [pc, #140]	@ (8001f2c <USB_FS_Init+0x1b8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a22      	ldr	r2, [pc, #136]	@ (8001f2c <USB_FS_Init+0x1b8>)
 8001ea2:	f043 0303 	orr.w	r3, r3, #3
 8001ea6:	6013      	str	r3, [r2, #0]

	USB_OTG_FS -> GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001ea8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001eb2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001eb6:	6393      	str	r3, [r2, #56]	@ 0x38
	USB_OTG_FS -> GCCFG |=  USB_OTG_GCCFG_VBUSBSEN;
 8001eb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ebe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001ec2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ec6:	6393      	str	r3, [r2, #56]	@ 0x38

	USB_OTG_FS -> GINTMSK &= ~(USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_SOFM | USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM | USB_OTG_GINTMSK_IEPINT | USB_OTG_GINTMSK_RXFLVLM | USB_OTG_GINTSTS_OEPINT);
 8001ec8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8001ed2:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <USB_FS_Init+0x1bc>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	618b      	str	r3, [r1, #24]
	USB_OTG_FS -> GINTMSK |= (USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_SOFM | USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM | USB_OTG_GINTMSK_IEPINT | USB_OTG_GINTMSK_RXFLVLM | USB_OTG_GINTSTS_OEPINT);
 8001ed8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001edc:	699a      	ldr	r2, [r3, #24]
 8001ede:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8001ee2:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <USB_FS_Init+0x1c0>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	618b      	str	r3, [r1, #24]

	USB_OTG_FS -> GINTSTS = 0xFFFFFFFF;
 8001ee8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	615a      	str	r2, [r3, #20]

	USB_OTG_FS -> GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001ef2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6093      	str	r3, [r2, #8]

	USB_OTG_FS_DEVICE -> DOEPMSK |= USB_OTG_DOEPMSK_XFRCM;
 8001f02:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <USB_FS_Init+0x1b8>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	4a09      	ldr	r2, [pc, #36]	@ (8001f2c <USB_FS_Init+0x1b8>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6153      	str	r3, [r2, #20]
	USB_OTG_FS_DEVICE -> DIEPMSK |= USB_OTG_DIEPMSK_XFRCM;
 8001f0e:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <USB_FS_Init+0x1b8>)
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	4a06      	ldr	r2, [pc, #24]	@ (8001f2c <USB_FS_Init+0x1b8>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6113      	str	r3, [r2, #16]

	// High Speed USB will be worked on later
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000388 	.word	0x20000388
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	50000800 	.word	0x50000800
 8001f30:	7ff3c7e7 	.word	0x7ff3c7e7
 8001f34:	800c3818 	.word	0x800c3818

08001f38 <USB_FS_Connect>:

static void USB_FS_Connect(USB_FS_Config *config)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	USB_OTG_FS -> GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f46:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f4e:	6393      	str	r3, [r2, #56]	@ 0x38
	USB_OTG_FS_DEVICE -> DCTL &= ~USB_OTG_DCTL_SDIS;
 8001f50:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <USB_FS_Connect+0x30>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4a04      	ldr	r2, [pc, #16]	@ (8001f68 <USB_FS_Connect+0x30>)
 8001f56:	f023 0302 	bic.w	r3, r3, #2
 8001f5a:	6053      	str	r3, [r2, #4]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	50000800 	.word	0x50000800

08001f6c <USB_FS_Disconnect>:

static void USB_FS_Disconnect(USB_FS_Config *config)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	USB_OTG_FS_DEVICE -> DCTL |= USB_OTG_DCTL_SDIS;
 8001f74:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <USB_FS_Disconnect+0x30>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a08      	ldr	r2, [pc, #32]	@ (8001f9c <USB_FS_Disconnect+0x30>)
 8001f7a:	f043 0302 	orr.w	r3, r3, #2
 8001f7e:	6053      	str	r3, [r2, #4]
	USB_OTG_FS -> GCCFG &= ~USB_OTG_GCCFG_PWRDWN;
 8001f80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f86:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001f8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f8e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	50000800 	.word	0x50000800

08001fa0 <USB_FS_RST_Handler>:

static void USB_FS_RST_Handler()
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i <= USB_FS_Endpoint_Quantity; i++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	71fb      	strb	r3, [r7, #7]
 8001faa:	e006      	b.n	8001fba <USB_FS_RST_Handler+0x1a>
	{
		USB_FS_Deconfigure_In_Endpoints(i);
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fe8e 	bl	8001cd0 <USB_FS_Deconfigure_In_Endpoints>
	for(uint8_t i = 0; i <= USB_FS_Endpoint_Quantity; i++)
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	71fb      	strb	r3, [r7, #7]
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d9f5      	bls.n	8001fac <USB_FS_RST_Handler+0xc>
	}

	USB_Events.on_usb_reset_received();
 8001fc0:	4b03      	ldr	r3, [pc, #12]	@ (8001fd0 <USB_FS_RST_Handler+0x30>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4798      	blx	r3
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000000 	.word	0x20000000

08001fd4 <USB_FS_ENUM_DONE_Handler>:

static void USB_FS_ENUM_DONE_Handler()
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
	USB_FS_Configure_Endpoint_0(8);
 8001fd8:	2008      	movs	r0, #8
 8001fda:	f7ff fde9 	bl	8001bb0 <USB_FS_Configure_Endpoint_0>
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <USB_FS_RX_FIFOLV_Handler>:



static void USB_FS_RX_FIFOLV_Handler()
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
	uint32_t receive_packet_status = USB_OTG_FS -> GRXSTSP;
 8001fea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	607b      	str	r3, [r7, #4]

	uint8_t endPointNumber = (USB_OTG_GRXSTSP_EPNUM_Msk & receive_packet_status) >> USB_OTG_GRXSTSP_EPNUM_Pos;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_count     = (USB_OTG_GRXSTSP_BCNT_Msk & receive_packet_status) >> USB_OTG_GRXSTSP_BCNT_Pos;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	70bb      	strb	r3, [r7, #2]
	uint8_t packet_status  = (USB_OTG_GRXSTSP_PKTSTS_Msk & receive_packet_status) >> USB_OTG_GRXSTSP_PKTSTS_Pos;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	0c5b      	lsrs	r3, r3, #17
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	707b      	strb	r3, [r7, #1]

	switch (packet_status) {
 800200e:	787b      	ldrb	r3, [r7, #1]
 8002010:	3b01      	subs	r3, #1
 8002012:	2b05      	cmp	r3, #5
 8002014:	d82a      	bhi.n	800206c <USB_FS_RX_FIFOLV_Handler+0x88>
 8002016:	a201      	add	r2, pc, #4	@ (adr r2, 800201c <USB_FS_RX_FIFOLV_Handler+0x38>)
 8002018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201c:	0800206b 	.word	0x0800206b
 8002020:	0800206b 	.word	0x0800206b
 8002024:	08002035 	.word	0x08002035
 8002028:	08002049 	.word	0x08002049
 800202c:	0800206d 	.word	0x0800206d
 8002030:	0800205d 	.word	0x0800205d
		}
			break;

		case USB_OUT_TRANSFER_COMPLETED:
		{
			OUT_Endpoint(endPointNumber) -> DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fbeb 	bl	8001812 <OUT_Endpoint>
 800203c:	4603      	mov	r3, r0
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8002044:	601a      	str	r2, [r3, #0]
		}
			break;
 8002046:	e011      	b.n	800206c <USB_FS_RX_FIFOLV_Handler+0x88>

		case USB_SETUP_TRANSACTION_COMPLETED:
		{
			OUT_Endpoint(endPointNumber) -> DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fbe1 	bl	8001812 <OUT_Endpoint>
 8002050:	4603      	mov	r3, r0
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8002058:	601a      	str	r2, [r3, #0]
		}
			break;
 800205a:	e007      	b.n	800206c <USB_FS_RX_FIFOLV_Handler+0x88>

		case USB_SETUP_DATA_PACKET_RECEIVED:
		{
			USB_Events.on_setup_data_received(endPointNumber, byte_count);
 800205c:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <USB_FS_RX_FIFOLV_Handler+0x90>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	78b9      	ldrb	r1, [r7, #2]
 8002062:	78fa      	ldrb	r2, [r7, #3]
 8002064:	4610      	mov	r0, r2
 8002066:	4798      	blx	r3
		}
			break;
 8002068:	e000      	b.n	800206c <USB_FS_RX_FIFOLV_Handler+0x88>
			break;
 800206a:	bf00      	nop

	}


}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000000 	.word	0x20000000

08002078 <USB_FS_Global_Status_Interrupt_Handler>:




static void USB_FS_Global_Status_Interrupt_Handler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
	volatile uint32_t gintsts = USB_OTG_FS -> GINTSTS;
 800207e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	607b      	str	r3, [r7, #4]

	if(gintsts & USB_OTG_GINTSTS_USBRST)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <USB_FS_Global_Status_Interrupt_Handler+0x2e>
	{
		USB_FS_RST_Handler();
 8002090:	f7ff ff86 	bl	8001fa0 <USB_FS_RST_Handler>
		USB_OTG_FS -> GINTSTS |= USB_OTG_GINTSTS_USBRST;
 8002094:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800209e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020a2:	6153      	str	r3, [r2, #20]
	}
	else if(gintsts & USB_OTG_GINTSTS_OEPINT)
	{
		USB_OTG_FS -> GINTSTS |= USB_OTG_GINTSTS_OEPINT;
	}
}
 80020a4:	e03a      	b.n	800211c <USB_FS_Global_Status_Interrupt_Handler+0xa4>
	else if(gintsts & USB_OTG_GINTSTS_ENUMDNE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00a      	beq.n	80020c6 <USB_FS_Global_Status_Interrupt_Handler+0x4e>
		USB_FS_ENUM_DONE_Handler();
 80020b0:	f7ff ff90 	bl	8001fd4 <USB_FS_ENUM_DONE_Handler>
		USB_OTG_FS -> GINTSTS |= USB_OTG_GINTSTS_ENUMDNE;
 80020b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80020be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020c2:	6153      	str	r3, [r2, #20]
}
 80020c4:	e02a      	b.n	800211c <USB_FS_Global_Status_Interrupt_Handler+0xa4>
	else if(gintsts & USB_OTG_GINTSTS_RXFLVL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <USB_FS_Global_Status_Interrupt_Handler+0x6e>
		USB_FS_RX_FIFOLV_Handler();
 80020d0:	f7ff ff88 	bl	8001fe4 <USB_FS_RX_FIFOLV_Handler>
		USB_OTG_FS -> GINTSTS |= USB_OTG_GINTSTS_RXFLVL;
 80020d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80020de:	f043 0310 	orr.w	r3, r3, #16
 80020e2:	6153      	str	r3, [r2, #20]
}
 80020e4:	e01a      	b.n	800211c <USB_FS_Global_Status_Interrupt_Handler+0xa4>
	else if(gintsts & USB_OTG_GINTSTS_IEPINT)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <USB_FS_Global_Status_Interrupt_Handler+0x8a>
		USB_OTG_FS -> GINTSTS |= USB_OTG_GINTSTS_IEPINT;
 80020f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80020fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020fe:	6153      	str	r3, [r2, #20]
}
 8002100:	e00c      	b.n	800211c <USB_FS_Global_Status_Interrupt_Handler+0xa4>
	else if(gintsts & USB_OTG_GINTSTS_OEPINT)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d007      	beq.n	800211c <USB_FS_Global_Status_Interrupt_Handler+0xa4>
		USB_OTG_FS -> GINTSTS |= USB_OTG_GINTSTS_OEPINT;
 800210c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002116:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800211a:	6153      	str	r3, [r2, #20]
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <USB_FS_Set_Device_Address>:

static void USB_FS_Set_Device_Address(uint8_t address)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
	USB_OTG_FS_DEVICE -> DCFG &= ~USB_OTG_DCFG_DAD;
 800212e:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <USB_FS_Set_Device_Address+0x34>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a09      	ldr	r2, [pc, #36]	@ (8002158 <USB_FS_Set_Device_Address+0x34>)
 8002134:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002138:	6013      	str	r3, [r2, #0]
	USB_OTG_FS_DEVICE -> DCFG |= (address << USB_OTG_DCFG_DAD_Pos) & USB_OTG_DCFG_DAD_Msk;
 800213a:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <USB_FS_Set_Device_Address+0x34>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8002146:	4904      	ldr	r1, [pc, #16]	@ (8002158 <USB_FS_Set_Device_Address+0x34>)
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	50000800 	.word	0x50000800

0800215c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002164:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d013      	beq.n	800219c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002174:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800217c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00b      	beq.n	800219c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002184:	e000      	b.n	8002188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002188:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f9      	beq.n	8002186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002192:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800219c:	687b      	ldr	r3, [r7, #4]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <Log_Print>:
	ITM->TER |= (1 << 0);  // Enable stimulus port 0

}

__STATIC_INLINE void Log_Print(char *msg, ...)
{
 80021aa:	b40f      	push	{r0, r1, r2, r3}
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b09c      	sub	sp, #112	@ 0x70
 80021b0:	af00      	add	r7, sp, #0
	char buff[100];

	va_list args;
	va_start(args, msg);
 80021b2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80021b6:	607b      	str	r3, [r7, #4]
	vsprintf(buff, msg, args);
 80021b8:	f107 0308 	add.w	r3, r7, #8
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 facb 	bl	800275c <vsiprintf>

	for(int i = 0; i<= strlen(buff)-1; i++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021ca:	e00a      	b.n	80021e2 <Log_Print+0x38>
	{
		ITM_SendChar(buff[i]);
 80021cc:	f107 0208 	add.w	r2, r7, #8
 80021d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021d2:	4413      	add	r3, r2
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ffc0 	bl	800215c <ITM_SendChar>
	for(int i = 0; i<= strlen(buff)-1; i++)
 80021dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021de:	3301      	adds	r3, #1
 80021e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021e2:	f107 0308 	add.w	r3, r7, #8
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fd fff2 	bl	80001d0 <strlen>
 80021ec:	4603      	mov	r3, r0
 80021ee:	1e5a      	subs	r2, r3, #1
 80021f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d2ea      	bcs.n	80021cc <Log_Print+0x22>
	}
}
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
 80021fa:	3770      	adds	r7, #112	@ 0x70
 80021fc:	46bd      	mov	sp, r7
 80021fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002202:	b004      	add	sp, #16
 8002204:	4770      	bx	lr
	...

08002208 <USB_Initialize>:

USB_FS_Config usb_core_handle;
USB_Device *usb_device_handle;

void USB_Initialize(USB_Device *usb_device_config)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	usb_device_handle = usb_device_config;
 8002210:	4a0b      	ldr	r2, [pc, #44]	@ (8002240 <USB_Initialize+0x38>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6013      	str	r3, [r2, #0]

	usb_core_handle.Mode = USB_FS_Configurations.Modes.Device;
 8002216:	2204      	movs	r2, #4
 8002218:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <USB_Initialize+0x3c>)
 800221a:	701a      	strb	r2, [r3, #0]
	usb_core_handle.SOF_Pin_Enable = 0;
 800221c:	4b09      	ldr	r3, [pc, #36]	@ (8002244 <USB_Initialize+0x3c>)
 800221e:	2200      	movs	r2, #0
 8002220:	705a      	strb	r2, [r3, #1]
	usb_core_handle.VBUS_Pin_Enable = 0;
 8002222:	4b08      	ldr	r3, [pc, #32]	@ (8002244 <USB_Initialize+0x3c>)
 8002224:	2200      	movs	r2, #0
 8002226:	709a      	strb	r2, [r3, #2]

	USB_Driver_Functions.initalize_Core(&usb_core_handle);
 8002228:	4b07      	ldr	r3, [pc, #28]	@ (8002248 <USB_Initialize+0x40>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4805      	ldr	r0, [pc, #20]	@ (8002244 <USB_Initialize+0x3c>)
 800222e:	4798      	blx	r3
	USB_Driver_Functions.connect(&usb_core_handle);
 8002230:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <USB_Initialize+0x40>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4803      	ldr	r0, [pc, #12]	@ (8002244 <USB_Initialize+0x3c>)
 8002236:	4798      	blx	r3
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000390 	.word	0x20000390
 8002244:	2000038c 	.word	0x2000038c
 8002248:	08003088 	.word	0x08003088

0800224c <USB_Poll>:


void USB_Poll(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
	USB_Driver_Functions.poll();
 8002250:	4b02      	ldr	r3, [pc, #8]	@ (800225c <USB_Poll+0x10>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4798      	blx	r3
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	08003088 	.word	0x08003088

08002260 <USB_Reset_Received_Handler>:

static void USB_Reset_Received_Handler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	usb_device_handle -> in_data_size = 0;
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <USB_Reset_Received_Handler+0x38>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2200      	movs	r2, #0
 800226a:	60da      	str	r2, [r3, #12]
	usb_device_handle -> out_data_size = 0;
 800226c:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <USB_Reset_Received_Handler+0x38>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
	usb_device_handle -> configuration_Value = 0;
 8002274:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <USB_Reset_Received_Handler+0x38>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	709a      	strb	r2, [r3, #2]
	usb_device_handle -> Device_State = USB_DEVICE_STATE_DEFAULT;
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <USB_Reset_Received_Handler+0x38>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
	usb_device_handle -> Control_Transfer_Stage = USB_CONTROL_STAGE_SETUP;
 8002284:	4b04      	ldr	r3, [pc, #16]	@ (8002298 <USB_Reset_Received_Handler+0x38>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2200      	movs	r2, #0
 800228a:	705a      	strb	r2, [r3, #1]
	USB_Driver_Functions.set_device_address(0);
 800228c:	4b03      	ldr	r3, [pc, #12]	@ (800229c <USB_Reset_Received_Handler+0x3c>)
 800228e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002290:	2000      	movs	r0, #0
 8002292:	4798      	blx	r3
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000390 	.word	0x20000390
 800229c:	08003088 	.word	0x08003088

080022a0 <USB_Process_Request>:

}


static void USB_Process_Request()
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
	USB_Requests const *request = usb_device_handle->ptr_out_buffer;
 80022a6:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <USB_Process_Request+0x28>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	607b      	str	r3, [r7, #4]


	switch (request->bmRequestType & (USB_BM_REQUEST_TYPE_TYPE_MASK | USB_BM_REQUEST_TYPE_RECIPIENT_MASK))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	f003 0363 	and.w	r3, r3, #99	@ 0x63
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d100      	bne.n	80022bc <USB_Process_Request+0x1c>
	{
		case (USB_BM_REQUEST_TYPE_TYPE_STANDARD | USB_BM_REQUEST_TYPE_RECIPIENT_DEVICE):
		{

		}
			break;
 80022ba:	bf00      	nop
	}
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	20000390 	.word	0x20000390

080022cc <USB_Setup_Data_Received_Handler>:


static void USB_Setup_Data_Received_Handler(uint8_t endPointNumber, uint8_t byteCount)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	460a      	mov	r2, r1
 80022d6:	71fb      	strb	r3, [r7, #7]
 80022d8:	4613      	mov	r3, r2
 80022da:	71bb      	strb	r3, [r7, #6]

	USB_Driver_Functions.read_Packet(usb_device_handle->ptr_out_buffer, byteCount);
 80022dc:	4b12      	ldr	r3, [pc, #72]	@ (8002328 <USB_Setup_Data_Received_Handler+0x5c>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a12      	ldr	r2, [pc, #72]	@ (800232c <USB_Setup_Data_Received_Handler+0x60>)
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	6852      	ldr	r2, [r2, #4]
 80022e6:	79b9      	ldrb	r1, [r7, #6]
 80022e8:	b289      	uxth	r1, r1
 80022ea:	4610      	mov	r0, r2
 80022ec:	4798      	blx	r3

	Log_Print("Setup Data");
 80022ee:	4810      	ldr	r0, [pc, #64]	@ (8002330 <USB_Setup_Data_Received_Handler+0x64>)
 80022f0:	f7ff ff5b 	bl	80021aa <Log_Print>
	for(int i = 0; i < byteCount; i++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e00b      	b.n	8002312 <USB_Setup_Data_Received_Handler+0x46>
	{
		Log_Print("%d,",usb_device_handle->ptr_out_buffer++);
 80022fa:	4b0c      	ldr	r3, [pc, #48]	@ (800232c <USB_Setup_Data_Received_Handler+0x60>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	1c51      	adds	r1, r2, #1
 8002302:	6059      	str	r1, [r3, #4]
 8002304:	4611      	mov	r1, r2
 8002306:	480b      	ldr	r0, [pc, #44]	@ (8002334 <USB_Setup_Data_Received_Handler+0x68>)
 8002308:	f7ff ff4f 	bl	80021aa <Log_Print>
	for(int i = 0; i < byteCount; i++)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3301      	adds	r3, #1
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	79bb      	ldrb	r3, [r7, #6]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	429a      	cmp	r2, r3
 8002318:	dbef      	blt.n	80022fa <USB_Setup_Data_Received_Handler+0x2e>
	}
	USB_Process_Request();
 800231a:	f7ff ffc1 	bl	80022a0 <USB_Process_Request>

}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	08003088 	.word	0x08003088
 800232c:	20000390 	.word	0x20000390
 8002330:	08003078 	.word	0x08003078
 8002334:	08003084 	.word	0x08003084

08002338 <__NVIC_SetPriority>:
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	2b00      	cmp	r3, #0
 800234a:	db0a      	blt.n	8002362 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	490c      	ldr	r1, [pc, #48]	@ (8002384 <__NVIC_SetPriority+0x4c>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	0112      	lsls	r2, r2, #4
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	440b      	add	r3, r1
 800235c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002360:	e00a      	b.n	8002378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4908      	ldr	r1, [pc, #32]	@ (8002388 <__NVIC_SetPriority+0x50>)
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	3b04      	subs	r3, #4
 8002370:	0112      	lsls	r2, r2, #4
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	440b      	add	r3, r1
 8002376:	761a      	strb	r2, [r3, #24]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000e100 	.word	0xe000e100
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <SysTick_Config>:
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800239c:	d301      	bcc.n	80023a2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800239e:	2301      	movs	r3, #1
 80023a0:	e00f      	b.n	80023c2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a2:	4a0a      	ldr	r2, [pc, #40]	@ (80023cc <SysTick_Config+0x40>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023aa:	210f      	movs	r1, #15
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7ff ffc2 	bl	8002338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	4b05      	ldr	r3, [pc, #20]	@ (80023cc <SysTick_Config+0x40>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ba:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <SysTick_Config+0x40>)
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010

080023d0 <MCU_Clock_Setup>:
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
	SystemInit();
 80023d6:	f000 f8ef 	bl	80025b8 <SystemInit>
	uint8_t pll_m = 8;
 80023da:	2308      	movs	r3, #8
 80023dc:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 80023de:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80023e2:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 80023e8:	2307      	movs	r3, #7
 80023ea:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 80023ec:	4b3c      	ldr	r3, [pc, #240]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 80023f2:	4b3b      	ldr	r3, [pc, #236]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a3a      	ldr	r2, [pc, #232]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 80023fe:	bf00      	nop
 8002400:	4b37      	ldr	r3, [pc, #220]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f9      	beq.n	8002400 <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 800240c:	4b34      	ldr	r3, [pc, #208]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002410:	4a33      	ldr	r2, [pc, #204]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 8002412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002416:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8002418:	4b32      	ldr	r3, [pc, #200]	@ (80024e4 <MCU_Clock_Setup+0x114>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a31      	ldr	r2, [pc, #196]	@ (80024e4 <MCU_Clock_Setup+0x114>)
 800241e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002422:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8002424:	4b30      	ldr	r3, [pc, #192]	@ (80024e8 <MCU_Clock_Setup+0x118>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a2f      	ldr	r2, [pc, #188]	@ (80024e8 <MCU_Clock_Setup+0x118>)
 800242a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800242e:	f043 0305 	orr.w	r3, r3, #5
 8002432:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8002434:	4b2a      	ldr	r3, [pc, #168]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	78ba      	ldrb	r2, [r7, #2]
 800243a:	0611      	lsls	r1, r2, #24
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	0412      	lsls	r2, r2, #16
 8002440:	4311      	orrs	r1, r2
 8002442:	88ba      	ldrh	r2, [r7, #4]
 8002444:	0192      	lsls	r2, r2, #6
 8002446:	4311      	orrs	r1, r2
 8002448:	79fa      	ldrb	r2, [r7, #7]
 800244a:	430a      	orrs	r2, r1
 800244c:	4611      	mov	r1, r2
 800244e:	4a24      	ldr	r2, [pc, #144]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 8002450:	430b      	orrs	r3, r1
 8002452:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8002454:	4b22      	ldr	r3, [pc, #136]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4a21      	ldr	r2, [pc, #132]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 800245a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800245e:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8002460:	4b1f      	ldr	r3, [pc, #124]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 8002462:	4a1f      	ldr	r2, [pc, #124]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002468:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a1c      	ldr	r2, [pc, #112]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 800246e:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8002472:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002474:	4b1a      	ldr	r3, [pc, #104]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a19      	ldr	r2, [pc, #100]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 800247a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800247e:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8002480:	4b17      	ldr	r3, [pc, #92]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a16      	ldr	r2, [pc, #88]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 8002486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800248a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 800248c:	bf00      	nop
 800248e:	4b14      	ldr	r3, [pc, #80]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f9      	beq.n	800248e <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 800249a:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	4a10      	ldr	r2, [pc, #64]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80024a6:	bf00      	nop
 80024a8:	4b0d      	ldr	r3, [pc, #52]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d1f9      	bne.n	80024a8 <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 80024b4:	f000 f892 	bl	80025dc <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80024b8:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <MCU_Clock_Setup+0x11c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	08db      	lsrs	r3, r3, #3
 80024be:	4a0c      	ldr	r2, [pc, #48]	@ (80024f0 <MCU_Clock_Setup+0x120>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	085b      	lsrs	r3, r3, #1
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff60 	bl	800238c <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80024cc:	4b04      	ldr	r3, [pc, #16]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 80024ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d0:	4a03      	ldr	r2, [pc, #12]	@ (80024e0 <MCU_Clock_Setup+0x110>)
 80024d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024d6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40007000 	.word	0x40007000
 80024e8:	40023c00 	.word	0x40023c00
 80024ec:	20000018 	.word	0x20000018
 80024f0:	18618619 	.word	0x18618619

080024f4 <Delay_Config>:
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 80024f8:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <Delay_Config+0x2c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 80024fe:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <Delay_Config+0x2c>)
 8002500:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8002504:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8002506:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <Delay_Config+0x2c>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 800250c:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <Delay_Config+0x2c>)
 800250e:	2205      	movs	r2, #5
 8002510:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000e010 	.word	0xe000e010

08002524 <main>:
uint32_t buffer[8];



int main(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8002528:	f7ff ff52 	bl	80023d0 <MCU_Clock_Setup>
	Delay_Config();
 800252c:	f7ff ffe2 	bl	80024f4 <Delay_Config>

	testUSB.ptr_out_buffer = &buffer;
 8002530:	4b04      	ldr	r3, [pc, #16]	@ (8002544 <main+0x20>)
 8002532:	4a05      	ldr	r2, [pc, #20]	@ (8002548 <main+0x24>)
 8002534:	605a      	str	r2, [r3, #4]

	USB_Initialize(&testUSB);
 8002536:	4803      	ldr	r0, [pc, #12]	@ (8002544 <main+0x20>)
 8002538:	f7ff fe66 	bl	8002208 <USB_Initialize>



	for(;;)
	{
		USB_Poll();
 800253c:	f7ff fe86 	bl	800224c <USB_Poll>
 8002540:	e7fc      	b.n	800253c <main+0x18>
 8002542:	bf00      	nop
 8002544:	20000394 	.word	0x20000394
 8002548:	200003a8 	.word	0x200003a8

0800254c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002554:	4a14      	ldr	r2, [pc, #80]	@ (80025a8 <_sbrk+0x5c>)
 8002556:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <_sbrk+0x60>)
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002560:	4b13      	ldr	r3, [pc, #76]	@ (80025b0 <_sbrk+0x64>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002568:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <_sbrk+0x64>)
 800256a:	4a12      	ldr	r2, [pc, #72]	@ (80025b4 <_sbrk+0x68>)
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800256e:	4b10      	ldr	r3, [pc, #64]	@ (80025b0 <_sbrk+0x64>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	429a      	cmp	r2, r3
 800257a:	d207      	bcs.n	800258c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800257c:	f000 f8f8 	bl	8002770 <__errno>
 8002580:	4603      	mov	r3, r0
 8002582:	220c      	movs	r2, #12
 8002584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002586:	f04f 33ff 	mov.w	r3, #4294967295
 800258a:	e009      	b.n	80025a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800258c:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002592:	4b07      	ldr	r3, [pc, #28]	@ (80025b0 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	4a05      	ldr	r2, [pc, #20]	@ (80025b0 <_sbrk+0x64>)
 800259c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800259e:	68fb      	ldr	r3, [r7, #12]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20020000 	.word	0x20020000
 80025ac:	00000400 	.word	0x00000400
 80025b0:	200003c8 	.word	0x200003c8
 80025b4:	20000518 	.word	0x20000518

080025b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <SystemInit+0x20>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c2:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <SystemInit+0x20>)
 80025c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	2302      	movs	r3, #2
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	2302      	movs	r3, #2
 80025f4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80025f6:	4b34      	ldr	r3, [pc, #208]	@ (80026c8 <SystemCoreClockUpdate+0xec>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	2b08      	cmp	r3, #8
 8002604:	d011      	beq.n	800262a <SystemCoreClockUpdate+0x4e>
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b08      	cmp	r3, #8
 800260a:	d844      	bhi.n	8002696 <SystemCoreClockUpdate+0xba>
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <SystemCoreClockUpdate+0x3e>
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b04      	cmp	r3, #4
 8002616:	d004      	beq.n	8002622 <SystemCoreClockUpdate+0x46>
 8002618:	e03d      	b.n	8002696 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800261a:	4b2c      	ldr	r3, [pc, #176]	@ (80026cc <SystemCoreClockUpdate+0xf0>)
 800261c:	4a2c      	ldr	r2, [pc, #176]	@ (80026d0 <SystemCoreClockUpdate+0xf4>)
 800261e:	601a      	str	r2, [r3, #0]
      break;
 8002620:	e03d      	b.n	800269e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002622:	4b2a      	ldr	r3, [pc, #168]	@ (80026cc <SystemCoreClockUpdate+0xf0>)
 8002624:	4a2b      	ldr	r2, [pc, #172]	@ (80026d4 <SystemCoreClockUpdate+0xf8>)
 8002626:	601a      	str	r2, [r3, #0]
      break;
 8002628:	e039      	b.n	800269e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800262a:	4b27      	ldr	r3, [pc, #156]	@ (80026c8 <SystemCoreClockUpdate+0xec>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	0d9b      	lsrs	r3, r3, #22
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002636:	4b24      	ldr	r3, [pc, #144]	@ (80026c8 <SystemCoreClockUpdate+0xec>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800263e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00c      	beq.n	8002660 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002646:	4a23      	ldr	r2, [pc, #140]	@ (80026d4 <SystemCoreClockUpdate+0xf8>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	fbb2 f3f3 	udiv	r3, r2, r3
 800264e:	4a1e      	ldr	r2, [pc, #120]	@ (80026c8 <SystemCoreClockUpdate+0xec>)
 8002650:	6852      	ldr	r2, [r2, #4]
 8002652:	0992      	lsrs	r2, r2, #6
 8002654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002658:	fb02 f303 	mul.w	r3, r2, r3
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	e00b      	b.n	8002678 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002660:	4a1b      	ldr	r2, [pc, #108]	@ (80026d0 <SystemCoreClockUpdate+0xf4>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	4a17      	ldr	r2, [pc, #92]	@ (80026c8 <SystemCoreClockUpdate+0xec>)
 800266a:	6852      	ldr	r2, [r2, #4]
 800266c:	0992      	lsrs	r2, r2, #6
 800266e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002678:	4b13      	ldr	r3, [pc, #76]	@ (80026c8 <SystemCoreClockUpdate+0xec>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	0c1b      	lsrs	r3, r3, #16
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	3301      	adds	r3, #1
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002690:	4a0e      	ldr	r2, [pc, #56]	@ (80026cc <SystemCoreClockUpdate+0xf0>)
 8002692:	6013      	str	r3, [r2, #0]
      break;
 8002694:	e003      	b.n	800269e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002696:	4b0d      	ldr	r3, [pc, #52]	@ (80026cc <SystemCoreClockUpdate+0xf0>)
 8002698:	4a0d      	ldr	r2, [pc, #52]	@ (80026d0 <SystemCoreClockUpdate+0xf4>)
 800269a:	601a      	str	r2, [r3, #0]
      break;
 800269c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800269e:	4b0a      	ldr	r3, [pc, #40]	@ (80026c8 <SystemCoreClockUpdate+0xec>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	4a0b      	ldr	r2, [pc, #44]	@ (80026d8 <SystemCoreClockUpdate+0xfc>)
 80026aa:	5cd3      	ldrb	r3, [r2, r3]
 80026ac:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80026ae:	4b07      	ldr	r3, [pc, #28]	@ (80026cc <SystemCoreClockUpdate+0xf0>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
 80026b8:	4a04      	ldr	r2, [pc, #16]	@ (80026cc <SystemCoreClockUpdate+0xf0>)
 80026ba:	6013      	str	r3, [r2, #0]
}
 80026bc:	bf00      	nop
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40023800 	.word	0x40023800
 80026cc:	20000018 	.word	0x20000018
 80026d0:	00f42400 	.word	0x00f42400
 80026d4:	017d7840 	.word	0x017d7840
 80026d8:	080030b0 	.word	0x080030b0

080026dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026dc:	480d      	ldr	r0, [pc, #52]	@ (8002714 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026e0:	f7ff ff6a 	bl	80025b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026e4:	480c      	ldr	r0, [pc, #48]	@ (8002718 <LoopForever+0x6>)
  ldr r1, =_edata
 80026e6:	490d      	ldr	r1, [pc, #52]	@ (800271c <LoopForever+0xa>)
  ldr r2, =_sidata
 80026e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002720 <LoopForever+0xe>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ec:	e002      	b.n	80026f4 <LoopCopyDataInit>

080026ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f2:	3304      	adds	r3, #4

080026f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f8:	d3f9      	bcc.n	80026ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002728 <LoopForever+0x16>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002700:	e001      	b.n	8002706 <LoopFillZerobss>

08002702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002704:	3204      	adds	r2, #4

08002706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002708:	d3fb      	bcc.n	8002702 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800270a:	f000 f837 	bl	800277c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800270e:	f7ff ff09 	bl	8002524 <main>

08002712 <LoopForever>:

LoopForever:
  b LoopForever
 8002712:	e7fe      	b.n	8002712 <LoopForever>
  ldr   r0, =_estack
 8002714:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800271c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002720:	08003104 	.word	0x08003104
  ldr r2, =_sbss
 8002724:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002728:	20000514 	.word	0x20000514

0800272c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800272c:	e7fe      	b.n	800272c <ADC_IRQHandler>
	...

08002730 <_vsiprintf_r>:
 8002730:	b500      	push	{lr}
 8002732:	b09b      	sub	sp, #108	@ 0x6c
 8002734:	9100      	str	r1, [sp, #0]
 8002736:	9104      	str	r1, [sp, #16]
 8002738:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800273c:	9105      	str	r1, [sp, #20]
 800273e:	9102      	str	r1, [sp, #8]
 8002740:	4905      	ldr	r1, [pc, #20]	@ (8002758 <_vsiprintf_r+0x28>)
 8002742:	9103      	str	r1, [sp, #12]
 8002744:	4669      	mov	r1, sp
 8002746:	f000 f993 	bl	8002a70 <_svfiprintf_r>
 800274a:	9b00      	ldr	r3, [sp, #0]
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	b01b      	add	sp, #108	@ 0x6c
 8002752:	f85d fb04 	ldr.w	pc, [sp], #4
 8002756:	bf00      	nop
 8002758:	ffff0208 	.word	0xffff0208

0800275c <vsiprintf>:
 800275c:	4613      	mov	r3, r2
 800275e:	460a      	mov	r2, r1
 8002760:	4601      	mov	r1, r0
 8002762:	4802      	ldr	r0, [pc, #8]	@ (800276c <vsiprintf+0x10>)
 8002764:	6800      	ldr	r0, [r0, #0]
 8002766:	f7ff bfe3 	b.w	8002730 <_vsiprintf_r>
 800276a:	bf00      	nop
 800276c:	2000001c 	.word	0x2000001c

08002770 <__errno>:
 8002770:	4b01      	ldr	r3, [pc, #4]	@ (8002778 <__errno+0x8>)
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	2000001c 	.word	0x2000001c

0800277c <__libc_init_array>:
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	4d0d      	ldr	r5, [pc, #52]	@ (80027b4 <__libc_init_array+0x38>)
 8002780:	4c0d      	ldr	r4, [pc, #52]	@ (80027b8 <__libc_init_array+0x3c>)
 8002782:	1b64      	subs	r4, r4, r5
 8002784:	10a4      	asrs	r4, r4, #2
 8002786:	2600      	movs	r6, #0
 8002788:	42a6      	cmp	r6, r4
 800278a:	d109      	bne.n	80027a0 <__libc_init_array+0x24>
 800278c:	4d0b      	ldr	r5, [pc, #44]	@ (80027bc <__libc_init_array+0x40>)
 800278e:	4c0c      	ldr	r4, [pc, #48]	@ (80027c0 <__libc_init_array+0x44>)
 8002790:	f000 fc66 	bl	8003060 <_init>
 8002794:	1b64      	subs	r4, r4, r5
 8002796:	10a4      	asrs	r4, r4, #2
 8002798:	2600      	movs	r6, #0
 800279a:	42a6      	cmp	r6, r4
 800279c:	d105      	bne.n	80027aa <__libc_init_array+0x2e>
 800279e:	bd70      	pop	{r4, r5, r6, pc}
 80027a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a4:	4798      	blx	r3
 80027a6:	3601      	adds	r6, #1
 80027a8:	e7ee      	b.n	8002788 <__libc_init_array+0xc>
 80027aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ae:	4798      	blx	r3
 80027b0:	3601      	adds	r6, #1
 80027b2:	e7f2      	b.n	800279a <__libc_init_array+0x1e>
 80027b4:	080030fc 	.word	0x080030fc
 80027b8:	080030fc 	.word	0x080030fc
 80027bc:	080030fc 	.word	0x080030fc
 80027c0:	08003100 	.word	0x08003100

080027c4 <__retarget_lock_acquire_recursive>:
 80027c4:	4770      	bx	lr

080027c6 <__retarget_lock_release_recursive>:
 80027c6:	4770      	bx	lr

080027c8 <_free_r>:
 80027c8:	b538      	push	{r3, r4, r5, lr}
 80027ca:	4605      	mov	r5, r0
 80027cc:	2900      	cmp	r1, #0
 80027ce:	d041      	beq.n	8002854 <_free_r+0x8c>
 80027d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027d4:	1f0c      	subs	r4, r1, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bfb8      	it	lt
 80027da:	18e4      	addlt	r4, r4, r3
 80027dc:	f000 f8e0 	bl	80029a0 <__malloc_lock>
 80027e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002858 <_free_r+0x90>)
 80027e2:	6813      	ldr	r3, [r2, #0]
 80027e4:	b933      	cbnz	r3, 80027f4 <_free_r+0x2c>
 80027e6:	6063      	str	r3, [r4, #4]
 80027e8:	6014      	str	r4, [r2, #0]
 80027ea:	4628      	mov	r0, r5
 80027ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027f0:	f000 b8dc 	b.w	80029ac <__malloc_unlock>
 80027f4:	42a3      	cmp	r3, r4
 80027f6:	d908      	bls.n	800280a <_free_r+0x42>
 80027f8:	6820      	ldr	r0, [r4, #0]
 80027fa:	1821      	adds	r1, r4, r0
 80027fc:	428b      	cmp	r3, r1
 80027fe:	bf01      	itttt	eq
 8002800:	6819      	ldreq	r1, [r3, #0]
 8002802:	685b      	ldreq	r3, [r3, #4]
 8002804:	1809      	addeq	r1, r1, r0
 8002806:	6021      	streq	r1, [r4, #0]
 8002808:	e7ed      	b.n	80027e6 <_free_r+0x1e>
 800280a:	461a      	mov	r2, r3
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	b10b      	cbz	r3, 8002814 <_free_r+0x4c>
 8002810:	42a3      	cmp	r3, r4
 8002812:	d9fa      	bls.n	800280a <_free_r+0x42>
 8002814:	6811      	ldr	r1, [r2, #0]
 8002816:	1850      	adds	r0, r2, r1
 8002818:	42a0      	cmp	r0, r4
 800281a:	d10b      	bne.n	8002834 <_free_r+0x6c>
 800281c:	6820      	ldr	r0, [r4, #0]
 800281e:	4401      	add	r1, r0
 8002820:	1850      	adds	r0, r2, r1
 8002822:	4283      	cmp	r3, r0
 8002824:	6011      	str	r1, [r2, #0]
 8002826:	d1e0      	bne.n	80027ea <_free_r+0x22>
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	6053      	str	r3, [r2, #4]
 800282e:	4408      	add	r0, r1
 8002830:	6010      	str	r0, [r2, #0]
 8002832:	e7da      	b.n	80027ea <_free_r+0x22>
 8002834:	d902      	bls.n	800283c <_free_r+0x74>
 8002836:	230c      	movs	r3, #12
 8002838:	602b      	str	r3, [r5, #0]
 800283a:	e7d6      	b.n	80027ea <_free_r+0x22>
 800283c:	6820      	ldr	r0, [r4, #0]
 800283e:	1821      	adds	r1, r4, r0
 8002840:	428b      	cmp	r3, r1
 8002842:	bf04      	itt	eq
 8002844:	6819      	ldreq	r1, [r3, #0]
 8002846:	685b      	ldreq	r3, [r3, #4]
 8002848:	6063      	str	r3, [r4, #4]
 800284a:	bf04      	itt	eq
 800284c:	1809      	addeq	r1, r1, r0
 800284e:	6021      	streq	r1, [r4, #0]
 8002850:	6054      	str	r4, [r2, #4]
 8002852:	e7ca      	b.n	80027ea <_free_r+0x22>
 8002854:	bd38      	pop	{r3, r4, r5, pc}
 8002856:	bf00      	nop
 8002858:	20000510 	.word	0x20000510

0800285c <sbrk_aligned>:
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	4e0f      	ldr	r6, [pc, #60]	@ (800289c <sbrk_aligned+0x40>)
 8002860:	460c      	mov	r4, r1
 8002862:	6831      	ldr	r1, [r6, #0]
 8002864:	4605      	mov	r5, r0
 8002866:	b911      	cbnz	r1, 800286e <sbrk_aligned+0x12>
 8002868:	f000 fba6 	bl	8002fb8 <_sbrk_r>
 800286c:	6030      	str	r0, [r6, #0]
 800286e:	4621      	mov	r1, r4
 8002870:	4628      	mov	r0, r5
 8002872:	f000 fba1 	bl	8002fb8 <_sbrk_r>
 8002876:	1c43      	adds	r3, r0, #1
 8002878:	d103      	bne.n	8002882 <sbrk_aligned+0x26>
 800287a:	f04f 34ff 	mov.w	r4, #4294967295
 800287e:	4620      	mov	r0, r4
 8002880:	bd70      	pop	{r4, r5, r6, pc}
 8002882:	1cc4      	adds	r4, r0, #3
 8002884:	f024 0403 	bic.w	r4, r4, #3
 8002888:	42a0      	cmp	r0, r4
 800288a:	d0f8      	beq.n	800287e <sbrk_aligned+0x22>
 800288c:	1a21      	subs	r1, r4, r0
 800288e:	4628      	mov	r0, r5
 8002890:	f000 fb92 	bl	8002fb8 <_sbrk_r>
 8002894:	3001      	adds	r0, #1
 8002896:	d1f2      	bne.n	800287e <sbrk_aligned+0x22>
 8002898:	e7ef      	b.n	800287a <sbrk_aligned+0x1e>
 800289a:	bf00      	nop
 800289c:	2000050c 	.word	0x2000050c

080028a0 <_malloc_r>:
 80028a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028a4:	1ccd      	adds	r5, r1, #3
 80028a6:	f025 0503 	bic.w	r5, r5, #3
 80028aa:	3508      	adds	r5, #8
 80028ac:	2d0c      	cmp	r5, #12
 80028ae:	bf38      	it	cc
 80028b0:	250c      	movcc	r5, #12
 80028b2:	2d00      	cmp	r5, #0
 80028b4:	4606      	mov	r6, r0
 80028b6:	db01      	blt.n	80028bc <_malloc_r+0x1c>
 80028b8:	42a9      	cmp	r1, r5
 80028ba:	d904      	bls.n	80028c6 <_malloc_r+0x26>
 80028bc:	230c      	movs	r3, #12
 80028be:	6033      	str	r3, [r6, #0]
 80028c0:	2000      	movs	r0, #0
 80028c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800299c <_malloc_r+0xfc>
 80028ca:	f000 f869 	bl	80029a0 <__malloc_lock>
 80028ce:	f8d8 3000 	ldr.w	r3, [r8]
 80028d2:	461c      	mov	r4, r3
 80028d4:	bb44      	cbnz	r4, 8002928 <_malloc_r+0x88>
 80028d6:	4629      	mov	r1, r5
 80028d8:	4630      	mov	r0, r6
 80028da:	f7ff ffbf 	bl	800285c <sbrk_aligned>
 80028de:	1c43      	adds	r3, r0, #1
 80028e0:	4604      	mov	r4, r0
 80028e2:	d158      	bne.n	8002996 <_malloc_r+0xf6>
 80028e4:	f8d8 4000 	ldr.w	r4, [r8]
 80028e8:	4627      	mov	r7, r4
 80028ea:	2f00      	cmp	r7, #0
 80028ec:	d143      	bne.n	8002976 <_malloc_r+0xd6>
 80028ee:	2c00      	cmp	r4, #0
 80028f0:	d04b      	beq.n	800298a <_malloc_r+0xea>
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	4639      	mov	r1, r7
 80028f6:	4630      	mov	r0, r6
 80028f8:	eb04 0903 	add.w	r9, r4, r3
 80028fc:	f000 fb5c 	bl	8002fb8 <_sbrk_r>
 8002900:	4581      	cmp	r9, r0
 8002902:	d142      	bne.n	800298a <_malloc_r+0xea>
 8002904:	6821      	ldr	r1, [r4, #0]
 8002906:	1a6d      	subs	r5, r5, r1
 8002908:	4629      	mov	r1, r5
 800290a:	4630      	mov	r0, r6
 800290c:	f7ff ffa6 	bl	800285c <sbrk_aligned>
 8002910:	3001      	adds	r0, #1
 8002912:	d03a      	beq.n	800298a <_malloc_r+0xea>
 8002914:	6823      	ldr	r3, [r4, #0]
 8002916:	442b      	add	r3, r5
 8002918:	6023      	str	r3, [r4, #0]
 800291a:	f8d8 3000 	ldr.w	r3, [r8]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	bb62      	cbnz	r2, 800297c <_malloc_r+0xdc>
 8002922:	f8c8 7000 	str.w	r7, [r8]
 8002926:	e00f      	b.n	8002948 <_malloc_r+0xa8>
 8002928:	6822      	ldr	r2, [r4, #0]
 800292a:	1b52      	subs	r2, r2, r5
 800292c:	d420      	bmi.n	8002970 <_malloc_r+0xd0>
 800292e:	2a0b      	cmp	r2, #11
 8002930:	d917      	bls.n	8002962 <_malloc_r+0xc2>
 8002932:	1961      	adds	r1, r4, r5
 8002934:	42a3      	cmp	r3, r4
 8002936:	6025      	str	r5, [r4, #0]
 8002938:	bf18      	it	ne
 800293a:	6059      	strne	r1, [r3, #4]
 800293c:	6863      	ldr	r3, [r4, #4]
 800293e:	bf08      	it	eq
 8002940:	f8c8 1000 	streq.w	r1, [r8]
 8002944:	5162      	str	r2, [r4, r5]
 8002946:	604b      	str	r3, [r1, #4]
 8002948:	4630      	mov	r0, r6
 800294a:	f000 f82f 	bl	80029ac <__malloc_unlock>
 800294e:	f104 000b 	add.w	r0, r4, #11
 8002952:	1d23      	adds	r3, r4, #4
 8002954:	f020 0007 	bic.w	r0, r0, #7
 8002958:	1ac2      	subs	r2, r0, r3
 800295a:	bf1c      	itt	ne
 800295c:	1a1b      	subne	r3, r3, r0
 800295e:	50a3      	strne	r3, [r4, r2]
 8002960:	e7af      	b.n	80028c2 <_malloc_r+0x22>
 8002962:	6862      	ldr	r2, [r4, #4]
 8002964:	42a3      	cmp	r3, r4
 8002966:	bf0c      	ite	eq
 8002968:	f8c8 2000 	streq.w	r2, [r8]
 800296c:	605a      	strne	r2, [r3, #4]
 800296e:	e7eb      	b.n	8002948 <_malloc_r+0xa8>
 8002970:	4623      	mov	r3, r4
 8002972:	6864      	ldr	r4, [r4, #4]
 8002974:	e7ae      	b.n	80028d4 <_malloc_r+0x34>
 8002976:	463c      	mov	r4, r7
 8002978:	687f      	ldr	r7, [r7, #4]
 800297a:	e7b6      	b.n	80028ea <_malloc_r+0x4a>
 800297c:	461a      	mov	r2, r3
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	42a3      	cmp	r3, r4
 8002982:	d1fb      	bne.n	800297c <_malloc_r+0xdc>
 8002984:	2300      	movs	r3, #0
 8002986:	6053      	str	r3, [r2, #4]
 8002988:	e7de      	b.n	8002948 <_malloc_r+0xa8>
 800298a:	230c      	movs	r3, #12
 800298c:	6033      	str	r3, [r6, #0]
 800298e:	4630      	mov	r0, r6
 8002990:	f000 f80c 	bl	80029ac <__malloc_unlock>
 8002994:	e794      	b.n	80028c0 <_malloc_r+0x20>
 8002996:	6005      	str	r5, [r0, #0]
 8002998:	e7d6      	b.n	8002948 <_malloc_r+0xa8>
 800299a:	bf00      	nop
 800299c:	20000510 	.word	0x20000510

080029a0 <__malloc_lock>:
 80029a0:	4801      	ldr	r0, [pc, #4]	@ (80029a8 <__malloc_lock+0x8>)
 80029a2:	f7ff bf0f 	b.w	80027c4 <__retarget_lock_acquire_recursive>
 80029a6:	bf00      	nop
 80029a8:	20000508 	.word	0x20000508

080029ac <__malloc_unlock>:
 80029ac:	4801      	ldr	r0, [pc, #4]	@ (80029b4 <__malloc_unlock+0x8>)
 80029ae:	f7ff bf0a 	b.w	80027c6 <__retarget_lock_release_recursive>
 80029b2:	bf00      	nop
 80029b4:	20000508 	.word	0x20000508

080029b8 <__ssputs_r>:
 80029b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029bc:	688e      	ldr	r6, [r1, #8]
 80029be:	461f      	mov	r7, r3
 80029c0:	42be      	cmp	r6, r7
 80029c2:	680b      	ldr	r3, [r1, #0]
 80029c4:	4682      	mov	sl, r0
 80029c6:	460c      	mov	r4, r1
 80029c8:	4690      	mov	r8, r2
 80029ca:	d82d      	bhi.n	8002a28 <__ssputs_r+0x70>
 80029cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80029d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80029d4:	d026      	beq.n	8002a24 <__ssputs_r+0x6c>
 80029d6:	6965      	ldr	r5, [r4, #20]
 80029d8:	6909      	ldr	r1, [r1, #16]
 80029da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029de:	eba3 0901 	sub.w	r9, r3, r1
 80029e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029e6:	1c7b      	adds	r3, r7, #1
 80029e8:	444b      	add	r3, r9
 80029ea:	106d      	asrs	r5, r5, #1
 80029ec:	429d      	cmp	r5, r3
 80029ee:	bf38      	it	cc
 80029f0:	461d      	movcc	r5, r3
 80029f2:	0553      	lsls	r3, r2, #21
 80029f4:	d527      	bpl.n	8002a46 <__ssputs_r+0x8e>
 80029f6:	4629      	mov	r1, r5
 80029f8:	f7ff ff52 	bl	80028a0 <_malloc_r>
 80029fc:	4606      	mov	r6, r0
 80029fe:	b360      	cbz	r0, 8002a5a <__ssputs_r+0xa2>
 8002a00:	6921      	ldr	r1, [r4, #16]
 8002a02:	464a      	mov	r2, r9
 8002a04:	f000 fae8 	bl	8002fd8 <memcpy>
 8002a08:	89a3      	ldrh	r3, [r4, #12]
 8002a0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a12:	81a3      	strh	r3, [r4, #12]
 8002a14:	6126      	str	r6, [r4, #16]
 8002a16:	6165      	str	r5, [r4, #20]
 8002a18:	444e      	add	r6, r9
 8002a1a:	eba5 0509 	sub.w	r5, r5, r9
 8002a1e:	6026      	str	r6, [r4, #0]
 8002a20:	60a5      	str	r5, [r4, #8]
 8002a22:	463e      	mov	r6, r7
 8002a24:	42be      	cmp	r6, r7
 8002a26:	d900      	bls.n	8002a2a <__ssputs_r+0x72>
 8002a28:	463e      	mov	r6, r7
 8002a2a:	6820      	ldr	r0, [r4, #0]
 8002a2c:	4632      	mov	r2, r6
 8002a2e:	4641      	mov	r1, r8
 8002a30:	f000 faa8 	bl	8002f84 <memmove>
 8002a34:	68a3      	ldr	r3, [r4, #8]
 8002a36:	1b9b      	subs	r3, r3, r6
 8002a38:	60a3      	str	r3, [r4, #8]
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	4433      	add	r3, r6
 8002a3e:	6023      	str	r3, [r4, #0]
 8002a40:	2000      	movs	r0, #0
 8002a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a46:	462a      	mov	r2, r5
 8002a48:	f000 fad4 	bl	8002ff4 <_realloc_r>
 8002a4c:	4606      	mov	r6, r0
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d1e0      	bne.n	8002a14 <__ssputs_r+0x5c>
 8002a52:	6921      	ldr	r1, [r4, #16]
 8002a54:	4650      	mov	r0, sl
 8002a56:	f7ff feb7 	bl	80027c8 <_free_r>
 8002a5a:	230c      	movs	r3, #12
 8002a5c:	f8ca 3000 	str.w	r3, [sl]
 8002a60:	89a3      	ldrh	r3, [r4, #12]
 8002a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a66:	81a3      	strh	r3, [r4, #12]
 8002a68:	f04f 30ff 	mov.w	r0, #4294967295
 8002a6c:	e7e9      	b.n	8002a42 <__ssputs_r+0x8a>
	...

08002a70 <_svfiprintf_r>:
 8002a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a74:	4698      	mov	r8, r3
 8002a76:	898b      	ldrh	r3, [r1, #12]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	b09d      	sub	sp, #116	@ 0x74
 8002a7c:	4607      	mov	r7, r0
 8002a7e:	460d      	mov	r5, r1
 8002a80:	4614      	mov	r4, r2
 8002a82:	d510      	bpl.n	8002aa6 <_svfiprintf_r+0x36>
 8002a84:	690b      	ldr	r3, [r1, #16]
 8002a86:	b973      	cbnz	r3, 8002aa6 <_svfiprintf_r+0x36>
 8002a88:	2140      	movs	r1, #64	@ 0x40
 8002a8a:	f7ff ff09 	bl	80028a0 <_malloc_r>
 8002a8e:	6028      	str	r0, [r5, #0]
 8002a90:	6128      	str	r0, [r5, #16]
 8002a92:	b930      	cbnz	r0, 8002aa2 <_svfiprintf_r+0x32>
 8002a94:	230c      	movs	r3, #12
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	b01d      	add	sp, #116	@ 0x74
 8002a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aa2:	2340      	movs	r3, #64	@ 0x40
 8002aa4:	616b      	str	r3, [r5, #20]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002aaa:	2320      	movs	r3, #32
 8002aac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ab0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ab4:	2330      	movs	r3, #48	@ 0x30
 8002ab6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002c54 <_svfiprintf_r+0x1e4>
 8002aba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002abe:	f04f 0901 	mov.w	r9, #1
 8002ac2:	4623      	mov	r3, r4
 8002ac4:	469a      	mov	sl, r3
 8002ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002aca:	b10a      	cbz	r2, 8002ad0 <_svfiprintf_r+0x60>
 8002acc:	2a25      	cmp	r2, #37	@ 0x25
 8002ace:	d1f9      	bne.n	8002ac4 <_svfiprintf_r+0x54>
 8002ad0:	ebba 0b04 	subs.w	fp, sl, r4
 8002ad4:	d00b      	beq.n	8002aee <_svfiprintf_r+0x7e>
 8002ad6:	465b      	mov	r3, fp
 8002ad8:	4622      	mov	r2, r4
 8002ada:	4629      	mov	r1, r5
 8002adc:	4638      	mov	r0, r7
 8002ade:	f7ff ff6b 	bl	80029b8 <__ssputs_r>
 8002ae2:	3001      	adds	r0, #1
 8002ae4:	f000 80a7 	beq.w	8002c36 <_svfiprintf_r+0x1c6>
 8002ae8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002aea:	445a      	add	r2, fp
 8002aec:	9209      	str	r2, [sp, #36]	@ 0x24
 8002aee:	f89a 3000 	ldrb.w	r3, [sl]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 809f 	beq.w	8002c36 <_svfiprintf_r+0x1c6>
 8002af8:	2300      	movs	r3, #0
 8002afa:	f04f 32ff 	mov.w	r2, #4294967295
 8002afe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b02:	f10a 0a01 	add.w	sl, sl, #1
 8002b06:	9304      	str	r3, [sp, #16]
 8002b08:	9307      	str	r3, [sp, #28]
 8002b0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002b0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002b10:	4654      	mov	r4, sl
 8002b12:	2205      	movs	r2, #5
 8002b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b18:	484e      	ldr	r0, [pc, #312]	@ (8002c54 <_svfiprintf_r+0x1e4>)
 8002b1a:	f7fd fb61 	bl	80001e0 <memchr>
 8002b1e:	9a04      	ldr	r2, [sp, #16]
 8002b20:	b9d8      	cbnz	r0, 8002b5a <_svfiprintf_r+0xea>
 8002b22:	06d0      	lsls	r0, r2, #27
 8002b24:	bf44      	itt	mi
 8002b26:	2320      	movmi	r3, #32
 8002b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b2c:	0711      	lsls	r1, r2, #28
 8002b2e:	bf44      	itt	mi
 8002b30:	232b      	movmi	r3, #43	@ 0x2b
 8002b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b36:	f89a 3000 	ldrb.w	r3, [sl]
 8002b3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b3c:	d015      	beq.n	8002b6a <_svfiprintf_r+0xfa>
 8002b3e:	9a07      	ldr	r2, [sp, #28]
 8002b40:	4654      	mov	r4, sl
 8002b42:	2000      	movs	r0, #0
 8002b44:	f04f 0c0a 	mov.w	ip, #10
 8002b48:	4621      	mov	r1, r4
 8002b4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b4e:	3b30      	subs	r3, #48	@ 0x30
 8002b50:	2b09      	cmp	r3, #9
 8002b52:	d94b      	bls.n	8002bec <_svfiprintf_r+0x17c>
 8002b54:	b1b0      	cbz	r0, 8002b84 <_svfiprintf_r+0x114>
 8002b56:	9207      	str	r2, [sp, #28]
 8002b58:	e014      	b.n	8002b84 <_svfiprintf_r+0x114>
 8002b5a:	eba0 0308 	sub.w	r3, r0, r8
 8002b5e:	fa09 f303 	lsl.w	r3, r9, r3
 8002b62:	4313      	orrs	r3, r2
 8002b64:	9304      	str	r3, [sp, #16]
 8002b66:	46a2      	mov	sl, r4
 8002b68:	e7d2      	b.n	8002b10 <_svfiprintf_r+0xa0>
 8002b6a:	9b03      	ldr	r3, [sp, #12]
 8002b6c:	1d19      	adds	r1, r3, #4
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	9103      	str	r1, [sp, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bfbb      	ittet	lt
 8002b76:	425b      	neglt	r3, r3
 8002b78:	f042 0202 	orrlt.w	r2, r2, #2
 8002b7c:	9307      	strge	r3, [sp, #28]
 8002b7e:	9307      	strlt	r3, [sp, #28]
 8002b80:	bfb8      	it	lt
 8002b82:	9204      	strlt	r2, [sp, #16]
 8002b84:	7823      	ldrb	r3, [r4, #0]
 8002b86:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b88:	d10a      	bne.n	8002ba0 <_svfiprintf_r+0x130>
 8002b8a:	7863      	ldrb	r3, [r4, #1]
 8002b8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b8e:	d132      	bne.n	8002bf6 <_svfiprintf_r+0x186>
 8002b90:	9b03      	ldr	r3, [sp, #12]
 8002b92:	1d1a      	adds	r2, r3, #4
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	9203      	str	r2, [sp, #12]
 8002b98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b9c:	3402      	adds	r4, #2
 8002b9e:	9305      	str	r3, [sp, #20]
 8002ba0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002c64 <_svfiprintf_r+0x1f4>
 8002ba4:	7821      	ldrb	r1, [r4, #0]
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	4650      	mov	r0, sl
 8002baa:	f7fd fb19 	bl	80001e0 <memchr>
 8002bae:	b138      	cbz	r0, 8002bc0 <_svfiprintf_r+0x150>
 8002bb0:	9b04      	ldr	r3, [sp, #16]
 8002bb2:	eba0 000a 	sub.w	r0, r0, sl
 8002bb6:	2240      	movs	r2, #64	@ 0x40
 8002bb8:	4082      	lsls	r2, r0
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	3401      	adds	r4, #1
 8002bbe:	9304      	str	r3, [sp, #16]
 8002bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bc4:	4824      	ldr	r0, [pc, #144]	@ (8002c58 <_svfiprintf_r+0x1e8>)
 8002bc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002bca:	2206      	movs	r2, #6
 8002bcc:	f7fd fb08 	bl	80001e0 <memchr>
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	d036      	beq.n	8002c42 <_svfiprintf_r+0x1d2>
 8002bd4:	4b21      	ldr	r3, [pc, #132]	@ (8002c5c <_svfiprintf_r+0x1ec>)
 8002bd6:	bb1b      	cbnz	r3, 8002c20 <_svfiprintf_r+0x1b0>
 8002bd8:	9b03      	ldr	r3, [sp, #12]
 8002bda:	3307      	adds	r3, #7
 8002bdc:	f023 0307 	bic.w	r3, r3, #7
 8002be0:	3308      	adds	r3, #8
 8002be2:	9303      	str	r3, [sp, #12]
 8002be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002be6:	4433      	add	r3, r6
 8002be8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002bea:	e76a      	b.n	8002ac2 <_svfiprintf_r+0x52>
 8002bec:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bf0:	460c      	mov	r4, r1
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	e7a8      	b.n	8002b48 <_svfiprintf_r+0xd8>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	3401      	adds	r4, #1
 8002bfa:	9305      	str	r3, [sp, #20]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f04f 0c0a 	mov.w	ip, #10
 8002c02:	4620      	mov	r0, r4
 8002c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c08:	3a30      	subs	r2, #48	@ 0x30
 8002c0a:	2a09      	cmp	r2, #9
 8002c0c:	d903      	bls.n	8002c16 <_svfiprintf_r+0x1a6>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0c6      	beq.n	8002ba0 <_svfiprintf_r+0x130>
 8002c12:	9105      	str	r1, [sp, #20]
 8002c14:	e7c4      	b.n	8002ba0 <_svfiprintf_r+0x130>
 8002c16:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e7f0      	b.n	8002c02 <_svfiprintf_r+0x192>
 8002c20:	ab03      	add	r3, sp, #12
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	462a      	mov	r2, r5
 8002c26:	4b0e      	ldr	r3, [pc, #56]	@ (8002c60 <_svfiprintf_r+0x1f0>)
 8002c28:	a904      	add	r1, sp, #16
 8002c2a:	4638      	mov	r0, r7
 8002c2c:	f3af 8000 	nop.w
 8002c30:	1c42      	adds	r2, r0, #1
 8002c32:	4606      	mov	r6, r0
 8002c34:	d1d6      	bne.n	8002be4 <_svfiprintf_r+0x174>
 8002c36:	89ab      	ldrh	r3, [r5, #12]
 8002c38:	065b      	lsls	r3, r3, #25
 8002c3a:	f53f af2d 	bmi.w	8002a98 <_svfiprintf_r+0x28>
 8002c3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002c40:	e72c      	b.n	8002a9c <_svfiprintf_r+0x2c>
 8002c42:	ab03      	add	r3, sp, #12
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	462a      	mov	r2, r5
 8002c48:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <_svfiprintf_r+0x1f0>)
 8002c4a:	a904      	add	r1, sp, #16
 8002c4c:	4638      	mov	r0, r7
 8002c4e:	f000 f879 	bl	8002d44 <_printf_i>
 8002c52:	e7ed      	b.n	8002c30 <_svfiprintf_r+0x1c0>
 8002c54:	080030c0 	.word	0x080030c0
 8002c58:	080030ca 	.word	0x080030ca
 8002c5c:	00000000 	.word	0x00000000
 8002c60:	080029b9 	.word	0x080029b9
 8002c64:	080030c6 	.word	0x080030c6

08002c68 <_printf_common>:
 8002c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c6c:	4616      	mov	r6, r2
 8002c6e:	4698      	mov	r8, r3
 8002c70:	688a      	ldr	r2, [r1, #8]
 8002c72:	690b      	ldr	r3, [r1, #16]
 8002c74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	bfb8      	it	lt
 8002c7c:	4613      	movlt	r3, r2
 8002c7e:	6033      	str	r3, [r6, #0]
 8002c80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002c84:	4607      	mov	r7, r0
 8002c86:	460c      	mov	r4, r1
 8002c88:	b10a      	cbz	r2, 8002c8e <_printf_common+0x26>
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	6033      	str	r3, [r6, #0]
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	0699      	lsls	r1, r3, #26
 8002c92:	bf42      	ittt	mi
 8002c94:	6833      	ldrmi	r3, [r6, #0]
 8002c96:	3302      	addmi	r3, #2
 8002c98:	6033      	strmi	r3, [r6, #0]
 8002c9a:	6825      	ldr	r5, [r4, #0]
 8002c9c:	f015 0506 	ands.w	r5, r5, #6
 8002ca0:	d106      	bne.n	8002cb0 <_printf_common+0x48>
 8002ca2:	f104 0a19 	add.w	sl, r4, #25
 8002ca6:	68e3      	ldr	r3, [r4, #12]
 8002ca8:	6832      	ldr	r2, [r6, #0]
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	42ab      	cmp	r3, r5
 8002cae:	dc26      	bgt.n	8002cfe <_printf_common+0x96>
 8002cb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002cb4:	6822      	ldr	r2, [r4, #0]
 8002cb6:	3b00      	subs	r3, #0
 8002cb8:	bf18      	it	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	0692      	lsls	r2, r2, #26
 8002cbe:	d42b      	bmi.n	8002d18 <_printf_common+0xb0>
 8002cc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002cc4:	4641      	mov	r1, r8
 8002cc6:	4638      	mov	r0, r7
 8002cc8:	47c8      	blx	r9
 8002cca:	3001      	adds	r0, #1
 8002ccc:	d01e      	beq.n	8002d0c <_printf_common+0xa4>
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	6922      	ldr	r2, [r4, #16]
 8002cd2:	f003 0306 	and.w	r3, r3, #6
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	bf02      	ittt	eq
 8002cda:	68e5      	ldreq	r5, [r4, #12]
 8002cdc:	6833      	ldreq	r3, [r6, #0]
 8002cde:	1aed      	subeq	r5, r5, r3
 8002ce0:	68a3      	ldr	r3, [r4, #8]
 8002ce2:	bf0c      	ite	eq
 8002ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ce8:	2500      	movne	r5, #0
 8002cea:	4293      	cmp	r3, r2
 8002cec:	bfc4      	itt	gt
 8002cee:	1a9b      	subgt	r3, r3, r2
 8002cf0:	18ed      	addgt	r5, r5, r3
 8002cf2:	2600      	movs	r6, #0
 8002cf4:	341a      	adds	r4, #26
 8002cf6:	42b5      	cmp	r5, r6
 8002cf8:	d11a      	bne.n	8002d30 <_printf_common+0xc8>
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	e008      	b.n	8002d10 <_printf_common+0xa8>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	4652      	mov	r2, sl
 8002d02:	4641      	mov	r1, r8
 8002d04:	4638      	mov	r0, r7
 8002d06:	47c8      	blx	r9
 8002d08:	3001      	adds	r0, #1
 8002d0a:	d103      	bne.n	8002d14 <_printf_common+0xac>
 8002d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d14:	3501      	adds	r5, #1
 8002d16:	e7c6      	b.n	8002ca6 <_printf_common+0x3e>
 8002d18:	18e1      	adds	r1, r4, r3
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	2030      	movs	r0, #48	@ 0x30
 8002d1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002d22:	4422      	add	r2, r4
 8002d24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002d28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	e7c7      	b.n	8002cc0 <_printf_common+0x58>
 8002d30:	2301      	movs	r3, #1
 8002d32:	4622      	mov	r2, r4
 8002d34:	4641      	mov	r1, r8
 8002d36:	4638      	mov	r0, r7
 8002d38:	47c8      	blx	r9
 8002d3a:	3001      	adds	r0, #1
 8002d3c:	d0e6      	beq.n	8002d0c <_printf_common+0xa4>
 8002d3e:	3601      	adds	r6, #1
 8002d40:	e7d9      	b.n	8002cf6 <_printf_common+0x8e>
	...

08002d44 <_printf_i>:
 8002d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d48:	7e0f      	ldrb	r7, [r1, #24]
 8002d4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002d4c:	2f78      	cmp	r7, #120	@ 0x78
 8002d4e:	4691      	mov	r9, r2
 8002d50:	4680      	mov	r8, r0
 8002d52:	460c      	mov	r4, r1
 8002d54:	469a      	mov	sl, r3
 8002d56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002d5a:	d807      	bhi.n	8002d6c <_printf_i+0x28>
 8002d5c:	2f62      	cmp	r7, #98	@ 0x62
 8002d5e:	d80a      	bhi.n	8002d76 <_printf_i+0x32>
 8002d60:	2f00      	cmp	r7, #0
 8002d62:	f000 80d2 	beq.w	8002f0a <_printf_i+0x1c6>
 8002d66:	2f58      	cmp	r7, #88	@ 0x58
 8002d68:	f000 80b9 	beq.w	8002ede <_printf_i+0x19a>
 8002d6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002d74:	e03a      	b.n	8002dec <_printf_i+0xa8>
 8002d76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002d7a:	2b15      	cmp	r3, #21
 8002d7c:	d8f6      	bhi.n	8002d6c <_printf_i+0x28>
 8002d7e:	a101      	add	r1, pc, #4	@ (adr r1, 8002d84 <_printf_i+0x40>)
 8002d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d84:	08002ddd 	.word	0x08002ddd
 8002d88:	08002df1 	.word	0x08002df1
 8002d8c:	08002d6d 	.word	0x08002d6d
 8002d90:	08002d6d 	.word	0x08002d6d
 8002d94:	08002d6d 	.word	0x08002d6d
 8002d98:	08002d6d 	.word	0x08002d6d
 8002d9c:	08002df1 	.word	0x08002df1
 8002da0:	08002d6d 	.word	0x08002d6d
 8002da4:	08002d6d 	.word	0x08002d6d
 8002da8:	08002d6d 	.word	0x08002d6d
 8002dac:	08002d6d 	.word	0x08002d6d
 8002db0:	08002ef1 	.word	0x08002ef1
 8002db4:	08002e1b 	.word	0x08002e1b
 8002db8:	08002eab 	.word	0x08002eab
 8002dbc:	08002d6d 	.word	0x08002d6d
 8002dc0:	08002d6d 	.word	0x08002d6d
 8002dc4:	08002f13 	.word	0x08002f13
 8002dc8:	08002d6d 	.word	0x08002d6d
 8002dcc:	08002e1b 	.word	0x08002e1b
 8002dd0:	08002d6d 	.word	0x08002d6d
 8002dd4:	08002d6d 	.word	0x08002d6d
 8002dd8:	08002eb3 	.word	0x08002eb3
 8002ddc:	6833      	ldr	r3, [r6, #0]
 8002dde:	1d1a      	adds	r2, r3, #4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6032      	str	r2, [r6, #0]
 8002de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002de8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002dec:	2301      	movs	r3, #1
 8002dee:	e09d      	b.n	8002f2c <_printf_i+0x1e8>
 8002df0:	6833      	ldr	r3, [r6, #0]
 8002df2:	6820      	ldr	r0, [r4, #0]
 8002df4:	1d19      	adds	r1, r3, #4
 8002df6:	6031      	str	r1, [r6, #0]
 8002df8:	0606      	lsls	r6, r0, #24
 8002dfa:	d501      	bpl.n	8002e00 <_printf_i+0xbc>
 8002dfc:	681d      	ldr	r5, [r3, #0]
 8002dfe:	e003      	b.n	8002e08 <_printf_i+0xc4>
 8002e00:	0645      	lsls	r5, r0, #25
 8002e02:	d5fb      	bpl.n	8002dfc <_printf_i+0xb8>
 8002e04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002e08:	2d00      	cmp	r5, #0
 8002e0a:	da03      	bge.n	8002e14 <_printf_i+0xd0>
 8002e0c:	232d      	movs	r3, #45	@ 0x2d
 8002e0e:	426d      	negs	r5, r5
 8002e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e14:	4859      	ldr	r0, [pc, #356]	@ (8002f7c <_printf_i+0x238>)
 8002e16:	230a      	movs	r3, #10
 8002e18:	e011      	b.n	8002e3e <_printf_i+0xfa>
 8002e1a:	6821      	ldr	r1, [r4, #0]
 8002e1c:	6833      	ldr	r3, [r6, #0]
 8002e1e:	0608      	lsls	r0, r1, #24
 8002e20:	f853 5b04 	ldr.w	r5, [r3], #4
 8002e24:	d402      	bmi.n	8002e2c <_printf_i+0xe8>
 8002e26:	0649      	lsls	r1, r1, #25
 8002e28:	bf48      	it	mi
 8002e2a:	b2ad      	uxthmi	r5, r5
 8002e2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002e2e:	4853      	ldr	r0, [pc, #332]	@ (8002f7c <_printf_i+0x238>)
 8002e30:	6033      	str	r3, [r6, #0]
 8002e32:	bf14      	ite	ne
 8002e34:	230a      	movne	r3, #10
 8002e36:	2308      	moveq	r3, #8
 8002e38:	2100      	movs	r1, #0
 8002e3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002e3e:	6866      	ldr	r6, [r4, #4]
 8002e40:	60a6      	str	r6, [r4, #8]
 8002e42:	2e00      	cmp	r6, #0
 8002e44:	bfa2      	ittt	ge
 8002e46:	6821      	ldrge	r1, [r4, #0]
 8002e48:	f021 0104 	bicge.w	r1, r1, #4
 8002e4c:	6021      	strge	r1, [r4, #0]
 8002e4e:	b90d      	cbnz	r5, 8002e54 <_printf_i+0x110>
 8002e50:	2e00      	cmp	r6, #0
 8002e52:	d04b      	beq.n	8002eec <_printf_i+0x1a8>
 8002e54:	4616      	mov	r6, r2
 8002e56:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e5a:	fb03 5711 	mls	r7, r3, r1, r5
 8002e5e:	5dc7      	ldrb	r7, [r0, r7]
 8002e60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e64:	462f      	mov	r7, r5
 8002e66:	42bb      	cmp	r3, r7
 8002e68:	460d      	mov	r5, r1
 8002e6a:	d9f4      	bls.n	8002e56 <_printf_i+0x112>
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d10b      	bne.n	8002e88 <_printf_i+0x144>
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	07df      	lsls	r7, r3, #31
 8002e74:	d508      	bpl.n	8002e88 <_printf_i+0x144>
 8002e76:	6923      	ldr	r3, [r4, #16]
 8002e78:	6861      	ldr	r1, [r4, #4]
 8002e7a:	4299      	cmp	r1, r3
 8002e7c:	bfde      	ittt	le
 8002e7e:	2330      	movle	r3, #48	@ 0x30
 8002e80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e88:	1b92      	subs	r2, r2, r6
 8002e8a:	6122      	str	r2, [r4, #16]
 8002e8c:	f8cd a000 	str.w	sl, [sp]
 8002e90:	464b      	mov	r3, r9
 8002e92:	aa03      	add	r2, sp, #12
 8002e94:	4621      	mov	r1, r4
 8002e96:	4640      	mov	r0, r8
 8002e98:	f7ff fee6 	bl	8002c68 <_printf_common>
 8002e9c:	3001      	adds	r0, #1
 8002e9e:	d14a      	bne.n	8002f36 <_printf_i+0x1f2>
 8002ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea4:	b004      	add	sp, #16
 8002ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	f043 0320 	orr.w	r3, r3, #32
 8002eb0:	6023      	str	r3, [r4, #0]
 8002eb2:	4833      	ldr	r0, [pc, #204]	@ (8002f80 <_printf_i+0x23c>)
 8002eb4:	2778      	movs	r7, #120	@ 0x78
 8002eb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	6831      	ldr	r1, [r6, #0]
 8002ebe:	061f      	lsls	r7, r3, #24
 8002ec0:	f851 5b04 	ldr.w	r5, [r1], #4
 8002ec4:	d402      	bmi.n	8002ecc <_printf_i+0x188>
 8002ec6:	065f      	lsls	r7, r3, #25
 8002ec8:	bf48      	it	mi
 8002eca:	b2ad      	uxthmi	r5, r5
 8002ecc:	6031      	str	r1, [r6, #0]
 8002ece:	07d9      	lsls	r1, r3, #31
 8002ed0:	bf44      	itt	mi
 8002ed2:	f043 0320 	orrmi.w	r3, r3, #32
 8002ed6:	6023      	strmi	r3, [r4, #0]
 8002ed8:	b11d      	cbz	r5, 8002ee2 <_printf_i+0x19e>
 8002eda:	2310      	movs	r3, #16
 8002edc:	e7ac      	b.n	8002e38 <_printf_i+0xf4>
 8002ede:	4827      	ldr	r0, [pc, #156]	@ (8002f7c <_printf_i+0x238>)
 8002ee0:	e7e9      	b.n	8002eb6 <_printf_i+0x172>
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	f023 0320 	bic.w	r3, r3, #32
 8002ee8:	6023      	str	r3, [r4, #0]
 8002eea:	e7f6      	b.n	8002eda <_printf_i+0x196>
 8002eec:	4616      	mov	r6, r2
 8002eee:	e7bd      	b.n	8002e6c <_printf_i+0x128>
 8002ef0:	6833      	ldr	r3, [r6, #0]
 8002ef2:	6825      	ldr	r5, [r4, #0]
 8002ef4:	6961      	ldr	r1, [r4, #20]
 8002ef6:	1d18      	adds	r0, r3, #4
 8002ef8:	6030      	str	r0, [r6, #0]
 8002efa:	062e      	lsls	r6, r5, #24
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	d501      	bpl.n	8002f04 <_printf_i+0x1c0>
 8002f00:	6019      	str	r1, [r3, #0]
 8002f02:	e002      	b.n	8002f0a <_printf_i+0x1c6>
 8002f04:	0668      	lsls	r0, r5, #25
 8002f06:	d5fb      	bpl.n	8002f00 <_printf_i+0x1bc>
 8002f08:	8019      	strh	r1, [r3, #0]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	6123      	str	r3, [r4, #16]
 8002f0e:	4616      	mov	r6, r2
 8002f10:	e7bc      	b.n	8002e8c <_printf_i+0x148>
 8002f12:	6833      	ldr	r3, [r6, #0]
 8002f14:	1d1a      	adds	r2, r3, #4
 8002f16:	6032      	str	r2, [r6, #0]
 8002f18:	681e      	ldr	r6, [r3, #0]
 8002f1a:	6862      	ldr	r2, [r4, #4]
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4630      	mov	r0, r6
 8002f20:	f7fd f95e 	bl	80001e0 <memchr>
 8002f24:	b108      	cbz	r0, 8002f2a <_printf_i+0x1e6>
 8002f26:	1b80      	subs	r0, r0, r6
 8002f28:	6060      	str	r0, [r4, #4]
 8002f2a:	6863      	ldr	r3, [r4, #4]
 8002f2c:	6123      	str	r3, [r4, #16]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f34:	e7aa      	b.n	8002e8c <_printf_i+0x148>
 8002f36:	6923      	ldr	r3, [r4, #16]
 8002f38:	4632      	mov	r2, r6
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	4640      	mov	r0, r8
 8002f3e:	47d0      	blx	sl
 8002f40:	3001      	adds	r0, #1
 8002f42:	d0ad      	beq.n	8002ea0 <_printf_i+0x15c>
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	079b      	lsls	r3, r3, #30
 8002f48:	d413      	bmi.n	8002f72 <_printf_i+0x22e>
 8002f4a:	68e0      	ldr	r0, [r4, #12]
 8002f4c:	9b03      	ldr	r3, [sp, #12]
 8002f4e:	4298      	cmp	r0, r3
 8002f50:	bfb8      	it	lt
 8002f52:	4618      	movlt	r0, r3
 8002f54:	e7a6      	b.n	8002ea4 <_printf_i+0x160>
 8002f56:	2301      	movs	r3, #1
 8002f58:	4632      	mov	r2, r6
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	4640      	mov	r0, r8
 8002f5e:	47d0      	blx	sl
 8002f60:	3001      	adds	r0, #1
 8002f62:	d09d      	beq.n	8002ea0 <_printf_i+0x15c>
 8002f64:	3501      	adds	r5, #1
 8002f66:	68e3      	ldr	r3, [r4, #12]
 8002f68:	9903      	ldr	r1, [sp, #12]
 8002f6a:	1a5b      	subs	r3, r3, r1
 8002f6c:	42ab      	cmp	r3, r5
 8002f6e:	dcf2      	bgt.n	8002f56 <_printf_i+0x212>
 8002f70:	e7eb      	b.n	8002f4a <_printf_i+0x206>
 8002f72:	2500      	movs	r5, #0
 8002f74:	f104 0619 	add.w	r6, r4, #25
 8002f78:	e7f5      	b.n	8002f66 <_printf_i+0x222>
 8002f7a:	bf00      	nop
 8002f7c:	080030d1 	.word	0x080030d1
 8002f80:	080030e2 	.word	0x080030e2

08002f84 <memmove>:
 8002f84:	4288      	cmp	r0, r1
 8002f86:	b510      	push	{r4, lr}
 8002f88:	eb01 0402 	add.w	r4, r1, r2
 8002f8c:	d902      	bls.n	8002f94 <memmove+0x10>
 8002f8e:	4284      	cmp	r4, r0
 8002f90:	4623      	mov	r3, r4
 8002f92:	d807      	bhi.n	8002fa4 <memmove+0x20>
 8002f94:	1e43      	subs	r3, r0, #1
 8002f96:	42a1      	cmp	r1, r4
 8002f98:	d008      	beq.n	8002fac <memmove+0x28>
 8002f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002fa2:	e7f8      	b.n	8002f96 <memmove+0x12>
 8002fa4:	4402      	add	r2, r0
 8002fa6:	4601      	mov	r1, r0
 8002fa8:	428a      	cmp	r2, r1
 8002faa:	d100      	bne.n	8002fae <memmove+0x2a>
 8002fac:	bd10      	pop	{r4, pc}
 8002fae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002fb6:	e7f7      	b.n	8002fa8 <memmove+0x24>

08002fb8 <_sbrk_r>:
 8002fb8:	b538      	push	{r3, r4, r5, lr}
 8002fba:	4d06      	ldr	r5, [pc, #24]	@ (8002fd4 <_sbrk_r+0x1c>)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	4608      	mov	r0, r1
 8002fc2:	602b      	str	r3, [r5, #0]
 8002fc4:	f7ff fac2 	bl	800254c <_sbrk>
 8002fc8:	1c43      	adds	r3, r0, #1
 8002fca:	d102      	bne.n	8002fd2 <_sbrk_r+0x1a>
 8002fcc:	682b      	ldr	r3, [r5, #0]
 8002fce:	b103      	cbz	r3, 8002fd2 <_sbrk_r+0x1a>
 8002fd0:	6023      	str	r3, [r4, #0]
 8002fd2:	bd38      	pop	{r3, r4, r5, pc}
 8002fd4:	20000504 	.word	0x20000504

08002fd8 <memcpy>:
 8002fd8:	440a      	add	r2, r1
 8002fda:	4291      	cmp	r1, r2
 8002fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fe0:	d100      	bne.n	8002fe4 <memcpy+0xc>
 8002fe2:	4770      	bx	lr
 8002fe4:	b510      	push	{r4, lr}
 8002fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fee:	4291      	cmp	r1, r2
 8002ff0:	d1f9      	bne.n	8002fe6 <memcpy+0xe>
 8002ff2:	bd10      	pop	{r4, pc}

08002ff4 <_realloc_r>:
 8002ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff8:	4680      	mov	r8, r0
 8002ffa:	4615      	mov	r5, r2
 8002ffc:	460c      	mov	r4, r1
 8002ffe:	b921      	cbnz	r1, 800300a <_realloc_r+0x16>
 8003000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003004:	4611      	mov	r1, r2
 8003006:	f7ff bc4b 	b.w	80028a0 <_malloc_r>
 800300a:	b92a      	cbnz	r2, 8003018 <_realloc_r+0x24>
 800300c:	f7ff fbdc 	bl	80027c8 <_free_r>
 8003010:	2400      	movs	r4, #0
 8003012:	4620      	mov	r0, r4
 8003014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003018:	f000 f81a 	bl	8003050 <_malloc_usable_size_r>
 800301c:	4285      	cmp	r5, r0
 800301e:	4606      	mov	r6, r0
 8003020:	d802      	bhi.n	8003028 <_realloc_r+0x34>
 8003022:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003026:	d8f4      	bhi.n	8003012 <_realloc_r+0x1e>
 8003028:	4629      	mov	r1, r5
 800302a:	4640      	mov	r0, r8
 800302c:	f7ff fc38 	bl	80028a0 <_malloc_r>
 8003030:	4607      	mov	r7, r0
 8003032:	2800      	cmp	r0, #0
 8003034:	d0ec      	beq.n	8003010 <_realloc_r+0x1c>
 8003036:	42b5      	cmp	r5, r6
 8003038:	462a      	mov	r2, r5
 800303a:	4621      	mov	r1, r4
 800303c:	bf28      	it	cs
 800303e:	4632      	movcs	r2, r6
 8003040:	f7ff ffca 	bl	8002fd8 <memcpy>
 8003044:	4621      	mov	r1, r4
 8003046:	4640      	mov	r0, r8
 8003048:	f7ff fbbe 	bl	80027c8 <_free_r>
 800304c:	463c      	mov	r4, r7
 800304e:	e7e0      	b.n	8003012 <_realloc_r+0x1e>

08003050 <_malloc_usable_size_r>:
 8003050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003054:	1f18      	subs	r0, r3, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	bfbc      	itt	lt
 800305a:	580b      	ldrlt	r3, [r1, r0]
 800305c:	18c0      	addlt	r0, r0, r3
 800305e:	4770      	bx	lr

08003060 <_init>:
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	bf00      	nop
 8003064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003066:	bc08      	pop	{r3}
 8003068:	469e      	mov	lr, r3
 800306a:	4770      	bx	lr

0800306c <_fini>:
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	bf00      	nop
 8003070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003072:	bc08      	pop	{r3}
 8003074:	469e      	mov	lr, r3
 8003076:	4770      	bx	lr
