
EEV_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08004558  08004558  00005558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800496c  0800496c  00006004  2**0
                  CONTENTS
  4 .ARM          00000000  0800496c  0800496c  00006004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800496c  0800496c  00006004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800496c  0800496c  0000596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004970  08004970  00005970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08004974  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006004  2**0
                  CONTENTS
 10 .bss          0000068c  20000004  20000004  00006004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000690  20000690  00006004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007395  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c28  00000000  00000000  0000d3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000260  00000000  00000000  0000dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001cd  00000000  00000000  0000e258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000b6b  00000000  00000000  0000e425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004a54  00000000  00000000  0000ef90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f7b4  00000000  00000000  000139e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a3198  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b2c  00000000  00000000  000a31dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000a3d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004540 	.word	0x08004540

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08004540 	.word	0x08004540

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2lz>:
 8000ac4:	b538      	push	{r3, r4, r5, lr}
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2300      	movs	r3, #0
 8000aca:	4604      	mov	r4, r0
 8000acc:	460d      	mov	r5, r1
 8000ace:	f7ff ffa9 	bl	8000a24 <__aeabi_dcmplt>
 8000ad2:	b928      	cbnz	r0, 8000ae0 <__aeabi_d2lz+0x1c>
 8000ad4:	4620      	mov	r0, r4
 8000ad6:	4629      	mov	r1, r5
 8000ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000adc:	f000 b80a 	b.w	8000af4 <__aeabi_d2ulz>
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ae6:	f000 f805 	bl	8000af4 <__aeabi_d2ulz>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	bd38      	pop	{r3, r4, r5, pc}
 8000af2:	bf00      	nop

08000af4 <__aeabi_d2ulz>:
 8000af4:	b5d0      	push	{r4, r6, r7, lr}
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <__aeabi_d2ulz+0x34>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	4606      	mov	r6, r0
 8000afc:	460f      	mov	r7, r1
 8000afe:	f7ff fd1f 	bl	8000540 <__aeabi_dmul>
 8000b02:	f000 f815 	bl	8000b30 <__aeabi_d2uiz>
 8000b06:	4604      	mov	r4, r0
 8000b08:	f7ff fca0 	bl	800044c <__aeabi_ui2d>
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <__aeabi_d2ulz+0x38>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f7ff fd16 	bl	8000540 <__aeabi_dmul>
 8000b14:	4602      	mov	r2, r0
 8000b16:	460b      	mov	r3, r1
 8000b18:	4630      	mov	r0, r6
 8000b1a:	4639      	mov	r1, r7
 8000b1c:	f7ff fb58 	bl	80001d0 <__aeabi_dsub>
 8000b20:	f000 f806 	bl	8000b30 <__aeabi_d2uiz>
 8000b24:	4621      	mov	r1, r4
 8000b26:	bdd0      	pop	{r4, r6, r7, pc}
 8000b28:	3df00000 	.word	0x3df00000
 8000b2c:	41f00000 	.word	0x41f00000

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4907      	ldr	r1, [pc, #28]	@ (8000ba8 <__NVIC_EnableIRQ+0x38>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <DMA1_Stream0_IRQHandler>:
 * status flags for FIFO error, direct mode error, transfer error, half
 * transfer complete, and transfer complete, and clears the respective
 * interrupt flag after handling it.
 */
void DMA1_Stream0_IRQHandler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF0)
 8000bb0:	4b54      	ldr	r3, [pc, #336]	@ (8000d04 <DMA1_Stream0_IRQHandler+0x158>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d01a      	beq.n	8000bf2 <DMA1_Stream0_IRQHandler+0x46>
	{
		TIM5_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000bbc:	4b52      	ldr	r3, [pc, #328]	@ (8000d08 <DMA1_Stream0_IRQHandler+0x15c>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	715a      	strb	r2, [r3, #5]
		TIM4_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000bc2:	4b52      	ldr	r3, [pc, #328]	@ (8000d0c <DMA1_Stream0_IRQHandler+0x160>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	715a      	strb	r2, [r3, #5]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000bc8:	4b51      	ldr	r3, [pc, #324]	@ (8000d10 <DMA1_Stream0_IRQHandler+0x164>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	715a      	strb	r2, [r3, #5]
		USART5_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000bce:	4b51      	ldr	r3, [pc, #324]	@ (8000d14 <DMA1_Stream0_IRQHandler+0x168>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	715a      	strb	r2, [r3, #5]
		I2C1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000bd4:	4b50      	ldr	r3, [pc, #320]	@ (8000d18 <DMA1_Stream0_IRQHandler+0x16c>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	715a      	strb	r2, [r3, #5]
		SPI3_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000bda:	4b50      	ldr	r3, [pc, #320]	@ (8000d1c <DMA1_Stream0_IRQHandler+0x170>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	715a      	strb	r2, [r3, #5]
		DMA1_Stream0_Flag.Fifo_Error_Flag = true;
 8000be0:	4b4f      	ldr	r3, [pc, #316]	@ (8000d20 <DMA1_Stream0_IRQHandler+0x174>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	715a      	strb	r2, [r3, #5]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000be6:	4b47      	ldr	r3, [pc, #284]	@ (8000d04 <DMA1_Stream0_IRQHandler+0x158>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	4a46      	ldr	r2, [pc, #280]	@ (8000d04 <DMA1_Stream0_IRQHandler+0x158>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF0)
 8000bf2:	4b44      	ldr	r3, [pc, #272]	@ (8000d04 <DMA1_Stream0_IRQHandler+0x158>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d01a      	beq.n	8000c34 <DMA1_Stream0_IRQHandler+0x88>
	{
		TIM5_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000bfe:	4b42      	ldr	r3, [pc, #264]	@ (8000d08 <DMA1_Stream0_IRQHandler+0x15c>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	711a      	strb	r2, [r3, #4]
		TIM4_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000c04:	4b41      	ldr	r3, [pc, #260]	@ (8000d0c <DMA1_Stream0_IRQHandler+0x160>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000c0a:	4b41      	ldr	r3, [pc, #260]	@ (8000d10 <DMA1_Stream0_IRQHandler+0x164>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	711a      	strb	r2, [r3, #4]
		USART5_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000c10:	4b40      	ldr	r3, [pc, #256]	@ (8000d14 <DMA1_Stream0_IRQHandler+0x168>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	711a      	strb	r2, [r3, #4]
		I2C1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000c16:	4b40      	ldr	r3, [pc, #256]	@ (8000d18 <DMA1_Stream0_IRQHandler+0x16c>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	711a      	strb	r2, [r3, #4]
		SPI3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d1c <DMA1_Stream0_IRQHandler+0x170>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	711a      	strb	r2, [r3, #4]
		DMA1_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8000c22:	4b3f      	ldr	r3, [pc, #252]	@ (8000d20 <DMA1_Stream0_IRQHandler+0x174>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000c28:	4b36      	ldr	r3, [pc, #216]	@ (8000d04 <DMA1_Stream0_IRQHandler+0x158>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	4a35      	ldr	r2, [pc, #212]	@ (8000d04 <DMA1_Stream0_IRQHandler+0x158>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF0)
 8000c34:	4b33      	ldr	r3, [pc, #204]	@ (8000d04 <DMA1_Stream0_IRQHandler+0x158>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 0308 	and.w	r3, r3, #8
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d01a      	beq.n	8000c76 <DMA1_Stream0_IRQHandler+0xca>
	{
		TIM5_CH3_DMA_Flag.Transfer_Error_Flag= true;
 8000c40:	4b31      	ldr	r3, [pc, #196]	@ (8000d08 <DMA1_Stream0_IRQHandler+0x15c>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	70da      	strb	r2, [r3, #3]
		TIM4_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000c46:	4b31      	ldr	r3, [pc, #196]	@ (8000d0c <DMA1_Stream0_IRQHandler+0x160>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000c4c:	4b30      	ldr	r3, [pc, #192]	@ (8000d10 <DMA1_Stream0_IRQHandler+0x164>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	70da      	strb	r2, [r3, #3]
		USART5_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000c52:	4b30      	ldr	r3, [pc, #192]	@ (8000d14 <DMA1_Stream0_IRQHandler+0x168>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	70da      	strb	r2, [r3, #3]
		I2C1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000c58:	4b2f      	ldr	r3, [pc, #188]	@ (8000d18 <DMA1_Stream0_IRQHandler+0x16c>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	70da      	strb	r2, [r3, #3]
		SPI3_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d1c <DMA1_Stream0_IRQHandler+0x170>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	70da      	strb	r2, [r3, #3]
		DMA1_Stream0_Flag.Transfer_Error_Flag = true;
 8000c64:	4b2e      	ldr	r3, [pc, #184]	@ (8000d20 <DMA1_Stream0_IRQHandler+0x174>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000c6a:	4b26      	ldr	r3, [pc, #152]	@ (8000d04 <DMA1_Stream0_IRQHandler+0x158>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	4a25      	ldr	r2, [pc, #148]	@ (8000d04 <DMA1_Stream0_IRQHandler+0x158>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF0)
 8000c76:	4b23      	ldr	r3, [pc, #140]	@ (8000d04 <DMA1_Stream0_IRQHandler+0x158>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0310 	and.w	r3, r3, #16
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d01a      	beq.n	8000cb8 <DMA1_Stream0_IRQHandler+0x10c>
	{
		TIM5_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c82:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <DMA1_Stream0_IRQHandler+0x15c>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	709a      	strb	r2, [r3, #2]
		TIM4_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c88:	4b20      	ldr	r3, [pc, #128]	@ (8000d0c <DMA1_Stream0_IRQHandler+0x160>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <DMA1_Stream0_IRQHandler+0x164>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	709a      	strb	r2, [r3, #2]
		USART5_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c94:	4b1f      	ldr	r3, [pc, #124]	@ (8000d14 <DMA1_Stream0_IRQHandler+0x168>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	709a      	strb	r2, [r3, #2]
		I2C1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d18 <DMA1_Stream0_IRQHandler+0x16c>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	709a      	strb	r2, [r3, #2]
		SPI3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d1c <DMA1_Stream0_IRQHandler+0x170>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	709a      	strb	r2, [r3, #2]
		DMA1_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <DMA1_Stream0_IRQHandler+0x174>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000cac:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <DMA1_Stream0_IRQHandler+0x158>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <DMA1_Stream0_IRQHandler+0x158>)
 8000cb2:	f043 0310 	orr.w	r3, r3, #16
 8000cb6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF0)
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <DMA1_Stream0_IRQHandler+0x158>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0320 	and.w	r3, r3, #32
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d01a      	beq.n	8000cfa <DMA1_Stream0_IRQHandler+0x14e>
	{
		TIM5_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000cc4:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <DMA1_Stream0_IRQHandler+0x15c>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	705a      	strb	r2, [r3, #1]
		TIM4_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <DMA1_Stream0_IRQHandler+0x160>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <DMA1_Stream0_IRQHandler+0x164>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	705a      	strb	r2, [r3, #1]
		USART5_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <DMA1_Stream0_IRQHandler+0x168>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	705a      	strb	r2, [r3, #1]
		I2C1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <DMA1_Stream0_IRQHandler+0x16c>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	705a      	strb	r2, [r3, #1]
		SPI3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <DMA1_Stream0_IRQHandler+0x170>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	705a      	strb	r2, [r3, #1]
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <DMA1_Stream0_IRQHandler+0x174>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000cee:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <DMA1_Stream0_IRQHandler+0x158>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <DMA1_Stream0_IRQHandler+0x158>)
 8000cf4:	f043 0320 	orr.w	r3, r3, #32
 8000cf8:	6093      	str	r3, [r2, #8]
	}
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	40026000 	.word	0x40026000
 8000d08:	200001d0 	.word	0x200001d0
 8000d0c:	200001b0 	.word	0x200001b0
 8000d10:	200000f0 	.word	0x200000f0
 8000d14:	200000c8 	.word	0x200000c8
 8000d18:	20000038 	.word	0x20000038
 8000d1c:	20000068 	.word	0x20000068
 8000d20:	20000218 	.word	0x20000218

08000d24 <DMA1_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream1_IRQHandler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF1)
 8000d28:	4b45      	ldr	r3, [pc, #276]	@ (8000e40 <DMA1_Stream1_IRQHandler+0x11c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d014      	beq.n	8000d5e <DMA1_Stream1_IRQHandler+0x3a>
	{
		TIM2_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000d34:	4b43      	ldr	r3, [pc, #268]	@ (8000e44 <DMA1_Stream1_IRQHandler+0x120>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	715a      	strb	r2, [r3, #5]
		TIM6_UP_DMA_Flag.Fifo_Error_Flag = true;
 8000d3a:	4b43      	ldr	r3, [pc, #268]	@ (8000e48 <DMA1_Stream1_IRQHandler+0x124>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	715a      	strb	r2, [r3, #5]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000d40:	4b42      	ldr	r3, [pc, #264]	@ (8000e4c <DMA1_Stream1_IRQHandler+0x128>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	715a      	strb	r2, [r3, #5]
		USART3_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000d46:	4b42      	ldr	r3, [pc, #264]	@ (8000e50 <DMA1_Stream1_IRQHandler+0x12c>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	715a      	strb	r2, [r3, #5]
		DMA1_Stream1_Flag.Fifo_Error_Flag = true;
 8000d4c:	4b41      	ldr	r3, [pc, #260]	@ (8000e54 <DMA1_Stream1_IRQHandler+0x130>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	715a      	strb	r2, [r3, #5]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000d52:	4b3b      	ldr	r3, [pc, #236]	@ (8000e40 <DMA1_Stream1_IRQHandler+0x11c>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	4a3a      	ldr	r2, [pc, #232]	@ (8000e40 <DMA1_Stream1_IRQHandler+0x11c>)
 8000d58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d5c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF1)
 8000d5e:	4b38      	ldr	r3, [pc, #224]	@ (8000e40 <DMA1_Stream1_IRQHandler+0x11c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d014      	beq.n	8000d94 <DMA1_Stream1_IRQHandler+0x70>
	{
		TIM2_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d6a:	4b36      	ldr	r3, [pc, #216]	@ (8000e44 <DMA1_Stream1_IRQHandler+0x120>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	711a      	strb	r2, [r3, #4]
		TIM6_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d70:	4b35      	ldr	r3, [pc, #212]	@ (8000e48 <DMA1_Stream1_IRQHandler+0x124>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d76:	4b35      	ldr	r3, [pc, #212]	@ (8000e4c <DMA1_Stream1_IRQHandler+0x128>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	711a      	strb	r2, [r3, #4]
		USART3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d7c:	4b34      	ldr	r3, [pc, #208]	@ (8000e50 <DMA1_Stream1_IRQHandler+0x12c>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	711a      	strb	r2, [r3, #4]
		DMA1_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8000d82:	4b34      	ldr	r3, [pc, #208]	@ (8000e54 <DMA1_Stream1_IRQHandler+0x130>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000d88:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <DMA1_Stream1_IRQHandler+0x11c>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e40 <DMA1_Stream1_IRQHandler+0x11c>)
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d92:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF1)
 8000d94:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <DMA1_Stream1_IRQHandler+0x11c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d014      	beq.n	8000dca <DMA1_Stream1_IRQHandler+0xa6>
	{
		TIM2_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <DMA1_Stream1_IRQHandler+0x120>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	70da      	strb	r2, [r3, #3]
		TIM6_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000da6:	4b28      	ldr	r3, [pc, #160]	@ (8000e48 <DMA1_Stream1_IRQHandler+0x124>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000dac:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <DMA1_Stream1_IRQHandler+0x128>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	70da      	strb	r2, [r3, #3]
		USART3_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000db2:	4b27      	ldr	r3, [pc, #156]	@ (8000e50 <DMA1_Stream1_IRQHandler+0x12c>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	70da      	strb	r2, [r3, #3]
		DMA1_Stream1_Flag.Transfer_Error_Flag = true;
 8000db8:	4b26      	ldr	r3, [pc, #152]	@ (8000e54 <DMA1_Stream1_IRQHandler+0x130>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000dbe:	4b20      	ldr	r3, [pc, #128]	@ (8000e40 <DMA1_Stream1_IRQHandler+0x11c>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e40 <DMA1_Stream1_IRQHandler+0x11c>)
 8000dc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dc8:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF1)
 8000dca:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <DMA1_Stream1_IRQHandler+0x11c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d014      	beq.n	8000e00 <DMA1_Stream1_IRQHandler+0xdc>
	{
		TIM2_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e44 <DMA1_Stream1_IRQHandler+0x120>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	709a      	strb	r2, [r3, #2]
		TIM6_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <DMA1_Stream1_IRQHandler+0x124>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <DMA1_Stream1_IRQHandler+0x128>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	709a      	strb	r2, [r3, #2]
		USART3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000de8:	4b19      	ldr	r3, [pc, #100]	@ (8000e50 <DMA1_Stream1_IRQHandler+0x12c>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	709a      	strb	r2, [r3, #2]
		DMA1_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8000dee:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <DMA1_Stream1_IRQHandler+0x130>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000df4:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <DMA1_Stream1_IRQHandler+0x11c>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	4a11      	ldr	r2, [pc, #68]	@ (8000e40 <DMA1_Stream1_IRQHandler+0x11c>)
 8000dfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dfe:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF1)
 8000e00:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <DMA1_Stream1_IRQHandler+0x11c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d014      	beq.n	8000e36 <DMA1_Stream1_IRQHandler+0x112>
	{
		TIM2_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <DMA1_Stream1_IRQHandler+0x120>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	705a      	strb	r2, [r3, #1]
		TIM6_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8000e12:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <DMA1_Stream1_IRQHandler+0x124>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <DMA1_Stream1_IRQHandler+0x128>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	705a      	strb	r2, [r3, #1]
		USART3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <DMA1_Stream1_IRQHandler+0x12c>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	705a      	strb	r2, [r3, #1]
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
 8000e24:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <DMA1_Stream1_IRQHandler+0x130>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000e2a:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <DMA1_Stream1_IRQHandler+0x11c>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	4a04      	ldr	r2, [pc, #16]	@ (8000e40 <DMA1_Stream1_IRQHandler+0x11c>)
 8000e30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e34:	6093      	str	r3, [r2, #8]
	}
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	40026000 	.word	0x40026000
 8000e44:	20000180 	.word	0x20000180
 8000e48:	200001e0 	.word	0x200001e0
 8000e4c:	200000e8 	.word	0x200000e8
 8000e50:	200000a8 	.word	0x200000a8
 8000e54:	20000220 	.word	0x20000220

08000e58 <DMA1_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream2_IRQHandler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF2)
 8000e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f1c <DMA1_Stream2_IRQHandler+0xc4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d00b      	beq.n	8000e80 <DMA1_Stream2_IRQHandler+0x28>
	{
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000e68:	4b2d      	ldr	r3, [pc, #180]	@ (8000f20 <DMA1_Stream2_IRQHandler+0xc8>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	715a      	strb	r2, [r3, #5]
		DMA1_Stream2_Flag.Fifo_Error_Flag = true;
 8000e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f24 <DMA1_Stream2_IRQHandler+0xcc>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	715a      	strb	r2, [r3, #5]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000e74:	4b29      	ldr	r3, [pc, #164]	@ (8000f1c <DMA1_Stream2_IRQHandler+0xc4>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	4a28      	ldr	r2, [pc, #160]	@ (8000f1c <DMA1_Stream2_IRQHandler+0xc4>)
 8000e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e7e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF2)
 8000e80:	4b26      	ldr	r3, [pc, #152]	@ (8000f1c <DMA1_Stream2_IRQHandler+0xc4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00b      	beq.n	8000ea4 <DMA1_Stream2_IRQHandler+0x4c>
	{
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e8c:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <DMA1_Stream2_IRQHandler+0xc8>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	711a      	strb	r2, [r3, #4]
		DMA1_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8000e92:	4b24      	ldr	r3, [pc, #144]	@ (8000f24 <DMA1_Stream2_IRQHandler+0xcc>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8000e98:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <DMA1_Stream2_IRQHandler+0xc4>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8000f1c <DMA1_Stream2_IRQHandler+0xc4>)
 8000e9e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ea2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF2)
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <DMA1_Stream2_IRQHandler+0xc4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00b      	beq.n	8000ec8 <DMA1_Stream2_IRQHandler+0x70>
	{
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <DMA1_Stream2_IRQHandler+0xc8>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	70da      	strb	r2, [r3, #3]
		DMA1_Stream2_Flag.Transfer_Error_Flag = true;
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <DMA1_Stream2_IRQHandler+0xcc>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <DMA1_Stream2_IRQHandler+0xc4>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <DMA1_Stream2_IRQHandler+0xc4>)
 8000ec2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ec6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF2)
 8000ec8:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <DMA1_Stream2_IRQHandler+0xc4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00b      	beq.n	8000eec <DMA1_Stream2_IRQHandler+0x94>
	{
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <DMA1_Stream2_IRQHandler+0xc8>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	709a      	strb	r2, [r3, #2]
		DMA1_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8000eda:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <DMA1_Stream2_IRQHandler+0xcc>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <DMA1_Stream2_IRQHandler+0xc4>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f1c <DMA1_Stream2_IRQHandler+0xc4>)
 8000ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000eea:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF2)
 8000eec:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <DMA1_Stream2_IRQHandler+0xc4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00b      	beq.n	8000f10 <DMA1_Stream2_IRQHandler+0xb8>
	{
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <DMA1_Stream2_IRQHandler+0xc8>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	705a      	strb	r2, [r3, #1]
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <DMA1_Stream2_IRQHandler+0xcc>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <DMA1_Stream2_IRQHandler+0xc4>)
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <DMA1_Stream2_IRQHandler+0xc4>)
 8000f0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f0e:	6093      	str	r3, [r2, #8]
	}
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40026000 	.word	0x40026000
 8000f20:	200000b0 	.word	0x200000b0
 8000f24:	20000228 	.word	0x20000228

08000f28 <DMA1_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream3_IRQHandler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF3)
 8000f2c:	4b54      	ldr	r3, [pc, #336]	@ (8001080 <DMA1_Stream3_IRQHandler+0x158>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d01a      	beq.n	8000f6e <DMA1_Stream3_IRQHandler+0x46>
	{
		TIM5_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000f38:	4b52      	ldr	r3, [pc, #328]	@ (8001084 <DMA1_Stream3_IRQHandler+0x15c>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	715a      	strb	r2, [r3, #5]
		TIM4_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000f3e:	4b52      	ldr	r3, [pc, #328]	@ (8001088 <DMA1_Stream3_IRQHandler+0x160>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	715a      	strb	r2, [r3, #5]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000f44:	4b51      	ldr	r3, [pc, #324]	@ (800108c <DMA1_Stream3_IRQHandler+0x164>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	715a      	strb	r2, [r3, #5]
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000f4a:	4b51      	ldr	r3, [pc, #324]	@ (8001090 <DMA1_Stream3_IRQHandler+0x168>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	715a      	strb	r2, [r3, #5]
		I2S2_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000f50:	4b50      	ldr	r3, [pc, #320]	@ (8001094 <DMA1_Stream3_IRQHandler+0x16c>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	715a      	strb	r2, [r3, #5]
		SPI2_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000f56:	4b50      	ldr	r3, [pc, #320]	@ (8001098 <DMA1_Stream3_IRQHandler+0x170>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	715a      	strb	r2, [r3, #5]
		DMA1_Stream3_Flag.Fifo_Error_Flag = true;
 8000f5c:	4b4f      	ldr	r3, [pc, #316]	@ (800109c <DMA1_Stream3_IRQHandler+0x174>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	715a      	strb	r2, [r3, #5]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8000f62:	4b47      	ldr	r3, [pc, #284]	@ (8001080 <DMA1_Stream3_IRQHandler+0x158>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	4a46      	ldr	r2, [pc, #280]	@ (8001080 <DMA1_Stream3_IRQHandler+0x158>)
 8000f68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f6c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF3)
 8000f6e:	4b44      	ldr	r3, [pc, #272]	@ (8001080 <DMA1_Stream3_IRQHandler+0x158>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d01a      	beq.n	8000fb0 <DMA1_Stream3_IRQHandler+0x88>
	{
		TIM5_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f7a:	4b42      	ldr	r3, [pc, #264]	@ (8001084 <DMA1_Stream3_IRQHandler+0x15c>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	711a      	strb	r2, [r3, #4]
		TIM4_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f80:	4b41      	ldr	r3, [pc, #260]	@ (8001088 <DMA1_Stream3_IRQHandler+0x160>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f86:	4b41      	ldr	r3, [pc, #260]	@ (800108c <DMA1_Stream3_IRQHandler+0x164>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	711a      	strb	r2, [r3, #4]
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f8c:	4b40      	ldr	r3, [pc, #256]	@ (8001090 <DMA1_Stream3_IRQHandler+0x168>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	711a      	strb	r2, [r3, #4]
		I2S2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f92:	4b40      	ldr	r3, [pc, #256]	@ (8001094 <DMA1_Stream3_IRQHandler+0x16c>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	711a      	strb	r2, [r3, #4]
		SPI2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000f98:	4b3f      	ldr	r3, [pc, #252]	@ (8001098 <DMA1_Stream3_IRQHandler+0x170>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	711a      	strb	r2, [r3, #4]
		DMA1_Stream3_Flag.Direct_Mode_Error_Flag = true;
 8000f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800109c <DMA1_Stream3_IRQHandler+0x174>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8000fa4:	4b36      	ldr	r3, [pc, #216]	@ (8001080 <DMA1_Stream3_IRQHandler+0x158>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	4a35      	ldr	r2, [pc, #212]	@ (8001080 <DMA1_Stream3_IRQHandler+0x158>)
 8000faa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fae:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF3)
 8000fb0:	4b33      	ldr	r3, [pc, #204]	@ (8001080 <DMA1_Stream3_IRQHandler+0x158>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d01a      	beq.n	8000ff2 <DMA1_Stream3_IRQHandler+0xca>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000fbc:	4b31      	ldr	r3, [pc, #196]	@ (8001084 <DMA1_Stream3_IRQHandler+0x15c>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	70da      	strb	r2, [r3, #3]
		TIM4_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8000fc2:	4b31      	ldr	r3, [pc, #196]	@ (8001088 <DMA1_Stream3_IRQHandler+0x160>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000fc8:	4b30      	ldr	r3, [pc, #192]	@ (800108c <DMA1_Stream3_IRQHandler+0x164>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	70da      	strb	r2, [r3, #3]
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000fce:	4b30      	ldr	r3, [pc, #192]	@ (8001090 <DMA1_Stream3_IRQHandler+0x168>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	70da      	strb	r2, [r3, #3]
		I2S2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001094 <DMA1_Stream3_IRQHandler+0x16c>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	70da      	strb	r2, [r3, #3]
		SPI2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000fda:	4b2f      	ldr	r3, [pc, #188]	@ (8001098 <DMA1_Stream3_IRQHandler+0x170>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	70da      	strb	r2, [r3, #3]
		DMA1_Stream3_Flag.Transfer_Error_Flag = true;
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800109c <DMA1_Stream3_IRQHandler+0x174>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8000fe6:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <DMA1_Stream3_IRQHandler+0x158>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	4a25      	ldr	r2, [pc, #148]	@ (8001080 <DMA1_Stream3_IRQHandler+0x158>)
 8000fec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ff0:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF3)
 8000ff2:	4b23      	ldr	r3, [pc, #140]	@ (8001080 <DMA1_Stream3_IRQHandler+0x158>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d01a      	beq.n	8001034 <DMA1_Stream3_IRQHandler+0x10c>
	{
		TIM5_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	@ (8001084 <DMA1_Stream3_IRQHandler+0x15c>)
 8001000:	2201      	movs	r2, #1
 8001002:	709a      	strb	r2, [r3, #2]
		TIM4_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001004:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <DMA1_Stream3_IRQHandler+0x160>)
 8001006:	2201      	movs	r2, #1
 8001008:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800100a:	4b20      	ldr	r3, [pc, #128]	@ (800108c <DMA1_Stream3_IRQHandler+0x164>)
 800100c:	2201      	movs	r2, #1
 800100e:	709a      	strb	r2, [r3, #2]
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001010:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <DMA1_Stream3_IRQHandler+0x168>)
 8001012:	2201      	movs	r2, #1
 8001014:	709a      	strb	r2, [r3, #2]
		I2S2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001016:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <DMA1_Stream3_IRQHandler+0x16c>)
 8001018:	2201      	movs	r2, #1
 800101a:	709a      	strb	r2, [r3, #2]
		SPI2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800101c:	4b1e      	ldr	r3, [pc, #120]	@ (8001098 <DMA1_Stream3_IRQHandler+0x170>)
 800101e:	2201      	movs	r2, #1
 8001020:	709a      	strb	r2, [r3, #2]
		DMA1_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8001022:	4b1e      	ldr	r3, [pc, #120]	@ (800109c <DMA1_Stream3_IRQHandler+0x174>)
 8001024:	2201      	movs	r2, #1
 8001026:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001028:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <DMA1_Stream3_IRQHandler+0x158>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	4a14      	ldr	r2, [pc, #80]	@ (8001080 <DMA1_Stream3_IRQHandler+0x158>)
 800102e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001032:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF3)
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <DMA1_Stream3_IRQHandler+0x158>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d01a      	beq.n	8001076 <DMA1_Stream3_IRQHandler+0x14e>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8001040:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <DMA1_Stream3_IRQHandler+0x15c>)
 8001042:	2201      	movs	r2, #1
 8001044:	705a      	strb	r2, [r3, #1]
		TIM4_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <DMA1_Stream3_IRQHandler+0x160>)
 8001048:	2201      	movs	r2, #1
 800104a:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <DMA1_Stream3_IRQHandler+0x164>)
 800104e:	2201      	movs	r2, #1
 8001050:	705a      	strb	r2, [r3, #1]
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001052:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <DMA1_Stream3_IRQHandler+0x168>)
 8001054:	2201      	movs	r2, #1
 8001056:	705a      	strb	r2, [r3, #1]
		I2S2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001058:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <DMA1_Stream3_IRQHandler+0x16c>)
 800105a:	2201      	movs	r2, #1
 800105c:	705a      	strb	r2, [r3, #1]
		SPI2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <DMA1_Stream3_IRQHandler+0x170>)
 8001060:	2201      	movs	r2, #1
 8001062:	705a      	strb	r2, [r3, #1]
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
 8001064:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <DMA1_Stream3_IRQHandler+0x174>)
 8001066:	2201      	movs	r2, #1
 8001068:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 800106a:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <DMA1_Stream3_IRQHandler+0x158>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <DMA1_Stream3_IRQHandler+0x158>)
 8001070:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001074:	6093      	str	r3, [r2, #8]
	}
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	40026000 	.word	0x40026000
 8001084:	200001d8 	.word	0x200001d8
 8001088:	200001b8 	.word	0x200001b8
 800108c:	200000e8 	.word	0x200000e8
 8001090:	200000b0 	.word	0x200000b0
 8001094:	20000020 	.word	0x20000020
 8001098:	20000060 	.word	0x20000060
 800109c:	20000230 	.word	0x20000230

080010a0 <DMA1_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream4_IRQHandler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF4)
 80010a4:	4b54      	ldr	r3, [pc, #336]	@ (80011f8 <DMA1_Stream4_IRQHandler+0x158>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d01a      	beq.n	80010e6 <DMA1_Stream4_IRQHandler+0x46>
	{
		TIM5_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80010b0:	4b52      	ldr	r3, [pc, #328]	@ (80011fc <DMA1_Stream4_IRQHandler+0x15c>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	715a      	strb	r2, [r3, #5]
		TIM3_CH1_DMA_Flag.Fifo_Error_Flag = true;
 80010b6:	4b52      	ldr	r3, [pc, #328]	@ (8001200 <DMA1_Stream4_IRQHandler+0x160>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	715a      	strb	r2, [r3, #5]
		USART4_TX_DMA_Flag.Fifo_Error_Flag = true;
 80010bc:	4b51      	ldr	r3, [pc, #324]	@ (8001204 <DMA1_Stream4_IRQHandler+0x164>)
 80010be:	2201      	movs	r2, #1
 80010c0:	715a      	strb	r2, [r3, #5]
		I2C3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80010c2:	4b51      	ldr	r3, [pc, #324]	@ (8001208 <DMA1_Stream4_IRQHandler+0x168>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	715a      	strb	r2, [r3, #5]
		I2S2_TX_DMA_Flag.Fifo_Error_Flag = true;
 80010c8:	4b50      	ldr	r3, [pc, #320]	@ (800120c <DMA1_Stream4_IRQHandler+0x16c>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	715a      	strb	r2, [r3, #5]
		SPI2_TX_DMA_Flag.Fifo_Error_Flag = true;
 80010ce:	4b50      	ldr	r3, [pc, #320]	@ (8001210 <DMA1_Stream4_IRQHandler+0x170>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	715a      	strb	r2, [r3, #5]
		DMA1_Stream4_Flag.Fifo_Error_Flag = true;
 80010d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001214 <DMA1_Stream4_IRQHandler+0x174>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	715a      	strb	r2, [r3, #5]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF4;
 80010da:	4b47      	ldr	r3, [pc, #284]	@ (80011f8 <DMA1_Stream4_IRQHandler+0x158>)
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	4a46      	ldr	r2, [pc, #280]	@ (80011f8 <DMA1_Stream4_IRQHandler+0x158>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF4)
 80010e6:	4b44      	ldr	r3, [pc, #272]	@ (80011f8 <DMA1_Stream4_IRQHandler+0x158>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d01a      	beq.n	8001128 <DMA1_Stream4_IRQHandler+0x88>
	{
		TIM5_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010f2:	4b42      	ldr	r3, [pc, #264]	@ (80011fc <DMA1_Stream4_IRQHandler+0x15c>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	711a      	strb	r2, [r3, #4]
		TIM3_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010f8:	4b41      	ldr	r3, [pc, #260]	@ (8001200 <DMA1_Stream4_IRQHandler+0x160>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	711a      	strb	r2, [r3, #4]
		USART4_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010fe:	4b41      	ldr	r3, [pc, #260]	@ (8001204 <DMA1_Stream4_IRQHandler+0x164>)
 8001100:	2201      	movs	r2, #1
 8001102:	711a      	strb	r2, [r3, #4]
		I2C3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001104:	4b40      	ldr	r3, [pc, #256]	@ (8001208 <DMA1_Stream4_IRQHandler+0x168>)
 8001106:	2201      	movs	r2, #1
 8001108:	711a      	strb	r2, [r3, #4]
		I2S2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800110a:	4b40      	ldr	r3, [pc, #256]	@ (800120c <DMA1_Stream4_IRQHandler+0x16c>)
 800110c:	2201      	movs	r2, #1
 800110e:	711a      	strb	r2, [r3, #4]
		SPI2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001110:	4b3f      	ldr	r3, [pc, #252]	@ (8001210 <DMA1_Stream4_IRQHandler+0x170>)
 8001112:	2201      	movs	r2, #1
 8001114:	711a      	strb	r2, [r3, #4]
		DMA1_Stream4_Flag.Direct_Mode_Error_Flag = true;
 8001116:	4b3f      	ldr	r3, [pc, #252]	@ (8001214 <DMA1_Stream4_IRQHandler+0x174>)
 8001118:	2201      	movs	r2, #1
 800111a:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 800111c:	4b36      	ldr	r3, [pc, #216]	@ (80011f8 <DMA1_Stream4_IRQHandler+0x158>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	4a35      	ldr	r2, [pc, #212]	@ (80011f8 <DMA1_Stream4_IRQHandler+0x158>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF4)
 8001128:	4b33      	ldr	r3, [pc, #204]	@ (80011f8 <DMA1_Stream4_IRQHandler+0x158>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	2b00      	cmp	r3, #0
 8001132:	d01a      	beq.n	800116a <DMA1_Stream4_IRQHandler+0xca>
	{
		TIM5_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001134:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <DMA1_Stream4_IRQHandler+0x15c>)
 8001136:	2201      	movs	r2, #1
 8001138:	70da      	strb	r2, [r3, #3]
		TIM3_CH1_DMA_Flag.Transfer_Error_Flag = true;
 800113a:	4b31      	ldr	r3, [pc, #196]	@ (8001200 <DMA1_Stream4_IRQHandler+0x160>)
 800113c:	2201      	movs	r2, #1
 800113e:	70da      	strb	r2, [r3, #3]
		USART4_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001140:	4b30      	ldr	r3, [pc, #192]	@ (8001204 <DMA1_Stream4_IRQHandler+0x164>)
 8001142:	2201      	movs	r2, #1
 8001144:	70da      	strb	r2, [r3, #3]
		I2C3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001146:	4b30      	ldr	r3, [pc, #192]	@ (8001208 <DMA1_Stream4_IRQHandler+0x168>)
 8001148:	2201      	movs	r2, #1
 800114a:	70da      	strb	r2, [r3, #3]
		I2S2_TX_DMA_Flag.Transfer_Error_Flag = true;
 800114c:	4b2f      	ldr	r3, [pc, #188]	@ (800120c <DMA1_Stream4_IRQHandler+0x16c>)
 800114e:	2201      	movs	r2, #1
 8001150:	70da      	strb	r2, [r3, #3]
		SPI2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001152:	4b2f      	ldr	r3, [pc, #188]	@ (8001210 <DMA1_Stream4_IRQHandler+0x170>)
 8001154:	2201      	movs	r2, #1
 8001156:	70da      	strb	r2, [r3, #3]
		DMA1_Stream4_Flag.Transfer_Error_Flag = true;
 8001158:	4b2e      	ldr	r3, [pc, #184]	@ (8001214 <DMA1_Stream4_IRQHandler+0x174>)
 800115a:	2201      	movs	r2, #1
 800115c:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 800115e:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <DMA1_Stream4_IRQHandler+0x158>)
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	4a25      	ldr	r2, [pc, #148]	@ (80011f8 <DMA1_Stream4_IRQHandler+0x158>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF4)
 800116a:	4b23      	ldr	r3, [pc, #140]	@ (80011f8 <DMA1_Stream4_IRQHandler+0x158>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	2b00      	cmp	r3, #0
 8001174:	d01a      	beq.n	80011ac <DMA1_Stream4_IRQHandler+0x10c>
	{
		TIM5_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001176:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <DMA1_Stream4_IRQHandler+0x15c>)
 8001178:	2201      	movs	r2, #1
 800117a:	709a      	strb	r2, [r3, #2]
		TIM3_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800117c:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <DMA1_Stream4_IRQHandler+0x160>)
 800117e:	2201      	movs	r2, #1
 8001180:	709a      	strb	r2, [r3, #2]
		USART4_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <DMA1_Stream4_IRQHandler+0x164>)
 8001184:	2201      	movs	r2, #1
 8001186:	709a      	strb	r2, [r3, #2]
		I2C3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001188:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <DMA1_Stream4_IRQHandler+0x168>)
 800118a:	2201      	movs	r2, #1
 800118c:	709a      	strb	r2, [r3, #2]
		I2S2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800118e:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <DMA1_Stream4_IRQHandler+0x16c>)
 8001190:	2201      	movs	r2, #1
 8001192:	709a      	strb	r2, [r3, #2]
		SPI2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001194:	4b1e      	ldr	r3, [pc, #120]	@ (8001210 <DMA1_Stream4_IRQHandler+0x170>)
 8001196:	2201      	movs	r2, #1
 8001198:	709a      	strb	r2, [r3, #2]
		DMA1_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 800119a:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <DMA1_Stream4_IRQHandler+0x174>)
 800119c:	2201      	movs	r2, #1
 800119e:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80011a0:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <DMA1_Stream4_IRQHandler+0x158>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	4a14      	ldr	r2, [pc, #80]	@ (80011f8 <DMA1_Stream4_IRQHandler+0x158>)
 80011a6:	f043 0310 	orr.w	r3, r3, #16
 80011aa:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF4)
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <DMA1_Stream4_IRQHandler+0x158>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0320 	and.w	r3, r3, #32
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d01a      	beq.n	80011ee <DMA1_Stream4_IRQHandler+0x14e>
	{
		TIM5_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80011b8:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <DMA1_Stream4_IRQHandler+0x15c>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	705a      	strb	r2, [r3, #1]
		TIM3_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <DMA1_Stream4_IRQHandler+0x160>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	705a      	strb	r2, [r3, #1]
		USART4_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <DMA1_Stream4_IRQHandler+0x164>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	705a      	strb	r2, [r3, #1]
		I2C3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <DMA1_Stream4_IRQHandler+0x168>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	705a      	strb	r2, [r3, #1]
		I2S2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <DMA1_Stream4_IRQHandler+0x16c>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	705a      	strb	r2, [r3, #1]
		SPI2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <DMA1_Stream4_IRQHandler+0x170>)
 80011d8:	2201      	movs	r2, #1
 80011da:	705a      	strb	r2, [r3, #1]
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <DMA1_Stream4_IRQHandler+0x174>)
 80011de:	2201      	movs	r2, #1
 80011e0:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80011e2:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <DMA1_Stream4_IRQHandler+0x158>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <DMA1_Stream4_IRQHandler+0x158>)
 80011e8:	f043 0320 	orr.w	r3, r3, #32
 80011ec:	60d3      	str	r3, [r2, #12]
	}
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	40026000 	.word	0x40026000
 80011fc:	200001c8 	.word	0x200001c8
 8001200:	20000190 	.word	0x20000190
 8001204:	200000c0 	.word	0x200000c0
 8001208:	20000050 	.word	0x20000050
 800120c:	20000028 	.word	0x20000028
 8001210:	20000078 	.word	0x20000078
 8001214:	20000238 	.word	0x20000238

08001218 <DMA1_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream5_IRQHandler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF5)
 800121c:	4b54      	ldr	r3, [pc, #336]	@ (8001370 <DMA1_Stream5_IRQHandler+0x158>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001224:	2b00      	cmp	r3, #0
 8001226:	d01a      	beq.n	800125e <DMA1_Stream5_IRQHandler+0x46>
	{
		SPI3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001228:	4b52      	ldr	r3, [pc, #328]	@ (8001374 <DMA1_Stream5_IRQHandler+0x15c>)
 800122a:	2201      	movs	r2, #1
 800122c:	715a      	strb	r2, [r3, #5]
		TIM3_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 800122e:	4b52      	ldr	r3, [pc, #328]	@ (8001378 <DMA1_Stream5_IRQHandler+0x160>)
 8001230:	2201      	movs	r2, #1
 8001232:	715a      	strb	r2, [r3, #5]
		TIM2_CH1_DMA_Flag.Fifo_Error_Flag =  true;
 8001234:	4b51      	ldr	r3, [pc, #324]	@ (800137c <DMA1_Stream5_IRQHandler+0x164>)
 8001236:	2201      	movs	r2, #1
 8001238:	715a      	strb	r2, [r3, #5]
		DAC2_DMA_Flag.Fifo_Error_Flag = true;
 800123a:	4b51      	ldr	r3, [pc, #324]	@ (8001380 <DMA1_Stream5_IRQHandler+0x168>)
 800123c:	2201      	movs	r2, #1
 800123e:	715a      	strb	r2, [r3, #5]
		TIM3_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001240:	4b50      	ldr	r3, [pc, #320]	@ (8001384 <DMA1_Stream5_IRQHandler+0x16c>)
 8001242:	2201      	movs	r2, #1
 8001244:	715a      	strb	r2, [r3, #5]
		USART2_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001246:	4b50      	ldr	r3, [pc, #320]	@ (8001388 <DMA1_Stream5_IRQHandler+0x170>)
 8001248:	2201      	movs	r2, #1
 800124a:	715a      	strb	r2, [r3, #5]
		DMA1_Stream5_Flag.Fifo_Error_Flag = true;
 800124c:	4b4f      	ldr	r3, [pc, #316]	@ (800138c <DMA1_Stream5_IRQHandler+0x174>)
 800124e:	2201      	movs	r2, #1
 8001250:	715a      	strb	r2, [r3, #5]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001252:	4b47      	ldr	r3, [pc, #284]	@ (8001370 <DMA1_Stream5_IRQHandler+0x158>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	4a46      	ldr	r2, [pc, #280]	@ (8001370 <DMA1_Stream5_IRQHandler+0x158>)
 8001258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800125c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF5)
 800125e:	4b44      	ldr	r3, [pc, #272]	@ (8001370 <DMA1_Stream5_IRQHandler+0x158>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001266:	2b00      	cmp	r3, #0
 8001268:	d01a      	beq.n	80012a0 <DMA1_Stream5_IRQHandler+0x88>
	{
		SPI3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800126a:	4b42      	ldr	r3, [pc, #264]	@ (8001374 <DMA1_Stream5_IRQHandler+0x15c>)
 800126c:	2201      	movs	r2, #1
 800126e:	711a      	strb	r2, [r3, #4]
		TIM3_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001270:	4b41      	ldr	r3, [pc, #260]	@ (8001378 <DMA1_Stream5_IRQHandler+0x160>)
 8001272:	2201      	movs	r2, #1
 8001274:	711a      	strb	r2, [r3, #4]
		TIM2_CH1_DMA_Flag.Direct_Mode_Error_Flag =  true;
 8001276:	4b41      	ldr	r3, [pc, #260]	@ (800137c <DMA1_Stream5_IRQHandler+0x164>)
 8001278:	2201      	movs	r2, #1
 800127a:	711a      	strb	r2, [r3, #4]
		DAC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800127c:	4b40      	ldr	r3, [pc, #256]	@ (8001380 <DMA1_Stream5_IRQHandler+0x168>)
 800127e:	2201      	movs	r2, #1
 8001280:	711a      	strb	r2, [r3, #4]
		TIM3_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001282:	4b40      	ldr	r3, [pc, #256]	@ (8001384 <DMA1_Stream5_IRQHandler+0x16c>)
 8001284:	2201      	movs	r2, #1
 8001286:	711a      	strb	r2, [r3, #4]
		USART2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001288:	4b3f      	ldr	r3, [pc, #252]	@ (8001388 <DMA1_Stream5_IRQHandler+0x170>)
 800128a:	2201      	movs	r2, #1
 800128c:	711a      	strb	r2, [r3, #4]
		DMA1_Stream5_Flag.Direct_Mode_Error_Flag = true;
 800128e:	4b3f      	ldr	r3, [pc, #252]	@ (800138c <DMA1_Stream5_IRQHandler+0x174>)
 8001290:	2201      	movs	r2, #1
 8001292:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001294:	4b36      	ldr	r3, [pc, #216]	@ (8001370 <DMA1_Stream5_IRQHandler+0x158>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	4a35      	ldr	r2, [pc, #212]	@ (8001370 <DMA1_Stream5_IRQHandler+0x158>)
 800129a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800129e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF5)
 80012a0:	4b33      	ldr	r3, [pc, #204]	@ (8001370 <DMA1_Stream5_IRQHandler+0x158>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d01a      	beq.n	80012e2 <DMA1_Stream5_IRQHandler+0xca>
	{
		SPI3_TX_DMA_Flag.Transfer_Error_Flag = true;
 80012ac:	4b31      	ldr	r3, [pc, #196]	@ (8001374 <DMA1_Stream5_IRQHandler+0x15c>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	70da      	strb	r2, [r3, #3]
		TIM3_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 80012b2:	4b31      	ldr	r3, [pc, #196]	@ (8001378 <DMA1_Stream5_IRQHandler+0x160>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	70da      	strb	r2, [r3, #3]
		TIM2_CH1_DMA_Flag.Transfer_Error_Flag =  true;
 80012b8:	4b30      	ldr	r3, [pc, #192]	@ (800137c <DMA1_Stream5_IRQHandler+0x164>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	70da      	strb	r2, [r3, #3]
		DAC2_DMA_Flag.Transfer_Error_Flag = true;
 80012be:	4b30      	ldr	r3, [pc, #192]	@ (8001380 <DMA1_Stream5_IRQHandler+0x168>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	70da      	strb	r2, [r3, #3]
		TIM3_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80012c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001384 <DMA1_Stream5_IRQHandler+0x16c>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	70da      	strb	r2, [r3, #3]
		USART2_RX_DMA_Flag.Transfer_Error_Flag = true;
 80012ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001388 <DMA1_Stream5_IRQHandler+0x170>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	70da      	strb	r2, [r3, #3]
		DMA1_Stream5_Flag.Transfer_Error_Flag = true;
 80012d0:	4b2e      	ldr	r3, [pc, #184]	@ (800138c <DMA1_Stream5_IRQHandler+0x174>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80012d6:	4b26      	ldr	r3, [pc, #152]	@ (8001370 <DMA1_Stream5_IRQHandler+0x158>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	4a25      	ldr	r2, [pc, #148]	@ (8001370 <DMA1_Stream5_IRQHandler+0x158>)
 80012dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012e0:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF5)
 80012e2:	4b23      	ldr	r3, [pc, #140]	@ (8001370 <DMA1_Stream5_IRQHandler+0x158>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d01a      	beq.n	8001324 <DMA1_Stream5_IRQHandler+0x10c>
	{
		SPI3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80012ee:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <DMA1_Stream5_IRQHandler+0x15c>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	709a      	strb	r2, [r3, #2]
		TIM3_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80012f4:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <DMA1_Stream5_IRQHandler+0x160>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	709a      	strb	r2, [r3, #2]
		TIM2_CH1_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 80012fa:	4b20      	ldr	r3, [pc, #128]	@ (800137c <DMA1_Stream5_IRQHandler+0x164>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	709a      	strb	r2, [r3, #2]
		DAC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001300:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <DMA1_Stream5_IRQHandler+0x168>)
 8001302:	2201      	movs	r2, #1
 8001304:	709a      	strb	r2, [r3, #2]
		TIM3_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001306:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <DMA1_Stream5_IRQHandler+0x16c>)
 8001308:	2201      	movs	r2, #1
 800130a:	709a      	strb	r2, [r3, #2]
		USART2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800130c:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <DMA1_Stream5_IRQHandler+0x170>)
 800130e:	2201      	movs	r2, #1
 8001310:	709a      	strb	r2, [r3, #2]
		DMA1_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 8001312:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <DMA1_Stream5_IRQHandler+0x174>)
 8001314:	2201      	movs	r2, #1
 8001316:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001318:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <DMA1_Stream5_IRQHandler+0x158>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4a14      	ldr	r2, [pc, #80]	@ (8001370 <DMA1_Stream5_IRQHandler+0x158>)
 800131e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001322:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF5)
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <DMA1_Stream5_IRQHandler+0x158>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800132c:	2b00      	cmp	r3, #0
 800132e:	d01a      	beq.n	8001366 <DMA1_Stream5_IRQHandler+0x14e>
	{
		SPI3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001330:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <DMA1_Stream5_IRQHandler+0x15c>)
 8001332:	2201      	movs	r2, #1
 8001334:	705a      	strb	r2, [r3, #1]
		TIM3_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8001336:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <DMA1_Stream5_IRQHandler+0x160>)
 8001338:	2201      	movs	r2, #1
 800133a:	705a      	strb	r2, [r3, #1]
		TIM2_CH1_DMA_Flag.Transfer_Complete_Flag =  true;
 800133c:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <DMA1_Stream5_IRQHandler+0x164>)
 800133e:	2201      	movs	r2, #1
 8001340:	705a      	strb	r2, [r3, #1]
		DAC2_DMA_Flag.Transfer_Complete_Flag = true;
 8001342:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <DMA1_Stream5_IRQHandler+0x168>)
 8001344:	2201      	movs	r2, #1
 8001346:	705a      	strb	r2, [r3, #1]
		TIM3_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001348:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <DMA1_Stream5_IRQHandler+0x16c>)
 800134a:	2201      	movs	r2, #1
 800134c:	705a      	strb	r2, [r3, #1]
		USART2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <DMA1_Stream5_IRQHandler+0x170>)
 8001350:	2201      	movs	r2, #1
 8001352:	705a      	strb	r2, [r3, #1]
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
 8001354:	4b0d      	ldr	r3, [pc, #52]	@ (800138c <DMA1_Stream5_IRQHandler+0x174>)
 8001356:	2201      	movs	r2, #1
 8001358:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 800135a:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <DMA1_Stream5_IRQHandler+0x158>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	4a04      	ldr	r2, [pc, #16]	@ (8001370 <DMA1_Stream5_IRQHandler+0x158>)
 8001360:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001364:	60d3      	str	r3, [r2, #12]
	}
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	40026000 	.word	0x40026000
 8001374:	20000080 	.word	0x20000080
 8001378:	200001a8 	.word	0x200001a8
 800137c:	20000170 	.word	0x20000170
 8001380:	200001e8 	.word	0x200001e8
 8001384:	20000198 	.word	0x20000198
 8001388:	20000098 	.word	0x20000098
 800138c:	20000240 	.word	0x20000240

08001390 <DMA1_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream6_IRQHandler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF6)
 8001394:	4b47      	ldr	r3, [pc, #284]	@ (80014b4 <DMA1_Stream6_IRQHandler+0x124>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d017      	beq.n	80013d0 <DMA1_Stream6_IRQHandler+0x40>
	{
		TIM3_CH3_DMA_Flag.Fifo_Error_Flag = true;
 80013a0:	4b45      	ldr	r3, [pc, #276]	@ (80014b8 <DMA1_Stream6_IRQHandler+0x128>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	715a      	strb	r2, [r3, #5]
		TIM2_UP_DMA_Flag.Fifo_Error_Flag = true;
 80013a6:	4b45      	ldr	r3, [pc, #276]	@ (80014bc <DMA1_Stream6_IRQHandler+0x12c>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	715a      	strb	r2, [r3, #5]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 80013ac:	4b44      	ldr	r3, [pc, #272]	@ (80014c0 <DMA1_Stream6_IRQHandler+0x130>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	715a      	strb	r2, [r3, #5]
		USART2_TX_DMA_Flag.Fifo_Error_Flag =  true;
 80013b2:	4b44      	ldr	r3, [pc, #272]	@ (80014c4 <DMA1_Stream6_IRQHandler+0x134>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	715a      	strb	r2, [r3, #5]
		I2C1_TX_DMA_Flag.Fifo_Error_Flag = true;
 80013b8:	4b43      	ldr	r3, [pc, #268]	@ (80014c8 <DMA1_Stream6_IRQHandler+0x138>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	715a      	strb	r2, [r3, #5]
		DMA1_Stream6_Flag.Fifo_Error_Flag = true;
 80013be:	4b43      	ldr	r3, [pc, #268]	@ (80014cc <DMA1_Stream6_IRQHandler+0x13c>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	715a      	strb	r2, [r3, #5]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 80013c4:	4b3b      	ldr	r3, [pc, #236]	@ (80014b4 <DMA1_Stream6_IRQHandler+0x124>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	4a3a      	ldr	r2, [pc, #232]	@ (80014b4 <DMA1_Stream6_IRQHandler+0x124>)
 80013ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ce:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF6)
 80013d0:	4b38      	ldr	r3, [pc, #224]	@ (80014b4 <DMA1_Stream6_IRQHandler+0x124>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d014      	beq.n	8001406 <DMA1_Stream6_IRQHandler+0x76>
	{
		TIM2_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013dc:	4b37      	ldr	r3, [pc, #220]	@ (80014bc <DMA1_Stream6_IRQHandler+0x12c>)
 80013de:	2201      	movs	r2, #1
 80013e0:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013e2:	4b37      	ldr	r3, [pc, #220]	@ (80014c0 <DMA1_Stream6_IRQHandler+0x130>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	711a      	strb	r2, [r3, #4]
		USART2_TX_DMA_Flag.Direct_Mode_Error_Flag =  true;
 80013e8:	4b36      	ldr	r3, [pc, #216]	@ (80014c4 <DMA1_Stream6_IRQHandler+0x134>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	711a      	strb	r2, [r3, #4]
		I2C1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013ee:	4b36      	ldr	r3, [pc, #216]	@ (80014c8 <DMA1_Stream6_IRQHandler+0x138>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	711a      	strb	r2, [r3, #4]
		DMA1_Stream6_Flag.Direct_Mode_Error_Flag = true;
 80013f4:	4b35      	ldr	r3, [pc, #212]	@ (80014cc <DMA1_Stream6_IRQHandler+0x13c>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80013fa:	4b2e      	ldr	r3, [pc, #184]	@ (80014b4 <DMA1_Stream6_IRQHandler+0x124>)
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	4a2d      	ldr	r2, [pc, #180]	@ (80014b4 <DMA1_Stream6_IRQHandler+0x124>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001404:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF6)
 8001406:	4b2b      	ldr	r3, [pc, #172]	@ (80014b4 <DMA1_Stream6_IRQHandler+0x124>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d014      	beq.n	800143c <DMA1_Stream6_IRQHandler+0xac>
	{
		TIM2_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001412:	4b2a      	ldr	r3, [pc, #168]	@ (80014bc <DMA1_Stream6_IRQHandler+0x12c>)
 8001414:	2201      	movs	r2, #1
 8001416:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001418:	4b29      	ldr	r3, [pc, #164]	@ (80014c0 <DMA1_Stream6_IRQHandler+0x130>)
 800141a:	2201      	movs	r2, #1
 800141c:	70da      	strb	r2, [r3, #3]
		USART2_TX_DMA_Flag.Transfer_Error_Flag =  true;
 800141e:	4b29      	ldr	r3, [pc, #164]	@ (80014c4 <DMA1_Stream6_IRQHandler+0x134>)
 8001420:	2201      	movs	r2, #1
 8001422:	70da      	strb	r2, [r3, #3]
		I2C1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001424:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <DMA1_Stream6_IRQHandler+0x138>)
 8001426:	2201      	movs	r2, #1
 8001428:	70da      	strb	r2, [r3, #3]
		DMA1_Stream6_Flag.Transfer_Error_Flag = true;
 800142a:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <DMA1_Stream6_IRQHandler+0x13c>)
 800142c:	2201      	movs	r2, #1
 800142e:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001430:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <DMA1_Stream6_IRQHandler+0x124>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4a1f      	ldr	r2, [pc, #124]	@ (80014b4 <DMA1_Stream6_IRQHandler+0x124>)
 8001436:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800143a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF6)
 800143c:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <DMA1_Stream6_IRQHandler+0x124>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d014      	beq.n	8001472 <DMA1_Stream6_IRQHandler+0xe2>
	{
		TIM2_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001448:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <DMA1_Stream6_IRQHandler+0x12c>)
 800144a:	2201      	movs	r2, #1
 800144c:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800144e:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <DMA1_Stream6_IRQHandler+0x130>)
 8001450:	2201      	movs	r2, #1
 8001452:	709a      	strb	r2, [r3, #2]
		USART2_TX_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <DMA1_Stream6_IRQHandler+0x134>)
 8001456:	2201      	movs	r2, #1
 8001458:	709a      	strb	r2, [r3, #2]
		I2C1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800145a:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <DMA1_Stream6_IRQHandler+0x138>)
 800145c:	2201      	movs	r2, #1
 800145e:	709a      	strb	r2, [r3, #2]
		DMA1_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8001460:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <DMA1_Stream6_IRQHandler+0x13c>)
 8001462:	2201      	movs	r2, #1
 8001464:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001466:	4b13      	ldr	r3, [pc, #76]	@ (80014b4 <DMA1_Stream6_IRQHandler+0x124>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	4a12      	ldr	r2, [pc, #72]	@ (80014b4 <DMA1_Stream6_IRQHandler+0x124>)
 800146c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001470:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF6)
 8001472:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <DMA1_Stream6_IRQHandler+0x124>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d014      	beq.n	80014a8 <DMA1_Stream6_IRQHandler+0x118>
	{
		TIM2_UP_DMA_Flag.Transfer_Complete_Flag = true;
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <DMA1_Stream6_IRQHandler+0x12c>)
 8001480:	2201      	movs	r2, #1
 8001482:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001484:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <DMA1_Stream6_IRQHandler+0x130>)
 8001486:	2201      	movs	r2, #1
 8001488:	705a      	strb	r2, [r3, #1]
		USART2_TX_DMA_Flag.Transfer_Complete_Flag =  true;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <DMA1_Stream6_IRQHandler+0x134>)
 800148c:	2201      	movs	r2, #1
 800148e:	705a      	strb	r2, [r3, #1]
		I2C1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001490:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <DMA1_Stream6_IRQHandler+0x138>)
 8001492:	2201      	movs	r2, #1
 8001494:	705a      	strb	r2, [r3, #1]
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <DMA1_Stream6_IRQHandler+0x13c>)
 8001498:	2201      	movs	r2, #1
 800149a:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <DMA1_Stream6_IRQHandler+0x124>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	4a04      	ldr	r2, [pc, #16]	@ (80014b4 <DMA1_Stream6_IRQHandler+0x124>)
 80014a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014a6:	60d3      	str	r3, [r2, #12]
	}
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40026000 	.word	0x40026000
 80014b8:	200001a0 	.word	0x200001a0
 80014bc:	20000168 	.word	0x20000168
 80014c0:	200000f0 	.word	0x200000f0
 80014c4:	200000a0 	.word	0x200000a0
 80014c8:	20000040 	.word	0x20000040
 80014cc:	20000248 	.word	0x20000248

080014d0 <DMA1_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream7_IRQHandler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF7)
 80014d4:	4b54      	ldr	r3, [pc, #336]	@ (8001628 <DMA1_Stream7_IRQHandler+0x158>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d01a      	beq.n	8001516 <DMA1_Stream7_IRQHandler+0x46>
	{
		I2S3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80014e0:	4b52      	ldr	r3, [pc, #328]	@ (800162c <DMA1_Stream7_IRQHandler+0x15c>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	715a      	strb	r2, [r3, #5]
		I2C2_TX_DMA_Flag.Fifo_Error_Flag = true;
 80014e6:	4b52      	ldr	r3, [pc, #328]	@ (8001630 <DMA1_Stream7_IRQHandler+0x160>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	715a      	strb	r2, [r3, #5]
		USART5_TX_DMA_Flag.Fifo_Error_Flag = true;
 80014ec:	4b51      	ldr	r3, [pc, #324]	@ (8001634 <DMA1_Stream7_IRQHandler+0x164>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	715a      	strb	r2, [r3, #5]
		TIM4_CH3_DMA_Flag.Fifo_Error_Flag = true;
 80014f2:	4b51      	ldr	r3, [pc, #324]	@ (8001638 <DMA1_Stream7_IRQHandler+0x168>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	715a      	strb	r2, [r3, #5]
		TIM2_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80014f8:	4b50      	ldr	r3, [pc, #320]	@ (800163c <DMA1_Stream7_IRQHandler+0x16c>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	715a      	strb	r2, [r3, #5]
		TIM2_CH4_DMA_Flag.Fifo_Error_Flag = true;
 80014fe:	4b50      	ldr	r3, [pc, #320]	@ (8001640 <DMA1_Stream7_IRQHandler+0x170>)
 8001500:	2201      	movs	r2, #1
 8001502:	715a      	strb	r2, [r3, #5]

		DMA1_Stream7_Flag.Fifo_Error_Flag = true;
 8001504:	4b4f      	ldr	r3, [pc, #316]	@ (8001644 <DMA1_Stream7_IRQHandler+0x174>)
 8001506:	2201      	movs	r2, #1
 8001508:	715a      	strb	r2, [r3, #5]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 800150a:	4b47      	ldr	r3, [pc, #284]	@ (8001628 <DMA1_Stream7_IRQHandler+0x158>)
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	4a46      	ldr	r2, [pc, #280]	@ (8001628 <DMA1_Stream7_IRQHandler+0x158>)
 8001510:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001514:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF7)
 8001516:	4b44      	ldr	r3, [pc, #272]	@ (8001628 <DMA1_Stream7_IRQHandler+0x158>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d01a      	beq.n	8001558 <DMA1_Stream7_IRQHandler+0x88>
	{
		I2S3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001522:	4b42      	ldr	r3, [pc, #264]	@ (800162c <DMA1_Stream7_IRQHandler+0x15c>)
 8001524:	2201      	movs	r2, #1
 8001526:	711a      	strb	r2, [r3, #4]
		I2C2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001528:	4b41      	ldr	r3, [pc, #260]	@ (8001630 <DMA1_Stream7_IRQHandler+0x160>)
 800152a:	2201      	movs	r2, #1
 800152c:	711a      	strb	r2, [r3, #4]
		USART5_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800152e:	4b41      	ldr	r3, [pc, #260]	@ (8001634 <DMA1_Stream7_IRQHandler+0x164>)
 8001530:	2201      	movs	r2, #1
 8001532:	711a      	strb	r2, [r3, #4]
		TIM4_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001534:	4b40      	ldr	r3, [pc, #256]	@ (8001638 <DMA1_Stream7_IRQHandler+0x168>)
 8001536:	2201      	movs	r2, #1
 8001538:	711a      	strb	r2, [r3, #4]
		TIM2_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800153a:	4b40      	ldr	r3, [pc, #256]	@ (800163c <DMA1_Stream7_IRQHandler+0x16c>)
 800153c:	2201      	movs	r2, #1
 800153e:	711a      	strb	r2, [r3, #4]
		TIM2_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001540:	4b3f      	ldr	r3, [pc, #252]	@ (8001640 <DMA1_Stream7_IRQHandler+0x170>)
 8001542:	2201      	movs	r2, #1
 8001544:	711a      	strb	r2, [r3, #4]
		DMA1_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8001546:	4b3f      	ldr	r3, [pc, #252]	@ (8001644 <DMA1_Stream7_IRQHandler+0x174>)
 8001548:	2201      	movs	r2, #1
 800154a:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 800154c:	4b36      	ldr	r3, [pc, #216]	@ (8001628 <DMA1_Stream7_IRQHandler+0x158>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4a35      	ldr	r2, [pc, #212]	@ (8001628 <DMA1_Stream7_IRQHandler+0x158>)
 8001552:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001556:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF7)
 8001558:	4b33      	ldr	r3, [pc, #204]	@ (8001628 <DMA1_Stream7_IRQHandler+0x158>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d01a      	beq.n	800159a <DMA1_Stream7_IRQHandler+0xca>
	{
		I2S3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001564:	4b31      	ldr	r3, [pc, #196]	@ (800162c <DMA1_Stream7_IRQHandler+0x15c>)
 8001566:	2201      	movs	r2, #1
 8001568:	70da      	strb	r2, [r3, #3]
		I2C2_TX_DMA_Flag.Transfer_Error_Flag = true;
 800156a:	4b31      	ldr	r3, [pc, #196]	@ (8001630 <DMA1_Stream7_IRQHandler+0x160>)
 800156c:	2201      	movs	r2, #1
 800156e:	70da      	strb	r2, [r3, #3]
		USART5_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001570:	4b30      	ldr	r3, [pc, #192]	@ (8001634 <DMA1_Stream7_IRQHandler+0x164>)
 8001572:	2201      	movs	r2, #1
 8001574:	70da      	strb	r2, [r3, #3]
		TIM4_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8001576:	4b30      	ldr	r3, [pc, #192]	@ (8001638 <DMA1_Stream7_IRQHandler+0x168>)
 8001578:	2201      	movs	r2, #1
 800157a:	70da      	strb	r2, [r3, #3]
		TIM2_CH2_DMA_Flag.Transfer_Error_Flag = true;
 800157c:	4b2f      	ldr	r3, [pc, #188]	@ (800163c <DMA1_Stream7_IRQHandler+0x16c>)
 800157e:	2201      	movs	r2, #1
 8001580:	70da      	strb	r2, [r3, #3]
		TIM2_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8001582:	4b2f      	ldr	r3, [pc, #188]	@ (8001640 <DMA1_Stream7_IRQHandler+0x170>)
 8001584:	2201      	movs	r2, #1
 8001586:	70da      	strb	r2, [r3, #3]
		DMA1_Stream7_Flag.Transfer_Error_Flag = true;
 8001588:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <DMA1_Stream7_IRQHandler+0x174>)
 800158a:	2201      	movs	r2, #1
 800158c:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 800158e:	4b26      	ldr	r3, [pc, #152]	@ (8001628 <DMA1_Stream7_IRQHandler+0x158>)
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	4a25      	ldr	r2, [pc, #148]	@ (8001628 <DMA1_Stream7_IRQHandler+0x158>)
 8001594:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001598:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF7)
 800159a:	4b23      	ldr	r3, [pc, #140]	@ (8001628 <DMA1_Stream7_IRQHandler+0x158>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d01a      	beq.n	80015dc <DMA1_Stream7_IRQHandler+0x10c>
	{
		I2S3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <DMA1_Stream7_IRQHandler+0x15c>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	709a      	strb	r2, [r3, #2]
		I2C2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80015ac:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <DMA1_Stream7_IRQHandler+0x160>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	709a      	strb	r2, [r3, #2]
		USART5_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <DMA1_Stream7_IRQHandler+0x164>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	709a      	strb	r2, [r3, #2]
		TIM4_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <DMA1_Stream7_IRQHandler+0x168>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	709a      	strb	r2, [r3, #2]
		TIM2_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80015be:	4b1f      	ldr	r3, [pc, #124]	@ (800163c <DMA1_Stream7_IRQHandler+0x16c>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	709a      	strb	r2, [r3, #2]
		TIM2_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80015c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001640 <DMA1_Stream7_IRQHandler+0x170>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	709a      	strb	r2, [r3, #2]
		DMA1_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <DMA1_Stream7_IRQHandler+0x174>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 80015d0:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <DMA1_Stream7_IRQHandler+0x158>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4a14      	ldr	r2, [pc, #80]	@ (8001628 <DMA1_Stream7_IRQHandler+0x158>)
 80015d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015da:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF7)
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <DMA1_Stream7_IRQHandler+0x158>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d01a      	beq.n	800161e <DMA1_Stream7_IRQHandler+0x14e>
	{
		I2S3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80015e8:	4b10      	ldr	r3, [pc, #64]	@ (800162c <DMA1_Stream7_IRQHandler+0x15c>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	705a      	strb	r2, [r3, #1]
		I2C2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <DMA1_Stream7_IRQHandler+0x160>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	705a      	strb	r2, [r3, #1]
		USART5_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <DMA1_Stream7_IRQHandler+0x164>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	705a      	strb	r2, [r3, #1]
		TIM4_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 80015fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <DMA1_Stream7_IRQHandler+0x168>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	705a      	strb	r2, [r3, #1]
		TIM2_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001600:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <DMA1_Stream7_IRQHandler+0x16c>)
 8001602:	2201      	movs	r2, #1
 8001604:	705a      	strb	r2, [r3, #1]
		TIM2_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8001606:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <DMA1_Stream7_IRQHandler+0x170>)
 8001608:	2201      	movs	r2, #1
 800160a:	705a      	strb	r2, [r3, #1]
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
 800160c:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <DMA1_Stream7_IRQHandler+0x174>)
 800160e:	2201      	movs	r2, #1
 8001610:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001612:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <DMA1_Stream7_IRQHandler+0x158>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <DMA1_Stream7_IRQHandler+0x158>)
 8001618:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800161c:	60d3      	str	r3, [r2, #12]
	}
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	40026000 	.word	0x40026000
 800162c:	20000030 	.word	0x20000030
 8001630:	20000048 	.word	0x20000048
 8001634:	200000d0 	.word	0x200000d0
 8001638:	200001c0 	.word	0x200001c0
 800163c:	20000178 	.word	0x20000178
 8001640:	20000188 	.word	0x20000188
 8001644:	20000250 	.word	0x20000250

08001648 <DMA2_Stream0_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream0_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream0_IRQHandler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF0)
 800164c:	4b45      	ldr	r3, [pc, #276]	@ (8001764 <DMA2_Stream0_IRQHandler+0x11c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d014      	beq.n	8001682 <DMA2_Stream0_IRQHandler+0x3a>
	{
		SPI1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001658:	4b43      	ldr	r3, [pc, #268]	@ (8001768 <DMA2_Stream0_IRQHandler+0x120>)
 800165a:	2201      	movs	r2, #1
 800165c:	715a      	strb	r2, [r3, #5]
		ADC1_DMA_Flag.Fifo_Error_Flag = true;
 800165e:	4b43      	ldr	r3, [pc, #268]	@ (800176c <DMA2_Stream0_IRQHandler+0x124>)
 8001660:	2201      	movs	r2, #1
 8001662:	715a      	strb	r2, [r3, #5]
		TIM1_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8001664:	4b42      	ldr	r3, [pc, #264]	@ (8001770 <DMA2_Stream0_IRQHandler+0x128>)
 8001666:	2201      	movs	r2, #1
 8001668:	715a      	strb	r2, [r3, #5]
		TIM1_COM_DMA_Flag.Fifo_Error_Flag = true;
 800166a:	4b42      	ldr	r3, [pc, #264]	@ (8001774 <DMA2_Stream0_IRQHandler+0x12c>)
 800166c:	2201      	movs	r2, #1
 800166e:	715a      	strb	r2, [r3, #5]
		DMA2_Stream0_Flag.Fifo_Error_Flag = true;
 8001670:	4b41      	ldr	r3, [pc, #260]	@ (8001778 <DMA2_Stream0_IRQHandler+0x130>)
 8001672:	2201      	movs	r2, #1
 8001674:	715a      	strb	r2, [r3, #5]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8001676:	4b3b      	ldr	r3, [pc, #236]	@ (8001764 <DMA2_Stream0_IRQHandler+0x11c>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	4a3a      	ldr	r2, [pc, #232]	@ (8001764 <DMA2_Stream0_IRQHandler+0x11c>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF0)
 8001682:	4b38      	ldr	r3, [pc, #224]	@ (8001764 <DMA2_Stream0_IRQHandler+0x11c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	2b00      	cmp	r3, #0
 800168c:	d014      	beq.n	80016b8 <DMA2_Stream0_IRQHandler+0x70>
	{
		SPI1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800168e:	4b36      	ldr	r3, [pc, #216]	@ (8001768 <DMA2_Stream0_IRQHandler+0x120>)
 8001690:	2201      	movs	r2, #1
 8001692:	711a      	strb	r2, [r3, #4]
		ADC1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001694:	4b35      	ldr	r3, [pc, #212]	@ (800176c <DMA2_Stream0_IRQHandler+0x124>)
 8001696:	2201      	movs	r2, #1
 8001698:	711a      	strb	r2, [r3, #4]
		TIM1_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 800169a:	4b35      	ldr	r3, [pc, #212]	@ (8001770 <DMA2_Stream0_IRQHandler+0x128>)
 800169c:	2201      	movs	r2, #1
 800169e:	711a      	strb	r2, [r3, #4]
		TIM1_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 80016a0:	4b34      	ldr	r3, [pc, #208]	@ (8001774 <DMA2_Stream0_IRQHandler+0x12c>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	711a      	strb	r2, [r3, #4]
		DMA2_Stream0_Flag.Direct_Mode_Error_Flag = true;
 80016a6:	4b34      	ldr	r3, [pc, #208]	@ (8001778 <DMA2_Stream0_IRQHandler+0x130>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 80016ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001764 <DMA2_Stream0_IRQHandler+0x11c>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a2c      	ldr	r2, [pc, #176]	@ (8001764 <DMA2_Stream0_IRQHandler+0x11c>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF0)
 80016b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001764 <DMA2_Stream0_IRQHandler+0x11c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d014      	beq.n	80016ee <DMA2_Stream0_IRQHandler+0xa6>
	{
		SPI1_RX_DMA_Flag.Transfer_Error_Flag = true;
 80016c4:	4b28      	ldr	r3, [pc, #160]	@ (8001768 <DMA2_Stream0_IRQHandler+0x120>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	70da      	strb	r2, [r3, #3]
		ADC1_DMA_Flag.Transfer_Error_Flag = true;
 80016ca:	4b28      	ldr	r3, [pc, #160]	@ (800176c <DMA2_Stream0_IRQHandler+0x124>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	70da      	strb	r2, [r3, #3]
		TIM1_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 80016d0:	4b27      	ldr	r3, [pc, #156]	@ (8001770 <DMA2_Stream0_IRQHandler+0x128>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	70da      	strb	r2, [r3, #3]
		TIM1_COM_DMA_Flag.Transfer_Error_Flag = true;
 80016d6:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <DMA2_Stream0_IRQHandler+0x12c>)
 80016d8:	2201      	movs	r2, #1
 80016da:	70da      	strb	r2, [r3, #3]
		DMA2_Stream0_Flag.Transfer_Error_Flag = true;
 80016dc:	4b26      	ldr	r3, [pc, #152]	@ (8001778 <DMA2_Stream0_IRQHandler+0x130>)
 80016de:	2201      	movs	r2, #1
 80016e0:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 80016e2:	4b20      	ldr	r3, [pc, #128]	@ (8001764 <DMA2_Stream0_IRQHandler+0x11c>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001764 <DMA2_Stream0_IRQHandler+0x11c>)
 80016e8:	f043 0308 	orr.w	r3, r3, #8
 80016ec:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF0)
 80016ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <DMA2_Stream0_IRQHandler+0x11c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d014      	beq.n	8001724 <DMA2_Stream0_IRQHandler+0xdc>
	{
		SPI1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80016fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <DMA2_Stream0_IRQHandler+0x120>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	709a      	strb	r2, [r3, #2]
		ADC1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001700:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <DMA2_Stream0_IRQHandler+0x124>)
 8001702:	2201      	movs	r2, #1
 8001704:	709a      	strb	r2, [r3, #2]
		TIM1_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001706:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <DMA2_Stream0_IRQHandler+0x128>)
 8001708:	2201      	movs	r2, #1
 800170a:	709a      	strb	r2, [r3, #2]
		TIM1_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800170c:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <DMA2_Stream0_IRQHandler+0x12c>)
 800170e:	2201      	movs	r2, #1
 8001710:	709a      	strb	r2, [r3, #2]
		DMA2_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8001712:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <DMA2_Stream0_IRQHandler+0x130>)
 8001714:	2201      	movs	r2, #1
 8001716:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8001718:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <DMA2_Stream0_IRQHandler+0x11c>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4a11      	ldr	r2, [pc, #68]	@ (8001764 <DMA2_Stream0_IRQHandler+0x11c>)
 800171e:	f043 0310 	orr.w	r3, r3, #16
 8001722:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF0)
 8001724:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <DMA2_Stream0_IRQHandler+0x11c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0320 	and.w	r3, r3, #32
 800172c:	2b00      	cmp	r3, #0
 800172e:	d014      	beq.n	800175a <DMA2_Stream0_IRQHandler+0x112>
	{
		SPI1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001730:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <DMA2_Stream0_IRQHandler+0x120>)
 8001732:	2201      	movs	r2, #1
 8001734:	705a      	strb	r2, [r3, #1]
		ADC1_DMA_Flag.Transfer_Complete_Flag = true;
 8001736:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <DMA2_Stream0_IRQHandler+0x124>)
 8001738:	2201      	movs	r2, #1
 800173a:	705a      	strb	r2, [r3, #1]
		TIM1_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 800173c:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <DMA2_Stream0_IRQHandler+0x128>)
 800173e:	2201      	movs	r2, #1
 8001740:	705a      	strb	r2, [r3, #1]
		TIM1_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8001742:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <DMA2_Stream0_IRQHandler+0x12c>)
 8001744:	2201      	movs	r2, #1
 8001746:	705a      	strb	r2, [r3, #1]
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <DMA2_Stream0_IRQHandler+0x130>)
 800174a:	2201      	movs	r2, #1
 800174c:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 800174e:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <DMA2_Stream0_IRQHandler+0x11c>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <DMA2_Stream0_IRQHandler+0x11c>)
 8001754:	f043 0320 	orr.w	r3, r3, #32
 8001758:	6093      	str	r3, [r2, #8]
	}
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40026400 	.word	0x40026400
 8001768:	20000058 	.word	0x20000058
 800176c:	20000200 	.word	0x20000200
 8001770:	20000120 	.word	0x20000120
 8001774:	20000128 	.word	0x20000128
 8001778:	20000258 	.word	0x20000258

0800177c <DMA2_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream1_IRQHandler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF1)
 8001780:	4b5c      	ldr	r3, [pc, #368]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x178>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001788:	2b00      	cmp	r3, #0
 800178a:	d01d      	beq.n	80017c8 <DMA2_Stream1_IRQHandler+0x4c>
	{
		ADC3_DMA_Flag.Fifo_Error_Flag = true;
 800178c:	4b5a      	ldr	r3, [pc, #360]	@ (80018f8 <DMA2_Stream1_IRQHandler+0x17c>)
 800178e:	2201      	movs	r2, #1
 8001790:	715a      	strb	r2, [r3, #5]
		TIM1_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8001792:	4b5a      	ldr	r3, [pc, #360]	@ (80018fc <DMA2_Stream1_IRQHandler+0x180>)
 8001794:	2201      	movs	r2, #1
 8001796:	715a      	strb	r2, [r3, #5]
		TIM8_UP_DMA_Flag.Fifo_Error_Flag = true;
 8001798:	4b59      	ldr	r3, [pc, #356]	@ (8001900 <DMA2_Stream1_IRQHandler+0x184>)
 800179a:	2201      	movs	r2, #1
 800179c:	715a      	strb	r2, [r3, #5]
		TIM8_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 800179e:	4b59      	ldr	r3, [pc, #356]	@ (8001904 <DMA2_Stream1_IRQHandler+0x188>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	715a      	strb	r2, [r3, #5]
		TIM8_COM_DMA_Flag.Fifo_Error_Flag = true;
 80017a4:	4b58      	ldr	r3, [pc, #352]	@ (8001908 <DMA2_Stream1_IRQHandler+0x18c>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	715a      	strb	r2, [r3, #5]
		DCMI_DMA_Flag.Fifo_Error_Flag = true;
 80017aa:	4b58      	ldr	r3, [pc, #352]	@ (800190c <DMA2_Stream1_IRQHandler+0x190>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	715a      	strb	r2, [r3, #5]
		USART6_RX_DMA_Flag.Fifo_Error_Flag = true;
 80017b0:	4b57      	ldr	r3, [pc, #348]	@ (8001910 <DMA2_Stream1_IRQHandler+0x194>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	715a      	strb	r2, [r3, #5]
		DMA2_Stream1_Flag.Fifo_Error_Flag = true;
 80017b6:	4b57      	ldr	r3, [pc, #348]	@ (8001914 <DMA2_Stream1_IRQHandler+0x198>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	715a      	strb	r2, [r3, #5]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80017bc:	4b4d      	ldr	r3, [pc, #308]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x178>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a4c      	ldr	r2, [pc, #304]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x178>)
 80017c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017c6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF1)
 80017c8:	4b4a      	ldr	r3, [pc, #296]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x178>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d01d      	beq.n	8001810 <DMA2_Stream1_IRQHandler+0x94>
	{
		ADC3_DMA_Flag.Direct_Mode_Error_Flag = true;
 80017d4:	4b48      	ldr	r3, [pc, #288]	@ (80018f8 <DMA2_Stream1_IRQHandler+0x17c>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	711a      	strb	r2, [r3, #4]
		TIM1_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 80017da:	4b48      	ldr	r3, [pc, #288]	@ (80018fc <DMA2_Stream1_IRQHandler+0x180>)
 80017dc:	2201      	movs	r2, #1
 80017de:	711a      	strb	r2, [r3, #4]
		TIM8_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 80017e0:	4b47      	ldr	r3, [pc, #284]	@ (8001900 <DMA2_Stream1_IRQHandler+0x184>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	711a      	strb	r2, [r3, #4]
		TIM8_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 80017e6:	4b47      	ldr	r3, [pc, #284]	@ (8001904 <DMA2_Stream1_IRQHandler+0x188>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	711a      	strb	r2, [r3, #4]
		TIM8_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 80017ec:	4b46      	ldr	r3, [pc, #280]	@ (8001908 <DMA2_Stream1_IRQHandler+0x18c>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	711a      	strb	r2, [r3, #4]
		DCMI_DMA_Flag.Direct_Mode_Error_Flag = true;
 80017f2:	4b46      	ldr	r3, [pc, #280]	@ (800190c <DMA2_Stream1_IRQHandler+0x190>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	711a      	strb	r2, [r3, #4]
		USART6_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80017f8:	4b45      	ldr	r3, [pc, #276]	@ (8001910 <DMA2_Stream1_IRQHandler+0x194>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	711a      	strb	r2, [r3, #4]
		DMA2_Stream1_Flag.Direct_Mode_Error_Flag = true;
 80017fe:	4b45      	ldr	r3, [pc, #276]	@ (8001914 <DMA2_Stream1_IRQHandler+0x198>)
 8001800:	2201      	movs	r2, #1
 8001802:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001804:	4b3b      	ldr	r3, [pc, #236]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x178>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a3a      	ldr	r2, [pc, #232]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x178>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800180e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF1)
 8001810:	4b38      	ldr	r3, [pc, #224]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x178>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001818:	2b00      	cmp	r3, #0
 800181a:	d01d      	beq.n	8001858 <DMA2_Stream1_IRQHandler+0xdc>
	{
		ADC3_DMA_Flag.Transfer_Error_Flag = true;
 800181c:	4b36      	ldr	r3, [pc, #216]	@ (80018f8 <DMA2_Stream1_IRQHandler+0x17c>)
 800181e:	2201      	movs	r2, #1
 8001820:	70da      	strb	r2, [r3, #3]
		TIM1_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8001822:	4b36      	ldr	r3, [pc, #216]	@ (80018fc <DMA2_Stream1_IRQHandler+0x180>)
 8001824:	2201      	movs	r2, #1
 8001826:	70da      	strb	r2, [r3, #3]
		TIM8_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001828:	4b35      	ldr	r3, [pc, #212]	@ (8001900 <DMA2_Stream1_IRQHandler+0x184>)
 800182a:	2201      	movs	r2, #1
 800182c:	70da      	strb	r2, [r3, #3]
		TIM8_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 800182e:	4b35      	ldr	r3, [pc, #212]	@ (8001904 <DMA2_Stream1_IRQHandler+0x188>)
 8001830:	2201      	movs	r2, #1
 8001832:	70da      	strb	r2, [r3, #3]
		TIM8_COM_DMA_Flag.Transfer_Error_Flag = true;
 8001834:	4b34      	ldr	r3, [pc, #208]	@ (8001908 <DMA2_Stream1_IRQHandler+0x18c>)
 8001836:	2201      	movs	r2, #1
 8001838:	70da      	strb	r2, [r3, #3]
		DCMI_DMA_Flag.Transfer_Error_Flag = true;
 800183a:	4b34      	ldr	r3, [pc, #208]	@ (800190c <DMA2_Stream1_IRQHandler+0x190>)
 800183c:	2201      	movs	r2, #1
 800183e:	70da      	strb	r2, [r3, #3]
		USART6_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001840:	4b33      	ldr	r3, [pc, #204]	@ (8001910 <DMA2_Stream1_IRQHandler+0x194>)
 8001842:	2201      	movs	r2, #1
 8001844:	70da      	strb	r2, [r3, #3]
		DMA2_Stream1_Flag.Transfer_Error_Flag = true;
 8001846:	4b33      	ldr	r3, [pc, #204]	@ (8001914 <DMA2_Stream1_IRQHandler+0x198>)
 8001848:	2201      	movs	r2, #1
 800184a:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 800184c:	4b29      	ldr	r3, [pc, #164]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x178>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4a28      	ldr	r2, [pc, #160]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x178>)
 8001852:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001856:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF1)
 8001858:	4b26      	ldr	r3, [pc, #152]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x178>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001860:	2b00      	cmp	r3, #0
 8001862:	d01d      	beq.n	80018a0 <DMA2_Stream1_IRQHandler+0x124>
	{
		ADC3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001864:	4b24      	ldr	r3, [pc, #144]	@ (80018f8 <DMA2_Stream1_IRQHandler+0x17c>)
 8001866:	2201      	movs	r2, #1
 8001868:	709a      	strb	r2, [r3, #2]
		TIM1_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800186a:	4b24      	ldr	r3, [pc, #144]	@ (80018fc <DMA2_Stream1_IRQHandler+0x180>)
 800186c:	2201      	movs	r2, #1
 800186e:	709a      	strb	r2, [r3, #2]
		TIM8_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001870:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <DMA2_Stream1_IRQHandler+0x184>)
 8001872:	2201      	movs	r2, #1
 8001874:	709a      	strb	r2, [r3, #2]
		TIM8_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001876:	4b23      	ldr	r3, [pc, #140]	@ (8001904 <DMA2_Stream1_IRQHandler+0x188>)
 8001878:	2201      	movs	r2, #1
 800187a:	709a      	strb	r2, [r3, #2]
		TIM8_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800187c:	4b22      	ldr	r3, [pc, #136]	@ (8001908 <DMA2_Stream1_IRQHandler+0x18c>)
 800187e:	2201      	movs	r2, #1
 8001880:	709a      	strb	r2, [r3, #2]
		DCMI_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001882:	4b22      	ldr	r3, [pc, #136]	@ (800190c <DMA2_Stream1_IRQHandler+0x190>)
 8001884:	2201      	movs	r2, #1
 8001886:	709a      	strb	r2, [r3, #2]
		USART6_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001888:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <DMA2_Stream1_IRQHandler+0x194>)
 800188a:	2201      	movs	r2, #1
 800188c:	709a      	strb	r2, [r3, #2]
		DMA2_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 800188e:	4b21      	ldr	r3, [pc, #132]	@ (8001914 <DMA2_Stream1_IRQHandler+0x198>)
 8001890:	2201      	movs	r2, #1
 8001892:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001894:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x178>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a16      	ldr	r2, [pc, #88]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x178>)
 800189a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800189e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF1)
 80018a0:	4b14      	ldr	r3, [pc, #80]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x178>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01d      	beq.n	80018e8 <DMA2_Stream1_IRQHandler+0x16c>
	{
		ADC3_DMA_Flag.Transfer_Complete_Flag = true;
 80018ac:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <DMA2_Stream1_IRQHandler+0x17c>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	705a      	strb	r2, [r3, #1]
		TIM1_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 80018b2:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <DMA2_Stream1_IRQHandler+0x180>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	705a      	strb	r2, [r3, #1]
		TIM8_UP_DMA_Flag.Transfer_Complete_Flag = true;
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <DMA2_Stream1_IRQHandler+0x184>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	705a      	strb	r2, [r3, #1]
		TIM8_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <DMA2_Stream1_IRQHandler+0x188>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	705a      	strb	r2, [r3, #1]
		TIM8_COM_DMA_Flag.Transfer_Complete_Flag = true;
 80018c4:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <DMA2_Stream1_IRQHandler+0x18c>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	705a      	strb	r2, [r3, #1]
		DCMI_DMA_Flag.Transfer_Complete_Flag = true;
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <DMA2_Stream1_IRQHandler+0x190>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	705a      	strb	r2, [r3, #1]
		USART6_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <DMA2_Stream1_IRQHandler+0x194>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	705a      	strb	r2, [r3, #1]
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
 80018d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <DMA2_Stream1_IRQHandler+0x198>)
 80018d8:	2201      	movs	r2, #1
 80018da:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x178>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x178>)
 80018e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018e6:	6093      	str	r3, [r2, #8]
	}
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40026400 	.word	0x40026400
 80018f8:	20000210 	.word	0x20000210
 80018fc:	20000100 	.word	0x20000100
 8001900:	20000130 	.word	0x20000130
 8001904:	20000158 	.word	0x20000158
 8001908:	20000160 	.word	0x20000160
 800190c:	200001f8 	.word	0x200001f8
 8001910:	200000d8 	.word	0x200000d8
 8001914:	20000260 	.word	0x20000260

08001918 <DMA2_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream2_IRQHandler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF2)
 800191c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a18 <DMA2_Stream2_IRQHandler+0x100>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d011      	beq.n	800194c <DMA2_Stream2_IRQHandler+0x34>
	{
		TIM8_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8001928:	4b3c      	ldr	r3, [pc, #240]	@ (8001a1c <DMA2_Stream2_IRQHandler+0x104>)
 800192a:	2201      	movs	r2, #1
 800192c:	715a      	strb	r2, [r3, #5]
		USART1_RX_DMA_Flag.Fifo_Error_Flag = true;
 800192e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a20 <DMA2_Stream2_IRQHandler+0x108>)
 8001930:	2201      	movs	r2, #1
 8001932:	715a      	strb	r2, [r3, #5]
		ADC2_DMA_Flag.Fifo_Error_Flag = true;
 8001934:	4b3b      	ldr	r3, [pc, #236]	@ (8001a24 <DMA2_Stream2_IRQHandler+0x10c>)
 8001936:	2201      	movs	r2, #1
 8001938:	715a      	strb	r2, [r3, #5]
		DMA2_Stream2_Flag.Fifo_Error_Flag = true;
 800193a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a28 <DMA2_Stream2_IRQHandler+0x110>)
 800193c:	2201      	movs	r2, #1
 800193e:	715a      	strb	r2, [r3, #5]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001940:	4b35      	ldr	r3, [pc, #212]	@ (8001a18 <DMA2_Stream2_IRQHandler+0x100>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4a34      	ldr	r2, [pc, #208]	@ (8001a18 <DMA2_Stream2_IRQHandler+0x100>)
 8001946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800194a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF2)
 800194c:	4b32      	ldr	r3, [pc, #200]	@ (8001a18 <DMA2_Stream2_IRQHandler+0x100>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d011      	beq.n	800197c <DMA2_Stream2_IRQHandler+0x64>
	{
		TIM8_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001958:	4b30      	ldr	r3, [pc, #192]	@ (8001a1c <DMA2_Stream2_IRQHandler+0x104>)
 800195a:	2201      	movs	r2, #1
 800195c:	711a      	strb	r2, [r3, #4]
		USART1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800195e:	4b30      	ldr	r3, [pc, #192]	@ (8001a20 <DMA2_Stream2_IRQHandler+0x108>)
 8001960:	2201      	movs	r2, #1
 8001962:	711a      	strb	r2, [r3, #4]
		ADC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001964:	4b2f      	ldr	r3, [pc, #188]	@ (8001a24 <DMA2_Stream2_IRQHandler+0x10c>)
 8001966:	2201      	movs	r2, #1
 8001968:	711a      	strb	r2, [r3, #4]
		DMA2_Stream2_Flag.Direct_Mode_Error_Flag = true;
 800196a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a28 <DMA2_Stream2_IRQHandler+0x110>)
 800196c:	2201      	movs	r2, #1
 800196e:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001970:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <DMA2_Stream2_IRQHandler+0x100>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4a28      	ldr	r2, [pc, #160]	@ (8001a18 <DMA2_Stream2_IRQHandler+0x100>)
 8001976:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800197a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF2)
 800197c:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <DMA2_Stream2_IRQHandler+0x100>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d011      	beq.n	80019ac <DMA2_Stream2_IRQHandler+0x94>
	{
		TIM8_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8001988:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <DMA2_Stream2_IRQHandler+0x104>)
 800198a:	2201      	movs	r2, #1
 800198c:	70da      	strb	r2, [r3, #3]
		USART1_RX_DMA_Flag.Transfer_Error_Flag = true;
 800198e:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <DMA2_Stream2_IRQHandler+0x108>)
 8001990:	2201      	movs	r2, #1
 8001992:	70da      	strb	r2, [r3, #3]
		ADC2_DMA_Flag.Transfer_Error_Flag = true;
 8001994:	4b23      	ldr	r3, [pc, #140]	@ (8001a24 <DMA2_Stream2_IRQHandler+0x10c>)
 8001996:	2201      	movs	r2, #1
 8001998:	70da      	strb	r2, [r3, #3]
		DMA2_Stream2_Flag.Transfer_Error_Flag = true;
 800199a:	4b23      	ldr	r3, [pc, #140]	@ (8001a28 <DMA2_Stream2_IRQHandler+0x110>)
 800199c:	2201      	movs	r2, #1
 800199e:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 80019a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a18 <DMA2_Stream2_IRQHandler+0x100>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a18 <DMA2_Stream2_IRQHandler+0x100>)
 80019a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80019aa:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF2)
 80019ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <DMA2_Stream2_IRQHandler+0x100>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d011      	beq.n	80019dc <DMA2_Stream2_IRQHandler+0xc4>
	{
		TIM8_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80019b8:	4b18      	ldr	r3, [pc, #96]	@ (8001a1c <DMA2_Stream2_IRQHandler+0x104>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	709a      	strb	r2, [r3, #2]
		USART1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80019be:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <DMA2_Stream2_IRQHandler+0x108>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	709a      	strb	r2, [r3, #2]
		ADC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80019c4:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <DMA2_Stream2_IRQHandler+0x10c>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	709a      	strb	r2, [r3, #2]
		DMA2_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 80019ca:	4b17      	ldr	r3, [pc, #92]	@ (8001a28 <DMA2_Stream2_IRQHandler+0x110>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 80019d0:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <DMA2_Stream2_IRQHandler+0x100>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4a10      	ldr	r2, [pc, #64]	@ (8001a18 <DMA2_Stream2_IRQHandler+0x100>)
 80019d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019da:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF2)
 80019dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <DMA2_Stream2_IRQHandler+0x100>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d011      	beq.n	8001a0c <DMA2_Stream2_IRQHandler+0xf4>
	{
		TIM8_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <DMA2_Stream2_IRQHandler+0x104>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	705a      	strb	r2, [r3, #1]
		USART1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80019ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <DMA2_Stream2_IRQHandler+0x108>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	705a      	strb	r2, [r3, #1]
		ADC2_DMA_Flag.Transfer_Complete_Flag = true;
 80019f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <DMA2_Stream2_IRQHandler+0x10c>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	705a      	strb	r2, [r3, #1]
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <DMA2_Stream2_IRQHandler+0x110>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <DMA2_Stream2_IRQHandler+0x100>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <DMA2_Stream2_IRQHandler+0x100>)
 8001a06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a0a:	6093      	str	r3, [r2, #8]
	}
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40026400 	.word	0x40026400
 8001a1c:	20000138 	.word	0x20000138
 8001a20:	20000088 	.word	0x20000088
 8001a24:	20000208 	.word	0x20000208
 8001a28:	20000268 	.word	0x20000268

08001a2c <DMA2_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream3_IRQHandler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF3)
 8001a30:	4b36      	ldr	r3, [pc, #216]	@ (8001b0c <DMA2_Stream3_IRQHandler+0xe0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00e      	beq.n	8001a5a <DMA2_Stream3_IRQHandler+0x2e>
	{
		SDIO_RXTX_DMA_Flag.Fifo_Error_Flag = true;
 8001a3c:	4b34      	ldr	r3, [pc, #208]	@ (8001b10 <DMA2_Stream3_IRQHandler+0xe4>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	715a      	strb	r2, [r3, #5]
		SPI1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001a42:	4b34      	ldr	r3, [pc, #208]	@ (8001b14 <DMA2_Stream3_IRQHandler+0xe8>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	715a      	strb	r2, [r3, #5]
		DMA2_Stream3_Flag.Fifo_Error_Flag = true;
 8001a48:	4b33      	ldr	r3, [pc, #204]	@ (8001b18 <DMA2_Stream3_IRQHandler+0xec>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	715a      	strb	r2, [r3, #5]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b0c <DMA2_Stream3_IRQHandler+0xe0>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4a2e      	ldr	r2, [pc, #184]	@ (8001b0c <DMA2_Stream3_IRQHandler+0xe0>)
 8001a54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a58:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF3)
 8001a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8001b0c <DMA2_Stream3_IRQHandler+0xe0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00e      	beq.n	8001a84 <DMA2_Stream3_IRQHandler+0x58>
	{
		SDIO_RXTX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001a66:	4b2a      	ldr	r3, [pc, #168]	@ (8001b10 <DMA2_Stream3_IRQHandler+0xe4>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	711a      	strb	r2, [r3, #4]
		SPI1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001a6c:	4b29      	ldr	r3, [pc, #164]	@ (8001b14 <DMA2_Stream3_IRQHandler+0xe8>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	711a      	strb	r2, [r3, #4]
		DMA2_Stream3_Flag.Direct_Mode_Error_Flag = true;
 8001a72:	4b29      	ldr	r3, [pc, #164]	@ (8001b18 <DMA2_Stream3_IRQHandler+0xec>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001a78:	4b24      	ldr	r3, [pc, #144]	@ (8001b0c <DMA2_Stream3_IRQHandler+0xe0>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4a23      	ldr	r2, [pc, #140]	@ (8001b0c <DMA2_Stream3_IRQHandler+0xe0>)
 8001a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a82:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF3)
 8001a84:	4b21      	ldr	r3, [pc, #132]	@ (8001b0c <DMA2_Stream3_IRQHandler+0xe0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00e      	beq.n	8001aae <DMA2_Stream3_IRQHandler+0x82>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Error_Flag = true;
 8001a90:	4b1f      	ldr	r3, [pc, #124]	@ (8001b10 <DMA2_Stream3_IRQHandler+0xe4>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	70da      	strb	r2, [r3, #3]
		SPI1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001a96:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <DMA2_Stream3_IRQHandler+0xe8>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	70da      	strb	r2, [r3, #3]
		DMA2_Stream3_Flag.Transfer_Error_Flag = true;
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b18 <DMA2_Stream3_IRQHandler+0xec>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b0c <DMA2_Stream3_IRQHandler+0xe0>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	4a19      	ldr	r2, [pc, #100]	@ (8001b0c <DMA2_Stream3_IRQHandler+0xe0>)
 8001aa8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001aac:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF3)
 8001aae:	4b17      	ldr	r3, [pc, #92]	@ (8001b0c <DMA2_Stream3_IRQHandler+0xe0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00e      	beq.n	8001ad8 <DMA2_Stream3_IRQHandler+0xac>
	{
		SDIO_RXTX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <DMA2_Stream3_IRQHandler+0xe4>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	709a      	strb	r2, [r3, #2]
		SPI1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ac0:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <DMA2_Stream3_IRQHandler+0xe8>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	709a      	strb	r2, [r3, #2]
		DMA2_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8001ac6:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <DMA2_Stream3_IRQHandler+0xec>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001acc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <DMA2_Stream3_IRQHandler+0xe0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	@ (8001b0c <DMA2_Stream3_IRQHandler+0xe0>)
 8001ad2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ad6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF3)
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <DMA2_Stream3_IRQHandler+0xe0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00e      	beq.n	8001b02 <DMA2_Stream3_IRQHandler+0xd6>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Complete_Flag = true;
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <DMA2_Stream3_IRQHandler+0xe4>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	705a      	strb	r2, [r3, #1]
		SPI1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <DMA2_Stream3_IRQHandler+0xe8>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	705a      	strb	r2, [r3, #1]
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
 8001af0:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <DMA2_Stream3_IRQHandler+0xec>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001af6:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <DMA2_Stream3_IRQHandler+0xe0>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	4a04      	ldr	r2, [pc, #16]	@ (8001b0c <DMA2_Stream3_IRQHandler+0xe0>)
 8001afc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b00:	6093      	str	r3, [r2, #8]
	}
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	40026400 	.word	0x40026400
 8001b10:	200001f0 	.word	0x200001f0
 8001b14:	20000070 	.word	0x20000070
 8001b18:	20000270 	.word	0x20000270

08001b1c <DMA2_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream4_IRQHandler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF4)
 8001b20:	4b36      	ldr	r3, [pc, #216]	@ (8001bfc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00e      	beq.n	8001b4a <DMA2_Stream4_IRQHandler+0x2e>
	{
		TIM1_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8001b2c:	4b34      	ldr	r3, [pc, #208]	@ (8001c00 <DMA2_Stream4_IRQHandler+0xe4>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	715a      	strb	r2, [r3, #5]
		TIM8_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001b32:	4b34      	ldr	r3, [pc, #208]	@ (8001c04 <DMA2_Stream4_IRQHandler+0xe8>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	715a      	strb	r2, [r3, #5]
		DMA2_Stream4_Flag.Fifo_Error_Flag = true;
 8001b38:	4b33      	ldr	r3, [pc, #204]	@ (8001c08 <DMA2_Stream4_IRQHandler+0xec>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	715a      	strb	r2, [r3, #5]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF4;
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001bfc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	4a2e      	ldr	r2, [pc, #184]	@ (8001bfc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF4)
 8001b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bfc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00e      	beq.n	8001b74 <DMA2_Stream4_IRQHandler+0x58>
	{
		TIM1_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001b56:	4b2a      	ldr	r3, [pc, #168]	@ (8001c00 <DMA2_Stream4_IRQHandler+0xe4>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	711a      	strb	r2, [r3, #4]
		TIM8_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001b5c:	4b29      	ldr	r3, [pc, #164]	@ (8001c04 <DMA2_Stream4_IRQHandler+0xe8>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	711a      	strb	r2, [r3, #4]
		DMA2_Stream4_Flag.Direct_Mode_Error_Flag = true;
 8001b62:	4b29      	ldr	r3, [pc, #164]	@ (8001c08 <DMA2_Stream4_IRQHandler+0xec>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001b68:	4b24      	ldr	r3, [pc, #144]	@ (8001bfc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4a23      	ldr	r2, [pc, #140]	@ (8001bfc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF4)
 8001b74:	4b21      	ldr	r3, [pc, #132]	@ (8001bfc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00e      	beq.n	8001b9e <DMA2_Stream4_IRQHandler+0x82>
	{
		TIM1_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8001b80:	4b1f      	ldr	r3, [pc, #124]	@ (8001c00 <DMA2_Stream4_IRQHandler+0xe4>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	70da      	strb	r2, [r3, #3]
		TIM8_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001b86:	4b1f      	ldr	r3, [pc, #124]	@ (8001c04 <DMA2_Stream4_IRQHandler+0xe8>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	70da      	strb	r2, [r3, #3]
		DMA2_Stream4_Flag.Transfer_Error_Flag = true;
 8001b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c08 <DMA2_Stream4_IRQHandler+0xec>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8001b92:	4b1a      	ldr	r3, [pc, #104]	@ (8001bfc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	4a19      	ldr	r2, [pc, #100]	@ (8001bfc <DMA2_Stream4_IRQHandler+0xe0>)
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF4)
 8001b9e:	4b17      	ldr	r3, [pc, #92]	@ (8001bfc <DMA2_Stream4_IRQHandler+0xe0>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00e      	beq.n	8001bc8 <DMA2_Stream4_IRQHandler+0xac>
	{
		TIM1_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001baa:	4b15      	ldr	r3, [pc, #84]	@ (8001c00 <DMA2_Stream4_IRQHandler+0xe4>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	709a      	strb	r2, [r3, #2]
		TIM8_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <DMA2_Stream4_IRQHandler+0xe8>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	709a      	strb	r2, [r3, #2]
		DMA2_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	@ (8001c08 <DMA2_Stream4_IRQHandler+0xec>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001bfc <DMA2_Stream4_IRQHandler+0xe0>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4a0e      	ldr	r2, [pc, #56]	@ (8001bfc <DMA2_Stream4_IRQHandler+0xe0>)
 8001bc2:	f043 0310 	orr.w	r3, r3, #16
 8001bc6:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF4)
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bfc <DMA2_Stream4_IRQHandler+0xe0>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0320 	and.w	r3, r3, #32
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00e      	beq.n	8001bf2 <DMA2_Stream4_IRQHandler+0xd6>
	{
		TIM1_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <DMA2_Stream4_IRQHandler+0xe4>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	705a      	strb	r2, [r3, #1]
		TIM8_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001bda:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <DMA2_Stream4_IRQHandler+0xe8>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	705a      	strb	r2, [r3, #1]
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <DMA2_Stream4_IRQHandler+0xec>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8001be6:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <DMA2_Stream4_IRQHandler+0xe0>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	4a04      	ldr	r2, [pc, #16]	@ (8001bfc <DMA2_Stream4_IRQHandler+0xe0>)
 8001bec:	f043 0320 	orr.w	r3, r3, #32
 8001bf0:	60d3      	str	r3, [r2, #12]
	}
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40026400 	.word	0x40026400
 8001c00:	20000118 	.word	0x20000118
 8001c04:	20000140 	.word	0x20000140
 8001c08:	20000278 	.word	0x20000278

08001c0c <DMA2_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream5_IRQHandler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF5)
 8001c10:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00b      	beq.n	8001c34 <DMA2_Stream5_IRQHandler+0x28>
	{
		TIM1_UP_DMA_Flag.Fifo_Error_Flag = true;
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd4 <DMA2_Stream5_IRQHandler+0xc8>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	715a      	strb	r2, [r3, #5]
		DMA2_Stream5_Flag.Fifo_Error_Flag = true;
 8001c22:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd8 <DMA2_Stream5_IRQHandler+0xcc>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	715a      	strb	r2, [r3, #5]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001c28:	4b29      	ldr	r3, [pc, #164]	@ (8001cd0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4a28      	ldr	r2, [pc, #160]	@ (8001cd0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c32:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF5)
 8001c34:	4b26      	ldr	r3, [pc, #152]	@ (8001cd0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00b      	beq.n	8001c58 <DMA2_Stream5_IRQHandler+0x4c>
	{
		TIM1_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001c40:	4b24      	ldr	r3, [pc, #144]	@ (8001cd4 <DMA2_Stream5_IRQHandler+0xc8>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	711a      	strb	r2, [r3, #4]
		DMA2_Stream5_Flag.Direct_Mode_Error_Flag = true;
 8001c46:	4b24      	ldr	r3, [pc, #144]	@ (8001cd8 <DMA2_Stream5_IRQHandler+0xcc>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001c4c:	4b20      	ldr	r3, [pc, #128]	@ (8001cd0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4a1f      	ldr	r2, [pc, #124]	@ (8001cd0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c56:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF5)
 8001c58:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <DMA2_Stream5_IRQHandler+0x70>
	{
		TIM1_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <DMA2_Stream5_IRQHandler+0xc8>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	70da      	strb	r2, [r3, #3]
		DMA2_Stream5_Flag.Transfer_Error_Flag = true;
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <DMA2_Stream5_IRQHandler+0xcc>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8001c70:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a16      	ldr	r2, [pc, #88]	@ (8001cd0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c7a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF5)
 8001c7c:	4b14      	ldr	r3, [pc, #80]	@ (8001cd0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00b      	beq.n	8001ca0 <DMA2_Stream5_IRQHandler+0x94>
	{
		TIM1_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001c88:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <DMA2_Stream5_IRQHandler+0xc8>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	709a      	strb	r2, [r3, #2]
		DMA2_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 8001c8e:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <DMA2_Stream5_IRQHandler+0xcc>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001c94:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001c9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c9e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF5)
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00b      	beq.n	8001cc4 <DMA2_Stream5_IRQHandler+0xb8>
	{
		TIM1_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8001cac:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <DMA2_Stream5_IRQHandler+0xc8>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	705a      	strb	r2, [r3, #1]
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
 8001cb2:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <DMA2_Stream5_IRQHandler+0xcc>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4a04      	ldr	r2, [pc, #16]	@ (8001cd0 <DMA2_Stream5_IRQHandler+0xc4>)
 8001cbe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cc2:	60d3      	str	r3, [r2, #12]
	}
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40026400 	.word	0x40026400
 8001cd4:	200000f8 	.word	0x200000f8
 8001cd8:	20000280 	.word	0x20000280

08001cdc <DMA2_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream6_IRQHandler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF6)
 8001ce0:	4b45      	ldr	r3, [pc, #276]	@ (8001df8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d014      	beq.n	8001d16 <DMA2_Stream6_IRQHandler+0x3a>
	{
		TIM1_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001cec:	4b43      	ldr	r3, [pc, #268]	@ (8001dfc <DMA2_Stream6_IRQHandler+0x120>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	715a      	strb	r2, [r3, #5]
		TIM1_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001cf2:	4b43      	ldr	r3, [pc, #268]	@ (8001e00 <DMA2_Stream6_IRQHandler+0x124>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	715a      	strb	r2, [r3, #5]
		TIM8_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001cf8:	4b42      	ldr	r3, [pc, #264]	@ (8001e04 <DMA2_Stream6_IRQHandler+0x128>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	715a      	strb	r2, [r3, #5]
		USART6_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001cfe:	4b42      	ldr	r3, [pc, #264]	@ (8001e08 <DMA2_Stream6_IRQHandler+0x12c>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	715a      	strb	r2, [r3, #5]
		DMA2_Stream6_Flag.Fifo_Error_Flag = true;
 8001d04:	4b41      	ldr	r3, [pc, #260]	@ (8001e0c <DMA2_Stream6_IRQHandler+0x130>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	715a      	strb	r2, [r3, #5]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001df8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	4a3a      	ldr	r2, [pc, #232]	@ (8001df8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d14:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF6)
 8001d16:	4b38      	ldr	r3, [pc, #224]	@ (8001df8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d014      	beq.n	8001d4c <DMA2_Stream6_IRQHandler+0x70>
	{
		TIM1_CH2_DMA_Flag.Direct_Mode_Error_Flag= true;
 8001d22:	4b36      	ldr	r3, [pc, #216]	@ (8001dfc <DMA2_Stream6_IRQHandler+0x120>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	711a      	strb	r2, [r3, #4]
		TIM1_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001d28:	4b35      	ldr	r3, [pc, #212]	@ (8001e00 <DMA2_Stream6_IRQHandler+0x124>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	711a      	strb	r2, [r3, #4]
		TIM8_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001d2e:	4b35      	ldr	r3, [pc, #212]	@ (8001e04 <DMA2_Stream6_IRQHandler+0x128>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	711a      	strb	r2, [r3, #4]
		USART6_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001d34:	4b34      	ldr	r3, [pc, #208]	@ (8001e08 <DMA2_Stream6_IRQHandler+0x12c>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	711a      	strb	r2, [r3, #4]
		DMA2_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8001d3a:	4b34      	ldr	r3, [pc, #208]	@ (8001e0c <DMA2_Stream6_IRQHandler+0x130>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001d40:	4b2d      	ldr	r3, [pc, #180]	@ (8001df8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4a2c      	ldr	r2, [pc, #176]	@ (8001df8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d4a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF6)
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001df8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d014      	beq.n	8001d82 <DMA2_Stream6_IRQHandler+0xa6>
	{
		TIM1_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001d58:	4b28      	ldr	r3, [pc, #160]	@ (8001dfc <DMA2_Stream6_IRQHandler+0x120>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	70da      	strb	r2, [r3, #3]
		TIM1_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8001d5e:	4b28      	ldr	r3, [pc, #160]	@ (8001e00 <DMA2_Stream6_IRQHandler+0x124>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	70da      	strb	r2, [r3, #3]
		TIM8_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8001d64:	4b27      	ldr	r3, [pc, #156]	@ (8001e04 <DMA2_Stream6_IRQHandler+0x128>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	70da      	strb	r2, [r3, #3]
		USART6_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001d6a:	4b27      	ldr	r3, [pc, #156]	@ (8001e08 <DMA2_Stream6_IRQHandler+0x12c>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	70da      	strb	r2, [r3, #3]
		DMA2_Stream6_Flag.Transfer_Error_Flag = true;
 8001d70:	4b26      	ldr	r3, [pc, #152]	@ (8001e0c <DMA2_Stream6_IRQHandler+0x130>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001d76:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001df8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d80:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF6)
 8001d82:	4b1d      	ldr	r3, [pc, #116]	@ (8001df8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d014      	beq.n	8001db8 <DMA2_Stream6_IRQHandler+0xdc>
	{
		TIM1_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dfc <DMA2_Stream6_IRQHandler+0x120>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	709a      	strb	r2, [r3, #2]
		TIM1_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d94:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <DMA2_Stream6_IRQHandler+0x124>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	709a      	strb	r2, [r3, #2]
		TIM8_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e04 <DMA2_Stream6_IRQHandler+0x128>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	709a      	strb	r2, [r3, #2]
		USART6_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <DMA2_Stream6_IRQHandler+0x12c>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	709a      	strb	r2, [r3, #2]
		DMA2_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8001da6:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <DMA2_Stream6_IRQHandler+0x130>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001dac:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4a11      	ldr	r2, [pc, #68]	@ (8001df8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001db2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001db6:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF6)
 8001db8:	4b0f      	ldr	r3, [pc, #60]	@ (8001df8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d014      	beq.n	8001dee <DMA2_Stream6_IRQHandler+0x112>
	{
		TIM1_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <DMA2_Stream6_IRQHandler+0x120>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	705a      	strb	r2, [r3, #1]
		TIM1_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001dca:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <DMA2_Stream6_IRQHandler+0x124>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	705a      	strb	r2, [r3, #1]
		TIM8_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <DMA2_Stream6_IRQHandler+0x128>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	705a      	strb	r2, [r3, #1]
		USART6_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <DMA2_Stream6_IRQHandler+0x12c>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	705a      	strb	r2, [r3, #1]
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <DMA2_Stream6_IRQHandler+0x130>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8001de2:	4b05      	ldr	r3, [pc, #20]	@ (8001df8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	4a04      	ldr	r2, [pc, #16]	@ (8001df8 <DMA2_Stream6_IRQHandler+0x11c>)
 8001de8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dec:	60d3      	str	r3, [r2, #12]
	}
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	40026400 	.word	0x40026400
 8001dfc:	20000108 	.word	0x20000108
 8001e00:	20000110 	.word	0x20000110
 8001e04:	20000148 	.word	0x20000148
 8001e08:	200000e0 	.word	0x200000e0
 8001e0c:	20000288 	.word	0x20000288

08001e10 <DMA2_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream7_IRQHandler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF7)
 8001e14:	4b3e      	ldr	r3, [pc, #248]	@ (8001f10 <DMA2_Stream7_IRQHandler+0x100>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d011      	beq.n	8001e44 <DMA2_Stream7_IRQHandler+0x34>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 8001e20:	4b3c      	ldr	r3, [pc, #240]	@ (8001f14 <DMA2_Stream7_IRQHandler+0x104>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8001e26:	4b3a      	ldr	r3, [pc, #232]	@ (8001f10 <DMA2_Stream7_IRQHandler+0x100>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	4a39      	ldr	r2, [pc, #228]	@ (8001f10 <DMA2_Stream7_IRQHandler+0x100>)
 8001e2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e30:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8001e32:	4b39      	ldr	r3, [pc, #228]	@ (8001f18 <DMA2_Stream7_IRQHandler+0x108>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	715a      	strb	r2, [r3, #5]
		USART1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001e38:	4b36      	ldr	r3, [pc, #216]	@ (8001f14 <DMA2_Stream7_IRQHandler+0x104>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	715a      	strb	r2, [r3, #5]
		DMA2_Stream7_Flag.Fifo_Error_Flag = true;
 8001e3e:	4b37      	ldr	r3, [pc, #220]	@ (8001f1c <DMA2_Stream7_IRQHandler+0x10c>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	715a      	strb	r2, [r3, #5]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF7)
 8001e44:	4b32      	ldr	r3, [pc, #200]	@ (8001f10 <DMA2_Stream7_IRQHandler+0x100>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d011      	beq.n	8001e74 <DMA2_Stream7_IRQHandler+0x64>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 8001e50:	4b30      	ldr	r3, [pc, #192]	@ (8001f14 <DMA2_Stream7_IRQHandler+0x104>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8001e56:	4b2e      	ldr	r3, [pc, #184]	@ (8001f10 <DMA2_Stream7_IRQHandler+0x100>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f10 <DMA2_Stream7_IRQHandler+0x100>)
 8001e5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e60:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e62:	4b2d      	ldr	r3, [pc, #180]	@ (8001f18 <DMA2_Stream7_IRQHandler+0x108>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	711a      	strb	r2, [r3, #4]
		USART1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e68:	4b2a      	ldr	r3, [pc, #168]	@ (8001f14 <DMA2_Stream7_IRQHandler+0x104>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	711a      	strb	r2, [r3, #4]
		DMA2_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8001e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f1c <DMA2_Stream7_IRQHandler+0x10c>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	711a      	strb	r2, [r3, #4]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF7)
 8001e74:	4b26      	ldr	r3, [pc, #152]	@ (8001f10 <DMA2_Stream7_IRQHandler+0x100>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d011      	beq.n	8001ea4 <DMA2_Stream7_IRQHandler+0x94>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 8001e80:	4b24      	ldr	r3, [pc, #144]	@ (8001f14 <DMA2_Stream7_IRQHandler+0x104>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8001e86:	4b22      	ldr	r3, [pc, #136]	@ (8001f10 <DMA2_Stream7_IRQHandler+0x100>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	4a21      	ldr	r2, [pc, #132]	@ (8001f10 <DMA2_Stream7_IRQHandler+0x100>)
 8001e8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e90:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8001e92:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <DMA2_Stream7_IRQHandler+0x108>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	70da      	strb	r2, [r3, #3]
		USART1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001e98:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <DMA2_Stream7_IRQHandler+0x104>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	70da      	strb	r2, [r3, #3]
		DMA2_Stream7_Flag.Transfer_Error_Flag = true;
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f1c <DMA2_Stream7_IRQHandler+0x10c>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	70da      	strb	r2, [r3, #3]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF7)
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <DMA2_Stream7_IRQHandler+0x100>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d011      	beq.n	8001ed4 <DMA2_Stream7_IRQHandler+0xc4>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 8001eb0:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <DMA2_Stream7_IRQHandler+0x104>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001eb6:	4b16      	ldr	r3, [pc, #88]	@ (8001f10 <DMA2_Stream7_IRQHandler+0x100>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	4a15      	ldr	r2, [pc, #84]	@ (8001f10 <DMA2_Stream7_IRQHandler+0x100>)
 8001ebc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ec0:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ec2:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <DMA2_Stream7_IRQHandler+0x108>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	709a      	strb	r2, [r3, #2]
		USART1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ec8:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <DMA2_Stream7_IRQHandler+0x104>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	709a      	strb	r2, [r3, #2]
		DMA2_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8001ece:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <DMA2_Stream7_IRQHandler+0x10c>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	709a      	strb	r2, [r3, #2]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF7)
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <DMA2_Stream7_IRQHandler+0x100>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d011      	beq.n	8001f04 <DMA2_Stream7_IRQHandler+0xf4>
	{
		USART1_TX_DMA_Flag.Triggered = true;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <DMA2_Stream7_IRQHandler+0x104>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <DMA2_Stream7_IRQHandler+0x100>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	4a09      	ldr	r2, [pc, #36]	@ (8001f10 <DMA2_Stream7_IRQHandler+0x100>)
 8001eec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ef0:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <DMA2_Stream7_IRQHandler+0x108>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	705a      	strb	r2, [r3, #1]
		USART1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <DMA2_Stream7_IRQHandler+0x104>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	705a      	strb	r2, [r3, #1]
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
 8001efe:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <DMA2_Stream7_IRQHandler+0x10c>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	705a      	strb	r2, [r3, #1]

	}
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40026400 	.word	0x40026400
 8001f14:	20000090 	.word	0x20000090
 8001f18:	20000150 	.word	0x20000150
 8001f1c:	20000290 	.word	0x20000290

08001f20 <DMA_Reset_Flags>:
 * and transfer error.
 *
 * @param flag The `DMA_Flags_Typedef` structure whose flags are to be reset.
 */
void DMA_Reset_Flags(DMA_Flags_Typedef *flag)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	flag->Direct_Mode_Error_Flag = false;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	711a      	strb	r2, [r3, #4]
	flag->Fifo_Error_Flag = false;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	715a      	strb	r2, [r3, #5]
	flag->Half_Transfer_Complete_Flag = false;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	709a      	strb	r2, [r3, #2]
	flag->Transfer_Complete_Flag = false;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	705a      	strb	r2, [r3, #1]
	flag->Transfer_Error_Flag = false;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	70da      	strb	r2, [r3, #3]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0c      	ldr	r2, [pc, #48]	@ (8001f94 <DMA_Clock_Enable+0x40>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d105      	bne.n	8001f72 <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8001f66:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <DMA_Clock_Enable+0x44>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f98 <DMA_Clock_Enable+0x44>)
 8001f6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f70:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a09      	ldr	r2, [pc, #36]	@ (8001f9c <DMA_Clock_Enable+0x48>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d105      	bne.n	8001f88 <DMA_Clock_Enable+0x34>
		{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <DMA_Clock_Enable+0x44>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f80:	4a05      	ldr	r2, [pc, #20]	@ (8001f98 <DMA_Clock_Enable+0x44>)
 8001f82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f86:	6313      	str	r3, [r2, #48]	@ 0x30
		}
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40026000 	.word	0x40026000
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40026400 	.word	0x40026400

08001fa0 <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ffd3 	bl	8001f54 <DMA_Clock_Enable>
    config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	6819      	ldr	r1, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	7a1b      	ldrb	r3, [r3, #8]
 8001fb8:	065a      	lsls	r2, r3, #25
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	6819      	ldr	r1, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699a      	ldr	r2, [r3, #24]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->flow_control;  // Set flow control
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->priority_level;  // Set priority level
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	6819      	ldr	r1, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	6819      	ldr	r1, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	430a      	orrs	r2, r1
 8002008:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	6819      	ldr	r1, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	6819      	ldr	r1, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691a      	ldr	r2, [r3, #16]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	430a      	orrs	r2, r1
 800202c:	601a      	str	r2, [r3, #0]

    // Configure DMA interrupts if enabled


     if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	2200      	movs	r2, #0
 8002034:	4293      	cmp	r3, r2
 8002036:	f000 80f4 	beq.w	8002222 <DMA_Init+0x282>
    {

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Fifo_Error)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	2280      	movs	r2, #128	@ 0x80
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	61da      	str	r2, [r3, #28]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <DMA_Init+0xc0>
        {
        	config->Request.Stream->FCR |= config->interrupts;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	6959      	ldr	r1, [r3, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69da      	ldr	r2, [r3, #28]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	430a      	orrs	r2, r1
 800205e:	615a      	str	r2, [r3, #20]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2210      	movs	r2, #16
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	61da      	str	r2, [r3, #28]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <DMA_Init+0xe4>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TCIE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f042 0210 	orr.w	r2, r2, #16
 8002082:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	2208      	movs	r2, #8
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	61da      	str	r2, [r3, #28]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <DMA_Init+0x108>
        {
        	config->Request.Stream->CR |= DMA_SxCR_HTIE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f042 0208 	orr.w	r2, r2, #8
 80020a6:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	2204      	movs	r2, #4
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	61da      	str	r2, [r3, #28]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <DMA_Init+0x12c>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TEIE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f042 0204 	orr.w	r2, r2, #4
 80020ca:	601a      	str	r2, [r3, #0]
        }
        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	2202      	movs	r2, #2
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	61da      	str	r2, [r3, #28]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <DMA_Init+0x150>
        {
        	config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f042 0202 	orr.w	r2, r2, #2
 80020ee:	601a      	str	r2, [r3, #0]
        }

        // Enable the corresponding NVIC interrupt for the DMA stream
        if(config->Request.Controller == DMA1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a67      	ldr	r2, [pc, #412]	@ (8002294 <DMA_Init+0x2f4>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d147      	bne.n	800218a <DMA_Init+0x1ea>
        {
            if(config->Request.Stream == DMA1_Stream0){
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4a66      	ldr	r2, [pc, #408]	@ (8002298 <DMA_Init+0x2f8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d103      	bne.n	800210c <DMA_Init+0x16c>
            	NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002104:	200b      	movs	r0, #11
 8002106:	f7fe fd33 	bl	8000b70 <__NVIC_EnableIRQ>
 800210a:	e08a      	b.n	8002222 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream1){
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a62      	ldr	r2, [pc, #392]	@ (800229c <DMA_Init+0x2fc>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d103      	bne.n	800211e <DMA_Init+0x17e>
            	NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002116:	200c      	movs	r0, #12
 8002118:	f7fe fd2a 	bl	8000b70 <__NVIC_EnableIRQ>
 800211c:	e081      	b.n	8002222 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream2){
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4a5f      	ldr	r2, [pc, #380]	@ (80022a0 <DMA_Init+0x300>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d103      	bne.n	8002130 <DMA_Init+0x190>
            	NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002128:	200d      	movs	r0, #13
 800212a:	f7fe fd21 	bl	8000b70 <__NVIC_EnableIRQ>
 800212e:	e078      	b.n	8002222 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream3){
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a5b      	ldr	r2, [pc, #364]	@ (80022a4 <DMA_Init+0x304>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d103      	bne.n	8002142 <DMA_Init+0x1a2>
            	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800213a:	200e      	movs	r0, #14
 800213c:	f7fe fd18 	bl	8000b70 <__NVIC_EnableIRQ>
 8002140:	e06f      	b.n	8002222 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream4){
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4a58      	ldr	r2, [pc, #352]	@ (80022a8 <DMA_Init+0x308>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d103      	bne.n	8002154 <DMA_Init+0x1b4>
            	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800214c:	200f      	movs	r0, #15
 800214e:	f7fe fd0f 	bl	8000b70 <__NVIC_EnableIRQ>
 8002152:	e066      	b.n	8002222 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream5){
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4a54      	ldr	r2, [pc, #336]	@ (80022ac <DMA_Init+0x30c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d103      	bne.n	8002166 <DMA_Init+0x1c6>
            	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800215e:	2010      	movs	r0, #16
 8002160:	f7fe fd06 	bl	8000b70 <__NVIC_EnableIRQ>
 8002164:	e05d      	b.n	8002222 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream6) {
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4a51      	ldr	r2, [pc, #324]	@ (80022b0 <DMA_Init+0x310>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d103      	bne.n	8002178 <DMA_Init+0x1d8>
            	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002170:	2011      	movs	r0, #17
 8002172:	f7fe fcfd 	bl	8000b70 <__NVIC_EnableIRQ>
 8002176:	e054      	b.n	8002222 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream7){
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4a4d      	ldr	r2, [pc, #308]	@ (80022b4 <DMA_Init+0x314>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d14f      	bne.n	8002222 <DMA_Init+0x282>
            	NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002182:	202f      	movs	r0, #47	@ 0x2f
 8002184:	f7fe fcf4 	bl	8000b70 <__NVIC_EnableIRQ>
 8002188:	e04b      	b.n	8002222 <DMA_Init+0x282>
            }
        }
        else if(config->Request.Controller == DMA2)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a4a      	ldr	r2, [pc, #296]	@ (80022b8 <DMA_Init+0x318>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d146      	bne.n	8002222 <DMA_Init+0x282>
        {
            if(config->Request.Stream == DMA2_Stream0){
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4a48      	ldr	r2, [pc, #288]	@ (80022bc <DMA_Init+0x31c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d103      	bne.n	80021a6 <DMA_Init+0x206>
            	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800219e:	2038      	movs	r0, #56	@ 0x38
 80021a0:	f7fe fce6 	bl	8000b70 <__NVIC_EnableIRQ>
 80021a4:	e03d      	b.n	8002222 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream1){
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4a45      	ldr	r2, [pc, #276]	@ (80022c0 <DMA_Init+0x320>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d103      	bne.n	80021b8 <DMA_Init+0x218>
            	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80021b0:	2039      	movs	r0, #57	@ 0x39
 80021b2:	f7fe fcdd 	bl	8000b70 <__NVIC_EnableIRQ>
 80021b6:	e034      	b.n	8002222 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream2){
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4a41      	ldr	r2, [pc, #260]	@ (80022c4 <DMA_Init+0x324>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d103      	bne.n	80021ca <DMA_Init+0x22a>
            	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80021c2:	203a      	movs	r0, #58	@ 0x3a
 80021c4:	f7fe fcd4 	bl	8000b70 <__NVIC_EnableIRQ>
 80021c8:	e02b      	b.n	8002222 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream3){
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4a3e      	ldr	r2, [pc, #248]	@ (80022c8 <DMA_Init+0x328>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d103      	bne.n	80021dc <DMA_Init+0x23c>
            	NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80021d4:	203b      	movs	r0, #59	@ 0x3b
 80021d6:	f7fe fccb 	bl	8000b70 <__NVIC_EnableIRQ>
 80021da:	e022      	b.n	8002222 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream4){
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4a3a      	ldr	r2, [pc, #232]	@ (80022cc <DMA_Init+0x32c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d103      	bne.n	80021ee <DMA_Init+0x24e>
            	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80021e6:	203c      	movs	r0, #60	@ 0x3c
 80021e8:	f7fe fcc2 	bl	8000b70 <__NVIC_EnableIRQ>
 80021ec:	e019      	b.n	8002222 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream5){
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4a37      	ldr	r2, [pc, #220]	@ (80022d0 <DMA_Init+0x330>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d103      	bne.n	8002200 <DMA_Init+0x260>
            	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80021f8:	2044      	movs	r0, #68	@ 0x44
 80021fa:	f7fe fcb9 	bl	8000b70 <__NVIC_EnableIRQ>
 80021fe:	e010      	b.n	8002222 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream6){
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a33      	ldr	r2, [pc, #204]	@ (80022d4 <DMA_Init+0x334>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d103      	bne.n	8002212 <DMA_Init+0x272>
            	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800220a:	2045      	movs	r0, #69	@ 0x45
 800220c:	f7fe fcb0 	bl	8000b70 <__NVIC_EnableIRQ>
 8002210:	e007      	b.n	8002222 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream7){
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a30      	ldr	r2, [pc, #192]	@ (80022d8 <DMA_Init+0x338>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d102      	bne.n	8002222 <DMA_Init+0x282>
//            	NVIC_SetPriority(DMA2_Stream7_IRQn,0);
            	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800221c:	2046      	movs	r0, #70	@ 0x46
 800221e:	f7fe fca7 	bl	8000b70 <__NVIC_EnableIRQ>
            }
        }
    }

    // Configure memory and peripheral pointer increments
    config->Request.Stream->CR |= config->memory_pointer_increment;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	8c1b      	ldrh	r3, [r3, #32]
 800222c:	4619      	mov	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_pointer_increment;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002240:	4619      	mov	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	430a      	orrs	r2, r1
 8002248:	601a      	str	r2, [r3, #0]

    // Configure circular mode
    if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002252:	4293      	cmp	r3, r2
 8002254:	d108      	bne.n	8002268 <DMA_Init+0x2c8>
    {
        config->Request.Stream->CR |= DMA_SxCR_CIRC;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e010      	b.n	800228a <DMA_Init+0x2ea>
    }
    else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2200      	movs	r2, #0
 800226e:	4293      	cmp	r3, r2
 8002270:	d108      	bne.n	8002284 <DMA_Init+0x2e4>
    {
        config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e002      	b.n	800228a <DMA_Init+0x2ea>
    }
    else
    {
        return -1;  // Return -1 if circular mode configuration is invalid
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
 8002288:	e000      	b.n	800228c <DMA_Init+0x2ec>
    }

    return 1;  // Return 1 on successful initialization
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40026000 	.word	0x40026000
 8002298:	40026010 	.word	0x40026010
 800229c:	40026028 	.word	0x40026028
 80022a0:	40026040 	.word	0x40026040
 80022a4:	40026058 	.word	0x40026058
 80022a8:	40026070 	.word	0x40026070
 80022ac:	40026088 	.word	0x40026088
 80022b0:	400260a0 	.word	0x400260a0
 80022b4:	400260b8 	.word	0x400260b8
 80022b8:	40026400 	.word	0x40026400
 80022bc:	40026410 	.word	0x40026410
 80022c0:	40026428 	.word	0x40026428
 80022c4:	40026440 	.word	0x40026440
 80022c8:	40026458 	.word	0x40026458
 80022cc:	40026470 	.word	0x40026470
 80022d0:	40026488 	.word	0x40026488
 80022d4:	400264a0 	.word	0x400264a0
 80022d8:	400264b8 	.word	0x400264b8

080022dc <DMA_Set_Target>:
 * memory increment before applying the new settings.
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	config -> Request.Stream -> CR &= ~DMA_SxCR_EN;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f022 0201 	bic.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

	if(config -> circular_mode == DMA_Configuration.Circular_Mode.Disable)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	2200      	movs	r2, #0
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d108      	bne.n	8002310 <DMA_Set_Target+0x34>
	{
		config -> Request.Stream -> CR &= ~DMA_SxCR_CIRC;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e00d      	b.n	800232c <DMA_Set_Target+0x50>
	}
	else if(config -> circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002318:	4293      	cmp	r3, r2
 800231a:	d107      	bne.n	800232c <DMA_Set_Target+0x50>
	{
		config -> Request.Stream -> CR |= DMA_SxCR_CIRC;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800232a:	601a      	str	r2, [r3, #0]
	}

    // Clear previous data size and memory increment settings
    config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 800233a:	601a      	str	r2, [r3, #0]

    // Set the peripheral data size
    config -> Request.Stream -> CR |= config -> peripheral_data_size;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	6819      	ldr	r1, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	430a      	orrs	r2, r1
 800234c:	601a      	str	r2, [r3, #0]

    // Set the memory data size
    config -> Request.Stream -> CR |= config -> memory_data_size;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]

    // Set the number of data items to be transferred
    config -> Request.Stream -> NDTR = config -> buffer_length;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	605a      	str	r2, [r3, #4]

    // Set memory pointer increment mode
    config -> Request.Stream -> CR |= DMA_SxCR_MINC;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002378:	601a      	str	r2, [r3, #0]

    // Set the memory address
    config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002382:	60da      	str	r2, [r3, #12]

    // Set the peripheral address
    config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800238c:	609a      	str	r2, [r3, #8]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <DMA_Set_Trigger>:
 * number and the DMA controller (DMA1 or DMA2).
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the configuration settings.
 */
void DMA_Set_Trigger(DMA_Config *config)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
    // Bit shift values for streams 0 to 7
    static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
    static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

    DMA_TypeDef *controller = config->Request.Controller;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	617b      	str	r3, [r7, #20]
    DMA_Stream_TypeDef *stream = config->Request.Stream;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	613b      	str	r3, [r7, #16]
    uint32_t shift;

    if (controller == DMA1 || controller == DMA2)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4a43      	ldr	r2, [pc, #268]	@ (80024c0 <DMA_Set_Trigger+0x124>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d003      	beq.n	80023c0 <DMA_Set_Trigger+0x24>
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	4a42      	ldr	r2, [pc, #264]	@ (80024c4 <DMA_Set_Trigger+0x128>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d178      	bne.n	80024b2 <DMA_Set_Trigger+0x116>
    {
        // Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
        if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4a41      	ldr	r2, [pc, #260]	@ (80024c8 <DMA_Set_Trigger+0x12c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d918      	bls.n	80023fa <DMA_Set_Trigger+0x5e>
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4a40      	ldr	r2, [pc, #256]	@ (80024cc <DMA_Set_Trigger+0x130>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d814      	bhi.n	80023fa <DMA_Set_Trigger+0x5e>
        {
            shift = LIFCR_Shifts[stream - DMA1_Stream0];
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4b3f      	ldr	r3, [pc, #252]	@ (80024d0 <DMA_Set_Trigger+0x134>)
 80023d4:	4413      	add	r3, r2
 80023d6:	10db      	asrs	r3, r3, #3
 80023d8:	4a3e      	ldr	r2, [pc, #248]	@ (80024d4 <DMA_Set_Trigger+0x138>)
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	4b3d      	ldr	r3, [pc, #244]	@ (80024d8 <DMA_Set_Trigger+0x13c>)
 80023e2:	5c9b      	ldrb	r3, [r3, r2]
 80023e4:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	213f      	movs	r1, #63	@ 0x3f
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	fa01 f202 	lsl.w	r2, r1, r2
 80023f2:	431a      	orrs	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	e055      	b.n	80024a6 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4a37      	ldr	r2, [pc, #220]	@ (80024dc <DMA_Set_Trigger+0x140>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d918      	bls.n	8002434 <DMA_Set_Trigger+0x98>
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4a36      	ldr	r2, [pc, #216]	@ (80024e0 <DMA_Set_Trigger+0x144>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d814      	bhi.n	8002434 <DMA_Set_Trigger+0x98>
        {
            shift = HIFCR_Shifts[stream - DMA1_Stream4];
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4b35      	ldr	r3, [pc, #212]	@ (80024e4 <DMA_Set_Trigger+0x148>)
 800240e:	4413      	add	r3, r2
 8002410:	10db      	asrs	r3, r3, #3
 8002412:	4a30      	ldr	r2, [pc, #192]	@ (80024d4 <DMA_Set_Trigger+0x138>)
 8002414:	fb02 f303 	mul.w	r3, r2, r3
 8002418:	461a      	mov	r2, r3
 800241a:	4b33      	ldr	r3, [pc, #204]	@ (80024e8 <DMA_Set_Trigger+0x14c>)
 800241c:	5c9b      	ldrb	r3, [r3, r2]
 800241e:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	213f      	movs	r1, #63	@ 0x3f
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	fa01 f202 	lsl.w	r2, r1, r2
 800242c:	431a      	orrs	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	e038      	b.n	80024a6 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4a2d      	ldr	r2, [pc, #180]	@ (80024ec <DMA_Set_Trigger+0x150>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d918      	bls.n	800246e <DMA_Set_Trigger+0xd2>
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4a2c      	ldr	r2, [pc, #176]	@ (80024f0 <DMA_Set_Trigger+0x154>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d814      	bhi.n	800246e <DMA_Set_Trigger+0xd2>
        {
            shift = LIFCR_Shifts[stream - DMA2_Stream0];
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4b2b      	ldr	r3, [pc, #172]	@ (80024f4 <DMA_Set_Trigger+0x158>)
 8002448:	4413      	add	r3, r2
 800244a:	10db      	asrs	r3, r3, #3
 800244c:	4a21      	ldr	r2, [pc, #132]	@ (80024d4 <DMA_Set_Trigger+0x138>)
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	461a      	mov	r2, r3
 8002454:	4b20      	ldr	r3, [pc, #128]	@ (80024d8 <DMA_Set_Trigger+0x13c>)
 8002456:	5c9b      	ldrb	r3, [r3, r2]
 8002458:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	213f      	movs	r1, #63	@ 0x3f
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	fa01 f202 	lsl.w	r2, r1, r2
 8002466:	431a      	orrs	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	e01b      	b.n	80024a6 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4a21      	ldr	r2, [pc, #132]	@ (80024f8 <DMA_Set_Trigger+0x15c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d917      	bls.n	80024a6 <DMA_Set_Trigger+0x10a>
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4a20      	ldr	r2, [pc, #128]	@ (80024fc <DMA_Set_Trigger+0x160>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d813      	bhi.n	80024a6 <DMA_Set_Trigger+0x10a>
        {
            shift = HIFCR_Shifts[stream - DMA2_Stream4];
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4b1f      	ldr	r3, [pc, #124]	@ (8002500 <DMA_Set_Trigger+0x164>)
 8002482:	4413      	add	r3, r2
 8002484:	10db      	asrs	r3, r3, #3
 8002486:	4a13      	ldr	r2, [pc, #76]	@ (80024d4 <DMA_Set_Trigger+0x138>)
 8002488:	fb02 f303 	mul.w	r3, r2, r3
 800248c:	461a      	mov	r2, r3
 800248e:	4b16      	ldr	r3, [pc, #88]	@ (80024e8 <DMA_Set_Trigger+0x14c>)
 8002490:	5c9b      	ldrb	r3, [r3, r2]
 8002492:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	213f      	movs	r1, #63	@ 0x3f
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	fa01 f202 	lsl.w	r2, r1, r2
 80024a0:	431a      	orrs	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	60da      	str	r2, [r3, #12]
        }

        stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f043 0201 	orr.w	r2, r3, #1
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	601a      	str	r2, [r3, #0]
    }
}
 80024b2:	bf00      	nop
 80024b4:	371c      	adds	r7, #28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40026000 	.word	0x40026000
 80024c4:	40026400 	.word	0x40026400
 80024c8:	4002600f 	.word	0x4002600f
 80024cc:	40026058 	.word	0x40026058
 80024d0:	bffd9ff0 	.word	0xbffd9ff0
 80024d4:	aaaaaaab 	.word	0xaaaaaaab
 80024d8:	08004558 	.word	0x08004558
 80024dc:	4002606f 	.word	0x4002606f
 80024e0:	400260b8 	.word	0x400260b8
 80024e4:	bffd9f90 	.word	0xbffd9f90
 80024e8:	0800455c 	.word	0x0800455c
 80024ec:	4002640f 	.word	0x4002640f
 80024f0:	40026458 	.word	0x40026458
 80024f4:	bffd9bf0 	.word	0xbffd9bf0
 80024f8:	4002646f 	.word	0x4002646f
 80024fc:	400264b8 	.word	0x400264b8
 8002500:	bffd9b90 	.word	0xbffd9b90

08002504 <GPIO_Clock_Enable>:
 * @brief  Enables the clock for a specific GPIO port.
 * @param  PORT: Pointer to GPIO port base address.
 * @retval 0 on success, -1 on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a25      	ldr	r2, [pc, #148]	@ (80025a4 <GPIO_Clock_Enable+0xa0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d106      	bne.n	8002522 <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8002514:	4b24      	ldr	r3, [pc, #144]	@ (80025a8 <GPIO_Clock_Enable+0xa4>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	4a23      	ldr	r2, [pc, #140]	@ (80025a8 <GPIO_Clock_Enable+0xa4>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002520:	e039      	b.n	8002596 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a21      	ldr	r2, [pc, #132]	@ (80025ac <GPIO_Clock_Enable+0xa8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d106      	bne.n	8002538 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 800252a:	4b1f      	ldr	r3, [pc, #124]	@ (80025a8 <GPIO_Clock_Enable+0xa4>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	4a1e      	ldr	r2, [pc, #120]	@ (80025a8 <GPIO_Clock_Enable+0xa4>)
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	6313      	str	r3, [r2, #48]	@ 0x30
 8002536:	e02e      	b.n	8002596 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a1d      	ldr	r2, [pc, #116]	@ (80025b0 <GPIO_Clock_Enable+0xac>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d106      	bne.n	800254e <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 8002540:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <GPIO_Clock_Enable+0xa4>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	4a18      	ldr	r2, [pc, #96]	@ (80025a8 <GPIO_Clock_Enable+0xa4>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	6313      	str	r3, [r2, #48]	@ 0x30
 800254c:	e023      	b.n	8002596 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a18      	ldr	r2, [pc, #96]	@ (80025b4 <GPIO_Clock_Enable+0xb0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d106      	bne.n	8002564 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8002556:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <GPIO_Clock_Enable+0xa4>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	4a13      	ldr	r2, [pc, #76]	@ (80025a8 <GPIO_Clock_Enable+0xa4>)
 800255c:	f043 0308 	orr.w	r3, r3, #8
 8002560:	6313      	str	r3, [r2, #48]	@ 0x30
 8002562:	e018      	b.n	8002596 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a14      	ldr	r2, [pc, #80]	@ (80025b8 <GPIO_Clock_Enable+0xb4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d106      	bne.n	800257a <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 800256c:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <GPIO_Clock_Enable+0xa4>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002570:	4a0d      	ldr	r2, [pc, #52]	@ (80025a8 <GPIO_Clock_Enable+0xa4>)
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	6313      	str	r3, [r2, #48]	@ 0x30
 8002578:	e00d      	b.n	8002596 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a0f      	ldr	r2, [pc, #60]	@ (80025bc <GPIO_Clock_Enable+0xb8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d106      	bne.n	8002590 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 8002582:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <GPIO_Clock_Enable+0xa4>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	4a08      	ldr	r2, [pc, #32]	@ (80025a8 <GPIO_Clock_Enable+0xa4>)
 8002588:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800258c:	6313      	str	r3, [r2, #48]	@ 0x30
 800258e:	e002      	b.n	8002596 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8002590:	f04f 33ff 	mov.w	r3, #4294967295
 8002594:	e000      	b.n	8002598 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8002596:	2301      	movs	r3, #1
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020400 	.word	0x40020400
 80025b0:	40020800 	.word	0x40020800
 80025b4:	40020c00 	.word	0x40020c00
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40021c00 	.word	0x40021c00

080025c0 <GPIO_Pin_Init>:
 * @param  speed: Speed level (low, medium, high, very high).
 * @param  pull: Pull-up/pull-down configuration (none, pull-up, pull-down).
 * @param  alternate_function: Alternate function selection (0-15).
 */
void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	4608      	mov	r0, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	461a      	mov	r2, r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	70fb      	strb	r3, [r7, #3]
 80025d2:	460b      	mov	r3, r1
 80025d4:	70bb      	strb	r3, [r7, #2]
 80025d6:	4613      	mov	r3, r2
 80025d8:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ff92 	bl	8002504 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	78b9      	ldrb	r1, [r7, #2]
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	0052      	lsls	r2, r2, #1
 80025ea:	fa01 f202 	lsl.w	r2, r1, r2
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	601a      	str	r2, [r3, #0]

	if(output_type != GPIO_Configuration.Output_Type.None) Port -> OTYPER |= output_type << pin;
 80025f4:	2202      	movs	r2, #2
 80025f6:	787b      	ldrb	r3, [r7, #1]
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d008      	beq.n	800260e <GPIO_Pin_Init+0x4e>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	7879      	ldrb	r1, [r7, #1]
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	fa01 f202 	lsl.w	r2, r1, r2
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	605a      	str	r2, [r3, #4]
	if(speed != GPIO_Configuration.Speed.None) Port -> OSPEEDR |= speed << (pin*2);
 800260e:	2204      	movs	r2, #4
 8002610:	7c3b      	ldrb	r3, [r7, #16]
 8002612:	4293      	cmp	r3, r2
 8002614:	d009      	beq.n	800262a <GPIO_Pin_Init+0x6a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	7c39      	ldrb	r1, [r7, #16]
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	0052      	lsls	r2, r2, #1
 8002620:	fa01 f202 	lsl.w	r2, r1, r2
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	609a      	str	r2, [r3, #8]
	if(pull != GPIO_Configuration.Pull.None) Port -> PUPDR |= pull << (pin*2);
 800262a:	2204      	movs	r2, #4
 800262c:	7d3b      	ldrb	r3, [r7, #20]
 800262e:	4293      	cmp	r3, r2
 8002630:	d009      	beq.n	8002646 <GPIO_Pin_Init+0x86>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	7d39      	ldrb	r1, [r7, #20]
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	0052      	lsls	r2, r2, #1
 800263c:	fa01 f202 	lsl.w	r2, r1, r2
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	2b07      	cmp	r3, #7
 800264a:	d80a      	bhi.n	8002662 <GPIO_Pin_Init+0xa2>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	7e39      	ldrb	r1, [r7, #24]
 8002652:	78fa      	ldrb	r2, [r7, #3]
 8002654:	0092      	lsls	r2, r2, #2
 8002656:	fa01 f202 	lsl.w	r2, r1, r2
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8002660:	e00a      	b.n	8002678 <GPIO_Pin_Init+0xb8>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	7e39      	ldrb	r1, [r7, #24]
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	3a08      	subs	r2, #8
 800266c:	0092      	lsls	r2, r2, #2
 800266e:	fa01 f202 	lsl.w	r2, r1, r2
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <__NVIC_EnableIRQ>:
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	2b00      	cmp	r3, #0
 8002690:	db0b      	blt.n	80026aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	f003 021f 	and.w	r2, r3, #31
 8002698:	4907      	ldr	r1, [pc, #28]	@ (80026b8 <__NVIC_EnableIRQ+0x38>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	2001      	movs	r0, #1
 80026a2:	fa00 f202 	lsl.w	r2, r0, r2
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000e100 	.word	0xe000e100

080026bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	db0a      	blt.n	80026e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	490c      	ldr	r1, [pc, #48]	@ (8002708 <__NVIC_SetPriority+0x4c>)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	0112      	lsls	r2, r2, #4
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	440b      	add	r3, r1
 80026e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e4:	e00a      	b.n	80026fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4908      	ldr	r1, [pc, #32]	@ (800270c <__NVIC_SetPriority+0x50>)
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	3b04      	subs	r3, #4
 80026f4:	0112      	lsls	r2, r2, #4
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	440b      	add	r3, r1
 80026fa:	761a      	strb	r2, [r3, #24]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000e100 	.word	0xe000e100
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE	void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	ed87 0b02 	vstr	d0, [r7, #8]
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 800271e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002722:	f7fe f9cf 	bl	8000ac4 <__aeabi_d2lz>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	f7fd fed9 	bl	80004e4 <__aeabi_l2d>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	6839      	ldr	r1, [r7, #0]
 8002738:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002742:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002746:	f7fd fd43 	bl	80001d0 <__aeabi_dsub>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <Get_USART_Instance_Number>:
DMA_Config xUSART_TX[6];

int8_t usart_dma_instance_number;

static int8_t Get_USART_Instance_Number(USART_Config *config)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1) {return 0;}
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a17      	ldr	r2, [pc, #92]	@ (80027c8 <Get_USART_Instance_Number+0x6c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <Get_USART_Instance_Number+0x16>
 800276e:	2300      	movs	r3, #0
 8002770:	e024      	b.n	80027bc <Get_USART_Instance_Number+0x60>
	else if(config->Port == USART2) {return 1;}
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a15      	ldr	r2, [pc, #84]	@ (80027cc <Get_USART_Instance_Number+0x70>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d101      	bne.n	8002780 <Get_USART_Instance_Number+0x24>
 800277c:	2301      	movs	r3, #1
 800277e:	e01d      	b.n	80027bc <Get_USART_Instance_Number+0x60>
	else if(config->Port == USART3) {return 2;}
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <Get_USART_Instance_Number+0x74>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <Get_USART_Instance_Number+0x32>
 800278a:	2302      	movs	r3, #2
 800278c:	e016      	b.n	80027bc <Get_USART_Instance_Number+0x60>
	else if(config->Port == UART4) {return 3;}
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a10      	ldr	r2, [pc, #64]	@ (80027d4 <Get_USART_Instance_Number+0x78>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d101      	bne.n	800279c <Get_USART_Instance_Number+0x40>
 8002798:	2303      	movs	r3, #3
 800279a:	e00f      	b.n	80027bc <Get_USART_Instance_Number+0x60>
	else if(config->Port == UART5) {return 4;}
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0d      	ldr	r2, [pc, #52]	@ (80027d8 <Get_USART_Instance_Number+0x7c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d101      	bne.n	80027aa <Get_USART_Instance_Number+0x4e>
 80027a6:	2304      	movs	r3, #4
 80027a8:	e008      	b.n	80027bc <Get_USART_Instance_Number+0x60>
	else if(config->Port == USART6) {return 5;}
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a0b      	ldr	r2, [pc, #44]	@ (80027dc <Get_USART_Instance_Number+0x80>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d101      	bne.n	80027b8 <Get_USART_Instance_Number+0x5c>
 80027b4:	2305      	movs	r3, #5
 80027b6:	e001      	b.n	80027bc <Get_USART_Instance_Number+0x60>
	else {return -1;}
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40011000 	.word	0x40011000
 80027cc:	40004400 	.word	0x40004400
 80027d0:	40004800 	.word	0x40004800
 80027d4:	40004c00 	.word	0x40004c00
 80027d8:	40005000 	.word	0x40005000
 80027dc:	40011400 	.word	0x40011400

080027e0 <USART_Clock_Enable>:
	config->interrupt = USART_Configuration.Interrupt_Type.Disable;
}


int8_t USART_Clock_Enable(USART_Config *config)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a27      	ldr	r2, [pc, #156]	@ (800288c <USART_Clock_Enable+0xac>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d106      	bne.n	8002800 <USART_Clock_Enable+0x20>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80027f2:	4b27      	ldr	r3, [pc, #156]	@ (8002890 <USART_Clock_Enable+0xb0>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	4a26      	ldr	r2, [pc, #152]	@ (8002890 <USART_Clock_Enable+0xb0>)
 80027f8:	f043 0310 	orr.w	r3, r3, #16
 80027fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027fe:	e03e      	b.n	800287e <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a23      	ldr	r2, [pc, #140]	@ (8002894 <USART_Clock_Enable+0xb4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d106      	bne.n	8002818 <USART_Clock_Enable+0x38>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 800280a:	4b21      	ldr	r3, [pc, #132]	@ (8002890 <USART_Clock_Enable+0xb0>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	4a20      	ldr	r2, [pc, #128]	@ (8002890 <USART_Clock_Enable+0xb0>)
 8002810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002814:	6413      	str	r3, [r2, #64]	@ 0x40
 8002816:	e032      	b.n	800287e <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART3)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a1e      	ldr	r2, [pc, #120]	@ (8002898 <USART_Clock_Enable+0xb8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d106      	bne.n	8002830 <USART_Clock_Enable+0x50>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 8002822:	4b1b      	ldr	r3, [pc, #108]	@ (8002890 <USART_Clock_Enable+0xb0>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	4a1a      	ldr	r2, [pc, #104]	@ (8002890 <USART_Clock_Enable+0xb0>)
 8002828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800282c:	6413      	str	r3, [r2, #64]	@ 0x40
 800282e:	e026      	b.n	800287e <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART4)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a19      	ldr	r2, [pc, #100]	@ (800289c <USART_Clock_Enable+0xbc>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d106      	bne.n	8002848 <USART_Clock_Enable+0x68>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 800283a:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <USART_Clock_Enable+0xb0>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	4a14      	ldr	r2, [pc, #80]	@ (8002890 <USART_Clock_Enable+0xb0>)
 8002840:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002844:	6413      	str	r3, [r2, #64]	@ 0x40
 8002846:	e01a      	b.n	800287e <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART5)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a14      	ldr	r2, [pc, #80]	@ (80028a0 <USART_Clock_Enable+0xc0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d106      	bne.n	8002860 <USART_Clock_Enable+0x80>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 8002852:	4b0f      	ldr	r3, [pc, #60]	@ (8002890 <USART_Clock_Enable+0xb0>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	4a0e      	ldr	r2, [pc, #56]	@ (8002890 <USART_Clock_Enable+0xb0>)
 8002858:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800285c:	6413      	str	r3, [r2, #64]	@ 0x40
 800285e:	e00e      	b.n	800287e <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART6)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0f      	ldr	r2, [pc, #60]	@ (80028a4 <USART_Clock_Enable+0xc4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d106      	bne.n	8002878 <USART_Clock_Enable+0x98>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <USART_Clock_Enable+0xb0>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286e:	4a08      	ldr	r2, [pc, #32]	@ (8002890 <USART_Clock_Enable+0xb0>)
 8002870:	f043 0320 	orr.w	r3, r3, #32
 8002874:	6453      	str	r3, [r2, #68]	@ 0x44
 8002876:	e002      	b.n	800287e <USART_Clock_Enable+0x9e>
	}
	else
	{
		return -1;
 8002878:	f04f 33ff 	mov.w	r3, #4294967295
 800287c:	e000      	b.n	8002880 <USART_Clock_Enable+0xa0>
	}
	return 1;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40011000 	.word	0x40011000
 8002890:	40023800 	.word	0x40023800
 8002894:	40004400 	.word	0x40004400
 8002898:	40004800 	.word	0x40004800
 800289c:	40004c00 	.word	0x40004c00
 80028a0:	40005000 	.word	0x40005000
 80028a4:	40011400 	.word	0x40011400

080028a8 <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 80028a8:	b5b0      	push	{r4, r5, r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af04      	add	r7, sp, #16
 80028ae:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4aa0      	ldr	r2, [pc, #640]	@ (8002b38 <PIN_Setup+0x290>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	f040 810d 	bne.w	8002ad6 <PIN_Setup+0x22e>
	{
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7a1b      	ldrb	r3, [r3, #8]
 80028c0:	2201      	movs	r2, #1
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00f      	beq.n	80028e6 <PIN_Setup+0x3e>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	7a1b      	ldrb	r3, [r3, #8]
 80028ca:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00a      	beq.n	80028e6 <PIN_Setup+0x3e>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7a1b      	ldrb	r3, [r3, #8]
 80028d4:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d005      	beq.n	80028e6 <PIN_Setup+0x3e>
		   (config->mode == USART_Configuration.Mode.LIN) )
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7a1b      	ldrb	r3, [r3, #8]
 80028de:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 80028e0:	4293      	cmp	r3, r2
 80028e2:	f040 80be 	bne.w	8002a62 <PIN_Setup+0x1ba>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	7a5b      	ldrb	r3, [r3, #9]
 80028ea:	2209      	movs	r2, #9
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d10f      	bne.n	8002910 <PIN_Setup+0x68>
 80028f0:	2009      	movs	r0, #9
 80028f2:	2402      	movs	r4, #2
 80028f4:	2500      	movs	r5, #0
 80028f6:	2302      	movs	r3, #2
 80028f8:	2200      	movs	r2, #0
 80028fa:	2107      	movs	r1, #7
 80028fc:	9102      	str	r1, [sp, #8]
 80028fe:	9201      	str	r2, [sp, #4]
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	462b      	mov	r3, r5
 8002904:	4622      	mov	r2, r4
 8002906:	4601      	mov	r1, r0
 8002908:	488c      	ldr	r0, [pc, #560]	@ (8002b3c <PIN_Setup+0x294>)
 800290a:	f7ff fe59 	bl	80025c0 <GPIO_Pin_Init>
 800290e:	e013      	b.n	8002938 <PIN_Setup+0x90>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7a5b      	ldrb	r3, [r3, #9]
 8002914:	2206      	movs	r2, #6
 8002916:	4293      	cmp	r3, r2
 8002918:	d10e      	bne.n	8002938 <PIN_Setup+0x90>
 800291a:	2006      	movs	r0, #6
 800291c:	2402      	movs	r4, #2
 800291e:	2500      	movs	r5, #0
 8002920:	2302      	movs	r3, #2
 8002922:	2200      	movs	r2, #0
 8002924:	2107      	movs	r1, #7
 8002926:	9102      	str	r1, [sp, #8]
 8002928:	9201      	str	r2, [sp, #4]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	462b      	mov	r3, r5
 800292e:	4622      	mov	r2, r4
 8002930:	4601      	mov	r1, r0
 8002932:	4883      	ldr	r0, [pc, #524]	@ (8002b40 <PIN_Setup+0x298>)
 8002934:	f7ff fe44 	bl	80025c0 <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	7a9b      	ldrb	r3, [r3, #10]
 800293c:	220a      	movs	r2, #10
 800293e:	4293      	cmp	r3, r2
 8002940:	d10f      	bne.n	8002962 <PIN_Setup+0xba>
 8002942:	200a      	movs	r0, #10
 8002944:	2402      	movs	r4, #2
 8002946:	2500      	movs	r5, #0
 8002948:	2302      	movs	r3, #2
 800294a:	2200      	movs	r2, #0
 800294c:	2107      	movs	r1, #7
 800294e:	9102      	str	r1, [sp, #8]
 8002950:	9201      	str	r2, [sp, #4]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	462b      	mov	r3, r5
 8002956:	4622      	mov	r2, r4
 8002958:	4601      	mov	r1, r0
 800295a:	4878      	ldr	r0, [pc, #480]	@ (8002b3c <PIN_Setup+0x294>)
 800295c:	f7ff fe30 	bl	80025c0 <GPIO_Pin_Init>
 8002960:	e013      	b.n	800298a <PIN_Setup+0xe2>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	7a9b      	ldrb	r3, [r3, #10]
 8002966:	2207      	movs	r2, #7
 8002968:	4293      	cmp	r3, r2
 800296a:	d10e      	bne.n	800298a <PIN_Setup+0xe2>
 800296c:	2007      	movs	r0, #7
 800296e:	2402      	movs	r4, #2
 8002970:	2500      	movs	r5, #0
 8002972:	2302      	movs	r3, #2
 8002974:	2200      	movs	r2, #0
 8002976:	2107      	movs	r1, #7
 8002978:	9102      	str	r1, [sp, #8]
 800297a:	9201      	str	r2, [sp, #4]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	462b      	mov	r3, r5
 8002980:	4622      	mov	r2, r4
 8002982:	4601      	mov	r1, r0
 8002984:	486e      	ldr	r0, [pc, #440]	@ (8002b40 <PIN_Setup+0x298>)
 8002986:	f7ff fe1b 	bl	80025c0 <GPIO_Pin_Init>

			if((config->mode == USART_Configuration.Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7a1b      	ldrb	r3, [r3, #8]
 800298e:	2202      	movs	r2, #2
 8002990:	4293      	cmp	r3, r2
 8002992:	d113      	bne.n	80029bc <PIN_Setup+0x114>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	7adb      	ldrb	r3, [r3, #11]
 8002998:	2208      	movs	r2, #8
 800299a:	4293      	cmp	r3, r2
 800299c:	d10e      	bne.n	80029bc <PIN_Setup+0x114>
 800299e:	2008      	movs	r0, #8
 80029a0:	2402      	movs	r4, #2
 80029a2:	2500      	movs	r5, #0
 80029a4:	2302      	movs	r3, #2
 80029a6:	2200      	movs	r2, #0
 80029a8:	2107      	movs	r1, #7
 80029aa:	9102      	str	r1, [sp, #8]
 80029ac:	9201      	str	r2, [sp, #4]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	462b      	mov	r3, r5
 80029b2:	4622      	mov	r2, r4
 80029b4:	4601      	mov	r1, r0
 80029b6:	4861      	ldr	r0, [pc, #388]	@ (8002b3c <PIN_Setup+0x294>)
 80029b8:	f7ff fe02 	bl	80025c0 <GPIO_Pin_Init>

			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	7bdb      	ldrb	r3, [r3, #15]
 80029c0:	2200      	movs	r2, #0
 80029c2:	4293      	cmp	r3, r2
 80029c4:	f000 83bb 	beq.w	800313e <PIN_Setup+0x896>
			{
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7bdb      	ldrb	r3, [r3, #15]
 80029cc:	2201      	movs	r2, #1
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10e      	bne.n	80029f0 <PIN_Setup+0x148>
 80029d2:	200b      	movs	r0, #11
 80029d4:	2402      	movs	r4, #2
 80029d6:	2500      	movs	r5, #0
 80029d8:	2302      	movs	r3, #2
 80029da:	2200      	movs	r2, #0
 80029dc:	2107      	movs	r1, #7
 80029de:	9102      	str	r1, [sp, #8]
 80029e0:	9201      	str	r2, [sp, #4]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	462b      	mov	r3, r5
 80029e6:	4622      	mov	r2, r4
 80029e8:	4601      	mov	r1, r0
 80029ea:	4854      	ldr	r0, [pc, #336]	@ (8002b3c <PIN_Setup+0x294>)
 80029ec:	f7ff fde8 	bl	80025c0 <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	7bdb      	ldrb	r3, [r3, #15]
 80029f4:	2202      	movs	r2, #2
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d10e      	bne.n	8002a18 <PIN_Setup+0x170>
 80029fa:	200c      	movs	r0, #12
 80029fc:	2402      	movs	r4, #2
 80029fe:	2500      	movs	r5, #0
 8002a00:	2302      	movs	r3, #2
 8002a02:	2200      	movs	r2, #0
 8002a04:	2107      	movs	r1, #7
 8002a06:	9102      	str	r1, [sp, #8]
 8002a08:	9201      	str	r2, [sp, #4]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	462b      	mov	r3, r5
 8002a0e:	4622      	mov	r2, r4
 8002a10:	4601      	mov	r1, r0
 8002a12:	484a      	ldr	r0, [pc, #296]	@ (8002b3c <PIN_Setup+0x294>)
 8002a14:	f7ff fdd4 	bl	80025c0 <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7bdb      	ldrb	r3, [r3, #15]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	f040 838d 	bne.w	800313e <PIN_Setup+0x896>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002a24:	200b      	movs	r0, #11
 8002a26:	2402      	movs	r4, #2
 8002a28:	2500      	movs	r5, #0
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2107      	movs	r1, #7
 8002a30:	9102      	str	r1, [sp, #8]
 8002a32:	9201      	str	r2, [sp, #4]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	462b      	mov	r3, r5
 8002a38:	4622      	mov	r2, r4
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	483f      	ldr	r0, [pc, #252]	@ (8002b3c <PIN_Setup+0x294>)
 8002a3e:	f7ff fdbf 	bl	80025c0 <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002a42:	200c      	movs	r0, #12
 8002a44:	2402      	movs	r4, #2
 8002a46:	2500      	movs	r5, #0
 8002a48:	2302      	movs	r3, #2
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2107      	movs	r1, #7
 8002a4e:	9102      	str	r1, [sp, #8]
 8002a50:	9201      	str	r2, [sp, #4]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	462b      	mov	r3, r5
 8002a56:	4622      	mov	r2, r4
 8002a58:	4601      	mov	r1, r0
 8002a5a:	4838      	ldr	r0, [pc, #224]	@ (8002b3c <PIN_Setup+0x294>)
 8002a5c:	f7ff fdb0 	bl	80025c0 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8002a60:	e36d      	b.n	800313e <PIN_Setup+0x896>
				}
		    }
		}
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	7a1b      	ldrb	r3, [r3, #8]
 8002a66:	2206      	movs	r2, #6
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00a      	beq.n	8002a82 <PIN_Setup+0x1da>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	7a1b      	ldrb	r3, [r3, #8]
 8002a70:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d005      	beq.n	8002a82 <PIN_Setup+0x1da>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7a1b      	ldrb	r3, [r3, #8]
 8002a7a:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	f040 8363 	bne.w	8003148 <PIN_Setup+0x8a0>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	7a5b      	ldrb	r3, [r3, #9]
 8002a86:	2209      	movs	r2, #9
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d10e      	bne.n	8002aaa <PIN_Setup+0x202>
 8002a8c:	2009      	movs	r0, #9
 8002a8e:	2402      	movs	r4, #2
 8002a90:	2500      	movs	r5, #0
 8002a92:	2302      	movs	r3, #2
 8002a94:	2200      	movs	r2, #0
 8002a96:	2107      	movs	r1, #7
 8002a98:	9102      	str	r1, [sp, #8]
 8002a9a:	9201      	str	r2, [sp, #4]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	462b      	mov	r3, r5
 8002aa0:	4622      	mov	r2, r4
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	4825      	ldr	r0, [pc, #148]	@ (8002b3c <PIN_Setup+0x294>)
 8002aa6:	f7ff fd8b 	bl	80025c0 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7a1b      	ldrb	r3, [r3, #8]
 8002aae:	2207      	movs	r2, #7
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	f040 8349 	bne.w	8003148 <PIN_Setup+0x8a0>
 8002ab6:	2008      	movs	r0, #8
 8002ab8:	2402      	movs	r4, #2
 8002aba:	2500      	movs	r5, #0
 8002abc:	2302      	movs	r3, #2
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2107      	movs	r1, #7
 8002ac2:	9102      	str	r1, [sp, #8]
 8002ac4:	9201      	str	r2, [sp, #4]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	462b      	mov	r3, r5
 8002aca:	4622      	mov	r2, r4
 8002acc:	4601      	mov	r1, r0
 8002ace:	481b      	ldr	r0, [pc, #108]	@ (8002b3c <PIN_Setup+0x294>)
 8002ad0:	f7ff fd76 	bl	80025c0 <GPIO_Pin_Init>
//
//		}
//	}


}
 8002ad4:	e338      	b.n	8003148 <PIN_Setup+0x8a0>
	else if(config->Port == USART2)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a1a      	ldr	r2, [pc, #104]	@ (8002b44 <PIN_Setup+0x29c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	f040 817b 	bne.w	8002dd8 <PIN_Setup+0x530>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	7a1b      	ldrb	r3, [r3, #8]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00f      	beq.n	8002b0c <PIN_Setup+0x264>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7a1b      	ldrb	r3, [r3, #8]
 8002af0:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00a      	beq.n	8002b0c <PIN_Setup+0x264>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7a1b      	ldrb	r3, [r3, #8]
 8002afa:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d005      	beq.n	8002b0c <PIN_Setup+0x264>
		   (config->mode == USART_Configuration.Mode.LIN) )
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7a1b      	ldrb	r3, [r3, #8]
 8002b04:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8002b06:	4293      	cmp	r3, r2
 8002b08:	f040 80f8 	bne.w	8002cfc <PIN_Setup+0x454>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	7a5b      	ldrb	r3, [r3, #9]
 8002b10:	2202      	movs	r2, #2
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d118      	bne.n	8002b48 <PIN_Setup+0x2a0>
 8002b16:	2002      	movs	r0, #2
 8002b18:	2402      	movs	r4, #2
 8002b1a:	2500      	movs	r5, #0
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2107      	movs	r1, #7
 8002b22:	9102      	str	r1, [sp, #8]
 8002b24:	9201      	str	r2, [sp, #4]
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	462b      	mov	r3, r5
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4803      	ldr	r0, [pc, #12]	@ (8002b3c <PIN_Setup+0x294>)
 8002b30:	f7ff fd46 	bl	80025c0 <GPIO_Pin_Init>
 8002b34:	e01c      	b.n	8002b70 <PIN_Setup+0x2c8>
 8002b36:	bf00      	nop
 8002b38:	40011000 	.word	0x40011000
 8002b3c:	40020000 	.word	0x40020000
 8002b40:	40020400 	.word	0x40020400
 8002b44:	40004400 	.word	0x40004400
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7a5b      	ldrb	r3, [r3, #9]
 8002b4c:	2205      	movs	r2, #5
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d10e      	bne.n	8002b70 <PIN_Setup+0x2c8>
 8002b52:	2005      	movs	r0, #5
 8002b54:	2402      	movs	r4, #2
 8002b56:	2500      	movs	r5, #0
 8002b58:	2302      	movs	r3, #2
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2107      	movs	r1, #7
 8002b5e:	9102      	str	r1, [sp, #8]
 8002b60:	9201      	str	r2, [sp, #4]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	462b      	mov	r3, r5
 8002b66:	4622      	mov	r2, r4
 8002b68:	4601      	mov	r1, r0
 8002b6a:	4899      	ldr	r0, [pc, #612]	@ (8002dd0 <PIN_Setup+0x528>)
 8002b6c:	f7ff fd28 	bl	80025c0 <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7a9b      	ldrb	r3, [r3, #10]
 8002b74:	2203      	movs	r2, #3
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d10f      	bne.n	8002b9a <PIN_Setup+0x2f2>
 8002b7a:	2003      	movs	r0, #3
 8002b7c:	2402      	movs	r4, #2
 8002b7e:	2500      	movs	r5, #0
 8002b80:	2302      	movs	r3, #2
 8002b82:	2200      	movs	r2, #0
 8002b84:	2107      	movs	r1, #7
 8002b86:	9102      	str	r1, [sp, #8]
 8002b88:	9201      	str	r2, [sp, #4]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	462b      	mov	r3, r5
 8002b8e:	4622      	mov	r2, r4
 8002b90:	4601      	mov	r1, r0
 8002b92:	4890      	ldr	r0, [pc, #576]	@ (8002dd4 <PIN_Setup+0x52c>)
 8002b94:	f7ff fd14 	bl	80025c0 <GPIO_Pin_Init>
 8002b98:	e013      	b.n	8002bc2 <PIN_Setup+0x31a>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	7a9b      	ldrb	r3, [r3, #10]
 8002b9e:	2206      	movs	r2, #6
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d10e      	bne.n	8002bc2 <PIN_Setup+0x31a>
 8002ba4:	2006      	movs	r0, #6
 8002ba6:	2402      	movs	r4, #2
 8002ba8:	2500      	movs	r5, #0
 8002baa:	2302      	movs	r3, #2
 8002bac:	2200      	movs	r2, #0
 8002bae:	2107      	movs	r1, #7
 8002bb0:	9102      	str	r1, [sp, #8]
 8002bb2:	9201      	str	r2, [sp, #4]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	462b      	mov	r3, r5
 8002bb8:	4622      	mov	r2, r4
 8002bba:	4601      	mov	r1, r0
 8002bbc:	4884      	ldr	r0, [pc, #528]	@ (8002dd0 <PIN_Setup+0x528>)
 8002bbe:	f7ff fcff 	bl	80025c0 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous)){
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7a1b      	ldrb	r3, [r3, #8]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d128      	bne.n	8002c1e <PIN_Setup+0x376>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	7adb      	ldrb	r3, [r3, #11]
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d10f      	bne.n	8002bf6 <PIN_Setup+0x34e>
 8002bd6:	2004      	movs	r0, #4
 8002bd8:	2402      	movs	r4, #2
 8002bda:	2500      	movs	r5, #0
 8002bdc:	2302      	movs	r3, #2
 8002bde:	2200      	movs	r2, #0
 8002be0:	2107      	movs	r1, #7
 8002be2:	9102      	str	r1, [sp, #8]
 8002be4:	9201      	str	r2, [sp, #4]
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	462b      	mov	r3, r5
 8002bea:	4622      	mov	r2, r4
 8002bec:	4601      	mov	r1, r0
 8002bee:	4879      	ldr	r0, [pc, #484]	@ (8002dd4 <PIN_Setup+0x52c>)
 8002bf0:	f7ff fce6 	bl	80025c0 <GPIO_Pin_Init>
 8002bf4:	e013      	b.n	8002c1e <PIN_Setup+0x376>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	7adb      	ldrb	r3, [r3, #11]
 8002bfa:	2207      	movs	r2, #7
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d10e      	bne.n	8002c1e <PIN_Setup+0x376>
 8002c00:	2007      	movs	r0, #7
 8002c02:	2402      	movs	r4, #2
 8002c04:	2500      	movs	r5, #0
 8002c06:	2302      	movs	r3, #2
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2107      	movs	r1, #7
 8002c0c:	9102      	str	r1, [sp, #8]
 8002c0e:	9201      	str	r2, [sp, #4]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	462b      	mov	r3, r5
 8002c14:	4622      	mov	r2, r4
 8002c16:	4601      	mov	r1, r0
 8002c18:	486e      	ldr	r0, [pc, #440]	@ (8002dd4 <PIN_Setup+0x52c>)
 8002c1a:	f7ff fcd1 	bl	80025c0 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7bdb      	ldrb	r3, [r3, #15]
 8002c22:	2200      	movs	r2, #0
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d105      	bne.n	8002c34 <PIN_Setup+0x38c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7bdb      	ldrb	r3, [r3, #15]
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	f040 8287 	bne.w	8003142 <PIN_Setup+0x89a>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7bdb      	ldrb	r3, [r3, #15]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d128      	bne.n	8002c90 <PIN_Setup+0x3e8>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7adb      	ldrb	r3, [r3, #11]
 8002c42:	2200      	movs	r2, #0
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d10f      	bne.n	8002c68 <PIN_Setup+0x3c0>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002c48:	2000      	movs	r0, #0
 8002c4a:	2402      	movs	r4, #2
 8002c4c:	2500      	movs	r5, #0
 8002c4e:	2302      	movs	r3, #2
 8002c50:	2200      	movs	r2, #0
 8002c52:	2107      	movs	r1, #7
 8002c54:	9102      	str	r1, [sp, #8]
 8002c56:	9201      	str	r2, [sp, #4]
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	462b      	mov	r3, r5
 8002c5c:	4622      	mov	r2, r4
 8002c5e:	4601      	mov	r1, r0
 8002c60:	485c      	ldr	r0, [pc, #368]	@ (8002dd4 <PIN_Setup+0x52c>)
 8002c62:	f7ff fcad 	bl	80025c0 <GPIO_Pin_Init>
 8002c66:	e013      	b.n	8002c90 <PIN_Setup+0x3e8>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7adb      	ldrb	r3, [r3, #11]
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d10e      	bne.n	8002c90 <PIN_Setup+0x3e8>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002c72:	2003      	movs	r0, #3
 8002c74:	2402      	movs	r4, #2
 8002c76:	2500      	movs	r5, #0
 8002c78:	2302      	movs	r3, #2
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2107      	movs	r1, #7
 8002c7e:	9102      	str	r1, [sp, #8]
 8002c80:	9201      	str	r2, [sp, #4]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	462b      	mov	r3, r5
 8002c86:	4622      	mov	r2, r4
 8002c88:	4601      	mov	r1, r0
 8002c8a:	4851      	ldr	r0, [pc, #324]	@ (8002dd0 <PIN_Setup+0x528>)
 8002c8c:	f7ff fc98 	bl	80025c0 <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7bdb      	ldrb	r3, [r3, #15]
 8002c94:	2202      	movs	r2, #2
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d005      	beq.n	8002ca6 <PIN_Setup+0x3fe>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	7bdb      	ldrb	r3, [r3, #15]
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	f040 824e 	bne.w	8003142 <PIN_Setup+0x89a>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	7adb      	ldrb	r3, [r3, #11]
 8002caa:	2201      	movs	r2, #1
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d10f      	bne.n	8002cd0 <PIN_Setup+0x428>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	2402      	movs	r4, #2
 8002cb4:	2500      	movs	r5, #0
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2107      	movs	r1, #7
 8002cbc:	9102      	str	r1, [sp, #8]
 8002cbe:	9201      	str	r2, [sp, #4]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	462b      	mov	r3, r5
 8002cc4:	4622      	mov	r2, r4
 8002cc6:	4601      	mov	r1, r0
 8002cc8:	4842      	ldr	r0, [pc, #264]	@ (8002dd4 <PIN_Setup+0x52c>)
 8002cca:	f7ff fc79 	bl	80025c0 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8002cce:	e238      	b.n	8003142 <PIN_Setup+0x89a>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	7adb      	ldrb	r3, [r3, #11]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	f040 8233 	bne.w	8003142 <PIN_Setup+0x89a>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002cdc:	2004      	movs	r0, #4
 8002cde:	2402      	movs	r4, #2
 8002ce0:	2500      	movs	r5, #0
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2107      	movs	r1, #7
 8002ce8:	9102      	str	r1, [sp, #8]
 8002cea:	9201      	str	r2, [sp, #4]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	462b      	mov	r3, r5
 8002cf0:	4622      	mov	r2, r4
 8002cf2:	4601      	mov	r1, r0
 8002cf4:	4836      	ldr	r0, [pc, #216]	@ (8002dd0 <PIN_Setup+0x528>)
 8002cf6:	f7ff fc63 	bl	80025c0 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8002cfa:	e222      	b.n	8003142 <PIN_Setup+0x89a>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7a1b      	ldrb	r3, [r3, #8]
 8002d00:	2206      	movs	r2, #6
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00a      	beq.n	8002d1c <PIN_Setup+0x474>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	7a1b      	ldrb	r3, [r3, #8]
 8002d0a:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d005      	beq.n	8002d1c <PIN_Setup+0x474>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7a1b      	ldrb	r3, [r3, #8]
 8002d14:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8002d16:	4293      	cmp	r3, r2
 8002d18:	f040 8216 	bne.w	8003148 <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7a5b      	ldrb	r3, [r3, #9]
 8002d20:	2202      	movs	r2, #2
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d10f      	bne.n	8002d46 <PIN_Setup+0x49e>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002d26:	2002      	movs	r0, #2
 8002d28:	2402      	movs	r4, #2
 8002d2a:	2500      	movs	r5, #0
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2107      	movs	r1, #7
 8002d32:	9102      	str	r1, [sp, #8]
 8002d34:	9201      	str	r2, [sp, #4]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	462b      	mov	r3, r5
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	4601      	mov	r1, r0
 8002d3e:	4825      	ldr	r0, [pc, #148]	@ (8002dd4 <PIN_Setup+0x52c>)
 8002d40:	f7ff fc3e 	bl	80025c0 <GPIO_Pin_Init>
 8002d44:	e013      	b.n	8002d6e <PIN_Setup+0x4c6>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	7a5b      	ldrb	r3, [r3, #9]
 8002d4a:	2205      	movs	r2, #5
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d10e      	bne.n	8002d6e <PIN_Setup+0x4c6>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002d50:	2005      	movs	r0, #5
 8002d52:	2402      	movs	r4, #2
 8002d54:	2500      	movs	r5, #0
 8002d56:	2302      	movs	r3, #2
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2107      	movs	r1, #7
 8002d5c:	9102      	str	r1, [sp, #8]
 8002d5e:	9201      	str	r2, [sp, #4]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	462b      	mov	r3, r5
 8002d64:	4622      	mov	r2, r4
 8002d66:	4601      	mov	r1, r0
 8002d68:	4819      	ldr	r0, [pc, #100]	@ (8002dd0 <PIN_Setup+0x528>)
 8002d6a:	f7ff fc29 	bl	80025c0 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	7a1b      	ldrb	r3, [r3, #8]
 8002d72:	2207      	movs	r2, #7
 8002d74:	4293      	cmp	r3, r2
 8002d76:	f040 81e7 	bne.w	8003148 <PIN_Setup+0x8a0>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	7adb      	ldrb	r3, [r3, #11]
 8002d7e:	2204      	movs	r2, #4
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10f      	bne.n	8002da4 <PIN_Setup+0x4fc>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002d84:	2004      	movs	r0, #4
 8002d86:	2402      	movs	r4, #2
 8002d88:	2500      	movs	r5, #0
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2107      	movs	r1, #7
 8002d90:	9102      	str	r1, [sp, #8]
 8002d92:	9201      	str	r2, [sp, #4]
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	462b      	mov	r3, r5
 8002d98:	4622      	mov	r2, r4
 8002d9a:	4601      	mov	r1, r0
 8002d9c:	480d      	ldr	r0, [pc, #52]	@ (8002dd4 <PIN_Setup+0x52c>)
 8002d9e:	f7ff fc0f 	bl	80025c0 <GPIO_Pin_Init>
}
 8002da2:	e1d1      	b.n	8003148 <PIN_Setup+0x8a0>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7adb      	ldrb	r3, [r3, #11]
 8002da8:	2207      	movs	r2, #7
 8002daa:	4293      	cmp	r3, r2
 8002dac:	f040 81cc 	bne.w	8003148 <PIN_Setup+0x8a0>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8002db0:	2007      	movs	r0, #7
 8002db2:	2402      	movs	r4, #2
 8002db4:	2500      	movs	r5, #0
 8002db6:	2302      	movs	r3, #2
 8002db8:	2200      	movs	r2, #0
 8002dba:	2107      	movs	r1, #7
 8002dbc:	9102      	str	r1, [sp, #8]
 8002dbe:	9201      	str	r2, [sp, #4]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	462b      	mov	r3, r5
 8002dc4:	4622      	mov	r2, r4
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <PIN_Setup+0x52c>)
 8002dca:	f7ff fbf9 	bl	80025c0 <GPIO_Pin_Init>
}
 8002dce:	e1bb      	b.n	8003148 <PIN_Setup+0x8a0>
 8002dd0:	40020c00 	.word	0x40020c00
 8002dd4:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4aaa      	ldr	r2, [pc, #680]	@ (8003088 <PIN_Setup+0x7e0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	f040 81b2 	bne.w	8003148 <PIN_Setup+0x8a0>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7a1b      	ldrb	r3, [r3, #8]
 8002de8:	2201      	movs	r2, #1
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00f      	beq.n	8002e0e <PIN_Setup+0x566>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	7a1b      	ldrb	r3, [r3, #8]
 8002df2:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00a      	beq.n	8002e0e <PIN_Setup+0x566>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7a1b      	ldrb	r3, [r3, #8]
 8002dfc:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d005      	beq.n	8002e0e <PIN_Setup+0x566>
		   (config->mode == USART_Configuration.Mode.LIN) )
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	7a1b      	ldrb	r3, [r3, #8]
 8002e06:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	f040 8119 	bne.w	8003040 <PIN_Setup+0x798>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	7a5b      	ldrb	r3, [r3, #9]
 8002e12:	220b      	movs	r2, #11
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d10f      	bne.n	8002e38 <PIN_Setup+0x590>
 8002e18:	200b      	movs	r0, #11
 8002e1a:	2402      	movs	r4, #2
 8002e1c:	2500      	movs	r5, #0
 8002e1e:	2302      	movs	r3, #2
 8002e20:	2200      	movs	r2, #0
 8002e22:	2107      	movs	r1, #7
 8002e24:	9102      	str	r1, [sp, #8]
 8002e26:	9201      	str	r2, [sp, #4]
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	462b      	mov	r3, r5
 8002e2c:	4622      	mov	r2, r4
 8002e2e:	4601      	mov	r1, r0
 8002e30:	4896      	ldr	r0, [pc, #600]	@ (800308c <PIN_Setup+0x7e4>)
 8002e32:	f7ff fbc5 	bl	80025c0 <GPIO_Pin_Init>
 8002e36:	e028      	b.n	8002e8a <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7a5b      	ldrb	r3, [r3, #9]
 8002e3c:	220a      	movs	r2, #10
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d10f      	bne.n	8002e62 <PIN_Setup+0x5ba>
 8002e42:	200a      	movs	r0, #10
 8002e44:	2402      	movs	r4, #2
 8002e46:	2500      	movs	r5, #0
 8002e48:	2302      	movs	r3, #2
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2107      	movs	r1, #7
 8002e4e:	9102      	str	r1, [sp, #8]
 8002e50:	9201      	str	r2, [sp, #4]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	462b      	mov	r3, r5
 8002e56:	4622      	mov	r2, r4
 8002e58:	4601      	mov	r1, r0
 8002e5a:	488d      	ldr	r0, [pc, #564]	@ (8003090 <PIN_Setup+0x7e8>)
 8002e5c:	f7ff fbb0 	bl	80025c0 <GPIO_Pin_Init>
 8002e60:	e013      	b.n	8002e8a <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7a5b      	ldrb	r3, [r3, #9]
 8002e66:	2208      	movs	r2, #8
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d10e      	bne.n	8002e8a <PIN_Setup+0x5e2>
 8002e6c:	2008      	movs	r0, #8
 8002e6e:	2402      	movs	r4, #2
 8002e70:	2500      	movs	r5, #0
 8002e72:	2302      	movs	r3, #2
 8002e74:	2200      	movs	r2, #0
 8002e76:	2107      	movs	r1, #7
 8002e78:	9102      	str	r1, [sp, #8]
 8002e7a:	9201      	str	r2, [sp, #4]
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	462b      	mov	r3, r5
 8002e80:	4622      	mov	r2, r4
 8002e82:	4601      	mov	r1, r0
 8002e84:	4882      	ldr	r0, [pc, #520]	@ (8003090 <PIN_Setup+0x7e8>)
 8002e86:	f7ff fb9b 	bl	80025c0 <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	7a9b      	ldrb	r3, [r3, #10]
 8002e8e:	220a      	movs	r2, #10
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d10f      	bne.n	8002eb4 <PIN_Setup+0x60c>
 8002e94:	200a      	movs	r0, #10
 8002e96:	2402      	movs	r4, #2
 8002e98:	2500      	movs	r5, #0
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2107      	movs	r1, #7
 8002ea0:	9102      	str	r1, [sp, #8]
 8002ea2:	9201      	str	r2, [sp, #4]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	462b      	mov	r3, r5
 8002ea8:	4622      	mov	r2, r4
 8002eaa:	4601      	mov	r1, r0
 8002eac:	4877      	ldr	r0, [pc, #476]	@ (800308c <PIN_Setup+0x7e4>)
 8002eae:	f7ff fb87 	bl	80025c0 <GPIO_Pin_Init>
 8002eb2:	e028      	b.n	8002f06 <PIN_Setup+0x65e>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	7a9b      	ldrb	r3, [r3, #10]
 8002eb8:	220b      	movs	r2, #11
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d10f      	bne.n	8002ede <PIN_Setup+0x636>
 8002ebe:	200b      	movs	r0, #11
 8002ec0:	2402      	movs	r4, #2
 8002ec2:	2500      	movs	r5, #0
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2107      	movs	r1, #7
 8002eca:	9102      	str	r1, [sp, #8]
 8002ecc:	9201      	str	r2, [sp, #4]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	462b      	mov	r3, r5
 8002ed2:	4622      	mov	r2, r4
 8002ed4:	4601      	mov	r1, r0
 8002ed6:	486e      	ldr	r0, [pc, #440]	@ (8003090 <PIN_Setup+0x7e8>)
 8002ed8:	f7ff fb72 	bl	80025c0 <GPIO_Pin_Init>
 8002edc:	e013      	b.n	8002f06 <PIN_Setup+0x65e>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	7a5b      	ldrb	r3, [r3, #9]
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d10e      	bne.n	8002f06 <PIN_Setup+0x65e>
 8002ee8:	2008      	movs	r0, #8
 8002eea:	2402      	movs	r4, #2
 8002eec:	2500      	movs	r5, #0
 8002eee:	2302      	movs	r3, #2
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2107      	movs	r1, #7
 8002ef4:	9102      	str	r1, [sp, #8]
 8002ef6:	9201      	str	r2, [sp, #4]
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	462b      	mov	r3, r5
 8002efc:	4622      	mov	r2, r4
 8002efe:	4601      	mov	r1, r0
 8002f00:	4863      	ldr	r0, [pc, #396]	@ (8003090 <PIN_Setup+0x7e8>)
 8002f02:	f7ff fb5d 	bl	80025c0 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7a1b      	ldrb	r3, [r3, #8]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d128      	bne.n	8002f62 <PIN_Setup+0x6ba>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7adb      	ldrb	r3, [r3, #11]
 8002f14:	220c      	movs	r2, #12
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10f      	bne.n	8002f3a <PIN_Setup+0x692>
 8002f1a:	200c      	movs	r0, #12
 8002f1c:	2402      	movs	r4, #2
 8002f1e:	2500      	movs	r5, #0
 8002f20:	2302      	movs	r3, #2
 8002f22:	2200      	movs	r2, #0
 8002f24:	2107      	movs	r1, #7
 8002f26:	9102      	str	r1, [sp, #8]
 8002f28:	9201      	str	r2, [sp, #4]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	462b      	mov	r3, r5
 8002f2e:	4622      	mov	r2, r4
 8002f30:	4601      	mov	r1, r0
 8002f32:	4857      	ldr	r0, [pc, #348]	@ (8003090 <PIN_Setup+0x7e8>)
 8002f34:	f7ff fb44 	bl	80025c0 <GPIO_Pin_Init>
 8002f38:	e013      	b.n	8002f62 <PIN_Setup+0x6ba>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	7adb      	ldrb	r3, [r3, #11]
 8002f3e:	220a      	movs	r2, #10
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d10e      	bne.n	8002f62 <PIN_Setup+0x6ba>
 8002f44:	200a      	movs	r0, #10
 8002f46:	2402      	movs	r4, #2
 8002f48:	2500      	movs	r5, #0
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2107      	movs	r1, #7
 8002f50:	9102      	str	r1, [sp, #8]
 8002f52:	9201      	str	r2, [sp, #4]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	462b      	mov	r3, r5
 8002f58:	4622      	mov	r2, r4
 8002f5a:	4601      	mov	r1, r0
 8002f5c:	484d      	ldr	r0, [pc, #308]	@ (8003094 <PIN_Setup+0x7ec>)
 8002f5e:	f7ff fb2f 	bl	80025c0 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	7bdb      	ldrb	r3, [r3, #15]
 8002f66:	2200      	movs	r2, #0
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	f000 80ec 	beq.w	8003146 <PIN_Setup+0x89e>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7bdb      	ldrb	r3, [r3, #15]
 8002f72:	2201      	movs	r2, #1
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d004      	beq.n	8002f82 <PIN_Setup+0x6da>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	7bdb      	ldrb	r3, [r3, #15]
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d128      	bne.n	8002fd4 <PIN_Setup+0x72c>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	7adb      	ldrb	r3, [r3, #11]
 8002f86:	2200      	movs	r2, #0
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d10f      	bne.n	8002fac <PIN_Setup+0x704>
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	2402      	movs	r4, #2
 8002f90:	2500      	movs	r5, #0
 8002f92:	2302      	movs	r3, #2
 8002f94:	2200      	movs	r2, #0
 8002f96:	2107      	movs	r1, #7
 8002f98:	9102      	str	r1, [sp, #8]
 8002f9a:	9201      	str	r2, [sp, #4]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	462b      	mov	r3, r5
 8002fa0:	4622      	mov	r2, r4
 8002fa2:	4601      	mov	r1, r0
 8002fa4:	483a      	ldr	r0, [pc, #232]	@ (8003090 <PIN_Setup+0x7e8>)
 8002fa6:	f7ff fb0b 	bl	80025c0 <GPIO_Pin_Init>
 8002faa:	e013      	b.n	8002fd4 <PIN_Setup+0x72c>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	7adb      	ldrb	r3, [r3, #11]
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10e      	bne.n	8002fd4 <PIN_Setup+0x72c>
 8002fb6:	2003      	movs	r0, #3
 8002fb8:	2402      	movs	r4, #2
 8002fba:	2500      	movs	r5, #0
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2107      	movs	r1, #7
 8002fc2:	9102      	str	r1, [sp, #8]
 8002fc4:	9201      	str	r2, [sp, #4]
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	462b      	mov	r3, r5
 8002fca:	4622      	mov	r2, r4
 8002fcc:	4601      	mov	r1, r0
 8002fce:	4831      	ldr	r0, [pc, #196]	@ (8003094 <PIN_Setup+0x7ec>)
 8002fd0:	f7ff faf6 	bl	80025c0 <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	7bdb      	ldrb	r3, [r3, #15]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d005      	beq.n	8002fea <PIN_Setup+0x742>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7bdb      	ldrb	r3, [r3, #15]
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	f040 80ae 	bne.w	8003146 <PIN_Setup+0x89e>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7adb      	ldrb	r3, [r3, #11]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d10f      	bne.n	8003014 <PIN_Setup+0x76c>
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	2402      	movs	r4, #2
 8002ff8:	2500      	movs	r5, #0
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2107      	movs	r1, #7
 8003000:	9102      	str	r1, [sp, #8]
 8003002:	9201      	str	r2, [sp, #4]
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	462b      	mov	r3, r5
 8003008:	4622      	mov	r2, r4
 800300a:	4601      	mov	r1, r0
 800300c:	4820      	ldr	r0, [pc, #128]	@ (8003090 <PIN_Setup+0x7e8>)
 800300e:	f7ff fad7 	bl	80025c0 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003012:	e098      	b.n	8003146 <PIN_Setup+0x89e>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	7adb      	ldrb	r3, [r3, #11]
 8003018:	2204      	movs	r2, #4
 800301a:	4293      	cmp	r3, r2
 800301c:	f040 8093 	bne.w	8003146 <PIN_Setup+0x89e>
 8003020:	2004      	movs	r0, #4
 8003022:	2402      	movs	r4, #2
 8003024:	2500      	movs	r5, #0
 8003026:	2302      	movs	r3, #2
 8003028:	2200      	movs	r2, #0
 800302a:	2107      	movs	r1, #7
 800302c:	9102      	str	r1, [sp, #8]
 800302e:	9201      	str	r2, [sp, #4]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	462b      	mov	r3, r5
 8003034:	4622      	mov	r2, r4
 8003036:	4601      	mov	r1, r0
 8003038:	4816      	ldr	r0, [pc, #88]	@ (8003094 <PIN_Setup+0x7ec>)
 800303a:	f7ff fac1 	bl	80025c0 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 800303e:	e082      	b.n	8003146 <PIN_Setup+0x89e>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7a1b      	ldrb	r3, [r3, #8]
 8003044:	2206      	movs	r2, #6
 8003046:	4293      	cmp	r3, r2
 8003048:	d009      	beq.n	800305e <PIN_Setup+0x7b6>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7a1b      	ldrb	r3, [r3, #8]
 800304e:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003050:	4293      	cmp	r3, r2
 8003052:	d004      	beq.n	800305e <PIN_Setup+0x7b6>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	7a1b      	ldrb	r3, [r3, #8]
 8003058:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 800305a:	4293      	cmp	r3, r2
 800305c:	d174      	bne.n	8003148 <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7a5b      	ldrb	r3, [r3, #9]
 8003062:	220b      	movs	r2, #11
 8003064:	4293      	cmp	r3, r2
 8003066:	d117      	bne.n	8003098 <PIN_Setup+0x7f0>
 8003068:	200b      	movs	r0, #11
 800306a:	2402      	movs	r4, #2
 800306c:	2500      	movs	r5, #0
 800306e:	2302      	movs	r3, #2
 8003070:	2200      	movs	r2, #0
 8003072:	2107      	movs	r1, #7
 8003074:	9102      	str	r1, [sp, #8]
 8003076:	9201      	str	r2, [sp, #4]
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	462b      	mov	r3, r5
 800307c:	4622      	mov	r2, r4
 800307e:	4601      	mov	r1, r0
 8003080:	4802      	ldr	r0, [pc, #8]	@ (800308c <PIN_Setup+0x7e4>)
 8003082:	f7ff fa9d 	bl	80025c0 <GPIO_Pin_Init>
 8003086:	e030      	b.n	80030ea <PIN_Setup+0x842>
 8003088:	40004800 	.word	0x40004800
 800308c:	40020000 	.word	0x40020000
 8003090:	40020400 	.word	0x40020400
 8003094:	40020c00 	.word	0x40020c00
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	7a5b      	ldrb	r3, [r3, #9]
 800309c:	220a      	movs	r2, #10
 800309e:	4293      	cmp	r3, r2
 80030a0:	d10f      	bne.n	80030c2 <PIN_Setup+0x81a>
 80030a2:	200a      	movs	r0, #10
 80030a4:	2402      	movs	r4, #2
 80030a6:	2500      	movs	r5, #0
 80030a8:	2302      	movs	r3, #2
 80030aa:	2200      	movs	r2, #0
 80030ac:	2107      	movs	r1, #7
 80030ae:	9102      	str	r1, [sp, #8]
 80030b0:	9201      	str	r2, [sp, #4]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	462b      	mov	r3, r5
 80030b6:	4622      	mov	r2, r4
 80030b8:	4601      	mov	r1, r0
 80030ba:	4825      	ldr	r0, [pc, #148]	@ (8003150 <PIN_Setup+0x8a8>)
 80030bc:	f7ff fa80 	bl	80025c0 <GPIO_Pin_Init>
 80030c0:	e013      	b.n	80030ea <PIN_Setup+0x842>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7a5b      	ldrb	r3, [r3, #9]
 80030c6:	2208      	movs	r2, #8
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d10e      	bne.n	80030ea <PIN_Setup+0x842>
 80030cc:	2008      	movs	r0, #8
 80030ce:	2402      	movs	r4, #2
 80030d0:	2500      	movs	r5, #0
 80030d2:	2302      	movs	r3, #2
 80030d4:	2200      	movs	r2, #0
 80030d6:	2107      	movs	r1, #7
 80030d8:	9102      	str	r1, [sp, #8]
 80030da:	9201      	str	r2, [sp, #4]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	462b      	mov	r3, r5
 80030e0:	4622      	mov	r2, r4
 80030e2:	4601      	mov	r1, r0
 80030e4:	481a      	ldr	r0, [pc, #104]	@ (8003150 <PIN_Setup+0x8a8>)
 80030e6:	f7ff fa6b 	bl	80025c0 <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7adb      	ldrb	r3, [r3, #11]
 80030ee:	220c      	movs	r2, #12
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d10f      	bne.n	8003114 <PIN_Setup+0x86c>
 80030f4:	200c      	movs	r0, #12
 80030f6:	2402      	movs	r4, #2
 80030f8:	2500      	movs	r5, #0
 80030fa:	2302      	movs	r3, #2
 80030fc:	2200      	movs	r2, #0
 80030fe:	2107      	movs	r1, #7
 8003100:	9102      	str	r1, [sp, #8]
 8003102:	9201      	str	r2, [sp, #4]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	462b      	mov	r3, r5
 8003108:	4622      	mov	r2, r4
 800310a:	4601      	mov	r1, r0
 800310c:	4810      	ldr	r0, [pc, #64]	@ (8003150 <PIN_Setup+0x8a8>)
 800310e:	f7ff fa57 	bl	80025c0 <GPIO_Pin_Init>
}
 8003112:	e019      	b.n	8003148 <PIN_Setup+0x8a0>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	7adb      	ldrb	r3, [r3, #11]
 8003118:	220a      	movs	r2, #10
 800311a:	4293      	cmp	r3, r2
 800311c:	d114      	bne.n	8003148 <PIN_Setup+0x8a0>
 800311e:	200a      	movs	r0, #10
 8003120:	2402      	movs	r4, #2
 8003122:	2500      	movs	r5, #0
 8003124:	2302      	movs	r3, #2
 8003126:	2200      	movs	r2, #0
 8003128:	2107      	movs	r1, #7
 800312a:	9102      	str	r1, [sp, #8]
 800312c:	9201      	str	r2, [sp, #4]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	462b      	mov	r3, r5
 8003132:	4622      	mov	r2, r4
 8003134:	4601      	mov	r1, r0
 8003136:	4807      	ldr	r0, [pc, #28]	@ (8003154 <PIN_Setup+0x8ac>)
 8003138:	f7ff fa42 	bl	80025c0 <GPIO_Pin_Init>
}
 800313c:	e004      	b.n	8003148 <PIN_Setup+0x8a0>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 800313e:	bf00      	nop
 8003140:	e002      	b.n	8003148 <PIN_Setup+0x8a0>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003142:	bf00      	nop
 8003144:	e000      	b.n	8003148 <PIN_Setup+0x8a0>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003146:	bf00      	nop
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bdb0      	pop	{r4, r5, r7, pc}
 8003150:	40020400 	.word	0x40020400
 8003154:	40020c00 	.word	0x40020c00

08003158 <USART_Init>:

int8_t USART_Init(USART_Config *config)
{
 8003158:	b5b0      	push	{r4, r5, r7, lr}
 800315a:	b08a      	sub	sp, #40	@ 0x28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff fb3d 	bl	80027e0 <USART_Clock_Enable>
	PIN_Setup(config);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff fb9e 	bl	80028a8 <PIN_Setup>

	usart_dma_instance_number = Get_USART_Instance_Number(config);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff faf5 	bl	800275c <Get_USART_Instance_Number>
 8003172:	4603      	mov	r3, r0
 8003174:	461a      	mov	r2, r3
 8003176:	4ba0      	ldr	r3, [pc, #640]	@ (80033f8 <USART_Init+0x2a0>)
 8003178:	701a      	strb	r2, [r3, #0]
	if(usart_dma_instance_number == -1) return -1;
 800317a:	4b9f      	ldr	r3, [pc, #636]	@ (80033f8 <USART_Init+0x2a0>)
 800317c:	f993 3000 	ldrsb.w	r3, [r3]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d102      	bne.n	800318c <USART_Init+0x34>
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
 800318a:	e3a4      	b.n	80038d6 <USART_Init+0x77e>

//	USART1 -> CR1 |= USART_CR1_UE;

	double brr = (168000000.0/ (16.0 * 2.0 * (double)(config->baudrate)));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd f95b 	bl	800044c <__aeabi_ui2d>
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	4b98      	ldr	r3, [pc, #608]	@ (80033fc <USART_Init+0x2a4>)
 800319c:	f7fd f9d0 	bl	8000540 <__aeabi_dmul>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	a192      	add	r1, pc, #584	@ (adr r1, 80033f0 <USART_Init+0x298>)
 80031a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031aa:	f7fd faf3 	bl	8000794 <__aeabi_ddiv>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double div_frac, mantissa;
	separateFractionAndIntegral(brr, &div_frac, &mantissa);
 80031b6:	f107 0208 	add.w	r2, r7, #8
 80031ba:	f107 0310 	add.w	r3, r7, #16
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	ed97 0b08 	vldr	d0, [r7, #32]
 80031c6:	f7ff faa3 	bl	8002710 <separateFractionAndIntegral>

	int div_frac_1 = (int)(ceil(div_frac*16.0));
 80031ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	4b8b      	ldr	r3, [pc, #556]	@ (8003400 <USART_Init+0x2a8>)
 80031d4:	f7fd f9b4 	bl	8000540 <__aeabi_dmul>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	ec43 2b17 	vmov	d7, r2, r3
 80031e0:	eeb0 0a47 	vmov.f32	s0, s14
 80031e4:	eef0 0a67 	vmov.f32	s1, s15
 80031e8:	f001 f92e 	bl	8004448 <ceil>
 80031ec:	ec53 2b10 	vmov	r2, r3, d0
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	f7fd fc3e 	bl	8000a74 <__aeabi_d2iz>
 80031f8:	4603      	mov	r3, r0
 80031fa:	61fb      	str	r3, [r7, #28]
	int mantissa_1 = (int)(ceil(mantissa));
 80031fc:	ed97 7b02 	vldr	d7, [r7, #8]
 8003200:	eeb0 0a47 	vmov.f32	s0, s14
 8003204:	eef0 0a67 	vmov.f32	s1, s15
 8003208:	f001 f91e 	bl	8004448 <ceil>
 800320c:	ec53 2b10 	vmov	r2, r3, d0
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	f7fd fc2e 	bl	8000a74 <__aeabi_d2iz>
 8003218:	4603      	mov	r3, r0
 800321a:	61bb      	str	r3, [r7, #24]

	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	011a      	lsls	r2, r3, #4
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	7c9b      	ldrb	r3, [r3, #18]
 8003234:	4619      	mov	r1, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	60da      	str	r2, [r3, #12]

	if(config -> interrupt == USART_Configuration.Interrupt_Type.Disable)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	7b9b      	ldrb	r3, [r3, #14]
 8003242:	461a      	mov	r2, r3
 8003244:	2300      	movs	r3, #0
 8003246:	429a      	cmp	r2, r3
 8003248:	d11a      	bne.n	8003280 <USART_Init+0x128>
	{
		config -> Port -> CR1 &= ~(USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE | USART_CR1_RXNEIE | USART_CR1_IDLEIE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8003258:	60da      	str	r2, [r3, #12]
		config -> Port -> CR2 &= ~(USART_CR2_LBDIE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003268:	611a      	str	r2, [r3, #16]
		config -> Port -> CR3 &= ~(USART_CR3_CTSIE | USART_CR3_EIE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	6153      	str	r3, [r2, #20]
 800327e:	e0d3      	b.n	8003428 <USART_Init+0x2d0>
	}
	else
	{
		if((config->interrupt & USART_Configuration.Interrupt_Type.Parity_Enable) == USART_Configuration.Interrupt_Type.Parity_Enable)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7b9b      	ldrb	r3, [r3, #14]
 8003284:	461a      	mov	r2, r3
 8003286:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800328a:	4013      	ands	r3, r2
 800328c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003290:	4293      	cmp	r3, r2
 8003292:	d107      	bne.n	80032a4 <USART_Init+0x14c>
		{
			config -> Port -> CR1 |= USART_CR1_PEIE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032a2:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmit_Empty_Enable) == USART_Configuration.Interrupt_Type.Transmit_Empty_Enable)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	7b9b      	ldrb	r3, [r3, #14]
 80032a8:	461a      	mov	r2, r3
 80032aa:	2380      	movs	r3, #128	@ 0x80
 80032ac:	4013      	ands	r3, r2
 80032ae:	2280      	movs	r2, #128	@ 0x80
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d107      	bne.n	80032c4 <USART_Init+0x16c>
		{
			config -> Port -> CR1 |= USART_CR1_TXEIE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032c2:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Transmission_Complete_Enable) == USART_Configuration.Interrupt_Type.Transmission_Complete_Enable)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	7b9b      	ldrb	r3, [r3, #14]
 80032c8:	461a      	mov	r2, r3
 80032ca:	2340      	movs	r3, #64	@ 0x40
 80032cc:	4013      	ands	r3, r2
 80032ce:	2240      	movs	r2, #64	@ 0x40
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d107      	bne.n	80032e4 <USART_Init+0x18c>
		{
			config -> Port -> CR1 |= USART_CR1_TCIE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032e2:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Receiver_Empty_Enable) == USART_Configuration.Interrupt_Type.Receiver_Empty_Enable)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	7b9b      	ldrb	r3, [r3, #14]
 80032e8:	461a      	mov	r2, r3
 80032ea:	2320      	movs	r3, #32
 80032ec:	4013      	ands	r3, r2
 80032ee:	2220      	movs	r2, #32
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d107      	bne.n	8003304 <USART_Init+0x1ac>
		{
			config -> Port -> CR1 |= USART_CR1_RXNEIE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0220 	orr.w	r2, r2, #32
 8003302:	60da      	str	r2, [r3, #12]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.IDLE_Enable) == USART_Configuration.Interrupt_Type.IDLE_Enable)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	7b9b      	ldrb	r3, [r3, #14]
 8003308:	461a      	mov	r2, r3
 800330a:	2310      	movs	r3, #16
 800330c:	4013      	ands	r3, r2
 800330e:	2210      	movs	r2, #16
 8003310:	4293      	cmp	r3, r2
 8003312:	d107      	bne.n	8003324 <USART_Init+0x1cc>
		{
			config -> Port -> CR1 |= USART_CR1_IDLEIE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0210 	orr.w	r2, r2, #16
 8003322:	60da      	str	r2, [r3, #12]
		}

		if((config->interrupt & USART_Configuration.Interrupt_Type.LIN_Break_Detection_Enable) == USART_Configuration.Interrupt_Type.LIN_Break_Detection_Enable)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	7b9b      	ldrb	r3, [r3, #14]
 8003328:	461a      	mov	r2, r3
 800332a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800332e:	4013      	ands	r3, r2
 8003330:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003334:	4293      	cmp	r3, r2
 8003336:	d107      	bne.n	8003348 <USART_Init+0x1f0>
		{
			config -> Port -> CR2 |= USART_CR2_LBDIE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003346:	611a      	str	r2, [r3, #16]
		}

		if((config->interrupt & USART_Configuration.Interrupt_Type.CTS_Enable) == USART_Configuration.Interrupt_Type.CTS_Enable)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	7b9b      	ldrb	r3, [r3, #14]
 800334c:	461a      	mov	r2, r3
 800334e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003352:	4013      	ands	r3, r2
 8003354:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003358:	4293      	cmp	r3, r2
 800335a:	d107      	bne.n	800336c <USART_Init+0x214>
		{
			config -> Port -> CR3 |= USART_CR3_CTSIE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800336a:	615a      	str	r2, [r3, #20]
		}
		if((config->interrupt & USART_Configuration.Interrupt_Type.Error_Enable) == USART_Configuration.Interrupt_Type.Error_Enable)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	7b9b      	ldrb	r3, [r3, #14]
 8003370:	461a      	mov	r2, r3
 8003372:	2301      	movs	r3, #1
 8003374:	4013      	ands	r3, r2
 8003376:	2201      	movs	r2, #1
 8003378:	4293      	cmp	r3, r2
 800337a:	d107      	bne.n	800338c <USART_Init+0x234>
		{
			config -> Port -> CR3 |= USART_CR3_EIE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695a      	ldr	r2, [r3, #20]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	615a      	str	r2, [r3, #20]
		}

		if(config -> Port == USART1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1c      	ldr	r2, [pc, #112]	@ (8003404 <USART_Init+0x2ac>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d107      	bne.n	80033a6 <USART_Init+0x24e>
		{
			NVIC_SetPriority(USART1_IRQn, 0);
 8003396:	2100      	movs	r1, #0
 8003398:	2025      	movs	r0, #37	@ 0x25
 800339a:	f7ff f98f 	bl	80026bc <__NVIC_SetPriority>
			NVIC_EnableIRQ(USART1_IRQn);
 800339e:	2025      	movs	r0, #37	@ 0x25
 80033a0:	f7ff f96e 	bl	8002680 <__NVIC_EnableIRQ>
 80033a4:	e040      	b.n	8003428 <USART_Init+0x2d0>
		}
		else if(config -> Port == USART2)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a17      	ldr	r2, [pc, #92]	@ (8003408 <USART_Init+0x2b0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d103      	bne.n	80033b8 <USART_Init+0x260>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 80033b0:	2026      	movs	r0, #38	@ 0x26
 80033b2:	f7ff f965 	bl	8002680 <__NVIC_EnableIRQ>
 80033b6:	e037      	b.n	8003428 <USART_Init+0x2d0>
		}
		else if(config -> Port == USART3)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a13      	ldr	r2, [pc, #76]	@ (800340c <USART_Init+0x2b4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d103      	bne.n	80033ca <USART_Init+0x272>
		{
			NVIC_EnableIRQ(USART3_IRQn);
 80033c2:	2027      	movs	r0, #39	@ 0x27
 80033c4:	f7ff f95c 	bl	8002680 <__NVIC_EnableIRQ>
 80033c8:	e02e      	b.n	8003428 <USART_Init+0x2d0>
		}
		else if(config -> Port == UART4)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a10      	ldr	r2, [pc, #64]	@ (8003410 <USART_Init+0x2b8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d103      	bne.n	80033dc <USART_Init+0x284>
		{
			NVIC_EnableIRQ(UART4_IRQn);
 80033d4:	2034      	movs	r0, #52	@ 0x34
 80033d6:	f7ff f953 	bl	8002680 <__NVIC_EnableIRQ>
 80033da:	e025      	b.n	8003428 <USART_Init+0x2d0>
		}
		else if(config -> Port == UART5)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003414 <USART_Init+0x2bc>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d118      	bne.n	8003418 <USART_Init+0x2c0>
		{
			NVIC_EnableIRQ(UART5_IRQn);
 80033e6:	2035      	movs	r0, #53	@ 0x35
 80033e8:	f7ff f94a 	bl	8002680 <__NVIC_EnableIRQ>
 80033ec:	e01c      	b.n	8003428 <USART_Init+0x2d0>
 80033ee:	bf00      	nop
 80033f0:	00000000 	.word	0x00000000
 80033f4:	41a406f4 	.word	0x41a406f4
 80033f8:	20000538 	.word	0x20000538
 80033fc:	40400000 	.word	0x40400000
 8003400:	40300000 	.word	0x40300000
 8003404:	40011000 	.word	0x40011000
 8003408:	40004400 	.word	0x40004400
 800340c:	40004800 	.word	0x40004800
 8003410:	40004c00 	.word	0x40004c00
 8003414:	40005000 	.word	0x40005000
		}
		else if(config -> Port == USART6)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4aa7      	ldr	r2, [pc, #668]	@ (80036bc <USART_Init+0x564>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d102      	bne.n	8003428 <USART_Init+0x2d0>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 8003422:	2047      	movs	r0, #71	@ 0x47
 8003424:	f7ff f92c 	bl	8002680 <__NVIC_EnableIRQ>
		}

	}


	config->Port->CR2 |= config->stop_bits;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	7c1b      	ldrb	r3, [r3, #16]
 8003432:	4619      	mov	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	611a      	str	r2, [r3, #16]

	if((config->dma_enable & USART_Configuration.DMA_Enable.RX_Enable) == USART_Configuration.DMA_Enable.RX_Enable)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7c5b      	ldrb	r3, [r3, #17]
 8003440:	2202      	movs	r2, #2
 8003442:	4013      	ands	r3, r2
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2202      	movs	r2, #2
 8003448:	4293      	cmp	r3, r2
 800344a:	f040 80f6 	bne.w	800363a <USART_Init+0x4e2>
	{
		config -> Port -> CR3 |= USART_CR3_DMAR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800345c:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a97      	ldr	r2, [pc, #604]	@ (80036c0 <USART_Init+0x568>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d108      	bne.n	800347a <USART_Init+0x322>
		{
			xUSART_RX[0].Request = DMA_Configuration.Request.USART1_RX;
 8003468:	4a96      	ldr	r2, [pc, #600]	@ (80036c4 <USART_Init+0x56c>)
 800346a:	4b97      	ldr	r3, [pc, #604]	@ (80036c8 <USART_Init+0x570>)
 800346c:	4614      	mov	r4, r2
 800346e:	33c0      	adds	r3, #192	@ 0xc0
 8003470:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003474:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003478:	e03e      	b.n	80034f8 <USART_Init+0x3a0>
		}
		else if(config->Port == USART2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a93      	ldr	r2, [pc, #588]	@ (80036cc <USART_Init+0x574>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d107      	bne.n	8003494 <USART_Init+0x33c>
		{
			xUSART_RX[1].Request = DMA_Configuration.Request.USART2_RX;
 8003484:	4b8f      	ldr	r3, [pc, #572]	@ (80036c4 <USART_Init+0x56c>)
 8003486:	4a90      	ldr	r2, [pc, #576]	@ (80036c8 <USART_Init+0x570>)
 8003488:	3338      	adds	r3, #56	@ 0x38
 800348a:	32d8      	adds	r2, #216	@ 0xd8
 800348c:	ca07      	ldmia	r2, {r0, r1, r2}
 800348e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003492:	e031      	b.n	80034f8 <USART_Init+0x3a0>
		}
		else if(config->Port == USART3)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a8d      	ldr	r2, [pc, #564]	@ (80036d0 <USART_Init+0x578>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d107      	bne.n	80034ae <USART_Init+0x356>
		{
			xUSART_RX[2].Request = DMA_Configuration.Request.USART3_RX;
 800349e:	4b89      	ldr	r3, [pc, #548]	@ (80036c4 <USART_Init+0x56c>)
 80034a0:	4a89      	ldr	r2, [pc, #548]	@ (80036c8 <USART_Init+0x570>)
 80034a2:	3370      	adds	r3, #112	@ 0x70
 80034a4:	32f0      	adds	r2, #240	@ 0xf0
 80034a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80034a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80034ac:	e024      	b.n	80034f8 <USART_Init+0x3a0>
		}
		else if(config->Port == UART4)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a88      	ldr	r2, [pc, #544]	@ (80036d4 <USART_Init+0x57c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d108      	bne.n	80034ca <USART_Init+0x372>
		{
			xUSART_RX[3].Request = DMA_Configuration.Request.UART4_RX;
 80034b8:	4b82      	ldr	r3, [pc, #520]	@ (80036c4 <USART_Init+0x56c>)
 80034ba:	4a83      	ldr	r2, [pc, #524]	@ (80036c8 <USART_Init+0x570>)
 80034bc:	33a8      	adds	r3, #168	@ 0xa8
 80034be:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 80034c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80034c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80034c8:	e016      	b.n	80034f8 <USART_Init+0x3a0>
		}
		else if(config->Port == UART5)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a82      	ldr	r2, [pc, #520]	@ (80036d8 <USART_Init+0x580>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d108      	bne.n	80034e6 <USART_Init+0x38e>
		{
			xUSART_RX[4].Request = DMA_Configuration.Request.UART5_RX;
 80034d4:	4b7b      	ldr	r3, [pc, #492]	@ (80036c4 <USART_Init+0x56c>)
 80034d6:	4a7c      	ldr	r2, [pc, #496]	@ (80036c8 <USART_Init+0x570>)
 80034d8:	33e0      	adds	r3, #224	@ 0xe0
 80034da:	f502 7290 	add.w	r2, r2, #288	@ 0x120
 80034de:	ca07      	ldmia	r2, {r0, r1, r2}
 80034e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80034e4:	e008      	b.n	80034f8 <USART_Init+0x3a0>
		}
		else
		{
			xUSART_RX[5].Request = DMA_Configuration.Request.UART6_RX;
 80034e6:	4b77      	ldr	r3, [pc, #476]	@ (80036c4 <USART_Init+0x56c>)
 80034e8:	4a77      	ldr	r2, [pc, #476]	@ (80036c8 <USART_Init+0x570>)
 80034ea:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80034ee:	f502 729c 	add.w	r2, r2, #312	@ 0x138
 80034f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80034f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 80034f8:	4b78      	ldr	r3, [pc, #480]	@ (80036dc <USART_Init+0x584>)
 80034fa:	f993 3000 	ldrsb.w	r3, [r3]
 80034fe:	4618      	mov	r0, r3
 8003500:	2200      	movs	r2, #0
 8003502:	4970      	ldr	r1, [pc, #448]	@ (80036c4 <USART_Init+0x56c>)
 8003504:	4603      	mov	r3, r0
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	1a1b      	subs	r3, r3, r0
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	440b      	add	r3, r1
 800350e:	3318      	adds	r3, #24
 8003510:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8003512:	4b72      	ldr	r3, [pc, #456]	@ (80036dc <USART_Init+0x584>)
 8003514:	f993 3000 	ldrsb.w	r3, [r3]
 8003518:	4618      	mov	r0, r3
 800351a:	2200      	movs	r2, #0
 800351c:	4969      	ldr	r1, [pc, #420]	@ (80036c4 <USART_Init+0x56c>)
 800351e:	4603      	mov	r3, r0
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	1a1b      	subs	r3, r3, r0
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	440b      	add	r3, r1
 8003528:	330c      	adds	r3, #12
 800352a:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 800352c:	4b6b      	ldr	r3, [pc, #428]	@ (80036dc <USART_Init+0x584>)
 800352e:	f993 3000 	ldrsb.w	r3, [r3]
 8003532:	4618      	mov	r0, r3
 8003534:	2200      	movs	r2, #0
 8003536:	4963      	ldr	r1, [pc, #396]	@ (80036c4 <USART_Init+0x56c>)
 8003538:	4603      	mov	r3, r0
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	1a1b      	subs	r3, r3, r0
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	440b      	add	r3, r1
 8003542:	331c      	adds	r3, #28
 8003544:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003546:	4b65      	ldr	r3, [pc, #404]	@ (80036dc <USART_Init+0x584>)
 8003548:	f993 3000 	ldrsb.w	r3, [r3]
 800354c:	4618      	mov	r0, r3
 800354e:	2200      	movs	r2, #0
 8003550:	495c      	ldr	r1, [pc, #368]	@ (80036c4 <USART_Init+0x56c>)
 8003552:	4603      	mov	r3, r0
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	1a1b      	subs	r3, r3, r0
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	440b      	add	r3, r1
 800355c:	3328      	adds	r3, #40	@ 0x28
 800355e:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8003560:	4b5e      	ldr	r3, [pc, #376]	@ (80036dc <USART_Init+0x584>)
 8003562:	f993 3000 	ldrsb.w	r3, [r3]
 8003566:	4618      	mov	r0, r3
 8003568:	2200      	movs	r2, #0
 800356a:	4956      	ldr	r1, [pc, #344]	@ (80036c4 <USART_Init+0x56c>)
 800356c:	4603      	mov	r3, r0
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	1a1b      	subs	r3, r3, r0
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	440b      	add	r3, r1
 8003576:	3324      	adds	r3, #36	@ 0x24
 8003578:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 800357a:	2200      	movs	r2, #0
 800357c:	4b57      	ldr	r3, [pc, #348]	@ (80036dc <USART_Init+0x584>)
 800357e:	f993 3000 	ldrsb.w	r3, [r3]
 8003582:	4619      	mov	r1, r3
 8003584:	b290      	uxth	r0, r2
 8003586:	4a4f      	ldr	r2, [pc, #316]	@ (80036c4 <USART_Init+0x56c>)
 8003588:	460b      	mov	r3, r1
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	1a5b      	subs	r3, r3, r1
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	3322      	adds	r3, #34	@ 0x22
 8003594:	4602      	mov	r2, r0
 8003596:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8003598:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800359c:	4b4f      	ldr	r3, [pc, #316]	@ (80036dc <USART_Init+0x584>)
 800359e:	f993 3000 	ldrsb.w	r3, [r3]
 80035a2:	4619      	mov	r1, r3
 80035a4:	b290      	uxth	r0, r2
 80035a6:	4a47      	ldr	r2, [pc, #284]	@ (80036c4 <USART_Init+0x56c>)
 80035a8:	460b      	mov	r3, r1
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	1a5b      	subs	r3, r3, r1
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	3320      	adds	r3, #32
 80035b4:	4602      	mov	r2, r0
 80035b6:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.High;
 80035b8:	4b48      	ldr	r3, [pc, #288]	@ (80036dc <USART_Init+0x584>)
 80035ba:	f993 3000 	ldrsb.w	r3, [r3]
 80035be:	4618      	mov	r0, r3
 80035c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80035c4:	493f      	ldr	r1, [pc, #252]	@ (80036c4 <USART_Init+0x56c>)
 80035c6:	4603      	mov	r3, r0
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	1a1b      	subs	r3, r3, r0
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	440b      	add	r3, r1
 80035d0:	3314      	adds	r3, #20
 80035d2:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 80035d4:	4b41      	ldr	r3, [pc, #260]	@ (80036dc <USART_Init+0x584>)
 80035d6:	f993 3000 	ldrsb.w	r3, [r3]
 80035da:	4618      	mov	r0, r3
 80035dc:	2200      	movs	r2, #0
 80035de:	4939      	ldr	r1, [pc, #228]	@ (80036c4 <USART_Init+0x56c>)
 80035e0:	4603      	mov	r3, r0
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	1a1b      	subs	r3, r3, r0
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	440b      	add	r3, r1
 80035ea:	3310      	adds	r3, #16
 80035ec:	601a      	str	r2, [r3, #0]
		config ->USART_DMA_Instance_RX = xUSART_RX[usart_dma_instance_number];
 80035ee:	4b3b      	ldr	r3, [pc, #236]	@ (80036dc <USART_Init+0x584>)
 80035f0:	f993 3000 	ldrsb.w	r3, [r3]
 80035f4:	4618      	mov	r0, r3
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4932      	ldr	r1, [pc, #200]	@ (80036c4 <USART_Init+0x56c>)
 80035fa:	4603      	mov	r3, r0
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	1a1b      	subs	r3, r3, r0
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	440b      	add	r3, r1
 8003604:	f102 044c 	add.w	r4, r2, #76	@ 0x4c
 8003608:	461d      	mov	r5, r3
 800360a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800360c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800360e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003616:	e895 0003 	ldmia.w	r5, {r0, r1}
 800361a:	e884 0003 	stmia.w	r4, {r0, r1}
		DMA_Init(&xUSART_RX[usart_dma_instance_number]);
 800361e:	4b2f      	ldr	r3, [pc, #188]	@ (80036dc <USART_Init+0x584>)
 8003620:	f993 3000 	ldrsb.w	r3, [r3]
 8003624:	461a      	mov	r2, r3
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4a25      	ldr	r2, [pc, #148]	@ (80036c4 <USART_Init+0x56c>)
 8003630:	4413      	add	r3, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f7fe fcb4 	bl	8001fa0 <DMA_Init>
 8003638:	e007      	b.n	800364a <USART_Init+0x4f2>
	}
	else
	{
		config -> Port  -> CR3 &= ~USART_CR3_DMAR;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695a      	ldr	r2, [r3, #20]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003648:	615a      	str	r2, [r3, #20]
	}

	if((config->dma_enable & USART_Configuration.DMA_Enable.TX_Enable) == USART_Configuration.DMA_Enable.TX_Enable)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	7c5b      	ldrb	r3, [r3, #17]
 800364e:	2201      	movs	r2, #1
 8003650:	4013      	ands	r3, r2
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2201      	movs	r2, #1
 8003656:	4293      	cmp	r3, r2
 8003658:	f040 810a 	bne.w	8003870 <USART_Init+0x718>
	{

		config -> Port  -> CR3 |= USART_CR3_DMAT;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800366a:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a13      	ldr	r2, [pc, #76]	@ (80036c0 <USART_Init+0x568>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d108      	bne.n	8003688 <USART_Init+0x530>
		{
			xUSART_TX[0].Request = DMA_Configuration.Request.USART1_TX;
 8003676:	4a1a      	ldr	r2, [pc, #104]	@ (80036e0 <USART_Init+0x588>)
 8003678:	4b13      	ldr	r3, [pc, #76]	@ (80036c8 <USART_Init+0x570>)
 800367a:	4614      	mov	r4, r2
 800367c:	33cc      	adds	r3, #204	@ 0xcc
 800367e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003686:	e052      	b.n	800372e <USART_Init+0x5d6>
		}
		else if(config->Port == USART2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0f      	ldr	r2, [pc, #60]	@ (80036cc <USART_Init+0x574>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d107      	bne.n	80036a2 <USART_Init+0x54a>
		{
			xUSART_TX[1].Request = DMA_Configuration.Request.USART2_TX;
 8003692:	4b13      	ldr	r3, [pc, #76]	@ (80036e0 <USART_Init+0x588>)
 8003694:	4a0c      	ldr	r2, [pc, #48]	@ (80036c8 <USART_Init+0x570>)
 8003696:	3338      	adds	r3, #56	@ 0x38
 8003698:	32e4      	adds	r2, #228	@ 0xe4
 800369a:	ca07      	ldmia	r2, {r0, r1, r2}
 800369c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80036a0:	e045      	b.n	800372e <USART_Init+0x5d6>
		}
		else if(config->Port == USART3)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a0a      	ldr	r2, [pc, #40]	@ (80036d0 <USART_Init+0x578>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d11b      	bne.n	80036e4 <USART_Init+0x58c>
		{
			xUSART_TX[2].Request = DMA_Configuration.Request.USART3_TX;
 80036ac:	4b0c      	ldr	r3, [pc, #48]	@ (80036e0 <USART_Init+0x588>)
 80036ae:	4a06      	ldr	r2, [pc, #24]	@ (80036c8 <USART_Init+0x570>)
 80036b0:	3370      	adds	r3, #112	@ 0x70
 80036b2:	32fc      	adds	r2, #252	@ 0xfc
 80036b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80036b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80036ba:	e038      	b.n	800372e <USART_Init+0x5d6>
 80036bc:	40011400 	.word	0x40011400
 80036c0:	40011000 	.word	0x40011000
 80036c4:	20000298 	.word	0x20000298
 80036c8:	08004560 	.word	0x08004560
 80036cc:	40004400 	.word	0x40004400
 80036d0:	40004800 	.word	0x40004800
 80036d4:	40004c00 	.word	0x40004c00
 80036d8:	40005000 	.word	0x40005000
 80036dc:	20000538 	.word	0x20000538
 80036e0:	200003e8 	.word	0x200003e8
		}
		else if(config->Port == UART4)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a7d      	ldr	r2, [pc, #500]	@ (80038e0 <USART_Init+0x788>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d108      	bne.n	8003700 <USART_Init+0x5a8>
		{
			xUSART_TX[3].Request = DMA_Configuration.Request.UART4_TX;
 80036ee:	4b7d      	ldr	r3, [pc, #500]	@ (80038e4 <USART_Init+0x78c>)
 80036f0:	4a7d      	ldr	r2, [pc, #500]	@ (80038e8 <USART_Init+0x790>)
 80036f2:	33a8      	adds	r3, #168	@ 0xa8
 80036f4:	f502 728a 	add.w	r2, r2, #276	@ 0x114
 80036f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80036fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80036fe:	e016      	b.n	800372e <USART_Init+0x5d6>
		}
		else if(config->Port == UART5)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a79      	ldr	r2, [pc, #484]	@ (80038ec <USART_Init+0x794>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d108      	bne.n	800371c <USART_Init+0x5c4>
		{
			xUSART_TX[4].Request = DMA_Configuration.Request.UART5_TX;
 800370a:	4b76      	ldr	r3, [pc, #472]	@ (80038e4 <USART_Init+0x78c>)
 800370c:	4a76      	ldr	r2, [pc, #472]	@ (80038e8 <USART_Init+0x790>)
 800370e:	33e0      	adds	r3, #224	@ 0xe0
 8003710:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 8003714:	ca07      	ldmia	r2, {r0, r1, r2}
 8003716:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800371a:	e008      	b.n	800372e <USART_Init+0x5d6>
		}
		else
		{
			xUSART_TX[5].Request = DMA_Configuration.Request.UART6_TX;
 800371c:	4b71      	ldr	r3, [pc, #452]	@ (80038e4 <USART_Init+0x78c>)
 800371e:	4a72      	ldr	r2, [pc, #456]	@ (80038e8 <USART_Init+0x790>)
 8003720:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8003724:	f502 72a2 	add.w	r2, r2, #324	@ 0x144
 8003728:	ca07      	ldmia	r2, {r0, r1, r2}
 800372a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		xUSART_TX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 800372e:	4b70      	ldr	r3, [pc, #448]	@ (80038f0 <USART_Init+0x798>)
 8003730:	f993 3000 	ldrsb.w	r3, [r3]
 8003734:	4618      	mov	r0, r3
 8003736:	2200      	movs	r2, #0
 8003738:	496a      	ldr	r1, [pc, #424]	@ (80038e4 <USART_Init+0x78c>)
 800373a:	4603      	mov	r3, r0
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	1a1b      	subs	r3, r3, r0
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	440b      	add	r3, r1
 8003744:	3318      	adds	r3, #24
 8003746:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8003748:	4b69      	ldr	r3, [pc, #420]	@ (80038f0 <USART_Init+0x798>)
 800374a:	f993 3000 	ldrsb.w	r3, [r3]
 800374e:	4618      	mov	r0, r3
 8003750:	2200      	movs	r2, #0
 8003752:	4964      	ldr	r1, [pc, #400]	@ (80038e4 <USART_Init+0x78c>)
 8003754:	4603      	mov	r3, r0
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	1a1b      	subs	r3, r3, r0
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	440b      	add	r3, r1
 800375e:	330c      	adds	r3, #12
 8003760:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete ;
 8003762:	4b63      	ldr	r3, [pc, #396]	@ (80038f0 <USART_Init+0x798>)
 8003764:	f993 3000 	ldrsb.w	r3, [r3]
 8003768:	4618      	mov	r0, r3
 800376a:	2210      	movs	r2, #16
 800376c:	495d      	ldr	r1, [pc, #372]	@ (80038e4 <USART_Init+0x78c>)
 800376e:	4603      	mov	r3, r0
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	1a1b      	subs	r3, r3, r0
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	440b      	add	r3, r1
 8003778:	331c      	adds	r3, #28
 800377a:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 800377c:	4b5c      	ldr	r3, [pc, #368]	@ (80038f0 <USART_Init+0x798>)
 800377e:	f993 3000 	ldrsb.w	r3, [r3]
 8003782:	4618      	mov	r0, r3
 8003784:	2200      	movs	r2, #0
 8003786:	4957      	ldr	r1, [pc, #348]	@ (80038e4 <USART_Init+0x78c>)
 8003788:	4603      	mov	r3, r0
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	1a1b      	subs	r3, r3, r0
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	440b      	add	r3, r1
 8003792:	3328      	adds	r3, #40	@ 0x28
 8003794:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8003796:	4b56      	ldr	r3, [pc, #344]	@ (80038f0 <USART_Init+0x798>)
 8003798:	f993 3000 	ldrsb.w	r3, [r3]
 800379c:	4618      	mov	r0, r3
 800379e:	2200      	movs	r2, #0
 80037a0:	4950      	ldr	r1, [pc, #320]	@ (80038e4 <USART_Init+0x78c>)
 80037a2:	4603      	mov	r3, r0
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	1a1b      	subs	r3, r3, r0
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	440b      	add	r3, r1
 80037ac:	3324      	adds	r3, #36	@ 0x24
 80037ae:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 80037b0:	2200      	movs	r2, #0
 80037b2:	4b4f      	ldr	r3, [pc, #316]	@ (80038f0 <USART_Init+0x798>)
 80037b4:	f993 3000 	ldrsb.w	r3, [r3]
 80037b8:	4619      	mov	r1, r3
 80037ba:	b290      	uxth	r0, r2
 80037bc:	4a49      	ldr	r2, [pc, #292]	@ (80038e4 <USART_Init+0x78c>)
 80037be:	460b      	mov	r3, r1
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	1a5b      	subs	r3, r3, r1
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	3322      	adds	r3, #34	@ 0x22
 80037ca:	4602      	mov	r2, r0
 80037cc:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 80037ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037d2:	4b47      	ldr	r3, [pc, #284]	@ (80038f0 <USART_Init+0x798>)
 80037d4:	f993 3000 	ldrsb.w	r3, [r3]
 80037d8:	4619      	mov	r1, r3
 80037da:	b290      	uxth	r0, r2
 80037dc:	4a41      	ldr	r2, [pc, #260]	@ (80038e4 <USART_Init+0x78c>)
 80037de:	460b      	mov	r3, r1
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	1a5b      	subs	r3, r3, r1
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4413      	add	r3, r2
 80037e8:	3320      	adds	r3, #32
 80037ea:	4602      	mov	r2, r0
 80037ec:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.Very_high;
 80037ee:	4b40      	ldr	r3, [pc, #256]	@ (80038f0 <USART_Init+0x798>)
 80037f0:	f993 3000 	ldrsb.w	r3, [r3]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80037fa:	493a      	ldr	r1, [pc, #232]	@ (80038e4 <USART_Init+0x78c>)
 80037fc:	4603      	mov	r3, r0
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	1a1b      	subs	r3, r3, r0
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	440b      	add	r3, r1
 8003806:	3314      	adds	r3, #20
 8003808:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 800380a:	4b39      	ldr	r3, [pc, #228]	@ (80038f0 <USART_Init+0x798>)
 800380c:	f993 3000 	ldrsb.w	r3, [r3]
 8003810:	4618      	mov	r0, r3
 8003812:	2240      	movs	r2, #64	@ 0x40
 8003814:	4933      	ldr	r1, [pc, #204]	@ (80038e4 <USART_Init+0x78c>)
 8003816:	4603      	mov	r3, r0
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	1a1b      	subs	r3, r3, r0
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	440b      	add	r3, r1
 8003820:	3310      	adds	r3, #16
 8003822:	601a      	str	r2, [r3, #0]
		config ->USART_DMA_Instance_TX = xUSART_TX[usart_dma_instance_number];
 8003824:	4b32      	ldr	r3, [pc, #200]	@ (80038f0 <USART_Init+0x798>)
 8003826:	f993 3000 	ldrsb.w	r3, [r3]
 800382a:	4618      	mov	r0, r3
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	492d      	ldr	r1, [pc, #180]	@ (80038e4 <USART_Init+0x78c>)
 8003830:	4603      	mov	r3, r0
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	1a1b      	subs	r3, r3, r0
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	440b      	add	r3, r1
 800383a:	f102 0414 	add.w	r4, r2, #20
 800383e:	461d      	mov	r5, r3
 8003840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800384a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800384c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003850:	e884 0003 	stmia.w	r4, {r0, r1}
		DMA_Init(&xUSART_TX[usart_dma_instance_number]);
 8003854:	4b26      	ldr	r3, [pc, #152]	@ (80038f0 <USART_Init+0x798>)
 8003856:	f993 3000 	ldrsb.w	r3, [r3]
 800385a:	461a      	mov	r2, r3
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4a1f      	ldr	r2, [pc, #124]	@ (80038e4 <USART_Init+0x78c>)
 8003866:	4413      	add	r3, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f7fe fb99 	bl	8001fa0 <DMA_Init>
 800386e:	e007      	b.n	8003880 <USART_Init+0x728>
	}
	else
	{
		config -> Port -> CR3 &= ~USART_CR3_DMAT;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800387e:	615a      	str	r2, [r3, #20]
	}

	if(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	7a1b      	ldrb	r3, [r3, #8]
 8003884:	2203      	movs	r2, #3
 8003886:	4293      	cmp	r3, r2
 8003888:	d107      	bne.n	800389a <USART_Init+0x742>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0208 	orr.w	r2, r2, #8
 8003898:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Configuration.Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	7a1b      	ldrb	r3, [r3, #8]
 800389e:	2205      	movs	r2, #5
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d107      	bne.n	80038b4 <USART_Init+0x75c>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038b2:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 020c 	orr.w	r2, r2, #12
 80038c2:	60da      	str	r2, [r3, #12]
	config->Port-> CR1 |= USART_CR1_UE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038d2:	60da      	str	r2, [r3, #12]

	return 1;
 80038d4:	2301      	movs	r3, #1
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3728      	adds	r7, #40	@ 0x28
 80038da:	46bd      	mov	sp, r7
 80038dc:	bdb0      	pop	{r4, r5, r7, pc}
 80038de:	bf00      	nop
 80038e0:	40004c00 	.word	0x40004c00
 80038e4:	200003e8 	.word	0x200003e8
 80038e8:	08004560 	.word	0x08004560
 80038ec:	40005000 	.word	0x40005000
 80038f0:	20000538 	.word	0x20000538

080038f4 <USART_TX_Buffer>:

int8_t USART_TX_Buffer(USART_Config *config, uint8_t *tx_buffer, uint16_t length)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
	if(config->dma_enable |= USART_Configuration.DMA_Enable.TX_Enable)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	7c5b      	ldrb	r3, [r3, #17]
 8003906:	2201      	movs	r2, #1
 8003908:	4313      	orrs	r3, r2
 800390a:	b2da      	uxtb	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	745a      	strb	r2, [r3, #17]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	7c5b      	ldrb	r3, [r3, #17]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8121 	beq.w	8003b5c <USART_TX_Buffer+0x268>
	{
		config -> Port -> SR &= ~USART_SR_TC;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003928:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_address = (uint32_t)tx_buffer;
 800392a:	4b9b      	ldr	r3, [pc, #620]	@ (8003b98 <USART_TX_Buffer+0x2a4>)
 800392c:	f993 3000 	ldrsb.w	r3, [r3]
 8003930:	4618      	mov	r0, r3
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	4999      	ldr	r1, [pc, #612]	@ (8003b9c <USART_TX_Buffer+0x2a8>)
 8003936:	4603      	mov	r3, r0
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	1a1b      	subs	r3, r3, r0
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	440b      	add	r3, r1
 8003940:	3330      	adds	r3, #48	@ 0x30
 8003942:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	1d1a      	adds	r2, r3, #4
 800394a:	4b93      	ldr	r3, [pc, #588]	@ (8003b98 <USART_TX_Buffer+0x2a4>)
 800394c:	f993 3000 	ldrsb.w	r3, [r3]
 8003950:	4619      	mov	r1, r3
 8003952:	4610      	mov	r0, r2
 8003954:	4a91      	ldr	r2, [pc, #580]	@ (8003b9c <USART_TX_Buffer+0x2a8>)
 8003956:	460b      	mov	r3, r1
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	1a5b      	subs	r3, r3, r1
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	332c      	adds	r3, #44	@ 0x2c
 8003962:	6018      	str	r0, [r3, #0]
		xUSART_TX[usart_dma_instance_number].buffer_length = length;
 8003964:	4b8c      	ldr	r3, [pc, #560]	@ (8003b98 <USART_TX_Buffer+0x2a4>)
 8003966:	f993 3000 	ldrsb.w	r3, [r3]
 800396a:	4619      	mov	r1, r3
 800396c:	4a8b      	ldr	r2, [pc, #556]	@ (8003b9c <USART_TX_Buffer+0x2a8>)
 800396e:	460b      	mov	r3, r1
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	1a5b      	subs	r3, r3, r1
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	4413      	add	r3, r2
 8003978:	3334      	adds	r3, #52	@ 0x34
 800397a:	88fa      	ldrh	r2, [r7, #6]
 800397c:	801a      	strh	r2, [r3, #0]
		DMA_Set_Target(&xUSART_TX[usart_dma_instance_number]);
 800397e:	4b86      	ldr	r3, [pc, #536]	@ (8003b98 <USART_TX_Buffer+0x2a4>)
 8003980:	f993 3000 	ldrsb.w	r3, [r3]
 8003984:	461a      	mov	r2, r3
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4a83      	ldr	r2, [pc, #524]	@ (8003b9c <USART_TX_Buffer+0x2a8>)
 8003990:	4413      	add	r3, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f7fe fca2 	bl	80022dc <DMA_Set_Target>
		DMA_Set_Trigger(&xUSART_TX[usart_dma_instance_number]);
 8003998:	4b7f      	ldr	r3, [pc, #508]	@ (8003b98 <USART_TX_Buffer+0x2a4>)
 800399a:	f993 3000 	ldrsb.w	r3, [r3]
 800399e:	461a      	mov	r2, r3
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4a7c      	ldr	r2, [pc, #496]	@ (8003b9c <USART_TX_Buffer+0x2a8>)
 80039aa:	4413      	add	r3, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fe fcf5 	bl	800239c <DMA_Set_Trigger>


		if(config->Port == USART1)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a7a      	ldr	r2, [pc, #488]	@ (8003ba0 <USART_TX_Buffer+0x2ac>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d148      	bne.n	8003a4e <USART_TX_Buffer+0x15a>
		{
			if(USART1_TX_DMA_Flag.Triggered != 1)
 80039bc:	4b79      	ldr	r3, [pc, #484]	@ (8003ba4 <USART_TX_Buffer+0x2b0>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	f083 0301 	eor.w	r3, r3, #1
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d033      	beq.n	8003a32 <USART_TX_Buffer+0x13e>
			{
				USART1_TX_DMA_Flag.Transfer_Complete_Flag = (xUSART_TX[usart_dma_instance_number].Request.Controller -> HISR & DMA_HISR_TCIF7_Msk) >> DMA_HISR_TCIF7_Pos;
 80039ca:	4b73      	ldr	r3, [pc, #460]	@ (8003b98 <USART_TX_Buffer+0x2a4>)
 80039cc:	f993 3000 	ldrsb.w	r3, [r3]
 80039d0:	4619      	mov	r1, r3
 80039d2:	4a72      	ldr	r2, [pc, #456]	@ (8003b9c <USART_TX_Buffer+0x2a8>)
 80039d4:	460b      	mov	r3, r1
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	1a5b      	subs	r3, r3, r1
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4413      	add	r3, r2
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	0edb      	lsrs	r3, r3, #27
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf14      	ite	ne
 80039ec:	2301      	movne	r3, #1
 80039ee:	2300      	moveq	r3, #0
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4b6c      	ldr	r3, [pc, #432]	@ (8003ba4 <USART_TX_Buffer+0x2b0>)
 80039f4:	705a      	strb	r2, [r3, #1]
				USART1_TX_DMA_Flag.Transfer_Complete_Flag = (xUSART_TX[usart_dma_instance_number].Request.Controller -> HISR & DMA_HISR_HTIF7_Msk) >> DMA_HISR_HTIF7_Pos;
 80039f6:	4b68      	ldr	r3, [pc, #416]	@ (8003b98 <USART_TX_Buffer+0x2a4>)
 80039f8:	f993 3000 	ldrsb.w	r3, [r3]
 80039fc:	4619      	mov	r1, r3
 80039fe:	4a67      	ldr	r2, [pc, #412]	@ (8003b9c <USART_TX_Buffer+0x2a8>)
 8003a00:	460b      	mov	r3, r1
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	1a5b      	subs	r3, r3, r1
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4413      	add	r3, r2
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	0e9b      	lsrs	r3, r3, #26
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	4b61      	ldr	r3, [pc, #388]	@ (8003ba4 <USART_TX_Buffer+0x2b0>)
 8003a20:	705a      	strb	r2, [r3, #1]
			}

			while((USART1_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003a22:	e006      	b.n	8003a32 <USART_TX_Buffer+0x13e>
			{
				if(USART1_TX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 8003a24:	4b5f      	ldr	r3, [pc, #380]	@ (8003ba4 <USART_TX_Buffer+0x2b0>)
 8003a26:	78db      	ldrb	r3, [r3, #3]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <USART_TX_Buffer+0x13e>
 8003a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a30:	e0ae      	b.n	8003b90 <USART_TX_Buffer+0x29c>
			while((USART1_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003a32:	4b5c      	ldr	r3, [pc, #368]	@ (8003ba4 <USART_TX_Buffer+0x2b0>)
 8003a34:	785b      	ldrb	r3, [r3, #1]
 8003a36:	f083 0301 	eor.w	r3, r3, #1
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f1      	bne.n	8003a24 <USART_TX_Buffer+0x130>
			}
			USART1_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8003a40:	4b58      	ldr	r3, [pc, #352]	@ (8003ba4 <USART_TX_Buffer+0x2b0>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	705a      	strb	r2, [r3, #1]
			DMA_Reset_Flags(&USART1_TX_DMA_Flag);
 8003a46:	4857      	ldr	r0, [pc, #348]	@ (8003ba4 <USART_TX_Buffer+0x2b0>)
 8003a48:	f7fe fa6a 	bl	8001f20 <DMA_Reset_Flags>
 8003a4c:	e09f      	b.n	8003b8e <USART_TX_Buffer+0x29a>
		}
		else if(config->Port == USART2)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a55      	ldr	r2, [pc, #340]	@ (8003ba8 <USART_TX_Buffer+0x2b4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d115      	bne.n	8003a84 <USART_TX_Buffer+0x190>
		{
			while((USART2_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003a58:	e006      	b.n	8003a68 <USART_TX_Buffer+0x174>
			{
				if(USART2_TX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 8003a5a:	4b54      	ldr	r3, [pc, #336]	@ (8003bac <USART_TX_Buffer+0x2b8>)
 8003a5c:	78db      	ldrb	r3, [r3, #3]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <USART_TX_Buffer+0x174>
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
 8003a66:	e093      	b.n	8003b90 <USART_TX_Buffer+0x29c>
			while((USART2_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003a68:	4b50      	ldr	r3, [pc, #320]	@ (8003bac <USART_TX_Buffer+0x2b8>)
 8003a6a:	785b      	ldrb	r3, [r3, #1]
 8003a6c:	f083 0301 	eor.w	r3, r3, #1
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f1      	bne.n	8003a5a <USART_TX_Buffer+0x166>
			}
			USART2_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8003a76:	4b4d      	ldr	r3, [pc, #308]	@ (8003bac <USART_TX_Buffer+0x2b8>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	705a      	strb	r2, [r3, #1]
			DMA_Reset_Flags(&USART2_TX_DMA_Flag);
 8003a7c:	484b      	ldr	r0, [pc, #300]	@ (8003bac <USART_TX_Buffer+0x2b8>)
 8003a7e:	f7fe fa4f 	bl	8001f20 <DMA_Reset_Flags>
 8003a82:	e084      	b.n	8003b8e <USART_TX_Buffer+0x29a>
		}
		else if(config->Port == USART3)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a49      	ldr	r2, [pc, #292]	@ (8003bb0 <USART_TX_Buffer+0x2bc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d115      	bne.n	8003aba <USART_TX_Buffer+0x1c6>
		{
			while((USART3_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003a8e:	e006      	b.n	8003a9e <USART_TX_Buffer+0x1aa>
			{
				if(USART3_TX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 8003a90:	4b48      	ldr	r3, [pc, #288]	@ (8003bb4 <USART_TX_Buffer+0x2c0>)
 8003a92:	78db      	ldrb	r3, [r3, #3]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <USART_TX_Buffer+0x1aa>
 8003a98:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9c:	e078      	b.n	8003b90 <USART_TX_Buffer+0x29c>
			while((USART3_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003a9e:	4b45      	ldr	r3, [pc, #276]	@ (8003bb4 <USART_TX_Buffer+0x2c0>)
 8003aa0:	785b      	ldrb	r3, [r3, #1]
 8003aa2:	f083 0301 	eor.w	r3, r3, #1
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f1      	bne.n	8003a90 <USART_TX_Buffer+0x19c>
			}
			USART3_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8003aac:	4b41      	ldr	r3, [pc, #260]	@ (8003bb4 <USART_TX_Buffer+0x2c0>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	705a      	strb	r2, [r3, #1]
			DMA_Reset_Flags(&USART3_TX_DMA_Flag);
 8003ab2:	4840      	ldr	r0, [pc, #256]	@ (8003bb4 <USART_TX_Buffer+0x2c0>)
 8003ab4:	f7fe fa34 	bl	8001f20 <DMA_Reset_Flags>
 8003ab8:	e069      	b.n	8003b8e <USART_TX_Buffer+0x29a>
		}
		else if(config->Port == UART4)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a3e      	ldr	r2, [pc, #248]	@ (8003bb8 <USART_TX_Buffer+0x2c4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d115      	bne.n	8003af0 <USART_TX_Buffer+0x1fc>
		{
			while((USART4_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003ac4:	e006      	b.n	8003ad4 <USART_TX_Buffer+0x1e0>
			{
				if(USART4_TX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 8003ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8003bbc <USART_TX_Buffer+0x2c8>)
 8003ac8:	78db      	ldrb	r3, [r3, #3]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <USART_TX_Buffer+0x1e0>
 8003ace:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad2:	e05d      	b.n	8003b90 <USART_TX_Buffer+0x29c>
			while((USART4_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003ad4:	4b39      	ldr	r3, [pc, #228]	@ (8003bbc <USART_TX_Buffer+0x2c8>)
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	f083 0301 	eor.w	r3, r3, #1
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f1      	bne.n	8003ac6 <USART_TX_Buffer+0x1d2>
			}
			USART4_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8003ae2:	4b36      	ldr	r3, [pc, #216]	@ (8003bbc <USART_TX_Buffer+0x2c8>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	705a      	strb	r2, [r3, #1]
			DMA_Reset_Flags(&USART4_TX_DMA_Flag);
 8003ae8:	4834      	ldr	r0, [pc, #208]	@ (8003bbc <USART_TX_Buffer+0x2c8>)
 8003aea:	f7fe fa19 	bl	8001f20 <DMA_Reset_Flags>
 8003aee:	e04e      	b.n	8003b8e <USART_TX_Buffer+0x29a>
		}
		else if(config->Port == UART5)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a32      	ldr	r2, [pc, #200]	@ (8003bc0 <USART_TX_Buffer+0x2cc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d115      	bne.n	8003b26 <USART_TX_Buffer+0x232>
		{
			while((USART5_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003afa:	e006      	b.n	8003b0a <USART_TX_Buffer+0x216>
			{
				if(USART5_TX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 8003afc:	4b31      	ldr	r3, [pc, #196]	@ (8003bc4 <USART_TX_Buffer+0x2d0>)
 8003afe:	78db      	ldrb	r3, [r3, #3]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <USART_TX_Buffer+0x216>
 8003b04:	f04f 33ff 	mov.w	r3, #4294967295
 8003b08:	e042      	b.n	8003b90 <USART_TX_Buffer+0x29c>
			while((USART5_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc4 <USART_TX_Buffer+0x2d0>)
 8003b0c:	785b      	ldrb	r3, [r3, #1]
 8003b0e:	f083 0301 	eor.w	r3, r3, #1
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f1      	bne.n	8003afc <USART_TX_Buffer+0x208>
			}
			USART5_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8003b18:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc4 <USART_TX_Buffer+0x2d0>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	705a      	strb	r2, [r3, #1]
			DMA_Reset_Flags(&USART5_TX_DMA_Flag);
 8003b1e:	4829      	ldr	r0, [pc, #164]	@ (8003bc4 <USART_TX_Buffer+0x2d0>)
 8003b20:	f7fe f9fe 	bl	8001f20 <DMA_Reset_Flags>
 8003b24:	e033      	b.n	8003b8e <USART_TX_Buffer+0x29a>
		}
		else if(config->Port == USART6)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a27      	ldr	r2, [pc, #156]	@ (8003bc8 <USART_TX_Buffer+0x2d4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d12e      	bne.n	8003b8e <USART_TX_Buffer+0x29a>
		{
			while((USART6_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003b30:	e006      	b.n	8003b40 <USART_TX_Buffer+0x24c>
			{
				if(USART6_TX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 8003b32:	4b26      	ldr	r3, [pc, #152]	@ (8003bcc <USART_TX_Buffer+0x2d8>)
 8003b34:	78db      	ldrb	r3, [r3, #3]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <USART_TX_Buffer+0x24c>
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3e:	e027      	b.n	8003b90 <USART_TX_Buffer+0x29c>
			while((USART6_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003b40:	4b22      	ldr	r3, [pc, #136]	@ (8003bcc <USART_TX_Buffer+0x2d8>)
 8003b42:	785b      	ldrb	r3, [r3, #1]
 8003b44:	f083 0301 	eor.w	r3, r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f1      	bne.n	8003b32 <USART_TX_Buffer+0x23e>
			}
			USART6_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8003b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8003bcc <USART_TX_Buffer+0x2d8>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	705a      	strb	r2, [r3, #1]
			DMA_Reset_Flags(&USART6_TX_DMA_Flag);
 8003b54:	481d      	ldr	r0, [pc, #116]	@ (8003bcc <USART_TX_Buffer+0x2d8>)
 8003b56:	f7fe f9e3 	bl	8001f20 <DMA_Reset_Flags>
 8003b5a:	e018      	b.n	8003b8e <USART_TX_Buffer+0x29a>


	}
	else
	{ //Will Take more time
		for(int i = 0; i <= length; i++)
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	e011      	b.n	8003b86 <USART_TX_Buffer+0x292>
		{
			config->Port->DR = tx_buffer[i];
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	4413      	add	r3, r2
 8003b68:	781a      	ldrb	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	605a      	str	r2, [r3, #4]
			while(!(config->Port->SR & USART_SR_TXE));
 8003b70:	bf00      	nop
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f8      	beq.n	8003b72 <USART_TX_Buffer+0x27e>
		for(int i = 0; i <= length; i++)
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	3301      	adds	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	dde9      	ble.n	8003b62 <USART_TX_Buffer+0x26e>
		}
	}

	return 1;
 8003b8e:	2301      	movs	r3, #1

}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000538 	.word	0x20000538
 8003b9c:	200003e8 	.word	0x200003e8
 8003ba0:	40011000 	.word	0x40011000
 8003ba4:	20000090 	.word	0x20000090
 8003ba8:	40004400 	.word	0x40004400
 8003bac:	200000a0 	.word	0x200000a0
 8003bb0:	40004800 	.word	0x40004800
 8003bb4:	200000b0 	.word	0x200000b0
 8003bb8:	40004c00 	.word	0x40004c00
 8003bbc:	200000c0 	.word	0x200000c0
 8003bc0:	40005000 	.word	0x40005000
 8003bc4:	200000d0 	.word	0x200000d0
 8003bc8:	40011400 	.word	0x40011400
 8003bcc:	200000e0 	.word	0x200000e0

08003bd0 <USART_RX_Buffer>:

int8_t USART_RX_Buffer(USART_Config *config, uint8_t *rx_buffer, uint16_t length, bool circular_buffer_enable)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	4611      	mov	r1, r2
 8003bdc:	461a      	mov	r2, r3
 8003bde:	460b      	mov	r3, r1
 8003be0:	80fb      	strh	r3, [r7, #6]
 8003be2:	4613      	mov	r3, r2
 8003be4:	717b      	strb	r3, [r7, #5]
	if(config->dma_enable |= USART_Configuration.DMA_Enable.RX_Enable)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	7c5b      	ldrb	r3, [r3, #17]
 8003bea:	2202      	movs	r2, #2
 8003bec:	4313      	orrs	r3, r2
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	745a      	strb	r2, [r3, #17]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	7c5b      	ldrb	r3, [r3, #17]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 80f7 	beq.w	8003dec <USART_RX_Buffer+0x21c>
	{
		if(circular_buffer_enable == 1)
 8003bfe:	797b      	ldrb	r3, [r7, #5]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00d      	beq.n	8003c20 <USART_RX_Buffer+0x50>
		{
			xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8003c04:	4b89      	ldr	r3, [pc, #548]	@ (8003e2c <USART_RX_Buffer+0x25c>)
 8003c06:	f993 3000 	ldrsb.w	r3, [r3]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	4988      	ldr	r1, [pc, #544]	@ (8003e30 <USART_RX_Buffer+0x260>)
 8003c10:	4603      	mov	r3, r0
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	1a1b      	subs	r3, r3, r0
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	440b      	add	r3, r1
 8003c1a:	3318      	adds	r3, #24
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e00d      	b.n	8003c3c <USART_RX_Buffer+0x6c>
		}
		else
		{
			xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Enable;
 8003c20:	4b82      	ldr	r3, [pc, #520]	@ (8003e2c <USART_RX_Buffer+0x25c>)
 8003c22:	f993 3000 	ldrsb.w	r3, [r3]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c2c:	4980      	ldr	r1, [pc, #512]	@ (8003e30 <USART_RX_Buffer+0x260>)
 8003c2e:	4603      	mov	r3, r0
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	1a1b      	subs	r3, r3, r0
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	440b      	add	r3, r1
 8003c38:	3318      	adds	r3, #24
 8003c3a:	601a      	str	r2, [r3, #0]
		}

		xUSART_RX[usart_dma_instance_number].memory_address = (uint32_t)rx_buffer;
 8003c3c:	4b7b      	ldr	r3, [pc, #492]	@ (8003e2c <USART_RX_Buffer+0x25c>)
 8003c3e:	f993 3000 	ldrsb.w	r3, [r3]
 8003c42:	4618      	mov	r0, r3
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	497a      	ldr	r1, [pc, #488]	@ (8003e30 <USART_RX_Buffer+0x260>)
 8003c48:	4603      	mov	r3, r0
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	1a1b      	subs	r3, r3, r0
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	440b      	add	r3, r1
 8003c52:	3330      	adds	r3, #48	@ 0x30
 8003c54:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	1d1a      	adds	r2, r3, #4
 8003c5c:	4b73      	ldr	r3, [pc, #460]	@ (8003e2c <USART_RX_Buffer+0x25c>)
 8003c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8003c62:	4619      	mov	r1, r3
 8003c64:	4610      	mov	r0, r2
 8003c66:	4a72      	ldr	r2, [pc, #456]	@ (8003e30 <USART_RX_Buffer+0x260>)
 8003c68:	460b      	mov	r3, r1
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	1a5b      	subs	r3, r3, r1
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	332c      	adds	r3, #44	@ 0x2c
 8003c74:	6018      	str	r0, [r3, #0]
		xUSART_RX[usart_dma_instance_number].buffer_length = length;
 8003c76:	4b6d      	ldr	r3, [pc, #436]	@ (8003e2c <USART_RX_Buffer+0x25c>)
 8003c78:	f993 3000 	ldrsb.w	r3, [r3]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4a6c      	ldr	r2, [pc, #432]	@ (8003e30 <USART_RX_Buffer+0x260>)
 8003c80:	460b      	mov	r3, r1
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	1a5b      	subs	r3, r3, r1
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	3334      	adds	r3, #52	@ 0x34
 8003c8c:	88fa      	ldrh	r2, [r7, #6]
 8003c8e:	801a      	strh	r2, [r3, #0]
		DMA_Set_Target(&xUSART_RX[usart_dma_instance_number]);
 8003c90:	4b66      	ldr	r3, [pc, #408]	@ (8003e2c <USART_RX_Buffer+0x25c>)
 8003c92:	f993 3000 	ldrsb.w	r3, [r3]
 8003c96:	461a      	mov	r2, r3
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4a63      	ldr	r2, [pc, #396]	@ (8003e30 <USART_RX_Buffer+0x260>)
 8003ca2:	4413      	add	r3, r2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe fb19 	bl	80022dc <DMA_Set_Target>
		DMA_Set_Trigger(&xUSART_RX[usart_dma_instance_number]);
 8003caa:	4b60      	ldr	r3, [pc, #384]	@ (8003e2c <USART_RX_Buffer+0x25c>)
 8003cac:	f993 3000 	ldrsb.w	r3, [r3]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4a5d      	ldr	r2, [pc, #372]	@ (8003e30 <USART_RX_Buffer+0x260>)
 8003cbc:	4413      	add	r3, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe fb6c 	bl	800239c <DMA_Set_Trigger>


		if(circular_buffer_enable == 1)
 8003cc4:	797b      	ldrb	r3, [r7, #5]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 80aa 	beq.w	8003e20 <USART_RX_Buffer+0x250>
		{



		if(config->Port == USART1)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a58      	ldr	r2, [pc, #352]	@ (8003e34 <USART_RX_Buffer+0x264>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d112      	bne.n	8003cfc <USART_RX_Buffer+0x12c>
		{
			while((USART1_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8003cd6:	e006      	b.n	8003ce6 <USART_RX_Buffer+0x116>
			{
				if(USART1_RX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 8003cd8:	4b57      	ldr	r3, [pc, #348]	@ (8003e38 <USART_RX_Buffer+0x268>)
 8003cda:	78db      	ldrb	r3, [r3, #3]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <USART_RX_Buffer+0x116>
 8003ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce4:	e09d      	b.n	8003e22 <USART_RX_Buffer+0x252>
			while((USART1_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8003ce6:	4b54      	ldr	r3, [pc, #336]	@ (8003e38 <USART_RX_Buffer+0x268>)
 8003ce8:	785b      	ldrb	r3, [r3, #1]
 8003cea:	f083 0301 	eor.w	r3, r3, #1
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f1      	bne.n	8003cd8 <USART_RX_Buffer+0x108>
			}
			USART1_RX_DMA_Flag.Transfer_Complete_Flag = false;
 8003cf4:	4b50      	ldr	r3, [pc, #320]	@ (8003e38 <USART_RX_Buffer+0x268>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	705a      	strb	r2, [r3, #1]
 8003cfa:	e091      	b.n	8003e20 <USART_RX_Buffer+0x250>
		}
		else if(config->Port == USART2)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a4e      	ldr	r2, [pc, #312]	@ (8003e3c <USART_RX_Buffer+0x26c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d112      	bne.n	8003d2c <USART_RX_Buffer+0x15c>
		{
			while((USART2_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8003d06:	e006      	b.n	8003d16 <USART_RX_Buffer+0x146>
			{
				if(USART2_RX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 8003d08:	4b4d      	ldr	r3, [pc, #308]	@ (8003e40 <USART_RX_Buffer+0x270>)
 8003d0a:	78db      	ldrb	r3, [r3, #3]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <USART_RX_Buffer+0x146>
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295
 8003d14:	e085      	b.n	8003e22 <USART_RX_Buffer+0x252>
			while((USART2_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8003d16:	4b4a      	ldr	r3, [pc, #296]	@ (8003e40 <USART_RX_Buffer+0x270>)
 8003d18:	785b      	ldrb	r3, [r3, #1]
 8003d1a:	f083 0301 	eor.w	r3, r3, #1
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f1      	bne.n	8003d08 <USART_RX_Buffer+0x138>
			}
			USART2_RX_DMA_Flag.Transfer_Complete_Flag = false;
 8003d24:	4b46      	ldr	r3, [pc, #280]	@ (8003e40 <USART_RX_Buffer+0x270>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	705a      	strb	r2, [r3, #1]
 8003d2a:	e079      	b.n	8003e20 <USART_RX_Buffer+0x250>
		}
		else if(config->Port == USART3)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a44      	ldr	r2, [pc, #272]	@ (8003e44 <USART_RX_Buffer+0x274>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d112      	bne.n	8003d5c <USART_RX_Buffer+0x18c>
		{
			while((USART3_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8003d36:	e006      	b.n	8003d46 <USART_RX_Buffer+0x176>
			{
				if(USART3_RX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 8003d38:	4b43      	ldr	r3, [pc, #268]	@ (8003e48 <USART_RX_Buffer+0x278>)
 8003d3a:	78db      	ldrb	r3, [r3, #3]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <USART_RX_Buffer+0x176>
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295
 8003d44:	e06d      	b.n	8003e22 <USART_RX_Buffer+0x252>
			while((USART3_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8003d46:	4b40      	ldr	r3, [pc, #256]	@ (8003e48 <USART_RX_Buffer+0x278>)
 8003d48:	785b      	ldrb	r3, [r3, #1]
 8003d4a:	f083 0301 	eor.w	r3, r3, #1
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f1      	bne.n	8003d38 <USART_RX_Buffer+0x168>
			}
			USART3_RX_DMA_Flag.Transfer_Complete_Flag = false;
 8003d54:	4b3c      	ldr	r3, [pc, #240]	@ (8003e48 <USART_RX_Buffer+0x278>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	705a      	strb	r2, [r3, #1]
 8003d5a:	e061      	b.n	8003e20 <USART_RX_Buffer+0x250>
		}
		else if(config->Port == UART4)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a3a      	ldr	r2, [pc, #232]	@ (8003e4c <USART_RX_Buffer+0x27c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d112      	bne.n	8003d8c <USART_RX_Buffer+0x1bc>
		{
			while((USART4_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8003d66:	e006      	b.n	8003d76 <USART_RX_Buffer+0x1a6>
			{
				if(USART4_RX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 8003d68:	4b39      	ldr	r3, [pc, #228]	@ (8003e50 <USART_RX_Buffer+0x280>)
 8003d6a:	78db      	ldrb	r3, [r3, #3]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <USART_RX_Buffer+0x1a6>
 8003d70:	f04f 33ff 	mov.w	r3, #4294967295
 8003d74:	e055      	b.n	8003e22 <USART_RX_Buffer+0x252>
			while((USART4_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8003d76:	4b36      	ldr	r3, [pc, #216]	@ (8003e50 <USART_RX_Buffer+0x280>)
 8003d78:	785b      	ldrb	r3, [r3, #1]
 8003d7a:	f083 0301 	eor.w	r3, r3, #1
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1f1      	bne.n	8003d68 <USART_RX_Buffer+0x198>
			}
			USART4_RX_DMA_Flag.Transfer_Complete_Flag = false;
 8003d84:	4b32      	ldr	r3, [pc, #200]	@ (8003e50 <USART_RX_Buffer+0x280>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	705a      	strb	r2, [r3, #1]
 8003d8a:	e049      	b.n	8003e20 <USART_RX_Buffer+0x250>
		}
		else if(config->Port == UART5)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a30      	ldr	r2, [pc, #192]	@ (8003e54 <USART_RX_Buffer+0x284>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d112      	bne.n	8003dbc <USART_RX_Buffer+0x1ec>
		{
			while((USART5_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8003d96:	e006      	b.n	8003da6 <USART_RX_Buffer+0x1d6>
			{
				if(USART5_RX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 8003d98:	4b2f      	ldr	r3, [pc, #188]	@ (8003e58 <USART_RX_Buffer+0x288>)
 8003d9a:	78db      	ldrb	r3, [r3, #3]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <USART_RX_Buffer+0x1d6>
 8003da0:	f04f 33ff 	mov.w	r3, #4294967295
 8003da4:	e03d      	b.n	8003e22 <USART_RX_Buffer+0x252>
			while((USART5_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8003da6:	4b2c      	ldr	r3, [pc, #176]	@ (8003e58 <USART_RX_Buffer+0x288>)
 8003da8:	785b      	ldrb	r3, [r3, #1]
 8003daa:	f083 0301 	eor.w	r3, r3, #1
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1f1      	bne.n	8003d98 <USART_RX_Buffer+0x1c8>
			}
			USART5_RX_DMA_Flag.Transfer_Complete_Flag = false;
 8003db4:	4b28      	ldr	r3, [pc, #160]	@ (8003e58 <USART_RX_Buffer+0x288>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	705a      	strb	r2, [r3, #1]
 8003dba:	e031      	b.n	8003e20 <USART_RX_Buffer+0x250>
		}
		else if(config->Port == USART6)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a26      	ldr	r2, [pc, #152]	@ (8003e5c <USART_RX_Buffer+0x28c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d12c      	bne.n	8003e20 <USART_RX_Buffer+0x250>
		{
			while((USART6_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8003dc6:	e006      	b.n	8003dd6 <USART_RX_Buffer+0x206>
			{
				if(USART6_RX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 8003dc8:	4b25      	ldr	r3, [pc, #148]	@ (8003e60 <USART_RX_Buffer+0x290>)
 8003dca:	78db      	ldrb	r3, [r3, #3]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <USART_RX_Buffer+0x206>
 8003dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd4:	e025      	b.n	8003e22 <USART_RX_Buffer+0x252>
			while((USART6_RX_DMA_Flag.Transfer_Complete_Flag == false))
 8003dd6:	4b22      	ldr	r3, [pc, #136]	@ (8003e60 <USART_RX_Buffer+0x290>)
 8003dd8:	785b      	ldrb	r3, [r3, #1]
 8003dda:	f083 0301 	eor.w	r3, r3, #1
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f1      	bne.n	8003dc8 <USART_RX_Buffer+0x1f8>
			}
			USART6_RX_DMA_Flag.Transfer_Complete_Flag = false;
 8003de4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e60 <USART_RX_Buffer+0x290>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	705a      	strb	r2, [r3, #1]
 8003dea:	e019      	b.n	8003e20 <USART_RX_Buffer+0x250>
		}

	}
	else
	{ //Will Take more time
		for(int i = 0; i <= length; i++)
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	e012      	b.n	8003e18 <USART_RX_Buffer+0x248>
		{
			rx_buffer[i] = config->Port->DR ;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	b2ca      	uxtb	r2, r1
 8003e00:	701a      	strb	r2, [r3, #0]
			while(!(config->Port->SR & USART_SR_RXNE));
 8003e02:	bf00      	nop
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f8      	beq.n	8003e04 <USART_RX_Buffer+0x234>
		for(int i = 0; i <= length; i++)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	3301      	adds	r3, #1
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	dde8      	ble.n	8003df2 <USART_RX_Buffer+0x222>
		}
	}

	return 1;
 8003e20:	2301      	movs	r3, #1

}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000538 	.word	0x20000538
 8003e30:	20000298 	.word	0x20000298
 8003e34:	40011000 	.word	0x40011000
 8003e38:	20000088 	.word	0x20000088
 8003e3c:	40004400 	.word	0x40004400
 8003e40:	20000098 	.word	0x20000098
 8003e44:	40004800 	.word	0x40004800
 8003e48:	200000a8 	.word	0x200000a8
 8003e4c:	40004c00 	.word	0x40004c00
 8003e50:	200000b8 	.word	0x200000b8
 8003e54:	40005000 	.word	0x40005000
 8003e58:	200000c8 	.word	0x200000c8
 8003e5c:	40011400 	.word	0x40011400
 8003e60:	200000d8 	.word	0x200000d8

08003e64 <__NVIC_SetPriority>:
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	6039      	str	r1, [r7, #0]
 8003e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	db0a      	blt.n	8003e8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	490c      	ldr	r1, [pc, #48]	@ (8003eb0 <__NVIC_SetPriority+0x4c>)
 8003e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e82:	0112      	lsls	r2, r2, #4
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	440b      	add	r3, r1
 8003e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003e8c:	e00a      	b.n	8003ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4908      	ldr	r1, [pc, #32]	@ (8003eb4 <__NVIC_SetPriority+0x50>)
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	3b04      	subs	r3, #4
 8003e9c:	0112      	lsls	r2, r2, #4
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	761a      	strb	r2, [r3, #24]
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	e000e100 	.word	0xe000e100
 8003eb4:	e000ed00 	.word	0xe000ed00

08003eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ec8:	d301      	bcc.n	8003ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e00f      	b.n	8003eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ece:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef8 <SysTick_Config+0x40>)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ed6:	210f      	movs	r1, #15
 8003ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8003edc:	f7ff ffc2 	bl	8003e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee0:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <SysTick_Config+0x40>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ee6:	4b04      	ldr	r3, [pc, #16]	@ (8003ef8 <SysTick_Config+0x40>)
 8003ee8:	2207      	movs	r2, #7
 8003eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	e000e010 	.word	0xe000e010

08003efc <MCU_Clock_Setup>:
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
	SystemInit();
 8003f02:	f000 f9bf 	bl	8004284 <SystemInit>
	uint8_t pll_m = 8;
 8003f06:	2308      	movs	r3, #8
 8003f08:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8003f0a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003f0e:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8003f14:	2307      	movs	r3, #7
 8003f16:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 8003f18:	4b3c      	ldr	r3, [pc, #240]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8003f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a3a      	ldr	r2, [pc, #232]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f28:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8003f2a:	bf00      	nop
 8003f2c:	4b37      	ldr	r3, [pc, #220]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f9      	beq.n	8003f2c <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8003f38:	4b34      	ldr	r3, [pc, #208]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3c:	4a33      	ldr	r2, [pc, #204]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f42:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8003f44:	4b32      	ldr	r3, [pc, #200]	@ (8004010 <MCU_Clock_Setup+0x114>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a31      	ldr	r2, [pc, #196]	@ (8004010 <MCU_Clock_Setup+0x114>)
 8003f4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f4e:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8003f50:	4b30      	ldr	r3, [pc, #192]	@ (8004014 <MCU_Clock_Setup+0x118>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2f      	ldr	r2, [pc, #188]	@ (8004014 <MCU_Clock_Setup+0x118>)
 8003f56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f5a:	f043 0305 	orr.w	r3, r3, #5
 8003f5e:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8003f60:	4b2a      	ldr	r3, [pc, #168]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	78ba      	ldrb	r2, [r7, #2]
 8003f66:	0611      	lsls	r1, r2, #24
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	0412      	lsls	r2, r2, #16
 8003f6c:	4311      	orrs	r1, r2
 8003f6e:	88ba      	ldrh	r2, [r7, #4]
 8003f70:	0192      	lsls	r2, r2, #6
 8003f72:	4311      	orrs	r1, r2
 8003f74:	79fa      	ldrb	r2, [r7, #7]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	4611      	mov	r1, r2
 8003f7a:	4a24      	ldr	r2, [pc, #144]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8003f80:	4b22      	ldr	r3, [pc, #136]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4a21      	ldr	r2, [pc, #132]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003f86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f8a:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8003f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003f94:	4b1d      	ldr	r3, [pc, #116]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	4a1c      	ldr	r2, [pc, #112]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003f9a:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8003f9e:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4a19      	ldr	r2, [pc, #100]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003fa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003faa:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8003fac:	4b17      	ldr	r3, [pc, #92]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a16      	ldr	r2, [pc, #88]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003fb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fb6:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8003fb8:	bf00      	nop
 8003fba:	4b14      	ldr	r3, [pc, #80]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f9      	beq.n	8003fba <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8003fc6:	4b11      	ldr	r3, [pc, #68]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	4a10      	ldr	r2, [pc, #64]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003fcc:	f043 0302 	orr.w	r3, r3, #2
 8003fd0:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8003fd2:	bf00      	nop
 8003fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d1f9      	bne.n	8003fd4 <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 8003fe0:	f000 f962 	bl	80042a8 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8004018 <MCU_Clock_Setup+0x11c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	08db      	lsrs	r3, r3, #3
 8003fea:	4a0c      	ldr	r2, [pc, #48]	@ (800401c <MCU_Clock_Setup+0x120>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	085b      	lsrs	r3, r3, #1
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff ff60 	bl	8003eb8 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8003ff8:	4b04      	ldr	r3, [pc, #16]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffc:	4a03      	ldr	r2, [pc, #12]	@ (800400c <MCU_Clock_Setup+0x110>)
 8003ffe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004002:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40023800 	.word	0x40023800
 8004010:	40007000 	.word	0x40007000
 8004014:	40023c00 	.word	0x40023c00
 8004018:	20000000 	.word	0x20000000
 800401c:	18618619 	.word	0x18618619

08004020 <Delay_Config>:
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8004024:	4b09      	ldr	r3, [pc, #36]	@ (800404c <Delay_Config+0x2c>)
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 800402a:	4b08      	ldr	r3, [pc, #32]	@ (800404c <Delay_Config+0x2c>)
 800402c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8004030:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8004032:	4b06      	ldr	r3, [pc, #24]	@ (800404c <Delay_Config+0x2c>)
 8004034:	2200      	movs	r2, #0
 8004036:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8004038:	4b04      	ldr	r3, [pc, #16]	@ (800404c <Delay_Config+0x2c>)
 800403a:	2205      	movs	r2, #5
 800403c:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	e000e010 	.word	0xe000e010

08004050 <Delay_ms>:
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 800405a:	edd7 7a01 	vldr	s15, [r7, #4]
 800405e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80040a4 <Delay_ms+0x54>
 8004062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800406a:	ee17 3a90 	vmov	r3, s15
 800406e:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8004070:	4a0d      	ldr	r2, [pc, #52]	@ (80040a8 <Delay_ms+0x58>)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8004076:	4b0c      	ldr	r3, [pc, #48]	@ (80040a8 <Delay_ms+0x58>)
 8004078:	2200      	movs	r2, #0
 800407a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 800407c:	4b0a      	ldr	r3, [pc, #40]	@ (80040a8 <Delay_ms+0x58>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a09      	ldr	r2, [pc, #36]	@ (80040a8 <Delay_ms+0x58>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8004088:	bf00      	nop
 800408a:	4b07      	ldr	r3, [pc, #28]	@ (80040a8 <Delay_ms+0x58>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f9      	beq.n	800408a <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	48241000 	.word	0x48241000
 80040a8:	e000e010 	.word	0xe000e010

080040ac <Delay_s>:
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	s = s * 1000;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040ba:	fb02 f303 	mul.w	r3, r2, r3
 80040be:	607b      	str	r3, [r7, #4]
	for (; s>0; s--)
 80040c0:	e006      	b.n	80040d0 <Delay_s+0x24>
		Delay_ms(1);
 80040c2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80040c6:	f7ff ffc3 	bl	8004050 <Delay_ms>
	for (; s>0; s--)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f5      	bne.n	80040c2 <Delay_s+0x16>
	return (0UL);
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <GPIO_Pin_Low>:
 * @brief  Sets a specific pin low.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set low (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	2101      	movs	r1, #1
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	fa01 f202 	lsl.w	r2, r1, r2
 80040f6:	43d2      	mvns	r2, r2
 80040f8:	401a      	ands	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	615a      	str	r2, [r3, #20]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <GPIO_Pin_High>:
 * @brief  Sets a specific pin high.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set high (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	6039      	str	r1, [r7, #0]
	Port -> ODR |= 1 << pin;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	2101      	movs	r1, #1
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	fa01 f202 	lsl.w	r2, r1, r2
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	615a      	str	r2, [r3, #20]
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
	...

08004134 <USART1_IRQHandler>:
volatile uint8_t Modbus_RX_Buffer_1[Modbus_RX_Buffer_Length];

volatile uint16_t Modbus_Message_length = 0;

void USART1_IRQHandler(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0

	uint32_t temp1 = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
	do {
		Modbus_USART.USART_DMA_Instance_RX.Request.Stream -> CR &= ~DMA_SxCR_EN;
 800413e:	4b1d      	ldr	r3, [pc, #116]	@ (80041b4 <USART1_IRQHandler+0x80>)
 8004140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b1b      	ldr	r3, [pc, #108]	@ (80041b4 <USART1_IRQHandler+0x80>)
 8004146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004148:	f022 0201 	bic.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]
		temp1 = Modbus_USART.USART_DMA_Instance_RX.Request.Stream -> CR & DMA_SxCR_EN;
 800414e:	4b19      	ldr	r3, [pc, #100]	@ (80041b4 <USART1_IRQHandler+0x80>)
 8004150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	607b      	str	r3, [r7, #4]
	} while (temp1 != 0);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1ee      	bne.n	800413e <USART1_IRQHandler+0xa>


		Modbus_Message_length = Modbus_RX_Buffer_Length - Modbus_USART.USART_DMA_Instance_RX.Request.Stream -> NDTR;
 8004160:	4b14      	ldr	r3, [pc, #80]	@ (80041b4 <USART1_IRQHandler+0x80>)
 8004162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	b29b      	uxth	r3, r3
 8004168:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800416c:	b29a      	uxth	r2, r3
 800416e:	4b12      	ldr	r3, [pc, #72]	@ (80041b8 <USART1_IRQHandler+0x84>)
 8004170:	801a      	strh	r2, [r3, #0]

		static int temp = 0;
		temp = Modbus_USART.Port -> SR;
 8004172:	4b10      	ldr	r3, [pc, #64]	@ (80041b4 <USART1_IRQHandler+0x80>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <USART1_IRQHandler+0x88>)
 800417c:	601a      	str	r2, [r3, #0]

		if(Modbus_Message_length > 0)
 800417e:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <USART1_IRQHandler+0x84>)
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <USART1_IRQHandler+0x6a>
		{
			USART_TX_Buffer(&Modbus_USART, &Modbus_RX_Buffer_1, Modbus_Message_length);
 8004188:	4b0b      	ldr	r3, [pc, #44]	@ (80041b8 <USART1_IRQHandler+0x84>)
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b29b      	uxth	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	490b      	ldr	r1, [pc, #44]	@ (80041c0 <USART1_IRQHandler+0x8c>)
 8004192:	4808      	ldr	r0, [pc, #32]	@ (80041b4 <USART1_IRQHandler+0x80>)
 8004194:	f7ff fbae 	bl	80038f4 <USART_TX_Buffer>

			Modbus_Message_length = 0;
 8004198:	4b07      	ldr	r3, [pc, #28]	@ (80041b8 <USART1_IRQHandler+0x84>)
 800419a:	2200      	movs	r2, #0
 800419c:	801a      	strh	r2, [r3, #0]
		}
		USART_RX_Buffer(&Modbus_USART, &Modbus_RX_Buffer_1[0], Modbus_RX_Buffer_Length, 0);
 800419e:	2300      	movs	r3, #0
 80041a0:	22c8      	movs	r2, #200	@ 0xc8
 80041a2:	4907      	ldr	r1, [pc, #28]	@ (80041c0 <USART1_IRQHandler+0x8c>)
 80041a4:	4803      	ldr	r0, [pc, #12]	@ (80041b4 <USART1_IRQHandler+0x80>)
 80041a6:	f7ff fd13 	bl	8003bd0 <USART_RX_Buffer>
}
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	2000053c 	.word	0x2000053c
 80041b8:	20000688 	.word	0x20000688
 80041bc:	2000068c 	.word	0x2000068c
 80041c0:	200005c0 	.word	0x200005c0

080041c4 <main>:


int main(void)
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af04      	add	r7, sp, #16
	MCU_Clock_Setup();
 80041ca:	f7ff fe97 	bl	8003efc <MCU_Clock_Setup>
	Delay_Config();
 80041ce:	f7ff ff27 	bl	8004020 <Delay_Config>

	Modbus_USART.Port = USART1;
 80041d2:	4b28      	ldr	r3, [pc, #160]	@ (8004274 <main+0xb0>)
 80041d4:	4a28      	ldr	r2, [pc, #160]	@ (8004278 <main+0xb4>)
 80041d6:	601a      	str	r2, [r3, #0]
	Modbus_USART.RX_Pin = USART1_RX_Pin.PB7;
 80041d8:	2207      	movs	r2, #7
 80041da:	4b26      	ldr	r3, [pc, #152]	@ (8004274 <main+0xb0>)
 80041dc:	729a      	strb	r2, [r3, #10]
	Modbus_USART.TX_Pin = USART1_TX_Pin.PB6;
 80041de:	2206      	movs	r2, #6
 80041e0:	4b24      	ldr	r3, [pc, #144]	@ (8004274 <main+0xb0>)
 80041e2:	725a      	strb	r2, [r3, #9]
	Modbus_USART.baudrate = 9600;
 80041e4:	4b23      	ldr	r3, [pc, #140]	@ (8004274 <main+0xb0>)
 80041e6:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80041ea:	605a      	str	r2, [r3, #4]
	Modbus_USART.dma_enable =  USART_Configuration.DMA_Enable.RX_Enable | USART_Configuration.DMA_Enable.TX_Enable;
 80041ec:	2202      	movs	r2, #2
 80041ee:	2301      	movs	r3, #1
 80041f0:	4313      	orrs	r3, r2
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004274 <main+0xb0>)
 80041f6:	745a      	strb	r2, [r3, #17]
	Modbus_USART.hardware_flow = USART_Configuration.Hardware_Flow.Disable;
 80041f8:	2200      	movs	r2, #0
 80041fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004274 <main+0xb0>)
 80041fc:	73da      	strb	r2, [r3, #15]
	Modbus_USART.interrupt = USART_Configuration.Interrupt_Type.IDLE_Enable |  USART_Configuration.Interrupt_Type.Receiver_Empty_Enable;
 80041fe:	2310      	movs	r3, #16
 8004200:	b25a      	sxtb	r2, r3
 8004202:	2320      	movs	r3, #32
 8004204:	b25b      	sxtb	r3, r3
 8004206:	4313      	orrs	r3, r2
 8004208:	b25b      	sxtb	r3, r3
 800420a:	b2da      	uxtb	r2, r3
 800420c:	4b19      	ldr	r3, [pc, #100]	@ (8004274 <main+0xb0>)
 800420e:	739a      	strb	r2, [r3, #14]
	Modbus_USART.mode = USART_Configuration.Mode.Asynchronous;
 8004210:	2201      	movs	r2, #1
 8004212:	4b18      	ldr	r3, [pc, #96]	@ (8004274 <main+0xb0>)
 8004214:	721a      	strb	r2, [r3, #8]
	Modbus_USART.parity = USART_Configuration.Parity_Type.Disable;
 8004216:	2300      	movs	r3, #0
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4b16      	ldr	r3, [pc, #88]	@ (8004274 <main+0xb0>)
 800421c:	749a      	strb	r2, [r3, #18]
	Modbus_USART.stop_bits = USART_Configuration.Stop_Bits.Bit_1;
 800421e:	2300      	movs	r3, #0
 8004220:	b2da      	uxtb	r2, r3
 8004222:	4b14      	ldr	r3, [pc, #80]	@ (8004274 <main+0xb0>)
 8004224:	741a      	strb	r2, [r3, #16]

	USART_Init(&Modbus_USART);
 8004226:	4813      	ldr	r0, [pc, #76]	@ (8004274 <main+0xb0>)
 8004228:	f7fe ff96 	bl	8003158 <USART_Init>
	USART_RX_Buffer(&Modbus_USART, &Modbus_RX_Buffer_1[0], Modbus_RX_Buffer_Length, 0);
 800422c:	2300      	movs	r3, #0
 800422e:	22c8      	movs	r2, #200	@ 0xc8
 8004230:	4912      	ldr	r1, [pc, #72]	@ (800427c <main+0xb8>)
 8004232:	4810      	ldr	r0, [pc, #64]	@ (8004274 <main+0xb0>)
 8004234:	f7ff fccc 	bl	8003bd0 <USART_RX_Buffer>



	GPIO_Pin_Init(GPIOD, 12, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull,
 8004238:	2001      	movs	r0, #1
 800423a:	2400      	movs	r4, #0
			                 GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);
 800423c:	2303      	movs	r3, #3
 800423e:	2200      	movs	r2, #0
 8004240:	2100      	movs	r1, #0
	GPIO_Pin_Init(GPIOD, 12, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull,
 8004242:	9102      	str	r1, [sp, #8]
 8004244:	9201      	str	r2, [sp, #4]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	4623      	mov	r3, r4
 800424a:	4602      	mov	r2, r0
 800424c:	210c      	movs	r1, #12
 800424e:	480c      	ldr	r0, [pc, #48]	@ (8004280 <main+0xbc>)
 8004250:	f7fe f9b6 	bl	80025c0 <GPIO_Pin_Init>

	for(;;)
	{


		GPIO_Pin_High(GPIOD, 12);
 8004254:	210c      	movs	r1, #12
 8004256:	480a      	ldr	r0, [pc, #40]	@ (8004280 <main+0xbc>)
 8004258:	f7ff ff57 	bl	800410a <GPIO_Pin_High>
		Delay_s(1);
 800425c:	2001      	movs	r0, #1
 800425e:	f7ff ff25 	bl	80040ac <Delay_s>
		GPIO_Pin_Low(GPIOD, 12);
 8004262:	210c      	movs	r1, #12
 8004264:	4806      	ldr	r0, [pc, #24]	@ (8004280 <main+0xbc>)
 8004266:	f7ff ff3b 	bl	80040e0 <GPIO_Pin_Low>
		Delay_s(1);
 800426a:	2001      	movs	r0, #1
 800426c:	f7ff ff1e 	bl	80040ac <Delay_s>
		GPIO_Pin_High(GPIOD, 12);
 8004270:	bf00      	nop
 8004272:	e7ef      	b.n	8004254 <main+0x90>
 8004274:	2000053c 	.word	0x2000053c
 8004278:	40011000 	.word	0x40011000
 800427c:	200005c0 	.word	0x200005c0
 8004280:	40020c00 	.word	0x40020c00

08004284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004288:	4b06      	ldr	r3, [pc, #24]	@ (80042a4 <SystemInit+0x20>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428e:	4a05      	ldr	r2, [pc, #20]	@ (80042a4 <SystemInit+0x20>)
 8004290:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004294:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	e000ed00 	.word	0xe000ed00

080042a8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80042ae:	2300      	movs	r3, #0
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	2302      	movs	r3, #2
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	2302      	movs	r3, #2
 80042c0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80042c2:	4b34      	ldr	r3, [pc, #208]	@ (8004394 <SystemCoreClockUpdate+0xec>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d011      	beq.n	80042f6 <SystemCoreClockUpdate+0x4e>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d844      	bhi.n	8004362 <SystemCoreClockUpdate+0xba>
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <SystemCoreClockUpdate+0x3e>
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d004      	beq.n	80042ee <SystemCoreClockUpdate+0x46>
 80042e4:	e03d      	b.n	8004362 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80042e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004398 <SystemCoreClockUpdate+0xf0>)
 80042e8:	4a2c      	ldr	r2, [pc, #176]	@ (800439c <SystemCoreClockUpdate+0xf4>)
 80042ea:	601a      	str	r2, [r3, #0]
      break;
 80042ec:	e03d      	b.n	800436a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80042ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004398 <SystemCoreClockUpdate+0xf0>)
 80042f0:	4a2b      	ldr	r2, [pc, #172]	@ (80043a0 <SystemCoreClockUpdate+0xf8>)
 80042f2:	601a      	str	r2, [r3, #0]
      break;
 80042f4:	e039      	b.n	800436a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80042f6:	4b27      	ldr	r3, [pc, #156]	@ (8004394 <SystemCoreClockUpdate+0xec>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	0d9b      	lsrs	r3, r3, #22
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004302:	4b24      	ldr	r3, [pc, #144]	@ (8004394 <SystemCoreClockUpdate+0xec>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800430a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00c      	beq.n	800432c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004312:	4a23      	ldr	r2, [pc, #140]	@ (80043a0 <SystemCoreClockUpdate+0xf8>)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	fbb2 f3f3 	udiv	r3, r2, r3
 800431a:	4a1e      	ldr	r2, [pc, #120]	@ (8004394 <SystemCoreClockUpdate+0xec>)
 800431c:	6852      	ldr	r2, [r2, #4]
 800431e:	0992      	lsrs	r2, r2, #6
 8004320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004324:	fb02 f303 	mul.w	r3, r2, r3
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	e00b      	b.n	8004344 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800432c:	4a1b      	ldr	r2, [pc, #108]	@ (800439c <SystemCoreClockUpdate+0xf4>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	fbb2 f3f3 	udiv	r3, r2, r3
 8004334:	4a17      	ldr	r2, [pc, #92]	@ (8004394 <SystemCoreClockUpdate+0xec>)
 8004336:	6852      	ldr	r2, [r2, #4]
 8004338:	0992      	lsrs	r2, r2, #6
 800433a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800433e:	fb02 f303 	mul.w	r3, r2, r3
 8004342:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004344:	4b13      	ldr	r3, [pc, #76]	@ (8004394 <SystemCoreClockUpdate+0xec>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	0c1b      	lsrs	r3, r3, #16
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	3301      	adds	r3, #1
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	fbb2 f3f3 	udiv	r3, r2, r3
 800435c:	4a0e      	ldr	r2, [pc, #56]	@ (8004398 <SystemCoreClockUpdate+0xf0>)
 800435e:	6013      	str	r3, [r2, #0]
      break;
 8004360:	e003      	b.n	800436a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8004362:	4b0d      	ldr	r3, [pc, #52]	@ (8004398 <SystemCoreClockUpdate+0xf0>)
 8004364:	4a0d      	ldr	r2, [pc, #52]	@ (800439c <SystemCoreClockUpdate+0xf4>)
 8004366:	601a      	str	r2, [r3, #0]
      break;
 8004368:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800436a:	4b0a      	ldr	r3, [pc, #40]	@ (8004394 <SystemCoreClockUpdate+0xec>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	4a0b      	ldr	r2, [pc, #44]	@ (80043a4 <SystemCoreClockUpdate+0xfc>)
 8004376:	5cd3      	ldrb	r3, [r2, r3]
 8004378:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800437a:	4b07      	ldr	r3, [pc, #28]	@ (8004398 <SystemCoreClockUpdate+0xf0>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
 8004384:	4a04      	ldr	r2, [pc, #16]	@ (8004398 <SystemCoreClockUpdate+0xf0>)
 8004386:	6013      	str	r3, [r2, #0]
}
 8004388:	bf00      	nop
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	40023800 	.word	0x40023800
 8004398:	20000000 	.word	0x20000000
 800439c:	00f42400 	.word	0x00f42400
 80043a0:	017d7840 	.word	0x017d7840
 80043a4:	0800495c 	.word	0x0800495c

080043a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043a8:	480d      	ldr	r0, [pc, #52]	@ (80043e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80043ac:	f7ff ff6a 	bl	8004284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043b0:	480c      	ldr	r0, [pc, #48]	@ (80043e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80043b2:	490d      	ldr	r1, [pc, #52]	@ (80043e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043b4:	4a0d      	ldr	r2, [pc, #52]	@ (80043ec <LoopForever+0xe>)
  movs r3, #0
 80043b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043b8:	e002      	b.n	80043c0 <LoopCopyDataInit>

080043ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043be:	3304      	adds	r3, #4

080043c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043c4:	d3f9      	bcc.n	80043ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043c6:	4a0a      	ldr	r2, [pc, #40]	@ (80043f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043c8:	4c0a      	ldr	r4, [pc, #40]	@ (80043f4 <LoopForever+0x16>)
  movs r3, #0
 80043ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043cc:	e001      	b.n	80043d2 <LoopFillZerobss>

080043ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043d0:	3204      	adds	r2, #4

080043d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043d4:	d3fb      	bcc.n	80043ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80043d6:	f000 f811 	bl	80043fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80043da:	f7ff fef3 	bl	80041c4 <main>

080043de <LoopForever>:

LoopForever:
  b LoopForever
 80043de:	e7fe      	b.n	80043de <LoopForever>
  ldr   r0, =_estack
 80043e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043e8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80043ec:	08004974 	.word	0x08004974
  ldr r2, =_sbss
 80043f0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80043f4:	20000690 	.word	0x20000690

080043f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043f8:	e7fe      	b.n	80043f8 <ADC_IRQHandler>
	...

080043fc <__libc_init_array>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004434 <__libc_init_array+0x38>)
 8004400:	4c0d      	ldr	r4, [pc, #52]	@ (8004438 <__libc_init_array+0x3c>)
 8004402:	1b64      	subs	r4, r4, r5
 8004404:	10a4      	asrs	r4, r4, #2
 8004406:	2600      	movs	r6, #0
 8004408:	42a6      	cmp	r6, r4
 800440a:	d109      	bne.n	8004420 <__libc_init_array+0x24>
 800440c:	4d0b      	ldr	r5, [pc, #44]	@ (800443c <__libc_init_array+0x40>)
 800440e:	4c0c      	ldr	r4, [pc, #48]	@ (8004440 <__libc_init_array+0x44>)
 8004410:	f000 f896 	bl	8004540 <_init>
 8004414:	1b64      	subs	r4, r4, r5
 8004416:	10a4      	asrs	r4, r4, #2
 8004418:	2600      	movs	r6, #0
 800441a:	42a6      	cmp	r6, r4
 800441c:	d105      	bne.n	800442a <__libc_init_array+0x2e>
 800441e:	bd70      	pop	{r4, r5, r6, pc}
 8004420:	f855 3b04 	ldr.w	r3, [r5], #4
 8004424:	4798      	blx	r3
 8004426:	3601      	adds	r6, #1
 8004428:	e7ee      	b.n	8004408 <__libc_init_array+0xc>
 800442a:	f855 3b04 	ldr.w	r3, [r5], #4
 800442e:	4798      	blx	r3
 8004430:	3601      	adds	r6, #1
 8004432:	e7f2      	b.n	800441a <__libc_init_array+0x1e>
 8004434:	0800496c 	.word	0x0800496c
 8004438:	0800496c 	.word	0x0800496c
 800443c:	0800496c 	.word	0x0800496c
 8004440:	08004970 	.word	0x08004970
 8004444:	00000000 	.word	0x00000000

08004448 <ceil>:
 8004448:	ec51 0b10 	vmov	r0, r1, d0
 800444c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004454:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004458:	2e13      	cmp	r6, #19
 800445a:	460c      	mov	r4, r1
 800445c:	4605      	mov	r5, r0
 800445e:	4680      	mov	r8, r0
 8004460:	dc2e      	bgt.n	80044c0 <ceil+0x78>
 8004462:	2e00      	cmp	r6, #0
 8004464:	da11      	bge.n	800448a <ceil+0x42>
 8004466:	a332      	add	r3, pc, #200	@ (adr r3, 8004530 <ceil+0xe8>)
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	f7fb feb2 	bl	80001d4 <__adddf3>
 8004470:	2200      	movs	r2, #0
 8004472:	2300      	movs	r3, #0
 8004474:	f7fc faf4 	bl	8000a60 <__aeabi_dcmpgt>
 8004478:	b120      	cbz	r0, 8004484 <ceil+0x3c>
 800447a:	2c00      	cmp	r4, #0
 800447c:	db4f      	blt.n	800451e <ceil+0xd6>
 800447e:	4325      	orrs	r5, r4
 8004480:	d151      	bne.n	8004526 <ceil+0xde>
 8004482:	462c      	mov	r4, r5
 8004484:	4621      	mov	r1, r4
 8004486:	4628      	mov	r0, r5
 8004488:	e023      	b.n	80044d2 <ceil+0x8a>
 800448a:	4f2b      	ldr	r7, [pc, #172]	@ (8004538 <ceil+0xf0>)
 800448c:	4137      	asrs	r7, r6
 800448e:	ea01 0307 	and.w	r3, r1, r7
 8004492:	4303      	orrs	r3, r0
 8004494:	d01d      	beq.n	80044d2 <ceil+0x8a>
 8004496:	a326      	add	r3, pc, #152	@ (adr r3, 8004530 <ceil+0xe8>)
 8004498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449c:	f7fb fe9a 	bl	80001d4 <__adddf3>
 80044a0:	2200      	movs	r2, #0
 80044a2:	2300      	movs	r3, #0
 80044a4:	f7fc fadc 	bl	8000a60 <__aeabi_dcmpgt>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d0eb      	beq.n	8004484 <ceil+0x3c>
 80044ac:	2c00      	cmp	r4, #0
 80044ae:	bfc2      	ittt	gt
 80044b0:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80044b4:	4133      	asrgt	r3, r6
 80044b6:	18e4      	addgt	r4, r4, r3
 80044b8:	ea24 0407 	bic.w	r4, r4, r7
 80044bc:	2500      	movs	r5, #0
 80044be:	e7e1      	b.n	8004484 <ceil+0x3c>
 80044c0:	2e33      	cmp	r6, #51	@ 0x33
 80044c2:	dd0a      	ble.n	80044da <ceil+0x92>
 80044c4:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80044c8:	d103      	bne.n	80044d2 <ceil+0x8a>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	f7fb fe81 	bl	80001d4 <__adddf3>
 80044d2:	ec41 0b10 	vmov	d0, r0, r1
 80044d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044da:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80044de:	f04f 37ff 	mov.w	r7, #4294967295
 80044e2:	40df      	lsrs	r7, r3
 80044e4:	4238      	tst	r0, r7
 80044e6:	d0f4      	beq.n	80044d2 <ceil+0x8a>
 80044e8:	a311      	add	r3, pc, #68	@ (adr r3, 8004530 <ceil+0xe8>)
 80044ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ee:	f7fb fe71 	bl	80001d4 <__adddf3>
 80044f2:	2200      	movs	r2, #0
 80044f4:	2300      	movs	r3, #0
 80044f6:	f7fc fab3 	bl	8000a60 <__aeabi_dcmpgt>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d0c2      	beq.n	8004484 <ceil+0x3c>
 80044fe:	2c00      	cmp	r4, #0
 8004500:	dd0a      	ble.n	8004518 <ceil+0xd0>
 8004502:	2e14      	cmp	r6, #20
 8004504:	d101      	bne.n	800450a <ceil+0xc2>
 8004506:	3401      	adds	r4, #1
 8004508:	e006      	b.n	8004518 <ceil+0xd0>
 800450a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800450e:	2301      	movs	r3, #1
 8004510:	40b3      	lsls	r3, r6
 8004512:	441d      	add	r5, r3
 8004514:	45a8      	cmp	r8, r5
 8004516:	d8f6      	bhi.n	8004506 <ceil+0xbe>
 8004518:	ea25 0507 	bic.w	r5, r5, r7
 800451c:	e7b2      	b.n	8004484 <ceil+0x3c>
 800451e:	2500      	movs	r5, #0
 8004520:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8004524:	e7ae      	b.n	8004484 <ceil+0x3c>
 8004526:	4c05      	ldr	r4, [pc, #20]	@ (800453c <ceil+0xf4>)
 8004528:	2500      	movs	r5, #0
 800452a:	e7ab      	b.n	8004484 <ceil+0x3c>
 800452c:	f3af 8000 	nop.w
 8004530:	8800759c 	.word	0x8800759c
 8004534:	7e37e43c 	.word	0x7e37e43c
 8004538:	000fffff 	.word	0x000fffff
 800453c:	3ff00000 	.word	0x3ff00000

08004540 <_init>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	bf00      	nop
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr

0800454c <_fini>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	bf00      	nop
 8004550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004552:	bc08      	pop	{r3}
 8004554:	469e      	mov	lr, r3
 8004556:	4770      	bx	lr
